* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.heal.module.search.AdvSearchDAO
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/96_heal/evosuite-files/evosuite.properties
* Connecting to master process on port 9089
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:53:50.102 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 11:53:50.234 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:53:50.235 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:53:50.235 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 11:53:50.837 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:53:50.842 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:53:50.843 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:53:50.945 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:53:50.945 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:53:50.945 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:53:50.946 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:53:50.946 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:53:50.946 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:53:50.963 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:53:50.964 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:53:50.965 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:53:51.015 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 11:53:51.037 [logback-2] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.heal.module.search.AdvSearchDAO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 642
* Using seed 1709294026057
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 129 / 642
[Progress:>                             1%] [Cov:=====================>             60%][Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             3%] [Cov:======================>            64%][Progress:=>                            4%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         16%] [Cov:======================>            65%][Progress:====>                         16%] [Cov:======================>            65%][Progress:====>                         16%] [Cov:======================>            65%][Progress:====>                         16%] [Cov:======================>            65%][Progress:=====>                        17%] [Cov:======================>            65%][Progress:=====>                        17%] [Cov:======================>            65%][Progress:=====>                        18%] [Cov:======================>            65%][Progress:=====>                        19%] [Cov:======================>            65%][Progress:======>                       20%] [Cov:======================>            65%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:=======>                      24%] [Cov:=======================>           67%][Progress:=======>                      25%] [Cov:=======================>           67%][Progress:=======>                      26%] [Cov:=======================>           67%][Progress:=======>                      26%] [Cov:=======================>           67%][Progress:========>                     27%] [Cov:=======================>           67%][Progress:========>                     28%] [Cov:=======================>           67%][Progress:========>                     29%] [Cov:=======================>           67%][Progress:=========>                    30%] [Cov:=======================>           67%][Progress:=========>                    30%] [Cov:=======================>           67%][Progress:=========>                    30%] [Cov:=======================>           67%][Progress:=========>                    31%] [Cov:=======================>           67%][Progress:=========>                    31%] [Cov:=======================>           67%][Progress:=========>                    31%] [Cov:=======================>           67%][Progress:=========>                    31%] [Cov:=======================>           67%][Progress:=========>                    32%] [Cov:=======================>           67%][Progress:=========>                    32%] [Cov:=======================>           67%][Progress:=========>                    33%] [Cov:=======================>           67%][Progress:=========>                    33%] [Cov:=======================>           67%][Progress:==========>                   34%] [Cov:=======================>           67%][Progress:==========>                   34%] [Cov:=======================>           67%][Progress:==========>                   35%] [Cov:=======================>           67%][Progress:==========>                   36%] [Cov:=======================>           67%][Progress:==========>                   36%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           68%][Progress:===========>                  37%] [Cov:=======================>           68%][Progress:===========>                  37%] [Cov:=======================>           68%][Progress:===========>                  37%] [Cov:=======================>           68%][Progress:===========>                  37%] [Cov:=======================>           68%][Progress:===========>                  38%] [Cov:=======================>           68%][Progress:===========>                  38%] [Cov:========================>          69%][Progress:===========>                  38%] [Cov:========================>          69%][Progress:===========>                  38%] [Cov:========================>          69%][Progress:===========>                  38%] [Cov:========================>          69%][Progress:===========>                  38%] [Cov:========================>          69%][Progress:===========>                  39%] [Cov:========================>          69%][Progress:===========>                  39%] [Cov:========================>          69%][Progress:============>                 40%] [Cov:========================>          69%][Progress:============>                 40%] [Cov:========================>          69%][Progress:============>                 41%] [Cov:========================>          69%][Progress:============>                 41%] [Cov:========================>          69%][Progress:============>                 43%] [Cov:========================>          69%][Progress:============>                 43%] [Cov:========================>          69%][Progress:============>                 43%] [Cov:========================>          69%][Progress:=============>                44%] [Cov:========================>          69%][Progress:=============>                44%] [Cov:========================>          69%][Progress:=============>                45%] [Cov:========================>          69%][Progress:=============>                45%] [Cov:========================>          69%][Progress:=============>                46%] [Cov:========================>          69%][Progress:=============>                46%] [Cov:========================>          69%][Progress:=============>                46%] [Cov:========================>          69%][Progress:==============>               47%] [Cov:========================>          69%][Progress:==============>               47%] [Cov:========================>          69%][Progress:==============>               48%] [Cov:========================>          69%][Progress:==============>               48%] [Cov:========================>          69%][Progress:==============>               49%] [Cov:========================>          69%][Progress:===============>              50%] [Cov:========================>          69%][Progress:===============>              50%] [Cov:========================>          69%][Progress:===============>              51%] [Cov:========================>          69%][Progress:===============>              51%] [Cov:========================>          69%][Progress:===============>              52%] [Cov:========================>          69%][Progress:===============>              53%] [Cov:========================>          69%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             56%] [Cov:========================>          70%][Progress:=================>            57%] [Cov:========================>          70%][Progress:=================>            58%] [Cov:========================>          70%][Progress:=================>            59%] [Cov:========================>          70%][Progress:=================>            59%] [Cov:========================>          70%][Progress:==================>           60%] [Cov:========================>          70%][Progress:==================>           61%] [Cov:========================>          70%][Progress:==================>           62%] [Cov:========================>          70%][Progress:==================>           62%] [Cov:========================>          70%][Progress:==================>           63%] [Cov:========================>          70%][Progress:===================>          64%] [Cov:========================>          70%][Progress:===================>          65%] [Cov:========================>          70%][Progress:===================>          66%] [Cov:========================>          70%][Progress:====================>         67%] [Cov:========================>          70%][Progress:====================>         67%] [Cov:========================>          70%][Progress:====================>         68%] [Cov:========================>          70%][Progress:====================>         69%] [Cov:========================>          70%][Progress:=====================>        70%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:=====================>        73%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     81%] [Cov:========================>          70%][Progress:========================>     81%] [Cov:========================>          70%][Progress:========================>     81%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:========================>     83%] [Cov:========================>          70%][Progress:========================>     83%] [Cov:========================>          70%][Progress:========================>     83%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:=========================>         72%][Progress:============================> 95%] [Cov:=========================>         72%][Progress:============================> 95%] [Cov:=========================>         72%][Progress:============================> 95%] [Cov:=========================>         72%][Progress:============================> 96%] [Cov:=========================>         72%][Progress:============================> 96%] [Cov:=========================>         72%][Progress:============================> 96%] [Cov:=========================>         72%][Progress:============================> 96%] [Cov:=========================>         72%][Progress:=============================>97%] [Cov:=========================>         72%][Progress:=============================>97%] [Cov:=========================>         72%][Progress:=============================>97%] [Cov:=========================>         72%][Progress:=============================>97%] [Cov:=========================>         72%][Progress:=============================>98%] [Cov:=========================>         72%][Progress:=============================>98%] [Cov:=========================>         72%][Progress:=============================>98%] [Cov:=========================>         72%][Progress:=============================>98%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%]
* Search finished after 104s and 220 generations, 129458 statements, best individual has fitness: 152.0
* Generated before the refinement 34 tests with total length 137
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: setDataSource(Ljavax/sql/DataSource;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: advSearchDAO.setDataSource((DataSource) null)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.setDataSource(new DataSource("jdbc:postgresql://localhost:5432/mydatabase", "username", "password"));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.setDataSource(new DataSource("jdbc:postgresql://localhost:5432/mydatabase", "username", "password")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setDataSource(new DataSource("jdbc:postgresql://localhost:5432/mydatabase", "username", "password")) target is: advSearchDAO method is: setDataSource(DataSource)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: setDataSource(Ljavax/sql/DataSource;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
DataSource dataSource = null;
advSearchDAO.setDataSource(dataSource);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title WHERE not like \'all%\' OR not like \'% all%\' )") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )";
String string = "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )";
String string = "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title";
String string = "all";
String string = "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("or", "or", "<H)i`.Q~?hpJ+!")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "<H)i`.Q~?hpJ+!");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "or";
String string = "or";
String string = "This is a more descriptive and representative search query that better reflects the situation being tested";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n")
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
        advSearchDAO.addDefaultConnectives(buildMutiQuery);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: advSearchDAO.addDefaultConnectives(buildMutiQuery), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives(buildMutiQuery) target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ";
String string = "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ";
String string = "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ";
String string = " value: ";
String string = "L!n";
String buildMutiQuery = advSearchDAO.buildMutiQuery(string, string, string, string, string);
advSearchDAO.addDefaultConnectives(buildMutiQuery);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like '%%' OR SourceCollection like '%%'  )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%%' OR TargetUserGroup like '%Must supply a BaseImplClob object%' OR TargetUserGroup like '%%' OR TargetUserGroup like '%%' ) \n order by Title")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like '%%' OR SourceCollection like '%%'  )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%%' OR TargetUserGroup like '%Must supply a BaseImplClob object%' OR TargetUserGroup like '%%' OR TargetUserGroup like '%%' ) \n order by Title");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n AND ( SourceCollection like \'Boston University\' OR SourceCollection like \'Engineering Department\' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'Boston University\' OR NOT (TargetUserGroup like \'%Engineering Department%\' AND TargetUserGroup like \'%%\')");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n AND ( SourceCollection like \'Boston University\' OR SourceCollection like \'Engineering Department\' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'Boston University\' OR NOT (TargetUserGroup like \'%Engineering Department%\' AND TargetUserGroup like \'%%\')"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n AND ( SourceCollection like \'Boston University\' OR SourceCollection like \'Engineering Department\' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like \'Boston University\' OR NOT (TargetUserGroup like \'%Engineering Department%\' AND TargetUserGroup like \'%%\')") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like 'Boston University' OR SourceCollection like 'Engineering Department' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like 'Boston University' OR NOT (TargetUserGroup like '%Engineering Department%' AND TargetUserGroup like '%%')";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("SELECT * FROM employees WHERE department_id = 10 AND salary > 80000");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("SELECT * FROM employees WHERE department_id = 10 AND salary > 80000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("SELECT * FROM employees WHERE department_id = 10 AND salary > 80000") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT * FROM employees WHERE department_id = 10 AND salary > 80000";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like \'othsUpdatesAreViible%\' OR - like \'% othsUpdatesAreViible%\' )", "in#t identity", "4,j~\"~I9\"DYz");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like \'othsUpdatesAreViible%\' OR - like \'% othsUpdatesAreViible%\' )", "in#t identity", "4,j~\"~I9\"DYz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like \'othsUpdatesAreViible%\' OR - like \'% othsUpdatesAreViible%\' )", "in#t identity", "4,j~\"~I9\"DYz") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )";
String string = "in#t identity";
String string = "4,j~\"~I9\"DYz";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ";
String string = "!xZA\"~C7HUVuZ Cx\"";
String string = "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=", "gDIt=")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=", "gDIt=");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "User-defined data types are not supported.";
String string = "gDIt=10";
String string = "gDIt=20";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("\"Hiking\", \"Backpacking\", \"Camping\"", "\"Mountain\", \"Forest\", \"Wilderness\"", "\"Alaska\", \"California\", \"Arizona\"", "2018-10-01", "2018-10-31");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("\"Hiking\", \"Backpacking\", \"Camping\"", "\"Mountain\", \"Forest\", \"Wilderness\"", "\"Alaska\", \"California\", \"Arizona\"", "2018-10-01", "2018-10-31"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("\"Hiking\", \"Backpacking\", \"Camping\"", "\"Mountain\", \"Forest\", \"Wilderness\"", "\"Alaska\", \"California\", \"Arizona\"", "2018-10-01", "2018-10-31") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "\"Hiking\", \"Backpacking\", \"Camping\"";
String string = "\"Mountain\", \"Forest\", \"Wilderness\"";
String string = "\"Alaska\", \"California\", \"Arizona\"";
String string = "2018-10-01";
String string = "2018-10-31";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(" AND (", "`{A", "`{A", "`{A", "`{A")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "`{A", "`{A", "`{A", "`{A");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = " AND (";
String string = "apple";
String string = "banana";
String string = "orange";
String string = "pineapple";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("and", "or", "Metadata", "Java", "Developer");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("and", "or", "Metadata", "Java", "Developer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("and", "or", "Metadata", "Java", "Developer") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "and";
String string = "or";
String string = "Metadata";
String string = "Java";
String string = "Developer";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: setHidden(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setHidden(true)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        // Improved test data:
        parameterBean.setHidden(true);// Instead of using a primitive boolean value, use a more descriptive example like "true" or "false"

        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
parameterBean.setHidden(true)// Instead of using a primitive boolean value, use a more descriptive example like "true" or "false"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
parameterBean.setHidden(true)// Instead of using a primitive boolean value, use a more descriptive example like "true" or "false"
 target is: parameterBean method is: setHidden(boolean)
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setHidden(Z)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
boolean _boolean = true;
parameterBean.setHidden(_boolean);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all")
statement is: org.evosuite.testcase.statements.ArrayStatement@3b56f3ee type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7f433d6a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[6];
        stringArray[0] = "all";
        parameterBean.setFilterArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Test data refinement:
        stringArray[0] = "Java";
        stringArray[1] = "Python";
        stringArray[2] = "C++";
        stringArray[3] = "Javascript";
        stringArray[4] = "Go";
        stringArray[5] = "Ruby";
        parameterBean.setFilterArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Test data refinement:
        parameterBean.setLanguage("Java");
        advSearchDAO.makeQuery(parameterBean);
        // Test data refinement:
        parameterBean.setLanguage("Python");
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed5b03af
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Test data refinement:
stringArray[0] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: // Test data refinement:
stringArray[0] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@167e9997
statement is: stringArray[1] = "Python", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Python" Ct is: stringArray[1] = "Python"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3f1217cc
statement is: stringArray[2] = "C++", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"C++" Ct is: stringArray[2] = "C++"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@21f136c3
statement is: stringArray[3] = "Javascript", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Javascript" Ct is: stringArray[3] = "Javascript"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@201e2e8d
statement is: stringArray[4] = "Go", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Go" Ct is: stringArray[4] = "Go"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@494e8155
statement is: stringArray[5] = "Ruby", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ruby" Ct is: stringArray[5] = "Ruby"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3c804c6
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Test data refinement:
parameterBean.setLanguage("Java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data refinement:
parameterBean.setLanguage("Java") target is: parameterBean method is: setLanguage(java.lang.String)
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Test data refinement:
parameterBean.setLanguage("Python"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data refinement:
parameterBean.setLanguage("Python") target is: parameterBean method is: setLanguage(java.lang.String)
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
* this is vulnerable: String string = "Java"
* this is vulnerable: String string = "Python"
* this is vulnerable: String string = "C++"
* this is vulnerable: String string = "Javascript"
* this is vulnerable: String string = "Go"
* this is vulnerable: String string = "Ruby"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
String string = "all";
((ParameterBean) string).setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
String string = "Java";
String string = "Python";
String string = "C++";
String string = "Javascript";
String string = "Go";
String string = "Ruby";
((ParameterBean) string).setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@c30d87b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c537196b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "othersUpdatesAreVisible"
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[1];
        stringArray[0] = "othersUpdatesAreVisible";
        parameterBean.setFilterArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "othersUpdatesAreVisible", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"othersUpdatesAreVisible" Ct is: stringArray[0] = "othersUpdatesAreVisible"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
String string = "othersUpdatesAreVisible";
stringArray[0] = string;
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@47e3b679 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d627e7e8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "CT";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "MRI";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "X-ray";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        stringArray[1] = "CT";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        stringArray[1] = "MRI";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        stringArray[1] = "X-ray";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "CT", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"CT" Ct is: stringArray[0] = "CT"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 8
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 7
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "MRI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MRI" Ct is: stringArray[0] = "MRI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 15
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 14
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "X-ray", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"X-ray" Ct is: stringArray[0] = "X-ray"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 22
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 21
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "CT", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"CT" Ct is: stringArray[1] = "CT"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 29
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 28
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "MRI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"MRI" Ct is: stringArray[1] = "MRI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 38
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 37
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "X-ray", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"X-ray" Ct is: stringArray[1] = "X-ray"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 47
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 46
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@4e46b307 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e5121c9f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "`{A "
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "`{A ";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "A";
        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A" Ct is: stringArray[0] = "A"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "A";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@f17d98f4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5b3ea3e3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setDisease([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setDisease(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "lung";
        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "lung", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"lung" Ct is: stringArray[0] = "lung"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setDisease(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setDisease(stringArray) target is: parameterBean method is: setDisease(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setDisease([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "lung";
stringArray[0] = string;
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("DELETE")
statement is: org.evosuite.testcase.statements.ArrayStatement@47967058 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c506d17 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "1(_JLOs"
statement is: setDisease([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setDisease(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
stringArray[0] = "1(_JLOs";
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("DELETE");
        String[] stringArray = new String[2];
        stringArray[0] = "1(JLOs";
        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("DELETE"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "1(JLOs", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"1(JLOs" Ct is: stringArray[0] = "1(JLOs"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b74816f6
statement is: parameterBean.setDisease(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setDisease(stringArray) target is: parameterBean method is: setDisease(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setDisease([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "1(JLOs"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "DELETE";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[2];
String string = "1(JLOs";
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@b625dc3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1941aafc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setSourceCollection([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setSourceCollection(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        parameterBean.setSourceCollection(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data:
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        stringArray[1] = "some";
        stringArray[2] = "none";
        parameterBean.setSourceCollection(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setSourceCollection(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setSourceCollection(stringArray) target is: parameterBean method is: setSourceCollection(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setSourceCollection([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data:
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "some", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"some" Ct is: stringArray[1] = "some"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "none", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"none" Ct is: stringArray[2] = "none"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setSourceCollection(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setSourceCollection(stringArray) target is: parameterBean method is: setSourceCollection(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 8
Matched Method is: setSourceCollection([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 7
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "some";
stringArray[0] = string;
String string = "none";
stringArray[0] = string;
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ")
statement is: org.evosuite.testcase.statements.ArrayStatement@852cf7fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a140e050 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "`{A"
statement is: setSourceCollection([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setSourceCollection(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
        String[] stringArray = new String[3];
        stringArray[0] = "`{A";
        parameterBean.setSourceCollection(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "`{A", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"`{A" Ct is: stringArray[0] = "`{A"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@84f8e21c
statement is: parameterBean.setSourceCollection(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setSourceCollection(stringArray) target is: parameterBean method is: setSourceCollection(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setSourceCollection([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "`{A"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[3];
String string = "`{A";
((ParameterBean) string).setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@191d1cbd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: setPublicationNames([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPublicationNames(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[]{ "example1", "example2", "example3" };
        parameterBean.setPublicationNames(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "example1", "example2", "example3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[]{ "example1", "example2", "example3" } Elements: ["example1", "example2", "example3"]
lengths: [3] []
statement is: parameterBean.setPublicationNames(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationNames(stringArray) target is: parameterBean method is: setPublicationNames(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPublicationNames([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = null;
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@49f1c462 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6255910a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setPublicationNames([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPublicationNames(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        parameterBean.setPublicationNames(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPublicationNames(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationNames(stringArray) target is: parameterBean method is: setPublicationNames(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPublicationNames([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("DELETE")
statement is: org.evosuite.testcase.statements.ArrayStatement@7d742c63 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: setPublicationIds([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPublicationIds(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("DELETE");
        String[] stringArray = new String[2];
        stringArray[0] = "pub1";
        stringArray[1] = "pub2";
        parameterBean.setPublicationIds(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("DELETE"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "pub1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub1" Ct is: stringArray[0] = "pub1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "pub2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub2" Ct is: stringArray[1] = "pub2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPublicationIds(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationIds(stringArray) target is: parameterBean method is: setPublicationIds(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPublicationIds([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "DELETE";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[2];
((ParameterBean) string).setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@6f568200 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: setPublicationIds([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPublicationIds(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@31398bed type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[2];
        parameterBean.setPublicationIds(stringArray);
        stringArray[0] = "all";
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: parameterBean.setPublicationIds(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationIds(stringArray) target is: parameterBean method is: setPublicationIds(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPublicationIds([Ljava/lang/String;)V
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
String string = "all";
stringArray[0] = string;
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@30e18c8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@883c2f97 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: makeParameterBean(Ljava/lang/String;)Lorg/heal/module/search/ParameterBean; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean makeParameterBean = parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title")
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[]{ "all", "some_string_value", "another_string_value" };
        parameterBean.setPrimaryArray(stringArray);
        parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title");
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "all", "some_string_value", "another_string_value" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[]{ "all", "some_string_value", "another_string_value" } Elements: ["all", "some_string_value", "another_string_value"]
lengths: [3] []
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private=\'0\') \n order by Title") target is: parameterBean method is: makeParameterBean(java.lang.String)
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: makeParameterBean(Ljava/lang/String;)Lorg/heal/module/search/ParameterBean;
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = null;
parameterBean.setPrimaryArray(stringArray);
String string = "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title";
parameterBean.makeParameterBean(string);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ")
statement is: org.evosuite.testcase.statements.ArrayStatement@8e08c961 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@97c6ff47 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "`{A"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: org.heal.module.search.ParameterNode(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterNode
statement code is: ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]")
statement is: addParameters(Lorg/heal/module/search/ParameterNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.addParameters(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ");
        String[] stringArray = new String[3];
        stringArray[0] = "A";
        parameterBean.setPrimaryArray(stringArray);
        ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]");
        parameterBean.addParameters(parameterNode);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A" Ct is: stringArray[0] = "A"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2e8c9223
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.addParameters(parameterNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.addParameters(parameterNode) target is: parameterBean method is: addParameters(ParameterNode)
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: addParameters(Lorg/heal/module/search/ParameterNode;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "A"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[3];
String string = "A";
((ParameterBean) string).setPrimaryArray(stringArray);
String string = "Not in manual transaction mode.";
String string = "uMH";
String string = "=i]";
ParameterNode parameterNode = new ParameterNode(string, string, string);
((ParameterBean) string).addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@d6e740f9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e9e03074 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "SourceCollection"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: org.heal.module.search.ParameterNode(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterNode
statement code is: ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = '", "Metadata.PublicationId = '", "Metadata.PublicationId = '")
statement is: addParameters(Lorg/heal/module/search/ParameterNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.addParameters(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = '", "Metadata.PublicationId = '", "Metadata.PublicationId = '");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[2];
        stringArray[0] = "SourceCollection";
        parameterBean.setPrimaryArray(stringArray);
        ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'");
        parameterBean.addParameters(parameterNode);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "SourceCollection", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"SourceCollection" Ct is: stringArray[0] = "SourceCollection"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.addParameters(parameterNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.addParameters(parameterNode) target is: parameterBean method is: addParameters(ParameterNode)
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: addParameters(Lorg/heal/module/search/ParameterNode;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
String string = "SourceCollection";
stringArray[0] = string;
parameterBean.setPrimaryArray(stringArray);
String string = "Metadata.PublicationId = 'TestPublicationId'";
String string = "Metadata.PublicationId = 'TestPublicationId'";
String string = "Metadata.PublicationId = 'TestPublicationId'";
ParameterNode parameterNode = new ParameterNode(string, string, string);
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("User-defined data types are not supported.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String expectedErrorMessage = "User-defined data types are not supported.";
        advSearchDAO.addDefaultConnectives(expectedErrorMessage);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedErrorMessage = "User-defined data types are not supported.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.addDefaultConnectives(expectedErrorMessage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives(expectedErrorMessage) target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "User-defined data types are not supported.";
advSearchDAO.addDefaultConnectives(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@b2ea88d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String multiSelection = advSearchDAO.getMultiSelection(arg0, "`:")
test data is: String[] stringArray = new String[6];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection(stringArray, "`:");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] fruitNames = new String[]{ "apple", "banana", "cherry" };
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.getMultiSelection(fruitNames, ":");
        String[] vegetableNames = new String[]{ "carrot", "broccoli", "cauliflower" };
        advSearchDAO.getMultiSelection(vegetableNames, ",");
        String[] emptyArray = new String[]{  };
        advSearchDAO.getMultiSelection(emptyArray, ":");
        String[] nullArray = null;
        advSearchDAO.getMultiSelection(nullArray, ":");
        String[] mixedArray = new String[]{ "apple", 2, "banana", 3.14 };
        advSearchDAO.getMultiSelection(mixedArray, ":");
    }
}
statement is: String[] fruitNames = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [6] []
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.getMultiSelection(fruitNames, ":"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(fruitNames, ":") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: String[] vegetableNames = new String[]{ "carrot", "broccoli", "cauliflower" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[]{ "carrot", "broccoli", "cauliflower" } Elements: ["carrot", "broccoli", "cauliflower"]
lengths: [6] []
statement is: advSearchDAO.getMultiSelection(vegetableNames, ","), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(vegetableNames, ",") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: String[] emptyArray = new String[]{  }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[]{  } Elements: []
lengths: [6] []
statement is: advSearchDAO.getMultiSelection(emptyArray, ":"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(emptyArray, ":") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: String[] nullArray = null, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: advSearchDAO.getMultiSelection(nullArray, ":"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(nullArray, ":") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: String[] mixedArray = new String[]{ "apple", 2, "banana", 3.14 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[]{ "apple", 2, "banana", 3.14 } Elements: ["apple", 2, "banana", 3.14]
lengths: [6] []
statement is: advSearchDAO.getMultiSelection(mixedArray, ":"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(mixedArray, ":") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ",";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("OR");
        advSearchDAO.setSearchParameters(new SearchParameters(500, 3.14));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("OR"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("OR") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
statement is: advSearchDAO.setSearchParameters(new SearchParameters(500, 3.14)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.setSearchParameters(new SearchParameters(500, 3.14)) target is: advSearchDAO method is: setSearchParameters(SearchParameters)
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "OR";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.evosuite.testcase.statements.ArrayStatement@84052d7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String multiSelection = advSearchDAO.getMultiSelection(arg0, "4")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "4");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String[] stringArray = new String[]{ "red", "green", "blue" };
        advSearchDAO.getMultiSelection(stringArray, "4");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "red", "green", "blue" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "red", "green", "blue" } Elements: ["red", "green", "blue"]
lengths: [0] []
statement is: advSearchDAO.getMultiSelection(stringArray, "4"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "4") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "4";
String string = null;
advSearchDAO.getMultiSelection((String[]) string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.heal.module.search.SearchResultBean
statement code is: SearchResultBean AdvSearch = advSearchDAO.AdvSearch(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        parameterBean.setKeyword("java");
        parameterBean.setLocation("San Francisco");
        parameterBean.setCategory("Programming");
        advSearchDAO.AdvSearch(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.setKeyword("java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setKeyword("java") target is: parameterBean method is: setKeyword(java.lang.String)
statement is: parameterBean.setLocation("San Francisco"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setLocation("San Francisco") target is: parameterBean method is: setLocation(java.lang.String)
statement is: parameterBean.setCategory("Programming"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setCategory("Programming") target is: parameterBean method is: setCategory(java.lang.String)
statement is: advSearchDAO.AdvSearch(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.AdvSearch(parameterBean) target is: advSearchDAO method is: AdvSearch(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);

* test suite isTestSuite: 68
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "<H)i`.Q~?hpJ+!");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like '%%' OR SourceCollection like '%%'  )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%%' OR TargetUserGroup like '%Must supply a BaseImplClob object%' OR TargetUserGroup like '%%' OR TargetUserGroup like '%%' ) \n order by Title");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=", "gDIt=");
Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "`{A", "`{A", "`{A", "`{A");
Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "");
Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "`{A ";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
stringArray[0] = "1(_JLOs";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 22: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 23: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 24: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 25: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 26: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);
Test 27: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 28: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = '", "Metadata.PublicationId = '", "Metadata.PublicationId = '");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 29: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");
Test 30: 
String[] stringArray = new String[6];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection(stringArray, "`:");
Test 31: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");
Test 32: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "4");
Test 33: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 34: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);

Test 35: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");

Test 36: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested");

Test 37: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);

Test 38: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like 'Boston University' OR SourceCollection like 'Engineering Department' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like 'Boston University' OR NOT (TargetUserGroup like '%Engineering Department%' AND TargetUserGroup like '%%')");

Test 39: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT * FROM employees WHERE department_id = 10 AND salary > 80000");

Test 40: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");

Test 41: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");

Test 42: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 43: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20");

Test 44: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"Hiking\", \"Backpacking\", \"Camping\"", "\"Mountain\", \"Forest\", \"Wilderness\"", "\"Alaska\", \"California\", \"Arizona\"", "2018-10-01", "2018-10-31");

Test 45: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple");

Test 46: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("and", "or", "Metadata", "Java", "Developer");

Test 47: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
advSearchDAO.makeQuery(parameterBean);

Test 48: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all";
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
((ParameterBean)"all").setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
((ParameterBean) string).setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);

Test 49: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 50: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 51: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "A";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 52: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "lung";
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 53: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
((ParameterBean)"DELETE").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 54: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "some";
stringArray[0] = string;
String string = "none";
stringArray[0] = string;
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 55: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
((ParameterBean)"SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 56: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setPublicationNames((String[]) null);
advSearchDAO.makeQuery(parameterBean);

Test 57: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 58: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
((ParameterBean)"DELETE").setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 59: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
advSearchDAO.makeQuery(parameterBean);

Test 60: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setPrimaryArray((String[]) null);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);

Test 61: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ";
ParameterBean parameterBean = new ParameterBean("SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ");
String[] stringArray = new String[3];
((ParameterBean)"SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ").setPrimaryArray(stringArray);
String string = "Not in manual transaction mode.";
String string = "uMH";
String string = "=i]";
ParameterNode parameterNode = new ParameterNode(string, string, string);
((ParameterBean) string).addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

Test 62: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

Test 63: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");

Test 64: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = ":";
((AdvSearchDAO)":").getMultiSelection((String[]) ":", (String) null);
String string = ",";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);

Test 65: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("OR");

Test 66: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "4", (String) null);

Test 67: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);


* Generated after the refinement and before minimization 68 tests with total length 345
* test suite isTestSuite: 68
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "<H)i`.Q~?hpJ+!");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like '%%' OR SourceCollection like '%%'  )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%%' OR TargetUserGroup like '%Must supply a BaseImplClob object%' OR TargetUserGroup like '%%' OR TargetUserGroup like '%%' ) \n order by Title");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=", "gDIt=");
Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "`{A", "`{A", "`{A", "`{A");
Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "");
Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "`{A ";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
stringArray[0] = "1(_JLOs";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 22: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 23: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 24: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 25: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 26: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);
Test 27: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 28: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = '", "Metadata.PublicationId = '", "Metadata.PublicationId = '");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 29: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");
Test 30: 
String[] stringArray = new String[6];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection(stringArray, "`:");
Test 31: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");
Test 32: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "4");
Test 33: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 34: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);

Test 35: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");

Test 36: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested");

Test 37: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);

Test 38: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like 'Boston University' OR SourceCollection like 'Engineering Department' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like 'Boston University' OR NOT (TargetUserGroup like '%Engineering Department%' AND TargetUserGroup like '%%')");

Test 39: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT * FROM employees WHERE department_id = 10 AND salary > 80000");

Test 40: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");

Test 41: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");

Test 42: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 43: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20");

Test 44: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"Hiking\", \"Backpacking\", \"Camping\"", "\"Mountain\", \"Forest\", \"Wilderness\"", "\"Alaska\", \"California\", \"Arizona\"", "2018-10-01", "2018-10-31");

Test 45: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple");

Test 46: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("and", "or", "Metadata", "Java", "Developer");

Test 47: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
advSearchDAO.makeQuery(parameterBean);

Test 48: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all";
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
((ParameterBean)"all").setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
((ParameterBean) string).setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);

Test 49: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 50: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "CT";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "MRI";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "X-ray";
stringArray[0] = string;
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 51: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "A";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 52: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "lung";
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 53: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
((ParameterBean)"DELETE").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 54: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "some";
stringArray[0] = string;
String string = "none";
stringArray[0] = string;
parameterBean.setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 55: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
((ParameterBean)"SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 56: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setPublicationNames((String[]) null);
advSearchDAO.makeQuery(parameterBean);

Test 57: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 58: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("DELETE");
String[] stringArray = new String[2];
((ParameterBean)"DELETE").setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 59: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
advSearchDAO.makeQuery(parameterBean);

Test 60: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setPrimaryArray((String[]) null);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);

Test 61: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ";
ParameterBean parameterBean = new ParameterBean("SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ");
String[] stringArray = new String[3];
((ParameterBean)"SELECT `A.metadataID from `A WHERE `A like '`%A%' OR `%A%' ").setPrimaryArray(stringArray);
String string = "Not in manual transaction mode.";
String string = "uMH";
String string = "=i]";
ParameterNode parameterNode = new ParameterNode(string, string, string);
((ParameterBean) string).addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

Test 62: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

Test 63: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");

Test 64: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = ":";
((AdvSearchDAO)":").getMultiSelection((String[]) ":", (String) null);
String string = ",";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);
String string = ":";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);

Test 65: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("OR");

Test 66: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "4", (String) null);

Test 67: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);


* Minimizing test suite
* test suite isTestSuite: 34
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
advSearchDAO.addDefaultConnectives(buildMutiQuery);
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like 'Boston University' OR SourceCollection like 'Engineering Department' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like 'Boston University' OR NOT (TargetUserGroup like '%Engineering Department%' AND TargetUserGroup like '%%')");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20");
Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple");
Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");
Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "");
Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[1];
stringArray[0] = "othersUpdatesAreVisible";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "A";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "lung";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 22: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 23: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 24: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 25: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 26: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
stringArray[0] = "all";
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 27: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
stringArray[0] = "SourceCollection";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'", "Metadata.PublicationId = 'TestPublicationId'");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 28: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title");
advSearchDAO.makeQuery(parameterBean);
Test 29: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT `{A.metadataID from `{A WHERE `{A like '`{A%' OR `{A like '% `{A%' ");
String[] stringArray = new String[3];
stringArray[0] = "`{A";
parameterBean.setPrimaryArray(stringArray);
ParameterNode parameterNode = new ParameterNode("Not in manual transaction mode.", "uMH", "=i]");
parameterBean.addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);
Test 30: 
String[] stringArray = new String[6];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection(stringArray, "`:");
Test 31: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");
Test 32: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "4");
Test 33: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 175
* Number of covered goals: 141
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 266
* Number of covered goals: 202
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 18
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 175
* Number of covered goals: 141
* Generated 34 tests with total length 137
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);

** It was a parseable test case! 
refined test name is: testAdvSearchDAONullDataSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("User-defined data types are not supported.");
assertEquals("User-defined  and data  and types  and are not supported. ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectivesWithCustomDataTypes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("or", "or", "This is a more descriptive and representative search query that better reflects the situation being tested");
assertEquals("SELECT This is a more descriptive and representative search query that better reflects the situation being tested.metadataID from This is a more descriptive and representative search query that better reflects the situation being tested WHERE or ", buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQueryWithOrClause
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String arg0 = advSearchDAO.buildMutiQuery("SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", "SELECT  and L!n.metadataID  and from  and L!n  and WHERE  and L!n  and like  and 'L!n%'  and OR  and L!n  and like  and '%  and L!n%' ", "SELECT L!n.metadataID from L!n WHERE L!n like 'L!n%' OR L!n like '% L!n%' ", " value: ", "L!n");
String addDefaultConnectives = advSearchDAO.addDefaultConnectives(arg0);
assertFalse(addDefaultConnectives.equals((Object)arg0));


** It was a parseable test case! 
refined test name is: testAddDefaultConnectiveswithMultipleClauses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( SourceCollection like 'Boston University' OR SourceCollection like 'Engineering Department' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like 'Boston University' OR NOT (TargetUserGroup like '%Engineering Department%' AND TargetUserGroup like '%%')");
assertEquals("select  and distinct(Metadata.metadataID)  and AS  and ID,  and Title  and FROM  and Metadata  and WHERE  and (Metadata.CatalogDate  and IS  and NOT  and NULL  and AND  and Metadata.ApproveDate  and IS  and NOT  and NULL  and AND  and Metadata.Private='0')  and AND  and ( SourceCollection  and like  and 'Boston  and University'  and OR  and SourceCollection  and like  and 'Engineering  and Department' )  and AND  and Metadata.MetadataID  and IN  and (SELECT  and TargetUserGroups.MetadataID  and from  and TargetUserGroups  and WHERE  and TargetUserGroup  and like  and 'Boston  and University'  and OR  and NOT  and (TargetUserGroup  and like  and '%Engineering  and Department%'  and AND  and TargetUserGroup  and like  and '%%') ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectives
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("SELECT One or more arguments supplied to method {0} are invalid.metadataID from One or more arguments supplied to method {0} are invalid WHERE 5^XB!Zb=D;|U4Q like 'a,%' OR 5^XB!Zb=D;|U4Q like '% a,%' ");
assertEquals("SELECT  and One or more  and arguments  and supplied  and to  and method  and {0}  and are  and invalid.metadataID  and from  and One or more  and arguments  and supplied  and to  and method  and {0}  and are  and invalid  and WHERE  and 5^XB!Zb=D;|U4Q  and like  and 'a,%'  and OR  and 5^XB!Zb=D;|U4Q  and like  and '%  and a,%' ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectivesBasic
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT -.metadataID from - WHERE \" IN (Select \" from \" WHERE - like 'othsUpdatesAreViible%' OR - like '% othsUpdatesAreViible%' )", "in#t identity", "4,j~\"~I9\"DYz");
assertNotNull(buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ", "!xZA\"~C7HUVuZ Cx\"", "SELECT 1(_JLOs.metadataID from 1(_JLOs WHERE  AND ( like 'AND%' OR  AND ( like '% AND%'  AND Metadata.metadataID IN (SELECT 1(_JLOs.MetadataID from 1(_JLOs where ( ");
assertNotNull(buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQueryShouldReturnExpectedResult
* Compiling Tests
refined test name is: testBuildCommonQueryWithValidInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT `{A.metadataID from `{A WHERE `{A IN (Select `{A from `{A WHERE `{A like '$Revision:%' OR `{A like '% $Revision:%'  AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '1.8.1.0%' OR `{A like '% 1.8.1.0%' ) AND `{A IN (SELECT `{A FROM `{A WHERE `{A like '$%' OR `{A like '% $%' ))", "ag", (String) null);
assertNotNull(buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQueryWithRevisionAndVersion
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("User-defined data types are not supported.", "gDIt=10", "gDIt=20");
assertEquals("SELECT gDIt=20.metadataID from gDIt=20 WHERE gDIt=10 like 'User-defined%' OR gDIt=10 like '% User-defined%'  AND Metadata.metadataID IN (SELECT gDIt=20.MetadataID from gDIt=20 where gDIt=10 like 'data%' OR gDIt=10 like '% data%' ) AND Metadata.metadataID IN (SELECT gDIt=20.MetadataID from gDIt=20 where gDIt=10 like 'types%' OR gDIt=10 like '% types%' ) AND Metadata.metadataID IN (SELECT gDIt=20.MetadataID from gDIt=20 where gDIt=10 like 'are%' OR gDIt=10 like '% are%' ) AND Metadata.metadataID NOT IN (SELECT gDIt=20.MetadataID from gDIt=20 where gDIt=10 like 'supported.%' OR gDIt=10 like '% supported.%' )", buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQuery
* Compiling Tests
refined test name is: testCommonQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "\"", "\"", "\"", "\"");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}


** It was a parseable test case! 
refined test name is: testThrowsNoSuchElementExceptionOnEmptySearchTerm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery(" AND (", "apple", "banana", "orange", "pineapple");
assertEquals("SELECT banana.metadataID from banana WHERE apple IN (Select apple from orange WHERE pineapple like 'AND%' OR pineapple like '% AND%'  AND apple IN (SELECT apple FROM orange WHERE ( )", buildMutiQuery);


** It was a parseable test case! 
refined test name is: testBuildMultiQuery
* Compiling Tests
refined test name is: testBuildMultiQueryWithKeywords
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title", "all", "SELECT not.metadataID from not WHERE not IN (Select not from select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n order by Title WHERE not like 'all%' OR not like '% all%' )");
assertNotNull(buildMutiQuery);


** It was a parseable test case! 
refined test name is: testBuildMultiQueryReturnsNonNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("or", "or", "Metadata", "", "");
assertEquals("SELECT Metadata.metadataID from Metadata WHERE or IN (Select or from  WHERE or )", buildMutiQuery);


** It was a parseable test case! 
refined test name is: testBuildMutiQueryValidInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean arg0 = new ParameterBean();
arg0.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(arg0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}


** It was a parseable test case! 
refined test name is: testMakeQueryWithHiddenParameter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: String[] arg0 = new String[6];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String multiSelection = advSearchDAO.getMultiSelection(arg0, "`:");
assertEquals("`: like '%null%' OR `: like '%null%' OR `: like '%null%' OR `: like '%null%' OR `: like '%null%' OR `: like '%null%' ", multiSelection);


** It was a parseable test case! 
refined test name is: testGetMultiSelection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("");
assertEquals("", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectivesshouldReturnEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] arg0 = new String[0];
String multiSelection = advSearchDAO.getMultiSelection(arg0, "4");
assertEquals("", multiSelection);


** It was a parseable test case! 
refined test name is: testGetMultiSelectionEmptyArgsAndValue4
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean arg0 = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(arg0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}


** It was a parseable test case! 
refined test name is: testNullPointerExceptionInAdvSearch
* Compiling Tests
refined test name is: testAdvSearchWithNullParameter
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:02:58.142 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:02:58.235 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
* Compiling Tests
[MASTER] 12:02:59.905 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:02:59.929 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
* Compiling Tests
[MASTER] 12:03:01.451 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:03:01.477 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
* Compiling Tests
[MASTER] 12:03:03.069 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:03.095 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:03.704 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:03.707 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:04.094 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:04.097 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:04.213 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:04.217 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:03:04.443 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:04.447 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:04.699 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:04.704 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:03:04.931 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:04.935 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:05.161 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:05.166 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:03:05.359 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:05.364 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:05.591 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:05.594 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:05.725 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 12:03:05.727 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
* Compiling Tests
[MASTER] 12:03:05.913 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:05.917 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
[MASTER] 12:03:06.075 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:06.079 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
[MASTER] 12:03:06.232 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:06.236 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:06.443 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 12:03:06.448 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
[MASTER] 12:03:06.665 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 12:03:06.669 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 18 called: 3 to improve: false
[MASTER] 12:03:07.520 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:07.527 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 7 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 11 called: 3 to improve: false
[MASTER] 12:03:08.059 [logback-2] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8163572304076698287.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 12:03:08.064 [logback-2] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8163572304076698287.jar
* Writing tests to file
* Writing JUnit test case 'AdvSearchDAO_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 7 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 11 called: 3 to improve: false
* Done!

* Computation finished
