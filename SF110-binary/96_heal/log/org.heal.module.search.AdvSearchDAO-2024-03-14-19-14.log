* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.heal.module.search.AdvSearchDAO
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/96_heal/evosuite-files/evosuite.properties
* Connecting to master process on port 20668
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:14:25.726 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 19:14:26.208 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 19:14:26.209 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 19:14:26.237 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 19:14:28.562 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 19:14:28.612 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 19:14:28.651 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 19:14:29.068 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 19:14:29.084 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 19:14:29.086 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 19:14:29.086 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 19:14:29.089 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 19:14:29.091 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 19:14:29.121 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:14:29.130 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:14:29.131 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:14:29.434 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 19:14:29.567 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.heal.module.search.AdvSearchDAO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 642
* Using seed 1710443652964
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 129 / 642
[Progress:>                             0%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             3%] [Cov:==================>                53%][Progress:>                             3%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            5%] [Cov:===================>               55%][Progress:=>                            5%] [Cov:===================>               56%][Progress:=>                            6%] [Cov:===================>               56%][Progress:=>                            6%] [Cov:===================>               56%][Progress:=>                            6%] [Cov:===================>               56%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           9%] [Cov:======================>            64%][Progress:==>                           9%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          12%] [Cov:=======================>           66%][Progress:===>                          12%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         14%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         15%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progres[Progress:==============>               48%] [Cov:========================>     [Progress:======>                       22%] [Cov:=======================>           66%][Progres[Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:================>             56%] [Cov:========================>          70%][Progress:=================>            57%] [Cov:========================>          70%][Progress:=================>            57%] [Cov:========================>          70%][Progress:=================>            58%] [Cov:========================>          70%][Progress:=================>            58%] [Cov:========================>          70%][Progress:=================>            59%] [Cov:========================>          70%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           60%] [Cov:========================>          71%][Progress:==================>           61%] [Cov:========================>          71%][Progress:==================>           62%] [Cov:========================>          71%][Progress:==================>           62%] [Cov:========================>          71%][Progress:==================>           63%] [Cov:========================>          71%][Progress:==================>           63%] [Cov:========================>          71%][Progress:===================>          64%] [Cov:========================>          71%][Progress:===================>          64%] [Cov:========================>          71%][Progress:===================>          65%] [Cov:========================>          71%][Progress:===================>          66%] [Cov:========================>          71%][Progress:===================>          66%] [Cov:========================>          71%][Progress:====================>         68%] [Cov:========================>          71%][Progress:====================>         68%] [Cov:========================>          71%][Progress:====================>         69%] [Cov:========================>          71%][Progress:====================>         69%] [Cov:========================>          71%][Progress:=====================>        70%] [Cov:========================>          71%][Progress:=====================>        70%] [Cov:========================>          71%][Progress:=====================>        71%] [Cov:========================>          71%][Progress:=====================>        71%] [Cov:========================>          71%][Progress:=====================>        71%] [Cov:========================>          71%][Progress:=====================>        72%] [Cov:========================>          71%][Progress:=====================>        73%] [Cov:========================>          71%][Progress:=====================>        73%] [Cov:========================>          71%][Progress:=====================>        73%] [Cov:========================>          71%][Progress:=====================>        73%] [Cov:========================>          71%][Progress:======================>       74%] [Cov:========================>          71%][Progress:======================>       75%] [Cov:========================>          71%][Progress:======================>       75%] [Cov:========================>          71%][Progress:======================>       75%] [Cov:========================>          71%][Progress:======================>       76%] [Cov:========================>          71%][Progress:======================>       76%] [Cov:========================>          71%][Progress:=======================>      77%] [Cov:========================>          71%][Progress:=======================>      77%] [Cov:========================>          71%][Progress:=======================>      77%] [Cov:========================>          71%][Progress:=======================>      78%] [Cov:========================>          71%][Progress:=======================>      78%] [Cov:========================>          71%][Progress:=======================>      78%] [Cov:========================>          71%][Progress:=======================>      79%] [Cov:========================>          71%][Progress:=======================>      79%] [Cov:========================>          71%][Progress:========================>     80%] [Cov:========================>          71%][Progress:========================>     80%] [Cov:========================>          71%][Progress:========================>     80%] [Cov:=========================>         72%][Progress:========================>     81%] [Cov:=========================>         72%][Progress:========================>     82%] [Cov:=========================>         72%][Progress:========================>     83%] [Cov:=========================>         72%][Progress:========================>     83%] [Cov:=========================>         72%][Progress:=========================>    84%] [Cov:=========================>         72%][Progress:=========================>    84%] [Cov:=========================>         72%][Progress:=========================>    85%] [Cov:=========================>         72%][Progress:=========================>    86%] [Cov:=========================>         72%][Progress:=========================>    86%] [Cov:=========================>         72%][Progress:==========================>   88%] [Cov:=========================>         72%][Progress:==========================>   89%] [Cov:=========================>         72%][Progress:==========================>   89%] [Cov:=========================>         72%][Progress:===========================>  90%] [Cov:=========================>         72%][Progress:===========================>  90%] [Cov:=========================>         72%][Progress:===========================>  91%] [Cov:=========================>         72%][Progress:===========================>  92%] [Cov:=========================>         72%][Progress:===========================>  92%] [Cov:=========================>         72%][Progress:===========================>  93%] [Cov:=========================>         72%][Progress:===========================>  93%] [Cov:=========================>         72%][Progress:===========================>  93%] [Cov:=========================>         72%][Progress:============================> 94%] [Cov:=========================>         72%][Progress:============================> 96%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%]
* Search finished after 102s and 125 generations, 63662 statements, best individual has fitness: 150.0
* Generated before the refinement 34 tests with total length 144
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: com.microsoft.jdbcx.base.BaseXADataSource()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.microsoft.jdbcx.base.BaseXADataSource
statement code is: BaseXADataSource baseXADataSource = new BaseXADataSource()
statement is: setDataSource(Ljavax/sql/DataSource;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: advSearchDAO.setDataSource(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource(baseXADataSource);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        BaseXADataSource baseXADataSource = new BaseXADataSource();
        // Improved test data
        advSearchDAO.setDataSource(new BaseXADataSource("jdbc:mysql://localhost/test_db", "admin", "password123"));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BaseXADataSource baseXADataSource = new BaseXADataSource(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
advSearchDAO.setDataSource(new BaseXADataSource("jdbc:mysql://localhost/test_db", "admin", "password123")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
advSearchDAO.setDataSource(new BaseXADataSource("jdbc:mysql://localhost/test_db", "admin", "password123")) target is: advSearchDAO method is: setDataSource(BaseXADataSource)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: setDataSource(Ljavax/sql/DataSource;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
BaseXADataSource baseXADataSource = null;
advSearchDAO.setDataSource(baseXADataSource);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later.");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later.") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.";
String string = "Error: Unable to connect to database. Please check your connection settings.";
String string = "Error: Database query timed out. Please try again later.";
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
        // Changed the primitive values to more illustrative examples
        advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
        // Changed the String values to more descriptive and representative examples
        advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
statement is: // Changed the primitive values to more illustrative examples
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the primitive values to more illustrative examples
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
statement is: // Changed the String values to more descriptive and representative examples
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the String values to more descriptive and representative examples
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
advSearchDAO.addDefaultConnectives(string);
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
advSearchDAO.addDefaultConnectives(string);
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("clobOffset" + (((((((((" " + "and") + " ") + "must") + " ") + "and") + " ") + "be") + " ") + "positive"));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("clobOffset" + (((((((((" " + "and") + " ") + "must") + " ") + "and") + " ") + "be") + " ") + "positive")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("clobOffset" + (((((((((" " + "and") + " ") + "must") + " ") + "and") + " ") + "be") + " ") + "positive")) target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = null;
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@53fba477 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dd415d84 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "k:{NM@$Q<+Iy<|q4@"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery(arg2, "k:{NM@$Q<+Iy<|q4@", arg2, "k:{NM@$Q<+Iy<|q4@", " NOT IN (SELECT ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery(makeQuery, "k:{NM@$Q<+Iy<|q4@", makeQuery, "k:{NM@$Q<+Iy<|q4@", " NOT IN (SELECT ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "car";
        parameterBean.setPrimaryArray(stringArray);
        parameterBean.setFilterArray(stringArray);
        String makeQuery = advSearchDAO.makeQuery(parameterBean);
        advSearchDAO.buildMutiQuery(makeQuery, "car", makeQuery, "car", " NOT IN (SELECT ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "car", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"car" Ct is: stringArray[0] = "car"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: String makeQuery = advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: advSearchDAO.buildMutiQuery(makeQuery, "car", makeQuery, "car", " NOT IN (SELECT "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery(makeQuery, "car", makeQuery, "car", " NOT IN (SELECT ") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "car";
stringArray[0] = string;
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
String string = "car";
String string = "car";
String string = " NOT IN (SELECT ";
advSearchDAO.buildMutiQuery(makeQuery, string, makeQuery, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", (String) null, "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", (String) null, "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like \'D>tIwn4mkkjjYo%\' OR \" like \'% D>tIwn4mkkjjYo%\' )", ((String) (null)), "\"");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like \'D>tIwn4mkkjjYo%\' OR \" like \'% D>tIwn4mkkjjYo%\' )", ((String) (null)), "\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like \'D>tIwn4mkkjjYo%\' OR \" like \'% D>tIwn4mkkjjYo%\' )", ((String) (null)), "\"") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )";
String string = "\"";
String string = null;
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", (String) null, "\"")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", (String) null, "\"");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", ((String) (null)), "\"");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", ((String) (null)), "\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", ((String) (null)), "\"") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ";
String string = "\"";
String string = null;
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery("(", "all ", (String) null)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all ", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery("(", "all", ((String) (null)));
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery("(", "all", ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery("(", "all", ((String) (null))) target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "(";
String string = "all";
String string = null;
advSearchDAO.buildCommonQuery(string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ")
statement is: org.evosuite.testcase.statements.ArrayStatement@c725a549 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: makeParameterBean(Ljava/lang/String;)Lorg/heal/module/search/ParameterBean; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean makeParameterBean = parameterBean.makeParameterBean("SELECT al .metadataID from al  WHERE A IN (Select A from al  WHERE h<1m@|TI2)u_A like 'SWdgU\"HzT|_Q!/6bH%' OR h<1m@|TI2)u_A like '% SWdgU\"HzT|_Q!/6bH%' )")
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b5b7576 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setPrimaryArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setPrimaryArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
parameterBean.makeParameterBean("SELECT al .metadataID from al  WHERE A IN (Select A from al  WHERE h<1m@|TI2)u_A like 'SWdgU\"HzT|_Q!/6bH%' OR h<1m@|TI2)u_A like '% SWdgU\"HzT|_Q!/6bH%' )");
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
        String[] stringArray = new String[1];
        stringArray[0] = "all";
        parameterBean.setPrimaryArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@178ec050
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("\"", "SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"", "SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like \'tR0%\' OR $Revision:   1.11.1.1  $ like \'% tR0%\' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ") target is: advSearchDAO method is: buildMutiQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "\"";
String string = "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ";
String string = "$Revision:   1.11.1.1  $";
String string = "~";
String string = "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ";
advSearchDAO.buildMutiQuery(string, string, string, string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildMutiQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildMutiQuery = advSearchDAO.buildMutiQuery("Data type not supported: {0}", "Data type not supported: {0}", "Data type not supported: {0}", "`~lEW", "Z[")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("Data type not supported: {0}", "Data type not supported: {0}", "Data type not supported: {0}", "`~lEW", "Z[");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: setHidden(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setHidden(true)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        parameterBean.setHidden("1");
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.setHidden("1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setHidden("1") target is: parameterBean method is: setHidden(java.lang.String)
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setHidden(Z)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String string = "1";
parameterBean.setHidden((boolean) string);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all ")
statement is: org.evosuite.testcase.statements.ArrayStatement@cb150c09 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc4456c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setFilterArray([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setFilterArray(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("all ");
        String[] stringArray = new String[1];
        stringArray[0] = "all";
        parameterBean.setFilterArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("all "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@23cd0b59
statement is: parameterBean.setFilterArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setFilterArray(stringArray) target is: parameterBean method is: setFilterArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setFilterArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all ")
statement is: org.evosuite.testcase.statements.ArrayStatement@927cbf60 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8ca4d1de type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("all");
        String[] stringArray = new String[1];
        stringArray[0] = "CT";// using a specific imaging type

        parameterBean.setImaging(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("all"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "CT"// using a specific imaging type
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"CT" Ct is: stringArray[0] = "CT"// using a specific imaging type

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@73560115
statement is: parameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setImaging(stringArray) target is: parameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "CT"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "CT";
((ParameterBean) string).setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )")
statement is: org.evosuite.testcase.statements.ArrayStatement@86a8968f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7f8f0d23 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' "
statement is: setImaging([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setImaging(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvancedSearchDAO advancedSearchDAO = new AdvancedSearchDAO();
        ParameterBean advancedSearchParameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
        String[] stringArray = new String[4];
        stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
        advancedSearchParameterBean.setImaging(stringArray);
        advancedSearchDAO.makeQuery(advancedSearchParameterBean);
    }
}
statement is: AdvancedSearchDAO advancedSearchDAO = new AdvancedSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean advancedSearchParameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' " Ct is: stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' "
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: advancedSearchParameterBean.setImaging(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advancedSearchParameterBean.setImaging(stringArray) target is: advancedSearchParameterBean method is: setImaging(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setImaging([Ljava/lang/String;)V
statement is: advancedSearchDAO.makeQuery(advancedSearchParameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advancedSearchDAO.makeQuery(advancedSearchParameterBean) target is: advancedSearchDAO method is: makeQuery(ParameterBean)
TestCase is: String string = "SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[4];
String string = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
stringArray[0] = string;
parameterBean.setImaging(stringArray);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH")
statement is: org.evosuite.testcase.statements.ArrayStatement@557a1e3f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8d5ac9d0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all"
statement is: setDisease([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setDisease(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
        String[] stringArray = new String[6];
        stringArray[0] = "all";
        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        // Improved test data:
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
        String[] stringArray = new String[6];
        stringArray[0] = "all";
        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
        stringArray[1] = "cancer";
        stringArray[2] = "diabetes";
        stringArray[3] = "heart_disease";
        stringArray[4] = "stroke";
        stringArray[5] = "neurological";
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@74a27077
statement is: parameterBean.setDisease(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setDisease(stringArray) target is: parameterBean method is: setDisease(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setDisease([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: // Improved test data:
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@299e358
statement is: parameterBean.setDisease(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setDisease(stringArray) target is: parameterBean method is: setDisease(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 9
Matched Method is: setDisease([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 7
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
statement is: stringArray[1] = "cancer", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cancer" Ct is: stringArray[1] = "cancer"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b9a85dd
statement is: stringArray[2] = "diabetes", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"diabetes" Ct is: stringArray[2] = "diabetes"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@33152d92
statement is: stringArray[3] = "heart_disease", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"heart_disease" Ct is: stringArray[3] = "heart_disease"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4f2977a4
statement is: stringArray[4] = "stroke", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"stroke" Ct is: stringArray[4] = "stroke"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@66370f1d
statement is: stringArray[5] = "neurological", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"neurological" Ct is: stringArray[5] = "neurological"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@129d48f9
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 7
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
* this is vulnerable: String string = "all"
* this is vulnerable: String string = "cancer"
* this is vulnerable: String string = "diabetes"
* this is vulnerable: String string = "heart_disease"
* this is vulnerable: String string = "stroke"
* this is vulnerable: String string = "neurological"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
String string = "all";
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
String string = "all";
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
String string = "cancer";
String string = "diabetes";
String string = "heart_disease";
String string = "stroke";
String string = "neurological";
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH")
statement is: org.evosuite.testcase.statements.ArrayStatement@3cd8b4b6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d0a7fd8b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "all "
statement is: setDisease([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parameterBean.setDisease(arg0)
statement is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String makeQuery = advSearchDAO.makeQuery(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
        String[] stringArray = new String[1];
        stringArray[0] = "all";// changed from "all " to make the test data more descriptive and representative of the situation being tested

        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all"// changed from "all " to make the test data more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"// changed from "all " to make the test data more descriptive and representative of the situation being tested

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2f223849
statement is: parameterBean.setDisease(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setDisease(stringArray) target is: parameterBean method is: setDisease(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setDisease([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("all ")
statement is: org.evosuite.testcase.statements.ArrayStatement@c668982f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statement** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("diabetes");
        String[] stringArray = new String[5];
        stringArray[0] = "diabetes";
        parameterBean.setDisease(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("diabetes"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.s** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("all ");
        String[] stringArray = new String[1];
        stringArray[0] = "all";
        parameterBean.setSourceCollection(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("all "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d19c2db
statement is: parameterBean.setSourceCollection(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setSourceCollection(stringArray) target is: parameterBean method is: setSourceCollection(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setSourceCollection([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "all ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH")
statement is: org.evosuite.testcase.statements.ArrayStatement@cf8392ab type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new ** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[7];
        stringArray[0] = "all";
        parameterBean.setSourceCollection(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery("all");
    }
}
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
        String[] stringArray = new String[1];
        stringArray[0] = "all";// changed to a more descriptive value, such as "all books" or "all authors"

        parameterBean.setSourceCollection(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all"// changed to a more descriptive value, such as "all books" or "all authors"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"// changed to a more descriptive value, such as "all books" or "all authors"

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@48047cee
statement is: parameterBean.setSourceCollection(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setSourceCollection(stringArray) target is: parameterBean method is: setSourceCollection(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setSourceCollection([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "all"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[1];
String string = "all";
((ParameterBean) string).setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

stateme** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[]{ "Testing", "Data", "Improvement" };
        parameterBean.setPublicationNames(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "Testing", "Data", "Improvement" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[]{ "Testing", "Data", "Improvement" } Elements: ["Testing", "Data", "Improvement"]
lengths: [8] []
statement is: parameterBean.setPublicationNames(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationNames(stringArray) target is: parameterBean method is: setPublicationNames(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: setPublicationNames([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
        String[] stringArray = new String[1];
        stringArray[0] = "example";
        parameterBean.setPublicationNames(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "example", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"example" Ct is: stringArray[0] = "example"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@df61c82c
statement is: parameterBean.setPublicationNames(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationNames(stringArray) target is: parameterBean method is: setPublicationNames(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[7];
        parameterBean.setPublicationNames(stringArray);
        stringArray[0] = "science";// Changed the value of the first element in the array to be more descriptive

        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: parameterBean.setPublicationNames(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationNames(stringArray) target is: parameterBean method is: setPublicationNames(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 0
Matched Method is: setPublicationNames([Ljava/lang/String;)V
statement is: stringArray[0] = "science"// Changed the value of the first element in the array to be more descriptive
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"science" Ct is: stringArray[0] = "science"// Changed the value of the first element in the array to be more descriptive

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 5
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
parameterBean.setPublicationNames(stringArray);
String string = "science";
stringArray[0] = string;
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
        String[] stringArray = new String[4];
        stringArray[0] = "publication name 1";
        stringArray[1] = "publication name 2";
        stringArray[2] = "publication name 3";
        stringArray[3] = "publication name 4";
        parameterBean.setPublicationNames(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] is** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("m&esk1x7mx.PD} ");
        String[] stringArray = new String[6];
        stringArray[0] = "pub1";
        stringArray[1] = "pub2";
        stringArray[2] = "pub3";
        stringArray[3] = "pub4";
        stringArray[4] = "pub5";
        stringArray[5] = "pub6";
        parameterBean.setPublicationIds(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("m&esk1x7mx.PD} "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "pub1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub1" Ct is: stringArray[0] = "pub1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "pub2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub2" Ct is: stringArray[1] = "pub2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "pub3", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub3" Ct is: stringArray[2] = "pub3"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "pub4", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub4" Ct is: stringArray[3] = "pub4"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "pub5", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub5" Ct is: stringArray[4] = "pub5"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "pub6", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"pub6" Ct is: stringArray[5] = "pub6"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPublicationIds(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationIds(stringArray) target is: parameterBean method is: setPublicationIds(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPublicationIds([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "m&esk1x7mx.PD} ";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
((ParameterBean) string).setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
        String[] stringArray = new String[3];
        stringArray[0] = "all";// <-- this is the only change to the original code, from an integer value of 1 to a String value of "all"

        parameterBean.setPublicationIds(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all"// <-- this is the only change to the original code, from an integer value of 1 to a String val** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[7];
        stringArray[0] = "123456";
        parameterBean.setPublicationIds(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "123456", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"123456" Ct is: stringArray[0] = "123456"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPublicationIds(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPublicationIds(stringArray) target is: parameterBean method is: setPublicationIds(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 0
Matched Method is: setPublicationIds([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 5
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
String string = "123456";
stringArray[0] = string;
parameterBean.setPublicationIds(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) _void).makeQuery(parameterBean);

statement is: org.heal.module.search.ParameterBean()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean()
statement is: org.evosuite.testcase.statements.ArrayStatement@8fe21fef type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dfc65e** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[2];
        stringArray[0] = "123456789";// real publication ID

        stringArray[1] = "abcdefghijklmnopqrstuvwxyz";// fictional publication ID

        parameterBean.setPublicationIds(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssign** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "all";
        stringArray[1] = "some";
        stringArray[2] = "any";
        parameterBean.setPrimaryArray(stringArray);
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "all", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"all" Ct is: stringArray[0] = "all"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "some", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"some" Ct is: stringArray[1] = "some"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "any", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"any" Ct is: stringArray[2] = "any"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 0, type org.heal.module.search.ParameterBeanindex is: 0
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 4, type org.heal.module.search.AdvSearchDAOindex is: 9
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
TestCase is: ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
String string = "all";
stringArray[0] = string;
String string = "some";
stringArray[0] = string;
String string = "any";
stringArray[0] = string;
parameterBean.setPrimaryArray(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
((AdvSearchDAO) string).makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("AND Mtadata.MetadataID NOT IN \n")
statement is: org.evosuite.testcase.statements.ArrayStatement@aab55d47 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        stringArray[0] = "OR ";
        parameterBean.setPrimaryArray(stringArray);
        parameterBean.makeParameterBean(" NOT IN (SELECT id FROM mytable WHERE name LIKE '%John%')");
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "OR ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"OR " Ct is: stringArray[0] = "OR "
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: Varia** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("AND Mtadata.MetadataID NOT IN \n");
        String[] stringArray = new String[22];
        stringArray[0] = "AND Mtadata.MetadataID NOT IN (1, 2, 3)";// use more descriptive and representative values for testing purposes

        ParameterNode parameterNode = new ParameterNode("AND Mtadata.MetadataID NOT IN \n", "AND Mtadata.MetadataID NOT IN \n");
        parameterBean.addParameters(parameterNode);
        parameterBean.setPrimaryArray(stringArray);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("AND Mtadata.MetadataID NOT IN \n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[22], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [22] Ct is: String[] stringArray = new String[22] isAssignment: false Array: new String[22] Elements: []
lengths: [22] [22]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "AND Mtadata.MetadataID NOT IN (1, 2, 3)"// use more descriptive and representative values for testing purposes
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"AND Mtadata.MetadataID NOT IN (1, 2, 3)" Ct is: stringArray[0] = "AND Mtadata.MetadataID NOT IN (1, 2, 3)"// use more descriptive and representative values for testing purposes

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d261a717
statement is: ParameterNode parameterNode = new ParameterNode("AND Mtadata.MetadataID NOT IN \n", "AND Mtadata.MetadataID NOT IN \n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.addParameters(parameterNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.addParameters(parameterNode) target is: parameterBean method is: addParameters(ParameterNode)
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: addParameters(Lorg/heal/module/search/ParameterNode;)V
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "AND Mtadata.MetadataID NOT IN (1, 2, 3)"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "AND Mtadata.MetadataID NOT IN \n";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[22];
String string = "AND Mtadata.MetadataID NOT IN (1, 2, 3)";
String string ** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        String[] stringArray = new String[3];
        parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
        stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
        parameterBean.setPrimaryArray(stringArray);
        parameterBean.makeParameterBean(" NOT IN (SELECT ");
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ") target is: parameterBean method is: makeParameterBean(java.lang.String)
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
source statement: org.heal.module.search.ParameterBean()V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 1
Matched Method is: makeParameterBean(Ljava/lang/String;)Lorg/heal/module/search/ParameterBean;
statement is: stringArray[0] = "k:{NM@$Q<+Iy<|q4@", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"k:{NM@$Q<+Iy<|q4@" Ct is: stringArray[0] = "k:{NM@$Q<+Iy<|q4@"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean()V callee: Variabl** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("Metadata.PublicZtionId = '");
        String[] stringArray = new String[5];
        stringArray[0] = "Fpq+m0!m#)mA)%h5?Se";
        parameterBean.setPrimaryArray(stringArray);
        ParameterNode parameterNode = new ParameterNode("Metadata.PublicZtionId = '", "vcards");
        parameterBean.addParameters(parameterNode);
        advSearchDAO.makeQuery(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("Metadata.PublicZtionId = '"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Fpq+m0!m#)mA)%h5?Se", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fpq+m0!m#)mA)%h5?Se" Ct is: stringArray[0] = "Fpq+m0!m#)mA)%h5?Se"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@de1e77bc
statement is: parameterBean.setPrimaryArray(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setPrimaryArray(stringArray) target is: parameterBean method is: setPrimaryArray(java.lang.String[])
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: setPrimaryArray([Ljava/lang/String;)V
statement is: ParameterNode parameterNode = new ParameterNode("Metadata.PublicZtionId = '", "vcards"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.addParameters(parameterNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.addParameters(parameterNode) target is: parameterBean method is: addParameters(ParameterNode)
source statement: org.heal.module.search.ParameterBean(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.heal.module.search.ParameterBeanindex is: 2
Matched Method is: addParameters(Lorg/heal/module/search/ParameterNode;)V
statement is: advSearchDAO.makeQuery(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.makeQuery(parameterBean) target is: advSearchDAO method is: makeQuery(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: makeQuery(Lorg/heal/module/search/ParameterBean;)Ljava/lang/String;
* this is vulnerable: String string = "Fpq+m0!m#)mA)%h5?Se"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "Metadata.PublicZtionId = '";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[5];
String string = "Fpq+m0!m#)mA)%h5?Se";
((ParameterBean) string).setPrimaryArray(stringArray);
String string = "Metadata.PublicZtionId = '";
String string = "vcards";
ParameterNode parameterNode = new ParameterNode(string, string);
((ParameterBean) string).addParameters(parameterNode);
advSearchDAO.makeQuery(parameterBean);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = " AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("AND  and Metadata.metadataID  and IN  and (SELECT ")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("AND  and Metadata.metadataID  and IN  and (SELECT ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("AND", "and", "Metadata.metadataID", "IN", "(SELECT");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("AND", "and", "Metadata.metadataID", "IN", "(SELECT"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("AND", "and", "Metadata.metadataID", "IN", "(SELECT") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported.")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported.");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported. You can use the ADVANCED_SEARCH_REQUIRED parameter to set this. Please check the documentation for more information.");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported. You can use the ADVANCED_SEARCH_REQUIRED parameter to set this. Please check the documentation for more information."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported. You can use the ADVANCED_SEARCH_REQUIRED parameter to set this. Please check the documentation for more information.") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "The COMPUTE BY clause is not supported. You can use the ADVANCED_SEARCH_REQUIRED parameter to set this. Please check the documentation for more information.";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String buildCommonQuery = advSearchDAO.buildCommonQuery(")", "all", ")")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery(")", "all", ")");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery(")", "all", ")");
        // Improved test data
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.buildCommonQuery(")", "all", ")");
        String expectedResult = "SELECT * FROM products WHERE price > 10 AND category = 'electronics'";
        assertEquals(expectedResult, advSearchDAO.getQuery());
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery(")", "all", ")"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery(")", "all", ")") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Improved test data
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.buildCommonQuery(")", "all", ")"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.buildCommonQuery(")", "all", ")") target is: advSearchDAO method is: buildCommonQuery(java.lang.String,java.lang.String,java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 5
Matched Method is: buildCommonQuery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: String expectedResult = "SELECT * FROM products WHERE price > 10 AND category = 'electronics'", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedResult, advSearchDAO.getQuery()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, advSearchDAO.getQuery()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "SELECT * FROM products WHERE price > 10 AND category = 'electronics'"
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = ")";
String string = "all";
String string = ")";
advSearchDAO.buildCommonQuery(string, string, string);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = ")";
String string = "all";
String string = ")";
advSearchDAO.buildCommonQuery(string, string, string);
String string = "SELECT * FROM products WHERE price > 10 AND category = 'electronics'";

statement is: org.evosuite.testcase.statements.ArrayStatement@d601332 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String multiSelection = advSearchDAO.getMultiSelection(arg0, "UH>Ev:0ez]S|j!")
test data is: String[] stringArray = new String[3];
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection(stringArray, "UH>Ev:0ez]S|j!");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "orange" };
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.getMultiSelection(stringArray, "UH>Ev:0ez]S|j!");
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[]{ "apple", "banana", "orange" } Elements: ["apple", "banana", "orange"]
lengths: [3] []
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.getMultiSelection(stringArray, "UH>Ev:0ez]S|j!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "UH>Ev:0ez]S|j!") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 1, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "UH>Ev:0ez]S|j!";
String string = null;
((AdvSearchDAO) string).getMultiSelection((String[]) string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addDefaultConnectives = advSearchDAO.addDefaultConnectives("")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        advSearchDAO.addDefaultConnectives("OR");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.addDefaultConnectives("OR"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.addDefaultConnectives("OR") target is: advSearchDAO method is: addDefaultConnectives(java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: addDefaultConnectives(Ljava/lang/String;)Ljava/lang/String;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "OR";
advSearchDAO.addDefaultConnectives(string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.evosuite.testcase.statements.ArrayStatement@9d83a949 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String multiSelection = advSearchDAO.getMultiSelection(arg0, "rcd")
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "rcd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        String[] stringArray = new String[]{ "red", "green", "blue" };
        advSearchDAO.getMultiSelection(stringArray, "rcd");
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "red", "green", "blue" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "red", "green", "blue" } Elements: ["red", "green", "blue"]
lengths: [0] []
statement is: advSearchDAO.getMultiSelection(stringArray, "rcd"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.getMultiSelection(stringArray, "rcd") target is: advSearchDAO method is: getMultiSelection(java.lang.String[],java.lang.String)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: getMultiSelection([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "rcd";
String string = null;
advSearchDAO.getMultiSelection((String[]) string, string);

statement is: org.heal.module.search.AdvSearchDAO()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.AdvSearchDAO
statement code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO()
statement is: org.heal.module.search.ParameterBean(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.heal.module.search.ParameterBean
statement code is: ParameterBean parameterBean = new ParameterBean("qw'):K|8 }*yfUM[c")
statement is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.heal.module.search.SearchResultBean
statement code is: SearchResultBean AdvSearch = advSearchDAO.AdvSearch(arg0)
test data is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("qw'):K|8 }*yfUM[c");
advSearchDAO.AdvSearch(parameterBean);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("qw'):K|8 }*yfUM[c");
        advSearchDAO.AdvSearch(parameterBean);
        // Improved test data:
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean("query:java programming language");
        advSearchDAO.AdvSearch(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("qw'):K|8 }*yfUM[c"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.AdvSearch(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.AdvSearch(parameterBean) target is: advSearchDAO method is: AdvSearch(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean;
statement is: // Improved test data:
AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean("query:java programming language"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: advSearchDAO.AdvSearch(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.AdvSearch(parameterBean) target is: advSearchDAO method is: AdvSearch(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 4
Matched Method is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "qw'):K|8 }*yfUM[c";
ParameterBean parameterBean = new ParameterBean(string);
advSearchDAO.AdvSearch(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "query:java programming language";
ParameterBean parameterBean = new ParameterBean(string);
advSearchDAO.AdvSearch(parameterBean);

* test suite isTestSuite: 65
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseDataSource baseDataSource = new BaseDataSource();
advSearchDAO.setDataSource(baseDataSource);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Sensitive scrolling not supported, downgraded to insensitive scrolling.", "\"", "`[e>");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Error closing Blob or Clob object.", "N conversion o {o7lea", "Error closing Blob or Clob object.");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT `[e>.metadataID from `[e> WHERE \" like '`[e>%' OR \" like '% `[e>%' ", "\"", "`[e>");
advSearchDAO.buildMutiQuery(buildCommonQuery, "`[e>", "x$_C", "<TW8drV;*E-p", "x$_C");
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("m&esk1x7mx.PD} ");
String[] stringArray = new String[6];
stringArray[0] = "<e";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setSourceCollection(stringArray);
String makeQuery = advSearchDAO.makeQuery(parameterBean);
advSearchDAO.addDefaultConnectives(makeQuery);
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE `[e> like 'm&e}sk1x7mx.XPD}%' OR `[e> like '% m&e}sk1x7mx.XPD}%' ", "m&e}sk1x7mx.XPD}", "}%cSJE_");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("( z~z&iul!7ZgZj{19a", "p%", "p(RJ");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT m&esk1x7mx.PD}.metadataID from m&esk1x7mx.PD} WHERE m&esk1x7mx.PD} IN (Select m&esk1x7mx.PD} from m&esk1x7mx.PD} WHERE m&esk1x7mx.PD} like 'm&esk1x7mx.PD}%' OR m&esk1x7mx.PD} like '% m&esk1x7mx.PD}%' )");
String[] stringArray = new String[1];
stringArray[0] = "SELECT m&esk1x7mx.PD}.metadataID from m&esk1x7mx.PD} WHERE m&esk1x7mx.PD} IN (Select m&esk1x7mx.PD} from m&esk1x7mx.PD} WHERE m&esk1x7mx.PD} like 'm&esk1x7mx.PD}%' OR m&esk1x7mx.PD} like '% m&esk1x7mx.PD}%' )";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery(" AND (", "`%[{HP}S", "$exaaxy/u", "`%[{HP}S", "m&eskIx7mx.PD(");
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The requested instance is either invalid or not running.", "The requested instance is either invalid or not running.", "SELECT m&esk1x7mx.PD} .metadataID from m&esk1x7mx.PD}  WHERE m&esk1x7mx.PD} like 'm&esk1x7mx.PD}%' OR m&esk1x7mx.PD} like '% m&esk1x7mx.PD}%' ", "2g%NM]',,t", (String) null);
Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("Metadata.PublicZtionId = '");
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "all";
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("m&esk1x7mx.PD} ");
String[] stringArray = new String[6];
stringArray[0] = "<e";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 13: 
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[8];
parameterBean.setImaging(stringArray);
stringArray[0] = "`r%>";
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("xl>h#3`,");
String[] stringArray = new String[5];
stringArray[0] = "xl>h#3`,";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[8];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
parameterBean.setPublicationNames(stringArray);
stringArray[0] = "all";
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("m&esk1x7mx.PD} ");
String[] stringArray = new String[6];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[7];
stringArray[0] = "all";
parameterBean.setPublicationIds(stringArray);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AdvSearchDAO advSearchDAO = new AdvSearchDAO();
        ParameterBean parameterBean = new ParameterBean();
        parameterBean.setName("Jane Smith");
        parameterBean.setAge(25);
        advSearchDAO.AdvSearch(parameterBean);
    }
}
statement is: AdvSearchDAO advSearchDAO = new AdvSearchDAO(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParameterBean parameterBean = new ParameterBean(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parameterBean.setName("Jane Smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setName("Jane Smith") target is: parameterBean method is: setName(java.lang.String)
statement is: parameterBean.setAge(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parameterBean.setAge(25) target is: parameterBean method is: setAge(int)
statement is: advSearchDAO.AdvSearch(parameterBean), class spoon.support.reflect.code.CtInvocationImpl
invocation is: advSearchDAO.AdvSearch(parameterBean) target is: advSearchDAO method is: AdvSearch(ParameterBean)
source statement: org.heal.module.search.AdvSearchDAO()V callee: VariableReference: Statement 0, type org.heal.module.search.AdvSearchDAOindex is: 0
Matched Method is: AdvSearch(Lorg/heal/module/search/ParameterBean;)Lorg/heal/module/search/SearchResultBean;
TestCase is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);

* test suite isTestSuite: 68
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource(baseXADataSource);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ");
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%k:{NM@$Q<+Iy<|q4@%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%k:{NM@$Q<+Iy<|q4@%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "k:{NM@$Q<+Iy<|q4@", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%k:{NM@$Q<+Iy<|q4@%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%k:{NM@$Q<+Iy<|q4@%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "k:{NM@$Q<+Iy<|q4@", " NOT IN (SELECT ");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", (String) null, "\"");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", (String) null, "\"");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all ", (String) null);
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
parameterBean.makeParameterBean("SELECT al .metadataID from al  WHERE A IN (Select A from al  WHERE h<1m@|TI2)u_A like 'SWdgU\"HzT|_Q!/6bH%' OR h<1m@|TI2)u_A like '% SWdgU\"HzT|_Q!/6bH%' )");
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("Data type not supported: {0}", "Data type not supported: {0}", "Data type not supported: {0}", "`~lEW", "Z[");
Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 22: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 23: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "OR ";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT ");
advSearchDAO.makeQuery(parameterBean);
Test 24: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT ");
advSearchDAO.makeQuery(parameterBean);
Test 25: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterNode parameterNode = new ParameterNode("System Exception: {0}.", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )");
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
parameterBean.addParameters(parameterNode);
String[] stringArray = new String[6];
stringArray[0] = "System Exception: {0}.";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 26: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("Transliteration class {0} not found.");
Test 27: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT 3g1txX\"9(}~.metadataID from 3g1txX\"9(}~ WHERE  IN (Select  from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' )");
Test 28: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "Taxons", "+mt}sLIv7");
Test 29: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB");
Test 30: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
advSearchDAO.getMultiSelection(stringArray, "Taxons");
Test 31: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");
Test 32: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "e|za/XL=Vf~/");
Test 33: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 34: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource((DataSource) null);

Test 35: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later.");

Test 36: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");

Test 37: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives((String) null);

Test 38: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "car";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", " NOT IN (SELECT ");

Test 39: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", "\"", (String) null);

Test 40: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "\"", (String) null);

Test 41: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all", (String) null);

Test 42: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
((ParameterBean)"SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ").setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 43: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");

Test 44: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 45: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden((boolean) "1");
advSearchDAO.makeQuery(parameterBean);

Test 46: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
((ParameterBean)"all ").setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 47: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[1];
((ParameterBean)"all").setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 48: 
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);

Test 49: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);

Test 50: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 51: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
((ParameterBean)"all ").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 52: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 53: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
String[] stringArray = new String[1];
((ParameterBean)"SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )").setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 54: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
((ParameterBean)"SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )").setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 55: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[3];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 56: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 57: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "OR ";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT id FROM mytable WHERE name LIKE '%John%')");
advSearchDAO.makeQuery(parameterBean);

Test 58: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT ");
advSearchDAO.makeQuery(parameterBean);

Test 59: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )";
ParameterNode parameterNode = new ParameterNode("System Exception: {0}.", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )");
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
((ParameterBean)"SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )").addParameters(parameterNode);
String[] stringArray = new String[6];
((ParameterBean) string).setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 60: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("Transliteration class 'ABC' not found.");

Test 61: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT * from users WHERE name like 'John Doe' OR age like '%35%'");

Test 62: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 63: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB");

Test 64: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "Species", (String) null);

Test 65: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("OR");
advSearchDAO.addDefaultConnectives("OR");

Test 66: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "/e|za/XL=Vf~/", (String) null);

Test 67: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);


* Generated after the refinement and before minimization 68 tests with total length 283
* test suite isTestSuite: 68
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
BaseXADataSource baseXADataSource = new BaseXADataSource();
advSearchDAO.setDataSource(baseXADataSource);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ");
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%k:{NM@$Q<+Iy<|q4@%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%k:{NM@$Q<+Iy<|q4@%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "k:{NM@$Q<+Iy<|q4@", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%k:{NM@$Q<+Iy<|q4@%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%k:{NM@$Q<+Iy<|q4@%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "k:{NM@$Q<+Iy<|q4@", " NOT IN (SELECT ");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", (String) null, "\"");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", (String) null, "\"");
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all ", (String) null);
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
parameterBean.makeParameterBean("SELECT al .metadataID from al  WHERE A IN (Select A from al  WHERE h<1m@|TI2)u_A like 'SWdgU\"HzT|_Q!/6bH%' OR h<1m@|TI2)u_A like '% SWdgU\"HzT|_Q!/6bH%' )");
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("Data type not supported: {0}", "Data type not supported: {0}", "Data type not supported: {0}", "`~lEW", "Z[");
Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationIds(stringArr** It was a parseable test case! 
refined test name is: testSetLoginTimeoutOnNewBaseDataSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
assertEquals("AND  and Metadata.MetadataID  and NOT  and IN  and (select  and MetadataID  and from  and TargetUserGroups  and where  and (TargetUserGroup  and =  and 'Consumer  and Health/Patient  and Education' or TargetUserGroup  and =  and 'K-12')  and AND  and MetadataID  and NOT  and IN  and (select  and MetadataID  and from  and TargetUserGroups  and where  and TargetUserGroup  and =  and 'Higher  and Education' or TargetUserGroup  and ='Health  and Profession  and Education')) ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectives
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("The COMPUTE BY clause is not supported. You can use the ADVANCED_SEARCH_REQUIRED parameter to set this. Please check the documentation for more information.");
assertEquals("The  and COMPUTE  and BY  and clause  and is not supported.  and You  and can  and use  and the  and ADVANCED_SEARCH_REQUIRED  and parameter  and to  and set  and this.  and Please  and check  and the  and documentation  and for  and more  and information. ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: addDefaultConnectivesWithErrorMessageTest
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("AND  and Metadata.metadataID  and IN  and (SELECT ");
assertEquals("AND and Metadata.metadataID and IN and (SELECT ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectives
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("( z~z&iul!7ZgZj{19a", "p%", "p(RJ");
assertEquals("SELECT p(RJ.metadataID from p(RJ WHERE ( p% like 'z~z&iul!7ZgZj{19a%' OR p% like '% z~z&iul!7ZgZj{19a%' ", buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQueryReturnsNonNullQuery
* Compiling Tests
refined test name is: testBuildCommonQueryWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String arg0 = advSearchDAO.buildCommonQuery("SELECT `[e>.metadataID from `[e> WHERE \" like '`[e>%' OR \" like '% `[e>%' ", "\"", "`[e>");
String buildMutiQuery = advSearchDAO.buildMutiQuery(arg0, "`[e>", "x$_C", "<TW8drV;*E-p", "x$_C");
assertFalse(buildMutiQuery.equals((Object)arg0));


** It was a parseable test case! 
refined test name is: testBuildCommonQueryAndMutiQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE `[e> like 'm&e}sk1x7mx.XPD}%' OR `[e> like '% m&e}sk1x7mx.XPD}%' ", "m&e}sk1x7mx.XPD}", "}%cSJE_");
assertEquals("SELECT }%cSJE_.metadataID from }%cSJE_ WHERE m&e}sk1x7mx.XPD} like 'SELECT%' OR m&e}sk1x7mx.XPD} like '% SELECT%'  AND Metadata.metadataID IN (SELECT }%cSJE_.MetadataID from }%cSJE_ where m&e}sk1x7mx.XPD} like '\".metadataID%' OR m&e}sk1x7mx.XPD} like '% \".metadataID%' ) AND Metadata.metadataID IN (SELECT }%cSJE_.MetadataID from }%cSJE_ where m&e}sk1x7mx.XPD} like 'from%' OR m&e}sk1x7mx.XPD} like '% from%' ) AND Metadata.metadataID IN (SELECT }%cSJE_.MetadataID from }%cSJE_ where m&e}sk1x7mx.XPD} like '% and WHERE and `[e> and like and 'm&e}sk1x7mx.XPD}%' and OR and `[e> and like and '% and %' OR m&e}sk1x7mx.XPD} like '% and WHERE and `[e> and like and 'm&e}sk1x7mx.XPD}%' and OR and `[e> and like and '% and%' OR m&e}sk1x7mx.XPD} like '%and WHERE and `[e> and like and 'm&e}sk1x7mx.XPD}%' and OR and `[e> and like and '% and %')", buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery(")", "all", ")");
assertEquals("SELECT ).metadataID from ) WHERE ) ", buildCommonQuery);


** It was a parseable test case! 
* Computation finished
dDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");

Test 37: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives((String) null);

Test 38: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "car";
parameterBean.setPrimaryArray(stringArray);
parameterBean.setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", " NOT IN (SELECT ");

Test 39: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", "\"", (String) null);

Test 40: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "\"", (String) null);

Test 41: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all", (String) null);

Test 42: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
((ParameterBean)"SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ").setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 43: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");

Test 44: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 45: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden((boolean) "1");
advSearchDAO.makeQuery(parameterBean);

Test 46: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
((ParameterBean)"all ").setFilterArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 47: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all");
String[] stringArray = new String[1];
((ParameterBean)"all").setImaging(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 48: 
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);

Test 49: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SWdgU\"HzT|_Q!/6bH";
ParameterBean parameterBean = new ParameterBean(string);
String[] stringArray = new String[6];
((ParameterBean) string).setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);
advSearchDAO.makeQuery(parameterBean);

Test 50: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setDisease(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 51: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
((ParameterBean)"all ").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 52: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setSourceCollection(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 53: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
String[] stringArray = new String[1];
((ParameterBean)"SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )").setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 54: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
((ParameterBean)"SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )").setPublicationNames(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 55: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[3];
((ParameterBean)"SWdgU\"HzT|_Q!/6bH").setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 56: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 57: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "OR ";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT id FROM mytable WHERE name LIKE '%John%')");
advSearchDAO.makeQuery(parameterBean);

Test 58: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT ");
advSearchDAO.makeQuery(parameterBean);

Test 59: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String string = "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )";
ParameterNode parameterNode = new ParameterNode("System Exception: {0}.", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )");
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
((ParameterBean)"SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )").addParameters(parameterNode);
String[] stringArray = new String[6];
((ParameterBean) string).setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);

Test 60: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("Transliteration class 'ABC' not found.");

Test 61: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT * from users WHERE name like 'John Doe' OR age like '%35%'");

Test 62: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();

Test 63: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB");

Test 64: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "Species", (String) null);

Test 65: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("OR");
advSearchDAO.addDefaultConnectives("OR");

Test 66: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.getMultiSelection((String[]) "/e|za/XL=Vf~/", (String) null);

Test 67: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
advSearchDAO.AdvSearch(parameterBean);


* Minimizing test suite
* test suite isTestSuite: 35
Test 0: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);
Test 1: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("Transliteration class 'ABC' not found.");
Test 2: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB");
Test 3: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ");
Test 4: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", " NOT IN (SELECT ");
Test 5: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later.");
Test 6: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", "\"", (String) null);
Test 7: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("SELECT \".metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "\"", (String) null);
Test 8: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("(", "all", (String) null);
Test 9: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildCommonQuery("or", "Taxons", "+mt}sLIv7");
Test 10: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
String[] stringArray = new String[1];
parameterBean.makeParameterBean("SELECT al .metadataID from al  WHERE A IN (Select A from al  WHERE h<1m@|TI2)u_A like 'SWdgU\"HzT|_Q!/6bH%' OR h<1m@|TI2)u_A like '% SWdgU\"HzT|_Q!/6bH%' )");
stringArray[0] = "all";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 11: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
// Undeclared exception!
try { 
  advSearchDAO.buildMutiQuery("\"", "SELECT \"metadataID from \" WHERE $Revision:   1.11.1.1  $ like 'tR0%' OR $Revision:   1.11.1.1  $ like '% tR0%' ", "$Revision:   1.11.1.1  $", "~", "SELECT @+EjPI.metadataID from @+EjPI WHERE ID like 'A%' OR ID like '% A%' ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 12: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.buildMutiQuery("Data type not supported: {0}", "Data type not supported: {0}", "Data type not supported: {0}", "`~lEW", "Z[");
Test 13: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
parameterBean.setHidden(true);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 14: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 15: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "car";
parameterBean.setFilterArray(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 16: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 17: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
stringArray[0] = "SELECT .metadataID from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' ";
parameterBean.setImaging(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 18: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[6];
stringArray[0] = "all";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 19: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setDisease(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 20: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("all ");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 21: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[1];
stringArray[0] = "all ";
parameterBean.setSourceCollection(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 22: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT smallint identity.metadataID from smallint identity WHERE ix}M9`=/X-.K IN (Select ix}M9`=/X-.K from  WHERE mB<>FfuN3&41 like 'mB<>FfuN3&41%' OR mB<>FfuN3&41 like '% mB<>FfuN3&41%' )");
String[] stringArray = new String[4];
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 23: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all IN (Select all from all WHERE all like 'all%' OR all like '% all%' )");
String[] stringArray = new String[1];
stringArray[0] = "all";
parameterBean.setPublicationNames(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 24: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[2];
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 25: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean("SWdgU\"HzT|_Q!/6bH");
String[] stringArray = new String[3];
stringArray[0] = "all";
parameterBean.setPublicationIds(stringArray);
// Undeclared exception!
try { 
  advSearchDAO.makeQuery(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}

Test 26: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
stringArray[0] = "OR ";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT id FROM mytable WHERE name LIKE '%John%')");
advSearchDAO.makeQuery(parameterBean);
Test 27: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
String[] stringArray = new String[3];
parameterBean.makeParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
stringArray[0] = "k:{NM@$Q<+Iy<|q4@";
parameterBean.setPrimaryArray(stringArray);
parameterBean.makeParameterBean(" NOT IN (SELECT ");
advSearchDAO.makeQuery(parameterBean);
Test 28: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterNode parameterNode = new ParameterNode("System Exception: {0}.", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )", "SELECT clobOffset must b posive.metadataID from clobOffset must b posive WHERE clobOffset must b posive like 'clobOffset%' OR clobOffset must b posive like '% clobOffset%'  AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'must%' OR clobOffset must b posive like '% must%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'b%' OR clobOffset must b posive like '% b%' ) AND Metadata.metadataID IN (SELECT clobOffset must b posive.MetadataID from clobOffset must b posive where clobOffset must b posive like 'posive%' OR clobOffset must b posive like '% posive%' )");
ParameterBean parameterBean = new ParameterBean("SELECT all.metadataID from all WHERE all like 'all%' OR all like '% all%' ");
parameterBean.addParameters(parameterNode);
String[] stringArray = new String[6];
stringArray[0] = "System Exception: {0}.";
parameterBean.setPrimaryArray(stringArray);
advSearchDAO.makeQuery(parameterBean);
Test 29: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives(" AND Metadata.MetadataID NOT IN (select MetadataID from TargetUserGroups where (TargetUserGroup = 'Consumer Health/Patient Education' or TargetUserGroup = 'K-12') AND MetadataID NOT IN (select MetadataID from TargetUserGroups where TargetUserGroup = 'Higher Education' or TargetUserGroup ='Health Profession Education'))");
Test 30: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("SELECT 3g1txX\"9(}~.metadataID from 3g1txX\"9(}~ WHERE  IN (Select  from  WHERE  like ' like '8D%' OR  like ' like '% 8D%' )");
Test 31: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[2];
advSearchDAO.getMultiSelection(stringArray, "Taxons");
Test 32: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.addDefaultConnectives("");
Test 33: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String[] stringArray = new String[0];
advSearchDAO.getMultiSelection(stringArray, "e|za/XL=Vf~/");
Test 34: 
AdvSearchDAO advSearchDAO = new AdvSearchDAO();
ParameterBean parameterBean = new ParameterBean();
// Undeclared exception!
try { 
  advSearchDAO.AdvSearch(parameterBean);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.heal.module.search.AdvSearchDAO", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 175
* Number of covered goals: 143
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 266
* Number of covered goals: 201
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 18
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 175
* Number of covered goals: 141
* Generated 35 tests with total length 143
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 55%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
advSearchDAO.setDataSource((DataSource) null);

** It was a parseable test case! 
refined test name is: testNullDataSource
* Compiling Tests
refined test name is: testSetAndGetDataSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("Transliteration class 'ABC' not found.");
assertEquals("Transliteration  and class  and 'ABC' not found. ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectives
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB", "The position specified is past the end of the BLOB or CLOB");
assertNotNull(buildMutiQuery);


** It was a parseable test case! 
refined test name is: testBuildMultiQueryValidInputParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String addDefaultConnectives = advSearchDAO.addDefaultConnectives("clobOffset  and must  and be  and posiive ");
assertEquals("clobOffset and must and be and posiive ", addDefaultConnectives);


** It was a parseable test case! 
refined test name is: testAddDefaultConnectivesValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildMutiQuery = advSearchDAO.buildMutiQuery("select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", "select distinct(Metadata.metadataID) AS ID, Title FROM Metadata WHERE (Metadata.CatalogDate IS NOT NULL AND Metadata.ApproveDate IS NOT NULL AND  Metadata.Private='0') \n AND ( LearningResourceType like '%car%' OR LearningResourceType like '%null%' OR LearningResourceType like '%null%' )\nAND Metadata.MetadataID IN (SELECT TargetUserGroups.MetadataID from TargetUserGroups WHERE TargetUserGroup like '%car%' OR TargetUserGroup like '%null%' OR TargetUserGroup like '%null%' ) \n order by Title", "car", " NOT IN (SELECT ");
assertNotNull(buildMutiQuery);


** It was a parseable test case! 
refined test name is: testBuildMultiQueryReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("Failed to start Finalizer-Thread.  Automatic close of open out-of-scope Statement objects will not be available.", "Error: Unable to connect to database. Please check your connection settings.", "Error: Database query timed out. Please try again later.");
assertNotNull(buildCommonQuery);


** It was a parseable test case! 
refined test name is: testBuildCommonQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AdvSearchDAO advSearchDAO = new AdvSearchDAO();
String buildCommonQuery = advSearchDAO.buildCommonQuery("SELECT $Revision:   1.11.1.1  $.metadataID from $Revision:   1.11.1.1  $ WHERE tR0 IN (Select tR0 from $Revision:   1.11.1.1  $ WHERE \" like 'D>tIwn4mkkjjYo%' OR \" like '% D>tIwn4mkkjjYo%' )", "\"", (String) null);
assertNotNull(buildCommonQuery);


** It was a parseable test case! 
* Computation finished
