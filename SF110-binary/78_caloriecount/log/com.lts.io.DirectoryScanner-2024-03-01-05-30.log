* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.lts.io.DirectoryScanner
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 14334
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 05:30:49.464 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 05:30:49.469 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 05:30:49.470 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 05:30:49.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.lts.io.DirectoryScanner
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 855
* Using seed 1709271047699
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 170 / 855
[Progress:>                             0%] [Cov:==========>                        30%][Progress:>                             0%] [Cov:============>                      36%][Progress:>                             1%] [Cov:=============>                     39%][Progress:>                             1%] [Cov:==============>                    41%][Progress:>                             1%] [Cov:==============>                    41%][Progress:>                             1%] [Cov:================>                  46%][Progress:>                             1%] [Cov:===================>               55%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:=====================>             62%][Progress:>                             2%] [Cov:=======================>           68%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:==========================>        75%][Progress:>                             2%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:=>                            6%] [Cov:=============================>     85%][Progress:==>                           7%] [Cov:=============================>     85%][Progress:==>                           7%] [Cov:=============================>     85%][Progress:==>                           7%] [Cov:=============================>     85%][Progress:==>                           7%] [Cov:==============================>    86%][Progress:==>                           7%] [Cov:==============================>    86%][Progress:==>                           8%] [Cov:==============================>    86%][Progress:==>                           8%] [Cov:==============================>    86%][Progress:==>                           8%] [Cov:==============================>    87%][Progress:==>                           8%] [Cov:==============================>    87%][Progress:==>                           8%] [Cov:==============================>    87%][Progress:==>                           8%] [Cov:==============================>    87%][Progress:==>                           8%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:==>                           9%] [Cov:==============================>    87%][Progress:===>                          10%] [Cov:==============================>    87%][Progress:===>                          10%] [Cov:==============================>    87%][Progress:===>                          10%] [Cov:==============================>    87%][Progress:===>                          10%] [Cov:==============================>    87%][Progress:===>                          10%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          11%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          12%] [Cov:==============================>    87%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      25%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:=======>                      26%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     27%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     28%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:========>                     29%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    30%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   90%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][MASTER] 05:31:54.246 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%]
* Search finished after 102s and 953 generations, 253894 statements, best individual has fitness: 33.0
* Generated before the refinement 52 tests with total length 211
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: getBasedir()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.File
statement code is: File basedir = directoryScanner.getBasedir()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.getBasedir();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\User");
        directoryScanner.getBasedir();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\User"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.getBasedir(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getBasedir() target is: directoryScanner method is: getBasedir()
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("**/CV/**")
statement is: org.evosuite.testcase.statements.ArrayStatement@10caf8cd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8cda4c2b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/CV/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@8bd1fc42 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: directoryScanner.includes = stringArray
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/CV/**", "**/CV/**", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getExcludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] excludedDirectories = directoryScanner.getExcludedDirectories()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
String[] stringArray = new String[1];
stringArray[0] = "**/CV/**";
directoryScanner.includes = stringArray;
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("/home/user/Documents/cv");
        String[] stringArray = new String[1];
        stringArray[0] = "**/*.pdf";
        directoryScanner.includes = stringArray;
        directoryScanner.setBasedir(((File) (mockFile)));
        MockFile.createTempFile("**/*.pdf", "/home/user/Documents/cv", ((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getExcludedDirectories();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("/home/user/Documents/cv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/*.pdf", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.pdf" Ct is: stringArray[0] = "**/*.pdf"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@11c1a540
statement is: directoryScanner.includes = stringArray, class spoon.support.reflect.code.CtAssignmentImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: MockFile.createTempFile("**/*.pdf", "/home/user/Documents/cv", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("**/*.pdf", "/home/user/Documents/cv", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.getExcludedDirectories(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedDirectories() target is: directoryScanner method is: getExcludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getExcludedDirectories()[Ljava/lang/String;
* this is vulnerable: String string = "**/*.pdf"
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "/home/user/Documents/cv";
MockFile mockFile = new MockFile(string);
String[] stringArray = new String[1];
String string = "**/*.pdf";
directoryScanner.setBasedir((File) mockFile);
String string = "**/*.pdf";
String string = "/home/user/Documents/cv";
MockFile.createTempFile(string, string, (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getNotIncludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories()
statement is: getExcludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] excludedDirectories = directoryScanner.getExcludedDirectories()
test data is: MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
directoryScanner.getExcludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\Users\\User\\Documents", "*.txt");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        List<String> notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
        List<String> excludedDirectories = directoryScanner.getExcludedDirectories();
    }
}
statement is: MockFile mockFile = new MockFile("C:\\Users\\User\\Documents", "*.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
statement is: List<String> notIncludedDirectories = directoryScanner.getNotIncludedDirectories(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getNotIncludedDirectories() target is: directoryScanner method is: getNotIncludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: getNotIncludedDirectories()[Ljava/lang/String;
statement is: List<String> excludedDirectories = directoryScanner.getExcludedDirectories(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedDirectories() target is: directoryScanner method is: getExcludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: getExcludedDirectories()[Ljava/lang/String;
TestCase is: String string = "C:\\Users\\User\\Documents";
String string = "*.txt";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();
((DirectoryScanner) string).getExcludedDirectories();

statement is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("*", "**/CS")
test data is: DirectoryScanner.matchPatternStart("*", "**/CS");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPatternStart("[A-Z]", "**/CS");
    }
}
statement is: DirectoryScanner.matchPatternStart("[A-Z]", "**/CS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPatternStart("[A-Z]", "**/CS") target is: DirectoryScanner method is: matchPatternStart(java.lang.String,java.lang.String)
Matched Method is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "[A-Z]";
String string = "**/CS";
DirectoryScanner.matchPatternStart(string, string);

statement is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110")
test data is: DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset");
    }
}
statement is: DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset") target is: DirectoryScanner method is: matchPatternStart(java.lang.String,java.lang.String)
Matched Method is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount";
String string = "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset";
DirectoryScanner.matchPatternStart(string, string);

statement is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("/l", "/ bDP")
test data is: DirectoryScanner.matchPatternStart("/l", "/ bDP");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPatternStart("/l", "/*.txt");
    }
}
statement is: DirectoryScanner.matchPatternStart("/l", "/*.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPatternStart("/l", "/*.txt") target is: DirectoryScanner method is: matchPatternStart(java.lang.String,java.lang.String)
Matched Method is: matchPatternStart(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/l";
String string = "/*.txt";
DirectoryScanner.matchPatternStart(string, string);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("*%S/", "*%S/")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@f1a1ab75 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1caeb116 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "*%S/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d07d30c4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "*%S/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@5930a2c6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "*%S/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@ac5a32f7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "*%S/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3da9dbd4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "*%S/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6b3b9224 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "*%S/"
statement is: setExcludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setExcludes(arg0)
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("*%S/", "*%S/", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
test data is: MockFile mockFile = new MockFile("*%S/", "*%S/");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
String[] stringArray = new String[6];
stringArray[0] = "*%S/";
stringArray[1] = "*%S/";
stringArray[2] = "*%S/";
stringArray[3] = "*%S/";
stringArray[4] = "*%S/";
stringArray[5] = "*%S/";
directoryScanner.setExcludes(stringArray);
MockFile.createTempFile("*%S/", "*%S/", (File) mockFile);
directoryScanner.scan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("src/main/resources", "");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        String[] stringArray = new String[6];
        stringArray[0] = "**/*.xml";
        stringArray[1] = "**/*.csv";
        stringArray[2] = "**/*.txt";
        stringArray[3] = "**/*.json";
        stringArray[4] = "**/*.properties";
        stringArray[5] = "**/*.ini";
        directoryScanner.setExcludes(stringArray);
        MockFile.createTempFile("src/main/resources", "test.xml", ((File) (mockFile)));
        directoryScanner.scan();
    }
}
statement is: MockFile mockFile = new MockFile("src/main/resources", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/*.xml", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.xml" Ct is: stringArray[0] = "**/*.xml"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6dc79954
statement is: stringArray[1] = "**/*.csv", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.csv" Ct is: stringArray[1] = "**/*.csv"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3dc6c320
statement is: stringArray[2] = "**/*.txt", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.txt" Ct is: stringArray[2] = "**/*.txt"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9721602e
statement is: stringArray[3] = "**/*.json", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.json" Ct is: stringArray[3] = "**/*.json"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@57bac3b8
statement is: stringArray[4] = "**/*.properties", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.properties" Ct is: stringArray[4] = "**/*.properties"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a7936ea6
statement is: stringArray[5] = "**/*.ini", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.ini" Ct is: stringArray[5] = "**/*.ini"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e16ffdf9
statement is: directoryScanner.setExcludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setExcludes(stringArray) target is: directoryScanner method is: setExcludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setExcludes([Ljava/lang/String;)V
statement is: MockFile.createTempFile("src/main/resources", "test.xml", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("src/main/resources", "test.xml", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
* this is vulnerable: String string = "**/*.xml"
* this is vulnerable: String string = "**/*.csv"
* this is vulnerable: String string = "**/*.txt"
* this is vulnerable: String string = "**/*.json"
* this is vulnerable: String string = "**/*.properties"
* this is vulnerable: String string = "**/*.ini"
TestCase is: String string = "src/main/resources";
String string = "";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
String[] stringArray = new String[6];
String string = "**/*.xml";
String string = "**/*.csv";
String string = "**/*.txt";
String string = "**/*.json";
String string = "**/*.properties";
String string = "**/*.ini";
((DirectoryScanner) string).setExcludes(stringArray);
String string = "src/main/resources";
String string = "test.xml";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("/qBVL(w-mc6yBq$Sy:", "/4 *F}~US>*F-}~US>0")
test data is: DirectoryScanner.matchPath("/qBVL(w-mc6yBq$Sy:", "/4 *F}~US>*F-}~US>0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("C:\\Users\\John Doe\\Desktop\\test.txt", "C:\\Users\\Jane Doe\\Documents\\test2.txt");
    }
}
statement is: DirectoryScanner.matchPath("C:\\Users\\John Doe\\Desktop\\test.txt", "C:\\Users\\Jane Doe\\Documents\\test2.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("C:\\Users\\John Doe\\Desktop\\test.txt", "C:\\Users\\Jane Doe\\Documents\\test2.txt") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "C:\\Users\\John Doe\\Desktop\\test.txt";
String string = "C:\\Users\\Jane Doe\\Documents\\test2.txt";
DirectoryScanner.matchPath(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("*/1S/", "*~")
test data is: DirectoryScanner.matchPath("*/1S/", "*~");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("C:/Users/John Doe/Documents/1S", "1S~");
    }
}
statement is: DirectoryScanner.matchPath("C:/Users/John Doe/Documents/1S", "1S~"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("C:/Users/John Doe/Documents/1S", "1S~") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "C:/Users/John Doe/Documents/1S";
String string = "1S~";
DirectoryScanner.matchPath(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("/", "/**/.cvsignore")
test data is: DirectoryScanner.matchPath("/", "/**/.cvsignore");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("/home/user/projects/myproject", "**/*.java");
    }
}
statement is: DirectoryScanner.matchPath("/home/user/projects/myproject", "**/*.java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("/home/user/projects/myproject", "**/*.java") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/home/user/projects/myproject";
String string = "**/*.java";
DirectoryScanner.matchPath(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S")
test data is: DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("**/path/to/specific/files/*", "file*name*.txt");
    }
}
statement is: DirectoryScanner.matchPath("**/path/to/specific/files/*", "file*name*.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("**/path/to/specific/files/*", "file*name*.txt") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/path/to/specific/files/*";
String string = "file*name*.txt";
DirectoryScanner.matchPath(string, string);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: addDefaultExcludes()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.addDefaultExcludes()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getNotIncludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories()
test data is: MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\temp", "MyTest");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.addDefaultExcludes();
        MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getNotIncludedDirectories();
    }
}
statement is: MockFile mockFile = new MockFile("C:\\temp", "MyTest"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.addDefaultExcludes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.addDefaultExcludes() target is: directoryScanner method is: addDefaultExcludes()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: addDefaultExcludes()V
statement is: MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
statement is: directoryScanner.getNotIncludedDirectories(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getNotIncludedDirectories() target is: directoryScanner method is: getNotIncludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: getNotIncludedDirectories()[Ljava/lang/String;
TestCase is: String string = "C:\\temp";
String string = "MyTest";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("**//*", "*")
test data is: DirectoryScanner.matchPath("**//*", "*");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("**/*", "*.java");
    }
}
statement is: DirectoryScanner.matchPath("**/*", "*.java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("**/*", "*.java") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/*";
String string = "*.java";
DirectoryScanner.matchPath(string, string);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("**/sdV/**/")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@d992c9c5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@60b47bf6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/sdV/**/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d3568e27 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "**/sdV/**/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d3845a74 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "**/sdV/**/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@28191c7a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "**/sdV/**/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c53c343 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "**/sdV/**/"
statement is: org.evosuite.testcase.statements.AssignmentStatement@975807f3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "**/sdV/**/"
statement is: setIncludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setIncludes(arg0)
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
test data is: MockFile mockFile = new MockFile("**/sdV/**/");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
stringArray[0] = "**/sdV/**/";
stringArray[1] = "**/sdV/**/";
stringArray[2] = "**/sdV/**/";
stringArray[3] = "**/sdV/**/";
stringArray[4] = "**/sdV/**/";
stringArray[5] = "**/sdV/**/";
directoryScanner.setIncludes(stringArray);
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) mockFile);
directoryScanner.scan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        MockFile mockFile = new MockFile("src/test/resources");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[6];
        stringArray[0] = "**/*.java";
        stringArray[1] = "**/*.xml";
        stringArray[2] = "**/*.properties";
        stringArray[3] = "**/*.html";
        stringArray[4] = "**/*.css";
        stringArray[5] = "**/*.js";
        directoryScanner.setIncludes(stringArray);
        directoryScanner.setBasedir(((File) (mockFile)));
        MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", ((File) (mockFile)));
        directoryScanner.scan();
    }
}
statement is: // Improved test data
MockFile mockFile = new MockFile("src/test/resources"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/*.java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.java" Ct is: stringArray[0] = "**/*.java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ce371cf8
statement is: stringArray[1] = "**/*.xml", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.xml" Ct is: stringArray[1] = "**/*.xml"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a77eec32
statement is: stringArray[2] = "**/*.properties", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.properties" Ct is: stringArray[2] = "**/*.properties"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ce5dfb7
statement is: stringArray[3] = "**/*.html", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.html" Ct is: stringArray[3] = "**/*.html"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2d84360e
statement is: stringArray[4] = "**/*.css", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.css" Ct is: stringArray[4] = "**/*.css"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@39c86271
statement is: stringArray[5] = "**/*.js", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.js" Ct is: stringArray[5] = "**/*.js"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a05b308a
statement is: directoryScanner.setIncludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setIncludes(stringArray) target is: directoryScanner method is: setIncludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 2
Matched Method is: setIncludes([Ljava/lang/String;)V
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 2
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 2
Matched Method is: scan()V
* this is vulnerable: String string = "**/*.java"
* this is vulnerable: String string = "**/*.xml"
* this is vulnerable: String string = "**/*.properties"
* this is vulnerable: String string = "**/*.html"
* this is vulnerable: String string = "**/*.css"
* this is vulnerable: String string = "**/*.js"
TestCase is: String string = "src/test/resources";
MockFile mockFile = new MockFile(string);
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
String string = "**/*.java";
String string = "**/*.xml";
String string = "**/*.properties";
String string = "**/*.html";
String string = "**/*.css";
String string = "**/*.js";
((DirectoryScanner) mockFile).setIncludes(stringArray);
((DirectoryScanner) mockFile).setBasedir((File) mockFile);
String string = "**/sdV/**/";
String string = "**/sdV/**/";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) mockFile).scan();

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?")
test data is: DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("L&pw#DCX!", "L&pw#DCX!");
    }
}
statement is: DirectoryScanner.matchPath("L&pw#DCX!", "L&pw#DCX!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("L&pw#DCX!", "L&pw#DCX!") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "L&pw#DCX!";
String string = "L&pw#DCX!";
DirectoryScanner.matchPath(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("/* *F-}~US>", "")
test data is: DirectoryScanner.match("/* *F-}~US>", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.match("/* *F-*~US>", "");
    }
}
statement is: DirectoryScanner.match("/* *F-*~US>", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("/* *F-*~US>", "") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/* *F-*~US>";
String string = "";
DirectoryScanner.match(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh")
test data is: DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");
    }
}
statement is: DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "^j?i*lg!g\u0007nCh";
String string = "^j?i*lg!g\u0007nCh";
DirectoryScanner.matchPath(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("**", "")
test data is: DirectoryScanner.match("**", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        DirectoryScanner.match("**/*.java", "*.txt");
        DirectoryScanner.match("**/*.py", "*.sh");
    }
}
statement is: // Improved test data:
DirectoryScanner.match("**/*.java", "*.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
DirectoryScanner.match("**/*.java", "*.txt") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
statement is: DirectoryScanner.match("**/*.py", "*.sh"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("**/*.py", "*.sh") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/*.java";
String string = "*.txt";
DirectoryScanner.match(string, string);
String string = "**/*.py";
String string = "*.sh";
DirectoryScanner.match(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("**/CVS", "S")
test data is: DirectoryScanner.match("**/CVS", "S");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.match("**/*", "S");
    }
}
statement is: DirectoryScanner.match("**/*", "S"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("**/*", "S") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/*";
String string = "S";
DirectoryScanner.match(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6")
test data is: DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        DirectoryScanner.matchPath("/path/to/file1", "/path/to/file2");
        DirectoryScanner.matchPath("C:\\path\\to\\file3", "C:\\path\\to\\file4");
        DirectoryScanner.matchPath("/home/user/Documents/file5", "/home/user/Documents/file6");
    }
}
statement is: // Improved test data
DirectoryScanner.matchPath("/path/to/file1", "/path/to/file2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
DirectoryScanner.matchPath("/path/to/file1", "/path/to/file2") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
statement is: DirectoryScanner.matchPath("C:\\path\\to\\file3", "C:\\path\\to\\file4"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("C:\\path\\to\\file3", "C:\\path\\to\\file4") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
statement is: DirectoryScanner.matchPath("/home/user/Documents/file5", "/home/user/Documents/file6"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("/home/user/Documents/file5", "/home/user/Documents/file6") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/path/to/file1";
String string = "/path/to/file2";
DirectoryScanner.matchPath(string, string);
String string = "C:\\path\\to\\file3";
String string = "C:\\path\\to\\file4";
DirectoryScanner.matchPath(string, string);
String string = "/home/user/Documents/file5";
String string = "/home/user/Documents/file6";
DirectoryScanner.matchPath(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("**S", "S")
test data is: DirectoryScanner.match("**S", "S");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.match("**/S", "S");
    }
}
statement is: DirectoryScanner.match("**/S", "S"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("**/S", "S") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/S";
String string = "S";
DirectoryScanner.match(string, string);

statement is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean matchPath = DirectoryScanner.matchPath("/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*", "/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*")
test data is: DirectoryScanner.matchPath("/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*", "/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/");
    }
}
statement is: DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/") target is: DirectoryScanner method is: matchPath(java.lang.String,java.lang.String)
Matched Method is: matchPath(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/";
String string = "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/";
DirectoryScanner.matchPath(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("**/CVS/**", "S")
test data is: DirectoryScanner.match("**/CVS/**", "S");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.match("**/CVS/**", "**/*.java");
    }
}
statement is: DirectoryScanner.match("**/CVS/**", "**/*.java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("**/CVS/**", "**/*.java") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/CVS/**";
String string = "**/*.java";
DirectoryScanner.match(string, string);

statement is: match(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean match = DirectoryScanner.match("**/dV?**/", "**/dV?**/")
test data is: DirectoryScanner.match("**/dV?**/", "**/dV?**/");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner.match("**/*.txt", "**/*.pdf");
    }
}
statement is: DirectoryScanner.match("**/*.txt", "**/*.pdf"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: DirectoryScanner.match("**/*.txt", "**/*.pdf") target is: DirectoryScanner method is: match(java.lang.String,java.lang.String)
Matched Method is: match(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: String string = "**/*.txt";
String string = "**/*.pdf";
DirectoryScanner.match(string, string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setIncludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setIncludes((String[]) null)
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setIncludes(new String[]{ "*\\.txt", "*.html" });
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setIncludes(new String[]{ "*\\.txt", "*.html" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setIncludes(new String[]{ "*\\.txt", "*.html" }) target is: directoryScanner method is: setIncludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setIncludes([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = null;
directoryScanner.setIncludes(stringArray);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setExcludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setExcludes((String[]) null)
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setExcludes(new String[]{ "**/*.txt", "**/*.html" });
    }
}
statement is: // Improved test data:
DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setExcludes(new String[]{ "**/*.txt", "**/*.html" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setExcludes(new String[]{ "**/*.txt", "**/*.html" }) target is: directoryScanner method is: setExcludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setExcludes([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = null;
directoryScanner.setExcludes(stringArray);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.scan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\John Doe\\Pictures");
        directoryScanner.scan();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\John Doe\\Pictures"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir("**")
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("**");
directoryScanner.scan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir("C:\\Users\\user\\Documents");
        directoryScanner.setFilter(new FileNameExtensionFilter("txt", "log"));
        directoryScanner.scan();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir("C:\\Users\\user\\Documents"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir("C:\\Users\\user\\Documents") target is: directoryScanner method is: setBasedir(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/lang/String;)V
statement is: directoryScanner.setFilter(new FileNameExtensionFilter("txt", "log")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setFilter(new FileNameExtensionFilter("txt", "log")) target is: directoryScanner method is: setFilter(FileNameExtensionFilter)
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
directoryScanner.setBasedir(string);
directoryScanner.scan();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null)
statement is: org.evosuite.testcase.statements.AssignmentStatement@5b3fc529 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.File
statement code is: directoryScanner.basedir = (File) mockFile
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null);
directoryScanner.basedir = (File) createTempFile;
directoryScanner.scan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private static final File TEMP_DIR = new File("/tmp");
        private static final String FILENAME = "test.txt";
    }
}
statement is: private static final File TEMP_DIR = new File("/tmp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: private static final String FILENAME = "test.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "test.txt"
TestCase is: String string = "test.txt";

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("//**", "**/#*#")
statement is: scandir(Ljava/io/File;Ljava/lang/String;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scandir(arg0, "/8lH?0", true)
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
directoryScanner.scandir(mockFile, "/8lH?0", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("//**", "**/#*#");
        directoryScanner.scandir(mockFile, "/home/user/Documents", true);
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("//**", "**/#*#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.scandir(mockFile, "/home/user/Documents", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scandir(mockFile, "/home/user/Documents", true) target is: directoryScanner method is: scandir(MockFile,java.lang.String,boolean)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scandir(Ljava/io/File;Ljava/lang/String;Z)V
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "//**";
String string = "**/#*#";
MockFile mockFile = new MockFile(string, string);
String string = "/home/user/Documents";
boolean _boolean = true;
directoryScanner.scandir(mockFile, string, _boolean);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: scandir(Ljava/io/File;Ljava/lang/String;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scandir(arg0, "**/.cvsignore", false)
test data is: MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.scandir(mockFile, "**/.cvsignore", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\myproject\\src", "");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.scandir(mockFile, "**/.cvsignore", false);
    }
}
statement is: MockFile mockFile = new MockFile("C:\\myproject\\src", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
statement is: directoryScanner.scandir(mockFile, "**/.cvsignore", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scandir(mockFile, "**/.cvsignore", false) target is: directoryScanner method is: scandir(MockFile,java.lang.String,boolean)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scandir(Ljava/io/File;Ljava/lang/String;Z)V
TestCase is: String string = "C:\\myproject\\src";
String string = "";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
String string = "**/.cvsignore";
boolean _boolean = false;
((DirectoryScanner) string).scandir(mockFile, string, _boolean);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("Wi{^=", "Wi{^=")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("Wi{^=", "Wi{^=", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getNotIncludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] notIncludedFiles = directoryScanner.getNotIncludedFiles()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("Wi{^=", "Wi{^=");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("Wi{^=", "Wi{^=", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\John Doe", "C:\\Users\\John Doe");
        directoryScanner.setBasedir(((File) (mockFile)));
        MockFile.createTempFile("foo.txt", "bar.txt", ((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getNotIncludedFiles();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\John Doe", "C:\\Users\\John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: MockFile.createTempFile("foo.txt", "bar.txt", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("foo.txt", "bar.txt", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.getNotIncludedFiles(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getNotIncludedFiles() target is: directoryScanner method is: getNotIncludedFiles()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getNotIncludedFiles()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\John Doe";
String string = "C:\\Users\\John Doe";
MockFile mockFile = new MockFile(string, string);
directoryScanner.setBasedir((File) mockFile);
String string = "foo.txt";
String string = "bar.txt";
MockFile.createTempFile(string, string, (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getIncludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] includedFiles = directoryScanner.getIncludedFiles()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        List<String> includedFiles = directoryScanner.getIncludedFiles();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: List<String> includedFiles = directoryScanner.getIncludedFiles(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getIncludedFiles() target is: directoryScanner method is: getIncludedFiles()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getIncludedFiles()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\John Doe\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("* *F-}~US>", "", (File) arg2)
statement is: scandir(Ljava/io/File;Ljava/lang/String;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scandir(arg0, "* *F-}~US>", true)
statement is: getIncludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] includedFiles = directoryScanner.getIncludedFiles()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "* *F-}~US>", true);
directoryScanner.getIncludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("test_file");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        MockFile.createTempFile("tmp_", ".txt", ((File) (mockFile)));
        directoryScanner.scandir(mockFile, "*.txt", true);
        List<String> includedFiles = directoryScanner.getDirectoryContents();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("test_file"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: MockFile.createTempFile("tmp_", ".txt", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("tmp_", ".txt", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scandir(mockFile, "*.txt", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scandir(mockFile, "*.txt", true) target is: directoryScanner method is: scandir(MockFile,java.lang.String,boolean)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scandir(Ljava/io/File;Ljava/lang/String;Z)V
statement is: List<String> includedFiles = directoryScanner.getDirectoryContents(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getDirectoryContents() target is: directoryScanner method is: getDirectoryContents()
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "test_file";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "tmp_";
String string = ".txt";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "*.txt";
boolean _boolean = true;
directoryScanner.scandir(mockFile, string, _boolean);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getNotIncludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] notIncludedFiles = directoryScanner.getNotIncludedFiles()
test data is: MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\Temp\\", "ExampleDirectory");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        List<String> includedFiles = directoryScanner.getIncludedFiles();
        List<String> excludedFiles = directoryScanner.getExcludedFiles();
    }
}
statement is: MockFile mockFile = new MockFile("C:\\Temp\\", "ExampleDirectory"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
statement is: List<String> includedFiles = directoryScanner.getIncludedFiles(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getIncludedFiles() target is: directoryScanner method is: getIncludedFiles()
statement is: List<String> excludedFiles = directoryScanner.getExcludedFiles(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedFiles() target is: directoryScanner method is: getExcludedFiles()
TestCase is: String string = "C:\\Temp\\";
String string = "ExampleDirectory";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
((DirectoryScanner) string).scan();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getExcludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] excludedFiles = directoryScanner.getExcludedFiles()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getExcludedFiles();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.getExcludedFiles(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedFiles() target is: directoryScanner method is: getExcludedFiles()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getExcludedFiles()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\John Doe\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: addDefaultExcludes()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.addDefaultExcludes()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("* *F-}~US>", "", (File) arg2)
statement is: scandir(Ljava/io/File;Ljava/lang/String;Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scandir(arg0, "**/CVS/**", false)
statement is: getExcludedFiles()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] excludedFiles = directoryScanner.getExcludedFiles()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "**/CVS/**", false);
directoryScanner.getExcludedFiles();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\testuser\\Documents");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.addDefaultExcludes();
        MockFile.createTempFile("my_file_123.txt", "", ((File) (mockFile)));
        directoryScanner.scandir(mockFile, "**/CVS/**", false);
        directoryScanner.getExcludedFiles();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\testuser\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.addDefaultExcludes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.addDefaultExcludes() target is: directoryScanner method is: addDefaultExcludes()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: addDefaultExcludes()V
statement is: MockFile.createTempFile("my_file_123.txt", "", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("my_file_123.txt", "", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scandir(mockFile, "**/CVS/**", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scandir(mockFile, "**/CVS/**", false) target is: directoryScanner method is: scandir(MockFile,java.lang.String,boolean)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scandir(Ljava/io/File;Ljava/lang/String;Z)V
statement is: directoryScanner.getExcludedFiles(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedFiles() target is: directoryScanner method is: getExcludedFiles()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getExcludedFiles()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\testuser\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
String string = "my_file_123.txt";
String string = "";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "**/CVS/**";
boolean _boolean = false;
directoryScanner.scandir(mockFile, string, _boolean);
directoryScanner.getExcludedFiles();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("**/CV/**")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/CV/**", "**/CV/**", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getIncludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] includedDirectories = directoryScanner.getIncludedDirectories()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("**/CV/**");
        directoryScanner.setBasedir(((File) (mockFile)));
        MockFile.createTempFile("**/CV/**", "**/CV/**", ((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getIncludedDirectories();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("**/CV/**"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: MockFile.createTempFile("**/CV/**", "**/CV/**", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("**/CV/**", "**/CV/**", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.getIncludedDirectories(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getIncludedDirectories() target is: directoryScanner method is: getIncludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getIncludedDirectories()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "**/CV/**";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
String string = "**/CV/**";
String string = "**/CV/**";
MockFile.createTempFile(string, string, (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: addDefaultExcludes()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.addDefaultExcludes()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) arg2)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getExcludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] excludedDirectories = directoryScanner.getExcludedDirectories()
test data is: MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\temp", "TestDirectory");
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.addDefaultExcludes();
        MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.getExcludedDirectories();
    }
}
statement is: MockFile mockFile = new MockFile("C:\\temp", "TestDirectory"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.addDefaultExcludes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.addDefaultExcludes() target is: directoryScanner method is: addDefaultExcludes()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: addDefaultExcludes()V
statement is: MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", ((File) (mockFile))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: scan()V
statement is: directoryScanner.getExcludedDirectories(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getExcludedDirectories() target is: directoryScanner method is: getExcludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 1, type com.lts.io.DirectoryScannerindex is: 3
Matched Method is: getExcludedDirectories()[Ljava/lang/String;
TestCase is: String string = "C:\\temp";
String string = "TestDirectory";
MockFile mockFile = new MockFile(string, string);
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner) string).setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getExcludedDirectories();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@61577e86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a018111c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/Gcvsi!gnorHe"
statement is: org.evosuite.testcase.statements.AssignmentStatement@93280b55 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "**/Gcvsi!gnorHe"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e7b167f8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "**/Gcvsi!gnorHe"
statement is: org.evosuite.testcase.statements.AssignmentStatement@cef4a9eb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "**/Gcvsi!gnorHe"
statement is: org.evosuite.testcase.statements.AssignmentStatement@841f6811 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "*"
statement is: setExcludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setExcludes(arg0)
statement is: addDefaultExcludes()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.addDefaultExcludes()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/Gcvsi!gnorHe";
stringArray[1] = "**/Gcvsi!gnorHe";
stringArray[2] = "**/Gcvsi!gnorHe";
stringArray[3] = "**/Gcvsi!gnorHe";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[5];
        stringArray[0] = "**/example1/**";
        stringArray[1] = "**/example2/**";
        stringArray[2] = "**/example3/**";
        stringArray[3] = "**/example4/**";
        stringArray[4] = "*";
        directoryScanner.setExcludes(stringArray);
        directoryScanner.addDefaultExcludes();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/example1/**", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/example1/**" Ct is: stringArray[0] = "**/example1/**"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "**/example2/**", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/example2/**" Ct is: stringArray[1] = "**/example2/**"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "**/example3/**", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/example3/**" Ct is: stringArray[2] = "**/example3/**"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "**/example4/**", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/example4/**" Ct is: stringArray[3] = "**/example4/**"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "*", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"*" Ct is: stringArray[4] = "*"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: directoryScanner.setExcludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setExcludes(stringArray) target is: directoryScanner method is: setExcludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setExcludes([Ljava/lang/String;)V
statement is: directoryScanner.addDefaultExcludes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.addDefaultExcludes() target is: directoryScanner method is: addDefaultExcludes()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: addDefaultExcludes()V
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
String string = "**/example1/**";
stringArray[0] = string;
String string = "**/example2/**";
stringArray[1] = string;
String string = "**/example3/**";
stringArray[2] = string;
String string = "**/example4/**";
stringArray[3] = string;
String string = "*";
stringArray[4] = string;
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: couldHoldIncluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.couldHoldIncluded("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\User123\\Documents");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        directoryScanner.couldHoldIncluded("*.txt");
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\User123\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: directoryScanner.couldHoldIncluded("*.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.couldHoldIncluded("*.txt") target is: directoryScanner method is: couldHoldIncluded(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: couldHoldIncluded(Ljava/lang/String;)Z
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\User123\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "*.txt";
directoryScanner.couldHoldIncluded(string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@7fb0d7c6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@34865993 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@dc140dc8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c9e8e6a9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@42307fd0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@aa5eff1c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e9698f1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@30b1b78d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@aec40bf9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = "**/CVS/**"
statement is: org.evosuite.testcase.statements.AssignmentStatement@be73479f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[8] = ", ["
statement is: setIncludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setIncludes(arg0)
statement is: couldHoldIncluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/CVS/**";
stringArray[1] = "**/CVS/**";
stringArray[2] = "";
stringArray[3] = "**/CVS/**";
stringArray[4] = "**/CVS/**";
stringArray[5] = "**/CVS/**";
stringArray[6] = "**/CVS/**";
stringArray[7] = "**/CVS/**";
stringArray[8] = ", [";
directoryScanner.setIncludes(stringArray);
directoryScanner.couldHoldIncluded("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[9];
        stringArray[0] = "**/*.{java,txt}";// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

        stringArray[1] = "**/CVS/*.{java,txt}";// Excludes all directories named CVS that contain only Java or text files

        stringArray[2] = "**/*";// Includes the entire directory tree

        stringArray[3] = "**/*.{java,txt}";// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

        stringArray[4] = "**/CVS/*.{java,txt}";// Excludes all directories named CVS that contain only Java or text files

        stringArray[5] = "**/*.{java,txt}";// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

        stringArray[6] = "**/CVS/**";// Excludes all directories named CVS that contain any files

        stringArray[7] = ", [";// A comma followed by a space

        directoryScanner.setIncludes(stringArray);
        directoryScanner.couldHoldIncluded("");
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[9] Elements: []
lengths: [9] [9]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.{java,txt}" Ct is: stringArray[0] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "**/CVS/*.{java,txt}"// Excludes all directories named CVS that contain only Java or text files
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/CVS/*.{java,txt}" Ct is: stringArray[1] = "**/CVS/*.{java,txt}"// Excludes all directories named CVS that contain only Java or text files

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "**/*"// Includes the entire directory tree
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*" Ct is: stringArray[2] = "**/*"// Includes the entire directory tree

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.{java,txt}" Ct is: stringArray[3] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "**/CVS/*.{java,txt}"// Excludes all directories named CVS that contain only Java or text files
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/CVS/*.{java,txt}" Ct is: stringArray[4] = "**/CVS/*.{java,txt}"// Excludes all directories named CVS that contain only Java or text files

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.{java,txt}" Ct is: stringArray[5] = "**/*.{java,txt}"// Includes all files with a ".java" or ".txt" extension in the current directory and its subdirectories

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[6] = "**/CVS/**"// Excludes all directories named CVS that contain any files
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/CVS/**" Ct is: stringArray[6] = "**/CVS/**"// Excludes all directories named CVS that contain any files

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[7] = ", ["// A comma followed by a space
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:", [" Ct is: stringArray[7] = ", ["// A comma followed by a space

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: directoryScanner.setIncludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setIncludes(stringArray) target is: directoryScanner method is: setIncludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setIncludes([Ljava/lang/String;)V
statement is: directoryScanner.couldHoldIncluded(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.couldHoldIncluded("") target is: directoryScanner method is: couldHoldIncluded(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: couldHoldIncluded(Ljava/lang/String;)Z
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
String string = "**/*.{java,txt}";
stringArray[0] = string;
String string = "**/CVS/*.{java,txt}";
stringArray[1] = string;
String string = "**/*";
stringArray[2] = string;
String string = "**/*.{java,txt}";
stringArray[3] = string;
String string = "**/CVS/*.{java,txt}";
stringArray[4] = string;
String string = "**/*.{java,txt}";
stringArray[5] = string;
String string = "**/CVS/**";
stringArray[6] = string;
String string = ", [";
stringArray[7] = string;
directoryScanner.setIncludes(stringArray);
String string = "";
directoryScanner.couldHoldIncluded(string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: setBasedir(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter")
statement is: getBasedir()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile basedir = (MockFile)directoryScanner.getBasedir()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
        String baseDir = directoryScanner.getBasedir();
        assertEquals("com.lts.lang.classloader.SimpleFileFilter", baseDir);
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter") target is: directoryScanner method is: setBasedir(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/lang/String;)V
statement is: String baseDir = directoryScanner.getBasedir(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getBasedir() target is: directoryScanner method is: getBasedir()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getBasedir()Ljava/io/File;
statement is: assertEquals("com.lts.lang.classloader.SimpleFileFilter", baseDir), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("com.lts.lang.classloader.SimpleFileFilter", baseDir) target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "com.lts.lang.classloader.SimpleFileFilter";
directoryScanner.setBasedir(string);
directoryScanner.getBasedir();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("**/.cvsignore", "**/.cvsignore")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: getBasedir()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile basedir = (MockFile)directoryScanner.getBasedir()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("**/.cvsignore", "**/.cvsignore");
directoryScanner.setBasedir((File) createTempFile);
directoryScanner.getBasedir();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.setBasedir(new File("/path/to/directory"));
        String basedir = directoryScanner.getBasedir().getName();
        assertEquals("directory", basedir);
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(new File("/path/to/directory")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(new File("/path/to/directory")) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: String basedir = directoryScanner.getBasedir().getName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getBasedir().getName() target is: directoryScanner.getBasedir() method is: getName()
statement is: assertEquals("directory", basedir), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("directory", basedir) target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = null;
directoryScanner.setBasedir((File) mockFile);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: getBasedir()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile basedir = (MockFile)directoryScanner.getBasedir()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\user\\Documents");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.getBasedir();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\user\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.getBasedir(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getBasedir() target is: directoryScanner method is: getBasedir()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getBasedir()Ljava/io/File;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.String>
statement code is: Vector<String> vector = new Vector<String>()
statement is: org.evosuite.testcase.statements.AssignmentStatement@81fa3b94 type is: class org.evosuite.testcase.statements.AssignmentStatement return type java.util.Vector<E>
statement code is: directoryScanner.dirsIncluded = vector
statement is: getIncludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] includedDirectories = directoryScanner.getIncludedDirectories()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.dirsIncluded = vector;
directoryScanner.getIncludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        Vector<String> vector = new Vector<>();
        vector.add("path1");
        vector.add("path2");
        directoryScanner.dirsIncluded = vector;
        directoryScanner.getIncludedDirectories();
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<String> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add("path1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add("path1") target is: vector method is: add(java.lang.String)
statement is: vector.add("path2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add("path2") target is: vector method is: add(java.lang.String)
statement is: directoryScanner.dirsIncluded = vector, class spoon.support.reflect.code.CtAssignmentImpl
statement is: directoryScanner.getIncludedDirectories(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getIncludedDirectories() target is: directoryScanner method is: getIncludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getIncludedDirectories()[Ljava/lang/String;
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.getIncludedDirectories();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: setBasedir(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setBasedir((File) arg0)
statement is: scan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.scan()
statement is: getNotIncludedDirectories()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        MockFile mockFile = new MockFile("C:\\Users\\TestUser");
        directoryScanner.setBasedir(((File) (mockFile)));
        directoryScanner.scan();
        List<String> notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
        assertEquals(2, notIncludedDirectories.size());
        assertTrue(notIncludedDirectories.contains("node_modules"));
        assertTrue(notIncludedDirectories.contains("target"));
        assertFalse(notIncludedDirectories.contains("src"));
        assertFalse(notIncludedDirectories.contains("lib"));
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("C:\\Users\\TestUser"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.setBasedir(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setBasedir(((File) (mockFile))) target is: directoryScanner method is: setBasedir(File)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setBasedir(Ljava/io/File;)V
statement is: directoryScanner.scan(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.scan() target is: directoryScanner method is: scan()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: scan()V
statement is: List<String> notIncludedDirectories = directoryScanner.getNotIncludedDirectories(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.getNotIncludedDirectories() target is: directoryScanner method is: getNotIncludedDirectories()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: getNotIncludedDirectories()[Ljava/lang/String;
statement is: assertEquals(2, notIncludedDirectories.size()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(2, notIncludedDirectories.size()) target is:  method is: assertEquals(int,<unknown>)
statement is: assertTrue(notIncludedDirectories.contains("node_modules")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(notIncludedDirectories.contains("node_modules")) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(notIncludedDirectories.contains("target")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(notIncludedDirectories.contains("target")) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(notIncludedDirectories.contains("src")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(notIncludedDirectories.contains("src")) target is:  method is: assertFalse(<unknown>)
statement is: assertFalse(notIncludedDirectories.contains("lib")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(notIncludedDirectories.contains("lib")) target is:  method is: assertFalse(<unknown>)
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\TestUser";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: addDefaultExcludes()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.addDefaultExcludes()
statement is: isExcluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean excluded = directoryScanner.isExcluded("/home/ubuntu")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        directoryScanner.addDefaultExcludes();
        directoryScanner.isExcluded("/home/ubuntu");// Changed the value of the isExcluded() method to a more descriptive path, such as "/home/ubuntu/myproject" }}

    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.addDefaultExcludes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.addDefaultExcludes() target is: directoryScanner method is: addDefaultExcludes()
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: addDefaultExcludes()V
statement is: directoryScanner.isExcluded("/home/ubuntu")// Changed the value of the isExcluded() method to a more descriptive path, such as "/home/ubuntu/myproject" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.isExcluded("/home/ubuntu")// Changed the value of the isExcluded() method to a more descriptive path, such as "/home/ubuntu/myproject" }}
 target is: directoryScanner method is: isExcluded(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: isExcluded(Ljava/lang/String;)Z
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
String string = "/home/ubuntu";
directoryScanner.isExcluded(string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@7b1d2c21 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@847d5798 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.lts.io.DirectoryScanner"
statement is: setExcludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setExcludes(arg0)
statement is: isExcluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean excluded = directoryScanner.isExcluded("com.lts.io.DirectoryScanner")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);
directoryScanner.isExcluded("com.lts.io.DirectoryScanner");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[1];
        stringArray[0] = "com.lts.io.DirectoryScanner";
        directoryScanner.setExcludes(stringArray);
        // directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
        assertFalse(directoryScanner.isExcluded("com.lts.io.DirectoryScanner"));
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.lts.io.DirectoryScanner", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.lts.io.DirectoryScanner" Ct is: stringArray[0] = "com.lts.io.DirectoryScanner"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: directoryScanner.setExcludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setExcludes(stringArray) target is: directoryScanner method is: setExcludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setExcludes([Ljava/lang/String;)V
statement is: // directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
assertFalse(directoryScanner.isExcluded("com.lts.io.DirectoryScanner")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
assertFalse(directoryScanner.isExcluded("com.lts.io.DirectoryScanner")) target is:  method is: assertFalse(<unknown>)
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
String string = "com.lts.io.DirectoryScanner";
stringArray[0] = string;
directoryScanner.setExcludes(stringArray);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@fd5e24c6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c2d6677a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/.cvsignore"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e7b73b87 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@4b6b037 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "com.lts.LTSException"
statement is: org.evosuite.testcase.statements.AssignmentStatement@356f691b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "**/.cvsignore"
statement is: setIncludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setIncludes(arg0)
statement is: isIncluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean included = directoryScanner.isIncluded("R")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[4];
        stringArray[0] = "**/.gitignore";// ignore all files in .git directories

        stringArray[1] = "";
        stringArray[2] = "com.lts.LTSException";
        stringArray[3] = "**/.cvsignore";
        directoryScanner.setIncludes(stringArray);
        directoryScanner.isIncluded("R");
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/.gitignore"// ignore all files in .git directories
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/.gitignore" Ct is: stringArray[0] = "**/.gitignore"// ignore all files in .git directories

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[1] = ""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "com.lts.LTSException", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.lts.LTSException" Ct is: stringArray[2] = "com.lts.LTSException"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "**/.cvsignore", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/.cvsignore" Ct is: stringArray[3] = "**/.cvsignore"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: directoryScanner.setIncludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setIncludes(stringArray) target is: directoryScanner method is: setIncludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setIncludes([Ljava/lang/String;)V
statement is: directoryScanner.isIncluded("R"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.isIncluded("R") target is: directoryScanner method is: isIncluded(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: isIncluded(Ljava/lang/String;)Z
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
String string = "**/.gitignore";
stringArray[0] = string;
String string = "";
stringArray[1] = string;
String string = "com.lts.LTSException";
stringArray[2] = string;
String string = "**/.cvsignore";
stringArray[3] = string;
directoryScanner.setIncludes(stringArray);
String string = "R";
directoryScanner.isIncluded(string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: org.evosuite.testcase.statements.ArrayStatement@9be2588d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4dd05afc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "**/.cvsignore"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3f73c78 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@b81fe7d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "com.lts.LTSException"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e7f8875 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "**/.cvsignore"
statement is: setIncludes([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.setIncludes(arg0)
statement is: isIncluded(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean included = directoryScanner.isIncluded("")
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirectoryScanner directoryScanner = new DirectoryScanner();
        String[] stringArray = new String[4];
        stringArray[0] = "**/.gitignore";// more descriptive name for a .gitignore file

        stringArray[1] = "";// empty string is not needed here

        stringArray[2] = "com.lts.LTSException";// this is the fully qualified class name of an exception

        stringArray[3] = "**/.cvsignore";// more descriptive name for a .cvsignore file

        directoryScanner.setIncludes(stringArray);
        directoryScanner.isIncluded("");
    }
}
statement is: DirectoryScanner directoryScanner = new DirectoryScanner(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "**/.gitignore"// more descriptive name for a .gitignore file
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/.gitignore" Ct is: stringArray[0] = "**/.gitignore"// more descriptive name for a .gitignore file

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = ""// empty string is not needed here
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[1] = ""// empty string is not needed here

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "com.lts.LTSException"// this is the fully qualified class name of an exception
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.lts.LTSException" Ct is: stringArray[2] = "com.lts.LTSException"// this is the fully qualified class name of an exception

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "**/.cvsignore"// more descriptive name for a .cvsignore file
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/.cvsignore" Ct is: stringArray[3] = "**/.cvsignore"// more descriptive name for a .cvsignore file

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: directoryScanner.setIncludes(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.setIncludes(stringArray) target is: directoryScanner method is: setIncludes(java.lang.String[])
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: setIncludes([Ljava/lang/String;)V
statement is: directoryScanner.isIncluded(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.isIncluded("") target is: directoryScanner method is: isIncluded(java.lang.String)
source statement: com.lts.io.DirectoryScanner()V callee: VariableReference: Statement 0, type com.lts.io.DirectoryScannerindex is: 0
Matched Method is: isIncluded(Ljava/lang/String;)Z
TestCase is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
String string = "**/.gitignore";
stringArray[0] = string;
String string = "";
stringArray[1] = string;
String string = "com.lts.LTSException";
stringArray[2] = string;
String string = "**/.cvsignore";
stringArray[3] = string;
directoryScanner.setIncludes(stringArray);
String string = "";
directoryScanner.isIncluded(string);

statement is: com.lts.io.DirectoryScanner()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.io.DirectoryScanner
statement code is: DirectoryScanner directoryScanner = new DirectoryScanner()
statement is: slowScan()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: directoryScanner.slowScan()
test data is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.slowScan();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\User\\Documents");
        directoryScanner.slowScan(10);
    }
}
statement is: // Improved test data
DirectoryScanner directoryScanner = new DirectoryScanner("C:\\Users\\User\\Documents"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: directoryScanner.slowScan(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: directoryScanner.slowScan(10) target is: directoryScanner method is: slowScan(int)
* test suite isTestSuite: 101
Test 0: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.getBasedir();
Test 1: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
String[] stringArray = new String[1];
stringArray[0] = "**/CV/**";
directoryScanner.includes = stringArray;
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 2: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
directoryScanner.getExcludedDirectories();
Test 3: 
DirectoryScanner.matchPatternStart("*", "**/CS");
Test 4: 
DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110");
Test 5: 
DirectoryScanner.matchPatternStart("/l", "/ bDP");
Test 6: 
MockFile mockFile = new MockFile("*%S/", "*%S/");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
String[] stringArray = new String[6];
stringArray[0] = "*%S/";
stringArray[1] = "*%S/";
stringArray[2] = "*%S/";
stringArray[3] = "*%S/";
stringArray[4] = "*%S/";
stringArray[5] = "*%S/";
directoryScanner.setExcludes(stringArray);
MockFile.createTempFile("*%S/", "*%S/", (File) mockFile);
directoryScanner.scan();
Test 7: 
DirectoryScanner.matchPath("/qBVL(w-mc6yBq$Sy:", "/4 *F}~US>*F-}~US>0");
Test 8: 
DirectoryScanner.matchPath("*/1S/", "*~");
Test 9: 
DirectoryScanner.matchPath("/", "/**/.cvsignore");
Test 10: 
DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S");
Test 11: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
Test 12: 
DirectoryScanner.matchPath("**//*", "*");
Test 13: 
MockFile mockFile = new MockFile("**/sdV/**/");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
stringArray[0] = "**/sdV/**/";
stringArray[1] = "**/sdV/**/";
stringArray[2] = "**/sdV/**/";
stringArray[3] = "**/sdV/**/";
stringArray[4] = "**/sdV/**/";
stringArray[5] = "**/sdV/**/";
directoryScanner.setIncludes(stringArray);
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) mockFile);
directoryScanner.scan();
Test 14: 
DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?");
Test 15: 
DirectoryScanner.match("/* *F-}~US>", "");
Test 16: 
DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");
Test 17: 
DirectoryScanner.match("**", "");
Test 18: 
DirectoryScanner.match("**/CVS", "S");
Test 19: 
DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6");
Test 20: 
DirectoryScanner.match("**S", "S");
Test 21: 
DirectoryScanner.matchPath("/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*", "/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*");
Test 22: 
DirectoryScanner.match("**/CVS/**", "S");
Test 23: 
DirectoryScanner.match("**/dV?**/", "**/dV?**/");
Test 24: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);
Test 25: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);
Test 26: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // No basedir set
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 27: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("**");
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir does not exist
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 28: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null);
directoryScanner.basedir = (File) createTempFile;
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir is not a directory
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 29: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
try { 
  directoryScanner.scandir(mockFile, "/8lH?0", true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // IO error scanning directory /**_/**_/#*#
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 30: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.scandir(mockFile, "**/.cvsignore", false);
Test 31: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("Wi{^=", "Wi{^=");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("Wi{^=", "Wi{^=", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 32: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();
Test 33: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "* *F-}~US>", true);
directoryScanner.getIncludedFiles();
Test 34: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 35: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();
Test 36: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "**/CVS/**", false);
directoryScanner.getExcludedFiles();
Test 37: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();
Test 38: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 39: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/Gcvsi!gnorHe";
stringArray[1] = "**/Gcvsi!gnorHe";
stringArray[2] = "**/Gcvsi!gnorHe";
stringArray[3] = "**/Gcvsi!gnorHe";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();
Test 40: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.couldHoldIncluded("");
Test 41: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/CVS/**";
stringArray[1] = "**/CVS/**";
stringArray[2] = "";
stringArray[3] = "**/CVS/**";
stringArray[4] = "**/CVS/**";
stringArray[5] = "**/CVS/**";
stringArray[6] = "**/CVS/**";
stringArray[7] = "**/CVS/**";
stringArray[8] = ", [";
directoryScanner.setIncludes(stringArray);
directoryScanner.couldHoldIncluded("");
Test 42: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();
Test 43: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("**/.cvsignore", "**/.cvsignore");
directoryScanner.setBasedir((File) createTempFile);
directoryScanner.getBasedir();
Test 44: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();
Test 45: 
DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.dirsIncluded = vector;
directoryScanner.getIncludedDirectories();
Test 46: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
Test 47: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");
Test 48: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);
directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
Test 49: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");
Test 50: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");
Test 51: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.slowScan();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("/home/user/Documents/cv");
String[] stringArray = new String[1];
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/*.pdf", "/home/user/Documents/cv", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();

Test 53: 
String string = "*.txt";
MockFile mockFile = new MockFile("C:UsersUserDocuments", "*.txt");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"*.txt").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();
((DirectoryScanner) string).getExcludedDirectories();

Test 54: 
DirectoryScanner.matchPatternStart("[A-Z]", "**/CS");

Test 55: 
DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset");

Test 56: 
DirectoryScanner.matchPatternStart("/l", "/*.txt");

Test 57: 
String string = "";
MockFile mockFile = new MockFile("src/main/resources", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"").setBasedir((File) mockFile);
String[] stringArray = new String[6];
((DirectoryScanner) string).setExcludes(stringArray);
String string = "src/main/resources";
String string = "test.xml";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();

Test 58: 
DirectoryScanner.matchPath("C:UsersJohn DoeDesktop\test.txt", "C:UsersJane DoeDocuments\test2.txt");

Test 59: 
DirectoryScanner.matchPath("C:/Users/John Doe/Documents/1S", "1S~");

Test 60: 
DirectoryScanner.matchPath("/home/user/projects/myproject", "**/*.java");

Test 61: 
DirectoryScanner.matchPath("**/path/to/specific/files/*", "file*name*.txt");

Test 62: 
String string = "MyTest";
MockFile mockFile = new MockFile("C:\temp", "MyTest");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"MyTest").setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();

Test 63: 
DirectoryScanner.matchPath("**/*", "*.java");

Test 64: 
MockFile mockFile = new MockFile("src/test/resources");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
((DirectoryScanner) mockFile).setIncludes(stringArray);
((DirectoryScanner) mockFile).setBasedir((File) mockFile);
String string = "**/sdV/**/";
String string = "**/sdV/**/";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) mockFile).scan();

Test 65: 
DirectoryScanner.matchPath("L&pw#DCX!", "L&pw#DCX!");

Test 66: 
DirectoryScanner.match("/* *F-*~US>", "");

Test 67: 
DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");

Test 68: 
DirectoryScanner.match("**/*.java", "*.txt");
DirectoryScanner.match("**/*.py", "*.sh");

Test 69: 
DirectoryScanner.match("**/*", "S");

Test 70: 
DirectoryScanner.matchPath("/path/to/file1", "/path/to/file2");
DirectoryScanner.matchPath("C:path\to\file3", "C:path\to\file4");
DirectoryScanner.matchPath("/home/user/Documents/file5", "/home/user/Documents/file6");

Test 71: 
DirectoryScanner.match("**/S", "S");

Test 72: 
DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/");

Test 73: 
DirectoryScanner.match("**/CVS/**", "**/*.java");

Test 74: 
DirectoryScanner.match("**/*.txt", "**/*.pdf");

Test 75: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);

Test 76: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);

Test 77: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
directoryScanner.setBasedir(string);
directoryScanner.scan();

Test 78: 

Test 79: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
directoryScanner.scandir(mockFile, "/home/user/Documents", true);

Test 80: 
String string = "";
MockFile mockFile = new MockFile("C:myprojectsrc", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
String string = "**/.cvsignore";
boolean _boolean = false;
((DirectoryScanner) string).scandir(mockFile, string, _boolean);

Test 81: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn Doe", "C:UsersJohn Doe");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("foo.txt", "bar.txt", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();

Test 82: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn DoeDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();

Test 83: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("test_file");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "tmp_";
String string = ".txt";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "*.txt";
boolean _boolean = true;
directoryScanner.scandir(mockFile, string, _boolean);

Test 84: 
String string = "ExampleDirectory";
MockFile mockFile = new MockFile("C:Temp", "ExampleDirectory");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"ExampleDirectory").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();

Test 85: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn DoeDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();

Test 86: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:Users\testuserDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
String string = "my_file_123.txt";
String string = "";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "**/CVS/**";
boolean _boolean = false;
directoryScanner.scandir(mockFile, string, _boolean);
directoryScanner.getExcludedFiles();

Test 87: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();

Test 88: 
String string = "TestDirectory";
MockFile mockFile = new MockFile("C:\temp", "TestDirectory");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"TestDirectory").setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getExcludedDirectories();

Test 89: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/example1/**";
stringArray[1] = "**/example2/**";
stringArray[2] = "**/example3/**";
stringArray[3] = "**/example4/**";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();

Test 90: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersUser123Documents");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "*.txt";
directoryScanner.couldHoldIncluded(string);

Test 91: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/*.{java,txt}";
stringArray[1] = "**/CVS/*.{java,txt}";
stringArray[2] = "**/*";
stringArray[3] = "**/*.{java,txt}";
stringArray[4] = "**/CVS/*.{java,txt}";
stringArray[5] = "**/*.{java,txt}";
stringArray[6] = "**/CVS/**";
stringArray[7] = ", [";
directoryScanner.setIncludes(stringArray);
String string = "";
directoryScanner.couldHoldIncluded(string);

Test 92: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();

Test 93: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) null);

Test 94: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();

Test 95: 
DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.getIncludedDirectories();

Test 96: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersTestUser");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();

Test 97: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");

Test 98: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);

Test 99: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.gitignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");

Test 100: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.gitignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");


* Generated after the refinement and before minimization 101 tests with total length 422
* test suite isTestSuite: 101
Test 0: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.getBasedir();
Test 1: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
String[] stringArray = new String[1];
stringArray[0] = "**/CV/**";
directoryScanner.includes = stringArray;
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 2: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
directoryScanner.getExcludedDirectories();
Test 3: 
DirectoryScanner.matchPatternStart("*", "**/CS");
Test 4: 
DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110");
Test 5: 
DirectoryScanner.matchPatternStart("/l", "/ bDP");
Test 6: 
MockFile mockFile = new MockFile("*%S/", "*%S/");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
String[] stringArray = new String[6];
stringArray[0] = "*%S/";
stringArray[1] = "*%S/";
stringArray[2] = "*%S/";
stringArray[3] = "*%S/";
stringArray[4] = "*%S/";
stringArray[5] = "*%S/";
directoryScanner.setExcludes(stringArray);
MockFile.createTempFile("*%S/", "*%S/", (File) mockFile);
directoryScanner.scan();
Test 7: 
DirectoryScanner.matchPath("/qBVL(w-mc6yBq$Sy:", "/4 *F}~US>*F-}~US>0");
Test 8: 
DirectoryScanner.matchPath("*/1S/", "*~");
Test 9: 
DirectoryScanner.matchPath("/", "/**/.cvsignore");
Test 10: 
DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S");
Test 11: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
Test 12: 
DirectoryScanner.matchPath("**//*", "*");
Test 13: 
MockFile mockFile = new MockFile("**/sdV/**/");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
stringArray[0] = "**/sdV/**/";
stringArray[1] = "**/sdV/**/";
stringArray[2] = "**/sdV/**/";
stringArray[3] = "**/sdV/**/";
stringArray[4] = "**/sdV/**/";
stringArray[5] = "**/sdV/**/";
directoryScanner.setIncludes(stringArray);
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) mockFile);
directoryScanner.scan();
Test 14: 
DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?");
Test 15: 
DirectoryScanner.match("/* *F-}~US>", "");
Test 16: 
DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");
Test 17: 
DirectoryScanner.match("**", "");
Test 18: 
DirectoryScanner.match("**/CVS", "S");
Test 19: 
DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6");
Test 20: 
DirectoryScanner.match("**S", "S");
Test 21: 
DirectoryScanner.matchPath("/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*", "/**/CVS5*Vo*0**/CVS5*Vo*0/**/CVS5*Vo*0**/CVS5*Vo*");
Test 22: 
DirectoryScanner.match("**/CVS/**", "S");
Test 23: 
DirectoryScanner.match("**/dV?**/", "**/dV?**/");
Test 24: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);
Test 25: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);
Test 26: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // No basedir set
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 27: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("**");
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir does not exist
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 28: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null);
directoryScanner.basedir = (File) createTempFile;
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir is not a directory
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 29: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
try { 
  directoryScanner.scandir(mockFile, "/8lH?0", true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // IO error scanning directory /**_/**_/#*#
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 30: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.scandir(mockFile, "**/.cvsignore", false);
Test 31: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("Wi{^=", "Wi{^=");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("Wi{^=", "Wi{^=", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 32: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();
Test 33: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "* *F-}~US>", true);
directoryScanner.getIncludedFiles();
Test 34: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 35: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();
Test 36: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "**/CVS/**", false);
directoryScanner.getExcludedFiles();
Test 37: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();
Test 38: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 39: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/Gcvsi!gnorHe";
stringArray[1] = "**/Gcvsi!gnorHe";
stringArray[2] = "**/Gcvsi!gnorHe";
stringArray[3] = "**/Gcvsi!gnorHe";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();
Test 40: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.couldHoldIncluded("");
Test 41: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/CVS/**";
stringArray[1] = "**/CVS/**";
stringArray[2] = "";
stringArray[3] = "**/CVS/**";
stringArray[4] = "**/CVS/**";
stringArray[5] = "**/CVS/**";
stringArray[6] = "**/CVS/**";
stringArray[7] = "**/CVS/**";
stringArray[8] = ", [";
directoryScanner.setIncludes(stringArray);
directoryScanner.couldHoldIncluded("");
Test 42: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();
Test 43: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("**/.cvsignore", "**/.cvsignore");
directoryScanner.setBasedir((File) createTempFile);
directoryScanner.getBasedir();
Test 44: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();
Test 45: 
DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.dirsIncluded = vector;
directoryScanner.getIncludedDirectories();
Test 46: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
Test 47: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");
Test 48: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);
directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
Test 49: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");
Test 50: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");
Test 51: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.slowScan();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("/home/user/Documents/cv");
String[] stringArray = new String[1];
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/*.pdf", "/home/user/Documents/cv", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();

Test 53: 
String string = "*.txt";
MockFile mockFile = new MockFile("C:UsersUserDocuments", "*.txt");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"*.txt").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();
((DirectoryScanner) string).getExcludedDirectories();

Test 54: 
DirectoryScanner.matchPatternStart("[A-Z]", "**/CS");

Test 55: 
DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset");

Test 56: 
DirectoryScanner.matchPatternStart("/l", "/*.txt");

Test 57: 
String string = "";
MockFile mockFile = new MockFile("src/main/resources", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"").setBasedir((File) mockFile);
String[] stringArray = new String[6];
((DirectoryScanner) string).setExcludes(stringArray);
String string = "src/main/resources";
String string = "test.xml";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();

Test 58: 
DirectoryScanner.matchPath("C:UsersJohn DoeDesktop\test.txt", "C:UsersJane DoeDocuments\test2.txt");

Test 59: 
DirectoryScanner.matchPath("C:/Users/John Doe/Documents/1S", "1S~");

Test 60: 
DirectoryScanner.matchPath("/home/user/projects/myproject", "**/*.java");

Test 61: 
DirectoryScanner.matchPath("**/path/to/specific/files/*", "file*name*.txt");

Test 62: 
String string = "MyTest";
MockFile mockFile = new MockFile("C:\temp", "MyTest");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"MyTest").setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getNotIncludedDirectories();

Test 63: 
DirectoryScanner.matchPath("**/*", "*.java");

Test 64: 
MockFile mockFile = new MockFile("src/test/resources");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
((DirectoryScanner) mockFile).setIncludes(stringArray);
((DirectoryScanner) mockFile).setBasedir((File) mockFile);
String string = "**/sdV/**/";
String string = "**/sdV/**/";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) mockFile).scan();

Test 65: 
DirectoryScanner.matchPath("L&pw#DCX!", "L&pw#DCX!");

Test 66: 
DirectoryScanner.match("/* *F-*~US>", "");

Test 67: 
DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");

Test 68: 
DirectoryScanner.match("**/*.java", "*.txt");
DirectoryScanner.match("**/*.py", "*.sh");

Test 69: 
DirectoryScanner.match("**/*", "S");

Test 70: 
DirectoryScanner.matchPath("/path/to/file1", "/path/to/file2");
DirectoryScanner.matchPath("C:path\to\file3", "C:path\to\file4");
DirectoryScanner.matchPath("/home/user/Documents/file5", "/home/user/Documents/file6");

Test 71: 
DirectoryScanner.match("**/S", "S");

Test 72: 
DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/");

Test 73: 
DirectoryScanner.match("**/CVS/**", "**/*.java");

Test 74: 
DirectoryScanner.match("**/*.txt", "**/*.pdf");

Test 75: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);

Test 76: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);

Test 77: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
directoryScanner.setBasedir(string);
directoryScanner.scan();

Test 78: 

Test 79: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
directoryScanner.scandir(mockFile, "/home/user/Documents", true);

Test 80: 
String string = "";
MockFile mockFile = new MockFile("C:myprojectsrc", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();
String string = "**/.cvsignore";
boolean _boolean = false;
((DirectoryScanner) string).scandir(mockFile, string, _boolean);

Test 81: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn Doe", "C:UsersJohn Doe");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("foo.txt", "bar.txt", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();

Test 82: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn DoeDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();

Test 83: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("test_file");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "tmp_";
String string = ".txt";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "*.txt";
boolean _boolean = true;
directoryScanner.scandir(mockFile, string, _boolean);

Test 84: 
String string = "ExampleDirectory";
MockFile mockFile = new MockFile("C:Temp", "ExampleDirectory");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"ExampleDirectory").setBasedir((File) mockFile);
((DirectoryScanner) string).scan();

Test 85: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn DoeDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();

Test 86: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:Users\testuserDocuments");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
String string = "my_file_123.txt";
String string = "";
MockFile.createTempFile(string, string, (File) mockFile);
String string = "**/CVS/**";
boolean _boolean = false;
directoryScanner.scandir(mockFile, string, _boolean);
directoryScanner.getExcludedFiles();

Test 87: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();

Test 88: 
String string = "TestDirectory";
MockFile mockFile = new MockFile("C:\temp", "TestDirectory");
DirectoryScanner directoryScanner = new DirectoryScanner();
((DirectoryScanner)"TestDirectory").setBasedir((File) mockFile);
((DirectoryScanner) string).addDefaultExcludes();
String string = "**/CVS/**";
String string = "=fy!A$B9{";
MockFile.createTempFile(string, string, (File) mockFile);
((DirectoryScanner) string).scan();
((DirectoryScanner) string).getExcludedDirectories();

Test 89: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/example1/**";
stringArray[1] = "**/example2/**";
stringArray[2] = "**/example3/**";
stringArray[3] = "**/example4/**";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();

Test 90: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersUser123Documents");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
String string = "*.txt";
directoryScanner.couldHoldIncluded(string);

Test 91: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/*.{java,txt}";
stringArray[1] = "**/CVS/*.{java,txt}";
stringArray[2] = "**/*";
stringArray[3] = "**/*.{java,txt}";
stringArray[4] = "**/CVS/*.{java,txt}";
stringArray[5] = "**/*.{java,txt}";
stringArray[6] = "**/CVS/**";
stringArray[7] = ", [";
directoryScanner.setIncludes(stringArray);
String string = "";
directoryScanner.couldHoldIncluded(string);

Test 92: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();

Test 93: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) null);

Test 94: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
MockFile mockFile = new MockFile(string);
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();

Test 95: 
DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.getIncludedDirectories();

Test 96: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersTestUser");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();

Test 97: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");

Test 98: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);

Test 99: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.gitignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");

Test 100: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.gitignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");


* Minimizing test suite
* test suite isTestSuite: 51
Test 0: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
directoryScanner.getBasedir();
Test 1: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.getBasedir();
Test 2: 
DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset");
Test 3: 
DirectoryScanner.matchPatternStart("*", "**/CS");
Test 4: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
String[] stringArray = new String[1];
stringArray[0] = "**/CV/**";
directoryScanner.includes = stringArray;
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 5: 
DirectoryScanner.matchPatternStart("/l", "/*.txt");
Test 6: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
directoryScanner.isExcluded("/home/ubuntu");
Test 7: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.gitignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("");
Test 8: 
DirectoryScanner.matchPath("*/1S/", "*~");
Test 9: 
DirectoryScanner.matchPath("C:UsersJohn DoeDesktop\test.txt", "C:UsersJane DoeDocuments\test2.txt");
Test 10: 
MockFile mockFile = new MockFile("*%S/", "*%S/");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
String[] stringArray = new String[6];
stringArray[0] = "*%S/";
stringArray[1] = "*%S/";
stringArray[2] = "*%S/";
stringArray[3] = "*%S/";
stringArray[4] = "*%S/";
stringArray[5] = "*%S/";
directoryScanner.setExcludes(stringArray);
MockFile.createTempFile("*%S/", "*%S/", (File) mockFile);
directoryScanner.scan();
Test 11: 
DirectoryScanner.matchPath("/", "/**/.cvsignore");
Test 12: 
DirectoryScanner.matchPath("**/*", "*.java");
Test 13: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedDirectories();
Test 14: 
DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S");
Test 15: 
MockFile mockFile = new MockFile("**/sdV/**/");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[6];
stringArray[0] = "**/sdV/**/";
stringArray[1] = "**/sdV/**/";
stringArray[2] = "**/sdV/**/";
stringArray[3] = "**/sdV/**/";
stringArray[4] = "**/sdV/**/";
stringArray[5] = "**/sdV/**/";
directoryScanner.setIncludes(stringArray);
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) mockFile);
directoryScanner.scan();
Test 16: 
DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?");
Test 17: 
DirectoryScanner.match("/* *F-*~US>", "");
Test 18: 
DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");
Test 19: 
DirectoryScanner.match("**", "");
Test 20: 
DirectoryScanner.match("**/S", "S");
Test 21: 
DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6");
Test 22: 
DirectoryScanner.match("**S", "S");
Test 23: 
DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/");
Test 24: 
DirectoryScanner.match("**/*", "S");
Test 25: 
DirectoryScanner.match("**/dV?**/", "**/dV?**/");
Test 26: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);
Test 27: 
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);
Test 28: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[1];
stringArray[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(stringArray);
directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
Test 29: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // No basedir set
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 30: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String string = "C:\\Users\\user\\Documents";
directoryScanner.setBasedir(string);
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir does not exist
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 31: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null);
directoryScanner.basedir = (File) createTempFile;
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir is not a directory
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 32: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
directoryScanner.getExcludedDirectories();
Test 33: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("//**", "**/#*#");
try { 
  directoryScanner.scandir(mockFile, "/home/user/Documents", true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // IO error scanning directory /**_/**_/#*#
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}

Test 34: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.scandir(mockFile, "**/.cvsignore", false);
Test 35: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("C:UsersJohn Doe", "C:UsersJohn Doe");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("foo.txt", "bar.txt", (File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 36: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedFiles();
Test 37: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "* *F-}~US>", true);
directoryScanner.getIncludedFiles();
Test 38: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getExcludedFiles();
Test 39: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("* *F-}~US>", "", (File) mockFile);
directoryScanner.scandir(mockFile, "**/CVS/**", false);
directoryScanner.getExcludedFiles();
Test 40: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) mockFile);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) mockFile);
directoryScanner.scan();
directoryScanner.getIncludedDirectories();
Test 41: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[5];
stringArray[0] = "**/example1/**";
stringArray[1] = "**/example2/**";
stringArray[2] = "**/example3/**";
stringArray[3] = "**/example4/**";
stringArray[4] = "*";
directoryScanner.setExcludes(stringArray);
directoryScanner.addDefaultExcludes();
Test 42: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.couldHoldIncluded("");
Test 43: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[9];
stringArray[0] = "**/CVS/**";
stringArray[1] = "**/CVS/**";
stringArray[2] = "";
stringArray[3] = "**/CVS/**";
stringArray[4] = "**/CVS/**";
stringArray[5] = "**/CVS/**";
stringArray[6] = "**/CVS/**";
stringArray[7] = "**/CVS/**";
stringArray[8] = ", [";
directoryScanner.setIncludes(stringArray);
directoryScanner.couldHoldIncluded("");
Test 44: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile createTempFile = (MockFile)MockFile.createTempFile("**/.cvsignore", "**/.cvsignore");
directoryScanner.setBasedir((File) createTempFile);
directoryScanner.getBasedir();
Test 45: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.getBasedir();
Test 46: 
DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.dirsIncluded = vector;
directoryScanner.getIncludedDirectories();
Test 47: 
DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile mockFile = new MockFile("");
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedDirectories();
Test 48: 
MockFile mockFile = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) mockFile);
directoryScanner.scan();
directoryScanner.getNotIncludedFiles();
Test 49: 
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] stringArray = new String[4];
stringArray[0] = "**/.cvsignore";
stringArray[1] = "";
stringArray[2] = "com.lts.LTSException";
stringArray[3] = "**/.cvsignore";
directoryScanner.setIncludes(stringArray);
directoryScanner.isIncluded("R");
Test 50: 
DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.slowScan();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 232
* Number of covered goals: 225
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 307
* Number of covered goals: 305
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 76%
* Total number of goals: 62
* Number of covered goals: 47
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 232
* Number of covered goals: 223
* Generated 51 tests with total length 205
* Resulting test suite's coverage: 94% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir("com.lts.lang.classloader.SimpleFileFilter");
File basedir = directoryScanner.getBasedir();
assertNotNull(basedir);
assertEquals("com.lts.lang.classloader.SimpleFileFilter", basedir.getName());


** It was a parseable test case! 
refined test name is: testGetBasedirReturnsExpectedDirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
File basedir = directoryScanner.getBasedir();
assertNull(basedir);


** It was a parseable test case! 
refined test name is: testGetBasedirWhenNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("/home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/78_caloriecount", "/home/ubuntu/UTestGen/Evaluation/getting_results/dataset");
assertTrue(matchPatternStart);


** It was a parseable test case! 
refined test name is: testMatchPatternStartCorrectlyIdentifiesPathStart
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("*", "**/CS");
assertFalse(matchPatternStart);


** It was a parseable test case! 
refined test name is: testMatchPatternStartWithWildcardCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg2 = new MockFile("**/CV/**");
String[] stringArray = new String[1];
stringArray[0] = "**/CV/**";
directoryScanner.includes = stringArray;
directoryScanner.setBasedir((File) arg2);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) arg2);
directoryScanner.scan();
String[] excludedDirectories = directoryScanner.getExcludedDirectories();
assertEquals(0, excludedDirectories.length);


** It was a parseable test case! 
refined test name is: testScanDirectoryWithPattern
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPatternStart = DirectoryScanner.matchPatternStart("/l", "/*.txt");
assertFalse(matchPatternStart);


** It was a parseable test case! 
refined test name is: testMatchPatternStartWithForwardSlashAndAsterisk
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.addDefaultExcludes();
boolean excluded = directoryScanner.isExcluded("/home/ubuntu");
assertFalse(excluded);


** It was a parseable test case! 
refined test name is: testIsNotExcludedWhenDefaultExcludesAdded
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[4];
arg0[0] = "**/.gitignore";
arg0[1] = "";
arg0[2] = "com.lts.LTSException";
arg0[3] = "**/.cvsignore";
directoryScanner.setIncludes(arg0);
boolean included = directoryScanner.isIncluded("");
assertTrue(included);


** It was a parseable test case! 
refined test name is: testIsIncludedWhenFilePathMatchesIncludePattern
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("*/1S/", "*~");
assertFalse(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathWithGlobPattern
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("C:UsersJohn DoeDesktop\test.txt", "C:UsersJane DoeDocuments\test2.txt");
assertFalse(matchPath);


** It was a parseable test case! 
refined test name is: testMatchingFilePaths
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg2 = new MockFile("*%S/", "*%S/");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) arg2);
String[] arg0 = new String[6];
arg0[0] = "*%S/";
arg0[1] = "*%S/";
arg0[2] = "*%S/";
arg0[3] = "*%S/";
arg0[4] = "*%S/";
arg0[5] = "*%S/";
directoryScanner.setExcludes(arg0);
MockFile.createTempFile("*%S/", "*%S/", (File) arg2);
directoryScanner.scan();

** It was a parseable test case! 
refined test name is: testCreateTempFileAndScanDirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("/", "/**/.cvsignore");
assertFalse(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathReturnsFalseForCVSIgnoreFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("**/*", "*.java");
assertTrue(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathWithAsterisk
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg2 = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) arg2);
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("**/CVS/**", "=fy!A$B9{", (File) arg2);
directoryScanner.scan();
String[] excludedDirectories = directoryScanner.getExcludedDirectories();
assertEquals(1, excludedDirectories.length);


** It was a parseable test case! 
refined test name is: testCustomDirectoryFilter
* Compiling Tests
refined test name is: testExcludeCVSDirectories
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("**/_4sCV/*", "*Y%S");
assertFalse(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathWhenPatternAndStringDoNotMatch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg2 = new MockFile("**/sdV/**/");
DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[6];
arg0[0] = "**/sdV/**/";
arg0[1] = "**/sdV/**/";
arg0[2] = "**/sdV/**/";
arg0[3] = "**/sdV/**/";
arg0[4] = "**/sdV/**/";
arg0[5] = "**/sdV/**/";
directoryScanner.setIncludes(arg0);
directoryScanner.setBasedir((File) arg2);
MockFile.createTempFile("**/sdV/**/", "**/sdV/**/", (File) arg2);
directoryScanner.scan();

** It was a parseable test case! 
refined test name is: testCreateTempFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("L&pw#DCX?", "L&pw#DCX?");
assertTrue(matchPath);


** It was a parseable test case! 
refined test name is: testValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("/* *F-*~US>", "");
assertFalse(match);


** It was a parseable test case! 
refined test name is: testInvalidCharacterPatternMatching
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("^j?i*lg!g\u0007nCh", "^j?i*lg!g\u0007nCh");
assertTrue(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathPatternAndStringMatch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("**", "");
assertTrue(match);


** It was a parseable test case! 
refined test name is: testMatchWithValidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("**/S", "S");
assertFalse(match);


** It was a parseable test case! 
refined test name is: testDirectoryScannerMatchWithMultipleWildcards
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("$*Y?c@@GX!?SM-6", "$*Y?c@@GX!?SM-6");
assertTrue(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathTwoMatchingPatternsReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("**S", "S");
assertTrue(match);


** It was a parseable test case! 
refined test name is: testMatchWhenPatternAndInputStringsAreTheSame
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean matchPath = DirectoryScanner.matchPath("/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/", "/**/CVS5*Vo*/**/CVS5*Vo*//**/CVS5*Vo*/**/CVS5*Vo*/");
assertTrue(matchPath);


** It was a parseable test case! 
refined test name is: testMatchPathCommonAncestor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("**/*", "S");
assertFalse(match);


** It was a parseable test case! 
refined test name is: testMatchMethodReturnsFalseWhenPassedTwoArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean match = DirectoryScanner.match("**/dV?**/", "**/dV?**/");
assertTrue(match);


** It was a parseable test case! 
refined test name is: testDirectoryScannerMatchWithWildcardCharacters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setIncludes((String[]) null);

** It was a parseable test case! 
refined test name is: testSetIncludesNullSetsEmptyList
* Compiling Tests
refined test name is: testNullIncludes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setExcludes((String[]) null);

** It was a parseable test case! 
refined test name is: testDirectoryScannerWithNullExcludes
* Compiling Tests
refined test name is: testSetExcludesWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[1];
arg0[0] = "com.lts.io.DirectoryScanner";
directoryScanner.setExcludes(arg0);
boolean excluded = directoryScanner.isExcluded("com.lts.io.DirectoryScanner");
assertTrue(excluded);


** It was a parseable test case! 
refined test name is: testIsExcludedWithExcludePattern
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // No basedir set
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}


** It was a parseable test case! 
refined test name is: testScanThrowsExceptionWhenInputIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String arg0 = "C:\\Users\\user\\Documents";
directoryScanner.setBasedir(arg0);
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir does not exist
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}


** It was a parseable test case! 
refined test name is: testScanThrowsExceptionWhenBasedirIsNullOrEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
File createTempFile = MockFile.createTempFile("/~&'eI!<g^|HJ3X", "/~&'eI!<g^|HJ3X", (File) null);
directoryScanner.basedir = createTempFile;
// Undeclared exception!
try { 
  directoryScanner.scan();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // basedir is not a directory
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}


** It was a parseable test case! 
refined test name is: testScanThrowsExceptionWhenBasedirIsNotADirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
assertEquals(9, notIncludedDirectories.length);

String[] excludedDirectories = directoryScanner.getExcludedDirectories();
assertEquals(0, excludedDirectories.length);


** It was a parseable test case! 
refined test name is: testScanDirectoryWithMockFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("//**", "**/#*#");
try { 
  directoryScanner.scandir(arg0, "/home/user/Documents", true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // IO error scanning directory /**_/**_/#*#
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}


** It was a parseable test case! 
refined test name is: testScandirWithInvalidPathPattern
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
directoryScanner.scandir(arg0, "**/.cvsignore", false);
assertEquals(0L, arg0.length());


** It was a parseable test case! 
refined test name is: testDirectoryScanner
* Compiling Tests
refined test name is: testScanDirectoryAndFilterOutCVSIgnoreFiles
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg2 = new MockFile("C:UsersJohn Doe", "C:UsersJohn Doe");
directoryScanner.setBasedir((File) arg2);
MockFile.createTempFile("foo.txt", "bar.txt", (File) arg2);
directoryScanner.scan();
String[] notIncludedFiles = directoryScanner.getNotIncludedFiles();
assertEquals(1, notIncludedFiles.length);


** It was a parseable test case! 
refined test name is: testScanForNewlyCreatedFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
String[] includedFiles = directoryScanner.getIncludedFiles();
assertEquals(0, includedFiles.length);


** It was a parseable test case! 
refined test name is: testEmptyBasedir
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
MockFile.createTempFile("* *F-}~US>", "", (File) arg0);
directoryScanner.scandir(arg0, "* *F-}~US>", true);
String[] includedFiles = directoryScanner.getIncludedFiles();
assertEquals(1, includedFiles.length);


** It was a parseable test case! 
refined test name is: testScanDirectoryWithPattern
* Compiling Tests
refined test name is: testScanTemporaryFileCreationAndInclusion
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
String[] excludedFiles = directoryScanner.getExcludedFiles();
assertEquals(0, excludedFiles.length);


** It was a parseable test case! 
refined test name is: testExcludedFilesAreEmptyWhenNoFilesAreExcluded
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
directoryScanner.addDefaultExcludes();
MockFile.createTempFile("* *F-}~US>", "", (File) arg0);
directoryScanner.scandir(arg0, "**/CVS/**", false);
String[] excludedFiles = directoryScanner.getExcludedFiles();
assertEquals(0, excludedFiles.length);


** It was a parseable test case! 
refined test name is: testScanShouldReturnScannedFilesWithNoExclusions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg2 = new MockFile("**/CV/**");
directoryScanner.setBasedir((File) arg2);
MockFile.createTempFile("**/CV/**", "**/CV/**", (File) arg2);
directoryScanner.scan();
String[] includedDirectories = directoryScanner.getIncludedDirectories();
assertEquals(4, includedDirectories.length);


** It was a parseable test case! 
refined test name is: testGetIncludedDirectories
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[5];
arg0[0] = "**/example1/**";
arg0[1] = "**/example2/**";
arg0[2] = "**/example3/**";
arg0[3] = "**/example4/**";
arg0[4] = "*";
directoryScanner.setExcludes(arg0);
directoryScanner.addDefaultExcludes();

** It was a parseable test case! 
refined test name is: testDirectoryScannerExcludePatterns
* Compiling Tests
refined test name is: testDirectoryScannerExcludePatterns
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("");
assertFalse(couldHoldIncluded);


** It was a parseable test case! 
refined test name is: testCouldNotHoldIncludedWhenBaseDirDoesNotExist
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[9];
arg0[0] = "**/CVS/**";
arg0[1] = "**/CVS/**";
arg0[2] = "";
arg0[3] = "**/CVS/**";
arg0[4] = "**/CVS/**";
arg0[5] = "**/CVS/**";
arg0[6] = "**/CVS/**";
arg0[7] = "**/CVS/**";
arg0[8] = ", [";
directoryScanner.setIncludes(arg0);
boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("");
assertTrue(couldHoldIncluded);


** It was a parseable test case! 
refined test name is: testDirectoryScannerWithIncludesPatterns
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
File arg0 = MockFile.createTempFile("**/.cvsignore", "**/.cvsignore");
directoryScanner.setBasedir(arg0);
File basedir = directoryScanner.getBasedir();
assertTrue(basedir.isFile());


** It was a parseable test case! 
refined test name is: testSetBasedirWithFileArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
File basedir = directoryScanner.getBasedir();
assertEquals("", basedir.getName());


** It was a parseable test case! 
refined test name is: testSetBasedirWithEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
Vector<String> vector = new Vector<String>();
directoryScanner.dirsIncluded = vector;
String[] includedDirectories = directoryScanner.getIncludedDirectories();
assertEquals(0, includedDirectories.length);
assertNotNull(includedDirectories);


** It was a parseable test case! 
refined test name is: testGetIncludedDirectoriesNoIncludedDirectories
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
MockFile arg0 = new MockFile("");
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
assertEquals(0, notIncludedDirectories.length);


** It was a parseable test case! 
refined test name is: testScanWithValidDirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("", "");
DirectoryScanner directoryScanner = new DirectoryScanner();
directoryScanner.setBasedir((File) arg0);
directoryScanner.scan();
String[] notIncludedFiles = directoryScanner.getNotIncludedFiles();
assertEquals(0, notIncludedFiles.length);


** It was a parseable test case! 
refined test name is: testIgnoreListIgnoresAllFiles
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
String[] arg0 = new String[4];
arg0[0] = "**/.cvsignore";
arg0[1] = "";
arg0[2] = "com.lts.LTSException";
arg0[3] = "**/.cvsignore";
directoryScanner.setIncludes(arg0);
boolean included = directoryScanner.isIncluded("R");
assertFalse(included);


** It was a parseable test case! 
refined test name is: testIsIncludedFileNotIncludedReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DirectoryScanner directoryScanner = new DirectoryScanner();
// Undeclared exception!
try { 
  directoryScanner.slowScan();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.io.DirectoryScanner", e);
}


** It was a parseable test case! 
refined test name is: testSlowScanExceptionMessage
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.209 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.327 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.421 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.423 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.502 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:23.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:23.676 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.678 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:23.754 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:23.822 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.886 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:23.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.948 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:23.949 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.006 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.007 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.054 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.055 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.100 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:24.101 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.176 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.222 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.224 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.328 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.410 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.464 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.519 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.577 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.581 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.649 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.651 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.813 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.894 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:24.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:24.975 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:24.977 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.058 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.059 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:25.139 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:25.212 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.214 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.291 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.292 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:25.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:25.436 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.438 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:25.508 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.510 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.576 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.578 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:25.652 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.653 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.725 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.726 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
[MASTER] 05:42:25.791 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.793 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.855 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:25.921 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:25.985 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:25.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.060 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.064 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.128 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:42:26.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.188 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.249 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.250 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.308 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.309 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.369 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.370 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.429 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.492 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.555 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.620 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.622 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.681 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.683 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 05:42:26.751 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:26.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 13 called: 0 to improve: false
** Write a test suite: 26 called: 1 to improve: false
** Write a test suite: 27 called: 2 to improve: false
** Write a test suite: 34 called: 3 to improve: false
** Write a test suite: 37 called: 4 to improve: false
** Write a test suite: 41 called: 5 to improve: false
[MASTER] 05:42:28.072 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:28.075 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 9 called: 0 to improve: false
** Write a test suite: 13 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 23 called: 3 to improve: false
** Write a test suite: 24 called: 4 to improve: false
** Write a test suite: 37 called: 5 to improve: false
[MASTER] 05:42:29.690 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar4068422493830330844.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:42:29.692 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4068422493830330844.jar
* Writing tests to file
* Writing JUnit test case 'DirectoryScanner_ESTest' to evosuite-tests
** Write a test suite: 9 called: 0 to improve: false
** Write a test suite: 13 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 23 called: 3 to improve: false
** Write a test suite: 24 called: 4 to improve: false
** Write a test suite: 37 called: 5 to improve: false
* Done!

* Computation finished
