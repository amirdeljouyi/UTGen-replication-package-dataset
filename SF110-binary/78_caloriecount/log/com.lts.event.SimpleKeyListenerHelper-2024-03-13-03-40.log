* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.lts.event.SimpleKeyListenerHelper
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 7137
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:40:41.263 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:40:41.264 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:40:41.585 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:40:41.623 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:40:41.623 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:40:41.624 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 03:40:43.673 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 03:40:43.724 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 03:40:43.724 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 03:40:43.725 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 03:40:43.725 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 03:40:43.726 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 03:40:43.726 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 03:40:43.727 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 03:40:43.727 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 03:40:43.741 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 03:40:43.753 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class com.lts.event.SimpleKeyListenerHelper
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 79
* Using seed 1710301239035
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 38 / 79
[Progress:>                             0%] [Cov:============================>      80%][Progress:>                             1%] [Cov:============================>      80%][Progress:>                             1%] [Cov:=============================>     84%][Progress:>                             1%] [Cov:==============================>    87%][Progress:>                             1%] [Cov:================================>  94%][Progress:>                             1%] [Cov:================================>  94%][Progress:>                             1%] [Cov:=================================> 96%][Progress:>                             2%] [Cov:=================================> 96%][Progress:>                             2%] [Cov:=================================> 96%][Progress:>                             2%] [Cov:=================================> 97%][Progress:>                             2%] [Cov:=================================> 97%][MASTER] 03:40:49.146 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:>                             2%] [Cov:=================================> 97%][Progress:>                             2%] [Cov:=================================> 97%][Progress:>                             2%] [Cov:=================================> 97%][Progress:>                             2%] [Cov:=================================> 97%][MASTER] 03:40:50.303 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:>                             2%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:>                             3%] [Cov:=================================> 97%][Progress:=>                            4%] [Cov:===================================100%]
* Search finished after 8s and 25 generations, 27251 statements, best individual has fitness: 0.0
* Generated before the refinement 13 tests with total length 55
statement is: javax.swing.text.DefaultEditorKit$InsertTabAction()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.text.DefaultEditorKit$InsertTabAction
statement code is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction()
statement is: javax.swing.JMenu(Ljavax/swing/Action;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JMenu
statement code is: JMenu jMenu = new JMenu(arg0)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 2512, 0L, 964, 256, 'G')
statement is: keyReleased(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyReleased(arg0)
test data is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
        JMenu jMenu = new JMenu("File");
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
        KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
        simpleKeyListenerHelper.keyReleased(keyEvent);
    }
}
statement is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JMenu jMenu = new JMenu("File"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyReleased(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyReleased(keyEvent) target is: simpleKeyListenerHelper method is: keyReleased(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 2, type com.lts.event.SimpleKeyListenerHelperindex is: 2
Matched Method is: keyReleased(Ljava/awt/event/KeyEvent;)V
TestCase is: String string = "File";
JMenu jMenu = new JMenu((Action) string);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
int _int = 2512;
long _long = 0L;
int _int = 964;
int _int = 256;
char _char = 'G';
KeyEvent keyEvent = new KeyEvent(jMenu, _int, _long, _int, _int, _char);
simpleKeyListenerHelper.keyReleased(keyEvent);

statement is: javax.swing.text.DefaultEditorKit$InsertTabAction()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.text.DefaultEditorKit$InsertTabAction
statement code is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction()
statement is: javax.swing.JMenu(Ljavax/swing/Action;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JMenu
statement code is: JMenu jMenu = new JMenu(arg0)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 2512, 0L, 964, 256, 'G')
statement is: keyTyped(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyTyped(arg0)
test data is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
        JMenu fileMenu = new JMenu("File");
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(fileMenu);
        KeyEvent keyEvent = new KeyEvent(fileMenu, "G", "now", 256);
        simpleKeyListenerHelper.keyTyped(keyEvent);
    }
}
statement is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JMenu fileMenu = new JMenu("File"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(fileMenu), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(fileMenu, "G", "now", 256), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyTyped(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyTyped(keyEvent) target is: simpleKeyListenerHelper method is: keyTyped(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 2, type com.lts.event.SimpleKeyListenerHelperindex is: 2
Matched Method is: keyTyped(Ljava/awt/event/KeyEvent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "File";
JMenu jMenu = new JMenu((Action) string);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = null;
simpleKeyListenerHelper.keyTyped(keyEvent);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: detach()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.detach()
statement is: detach()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.detach()
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Checkbox", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        simpleKeyListenerHelper.detach();
        simpleKeyListenerHelper.detach();
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Checkbox", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.detach(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.detach() target is: simpleKeyListenerHelper method is: detach()
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: detach()V
statement is: simpleKeyListenerHelper.detach(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.detach() target is: simpleKeyListenerHelper method is: detach()
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: detach()V
TestCase is: String string = "Checkbox";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
((SimpleKeyListenerHelper) _boolean).detach();
((SimpleKeyListenerHelper) _boolean).detach();

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@f140b734 type is: class org.evosuite.testcase.statements.FieldStatement return type class sun.awt.SunHints$Key
statement code is: SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS
statement is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.notifyListener((Object) null, 9, arg2)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        SunHints.Key sunHints_Key = ((SunHints.Key) (RenderingHints.KEY_FRACTIONALMETRICS));
        simpleKeyListenerHelper.notifyListener(((Object) (null)), 10, sunHints_Key);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SunHints.Key sunHints_Key = ((SunHints.Key) (RenderingHints.KEY_FRACTIONALMETRICS)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ((SunHints.Key) (RenderingHints.KEY_FRACTIONALMETRICS)) is RenderingHints
CtField is: public static final java.awt.RenderingHints$Key java.awt.RenderingHints.KEY_FRACTIONALMETRICS Key KEY_FRACTIONALMETRICS
statement is: simpleKeyListenerHelper.notifyListener(((Object) (null)), 10, sunHints_Key), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.notifyListener(((Object) (null)), 10, sunHints_Key) target is: simpleKeyListenerHelper method is: notifyListener(java.lang.Object,int,SunHints.Key)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: String string = "";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 10;
int _int = null;
SunHints.Key sunHints_Key = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, _int, sunHints_Key);

statement is: javax.swing.JCheckBox(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("v=I[")
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: com.lts.event.SimpleKeyListenerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerAdapter
statement code is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter()
statement is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.notifyListener(arg0, 10, arg2)
test data is: JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Enter");
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
        simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Enter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox) target is: simpleKeyListenerHelper method is: notifyListener(SimpleKeyListenerAdapter,int,JCheckBox)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 2
Matched Method is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V
TestCase is: String string = "Enter";
JCheckBox jCheckBox = new JCheckBox(string);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 10;
((SimpleKeyListenerHelper) jCheckBox).notifyListener(simpleKeyListenerAdapter, _int, jCheckBox);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: com.lts.event.SimpleKeyListenerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerAdapter
statement code is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter()
statement is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.notifyListener(arg0, 155, "Alt+Shift")
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Select All", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
        simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Ctrl+A");
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Select All", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Ctrl+A"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Ctrl+A") target is: simpleKeyListenerHelper method is: notifyListener(SimpleKeyListenerAdapter,int,java.lang.String)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V
TestCase is: String string = "Select All";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 155;
String string = "Ctrl+A";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.notifyListener((Object) null, 1, arg2)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), true);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        Object object = new Object();
        simpleKeyListenerHelper.notifyListener(((Object) (null)), 1, object);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.notifyListener(((Object) (null)), 1, object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.notifyListener(((Object) (null)), 1, object) target is: simpleKeyListenerHelper method is: notifyListener(java.lang.Object,int,java.lang.Object)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "";
boolean _boolean = true;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
int _int = 1;
Object object = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, (int) object, object);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 40, 40, 40, 9, '7')
statement is: keyPressed(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyPressed(arg0)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, KeyEvent.VK_ENTER);
        simpleKeyListenerHelper.keyPressed(keyEvent);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, KeyEvent.VK_ENTER), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyPressed(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyPressed(keyEvent) target is: simpleKeyListenerHelper method is: keyPressed(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: keyPressed(Ljava/awt/event/KeyEvent;)V
TestCase is: String string = "";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 40;
int _int = 40;
int _int = 40;
int _int = 9;
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _int, _int, _int, '7');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 265, 0L, 127, 3, '7')
statement is: keyPressed(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyPressed(arg0)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Select all", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, 'A');
        simpleKeyListenerHelper.keyPressed(keyEvent);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Select all", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, 'A'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyPressed(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyPressed(keyEvent) target is: simpleKeyListenerHelper method is: keyPressed(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: keyPressed(Ljava/awt/event/KeyEvent;)V
TestCase is: String string = "Select all";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 265;
long _long = 0L;
int _int = 127;
int _int = 3;
char _char = 'A';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 0, 468L, (-4370), 10, '+')
statement is: keyPressed(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyPressed(arg0)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Add", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, -4370, 10, '+');
        simpleKeyListenerHelper.keyPressed(keyEvent);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Add", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, -4370, 10, '+'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyPressed(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyPressed(keyEvent) target is: simpleKeyListenerHelper method is: keyPressed(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: keyPressed(Ljava/awt/event/KeyEvent;)V
TestCase is: String string = "Add";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 0;
long _long = 468L;
int _int = 10;
char _char = '+';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _char, '+');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 127, 1L, 127, 127, 'u')
statement is: keyPressed(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyPressed(arg0)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        KeyEvent keyEvent = new KeyEvent(jCheckBox, 65, 1L, 65, 65, 'a');
        simpleKeyListenerHelper.keyPressed(keyEvent);
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("", ((Icon) (null)), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: KeyEvent keyEvent = new KeyEvent(jCheckBox, 65, 1L, 65, 65, 'a'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyPressed(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyPressed(keyEvent) target is: simpleKeyListenerHelper method is: keyPressed(KeyEvent)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: keyPressed(Ljava/awt/event/KeyEvent;)V
TestCase is: String string = "";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 65;
long _long = 1L;
int _int = 65;
int _int = 65;
char _char = 'a';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

statement is: javax.swing.text.DefaultEditorKit$InsertTabAction()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.text.DefaultEditorKit$InsertTabAction
statement code is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction()
statement is: javax.swing.JMenu(Ljavax/swing/Action;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JMenu
statement code is: JMenu jMenu = new JMenu(arg0)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: java.awt.event.KeyEvent(Ljava/awt/Component;IJIIC)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.awt.event.KeyEvent
statement code is: KeyEvent keyEvent = new KeyEvent(arg0, 155, 155, 964, 155, '4')
statement is: keyPressed(Ljava/awt/event/KeyEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.keyPressed(arg0)
test data is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
        JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
        KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');// Changed the value of the key pressed from '4' to '\t' (tab character) to better reflect the intent of the test

        simpleKeyListenerHelper.keyPressed(keyEvent);
    }
}
statement is: DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: javax.swing.JMenu(Ljavax/swing/Action;)V
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V
statement is: KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4')// Changed the value of the key pressed from '4' to '\t' (tab character) to better reflect the intent of the test
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.keyPressed(keyEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.keyPressed(keyEvent) target is: simpleKeyListenerHelper method is: keyPressed(KeyEvent)
source statement: int _int = 155 callee: VariableReference: Statement 2, type com.lts.event.SimpleKeyListenerHelperindex is: 0
TestCase is: int _int = 155;
int _int = 155;
int _int = 964;
int _int = 155;
char _char = '4';
KeyEvent keyEvent = new KeyEvent((Component) _int, _int, _int, _int, _char, '4');

statement is: javax.swing.JCheckBox(Ljava/lang/String;Ljavax/swing/Icon;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.swing.JCheckBox
statement code is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false)
statement is: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerHelper
statement code is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0)
statement is: com.lts.event.SimpleKeyListenerAdapter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.lts.event.SimpleKeyListenerAdapter
statement code is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter()
statement is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: simpleKeyListenerHelper.notifyListener(arg0, 127, (Object) null)
test data is: JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCheckBox jCheckBox = new JCheckBox("Checkbox", new ImageIcon("/path/to/checkbox.png"), false);
        SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
        SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
        simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, ((Object) ("Hello World!")));
    }
}
statement is: JCheckBox jCheckBox = new JCheckBox("Checkbox", new ImageIcon("/path/to/checkbox.png"), false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, ((Object) ("Hello World!"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, ((Object) ("Hello World!"))) target is: simpleKeyListenerHelper method is: notifyListener(SimpleKeyListenerAdapter,int,java.lang.Object)
source statement: com.lts.event.SimpleKeyListenerHelper(Ljava/awt/Component;)V callee: VariableReference: Statement 1, type com.lts.event.SimpleKeyListenerHelperindex is: 3
Matched Method is: notifyListener(Ljava/lang/Object;ILjava/lang/Object;)V
TestCase is: String string = "Checkbox";
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox(string, (Icon) _boolean, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 127;
String string = "Hello World!";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);

* test suite isTestSuite: 26
Test 0: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 1: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);
Test 2: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();
Test 3: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}

Test 4: 
JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
Test 5: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");
Test 6: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);
Test 7: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 8: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 9: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 10: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 11: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 12: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);
Test 13: 
JMenu jMenu = new JMenu((Action) "File");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
int _int = 2512;
long _long = 0L;
int _int = 964;
int _int = 256;
char _char = 'G';
KeyEvent keyEvent = new KeyEvent(jMenu, _int, _long, _int, _int, _char);
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 14: 
JMenu jMenu = new JMenu((Action) "File");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = null;
simpleKeyListenerHelper.keyTyped(keyEvent);

Test 15: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Checkbox", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
((SimpleKeyListenerHelper) _boolean).detach();
((SimpleKeyListenerHelper) _boolean).detach();

Test 16: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 10;
int _int = null;
SunHints.Key sunHints_Key = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, _int, sunHints_Key);

Test 17: 
JCheckBox jCheckBox = new JCheckBox("Enter");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
((SimpleKeyListenerHelper) jCheckBox).notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);

Test 18: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Select All", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 155;
String string = "Ctrl+A";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);

Test 19: 
boolean _boolean = true;
JCheckBox jCheckBox = new JCheckBox("", (Icon) true, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
int _int = 1;
Object object = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, (int) object, object);

Test 20: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 40;
int _int = 40;
int _int = 40;
int _int = 9;
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _int, _int, _int, '7');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 21: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Select all", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 265;
long _long = 0L;
int _int = 127;
int _int = 3;
char _char = 'A';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 22: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Add", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 0;
long _long = 468L;
int _int = 10;
char _char = '+';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _char, '+');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 23: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 65;
long _long = 1L;
int _int = 65;
int _int = 65;
char _char = 'a';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 24: 
KeyEvent keyEvent = new KeyEvent((Component) 155, 155, 964, 155, '4', '4');

Test 25: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Checkbox", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 127;
String string = "Hello World!";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);


* Generated after the refinement and before minimization 26 tests with total length 144
* test suite isTestSuite: 26
Test 0: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 1: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);
Test 2: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();
Test 3: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}

Test 4: 
JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
Test 5: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");
Test 6: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);
Test 7: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 8: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 9: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 10: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 11: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 12: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);
Test 13: 
JMenu jMenu = new JMenu((Action) "File");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
int _int = 2512;
long _long = 0L;
int _int = 964;
int _int = 256;
char _char = 'G';
KeyEvent keyEvent = new KeyEvent(jMenu, _int, _long, _int, _int, _char);
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 14: 
JMenu jMenu = new JMenu((Action) "File");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = null;
simpleKeyListenerHelper.keyTyped(keyEvent);

Test 15: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Checkbox", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
((SimpleKeyListenerHelper) _boolean).detach();
((SimpleKeyListenerHelper) _boolean).detach();

Test 16: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 10;
int _int = null;
SunHints.Key sunHints_Key = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, _int, sunHints_Key);

Test 17: 
JCheckBox jCheckBox = new JCheckBox("Enter");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
((SimpleKeyListenerHelper) jCheckBox).notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);

Test 18: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Select All", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 155;
String string = "Ctrl+A";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);

Test 19: 
boolean _boolean = true;
JCheckBox jCheckBox = new JCheckBox("", (Icon) true, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
int _int = 1;
Object object = null;
((SimpleKeyListenerHelper) _boolean).notifyListener(_int, (int) object, object);

Test 20: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 40;
int _int = 40;
int _int = 40;
int _int = 9;
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _int, _int, _int, '7');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 21: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Select all", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 265;
long _long = 0L;
int _int = 127;
int _int = 3;
char _char = 'A';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 22: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Add", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 0;
long _long = 468L;
int _int = 10;
char _char = '+';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _char, '+');
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 23: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
int _int = 65;
long _long = 1L;
int _int = 65;
int _int = 65;
char _char = 'a';
KeyEvent keyEvent = new KeyEvent(jCheckBox, _int, _long, _int, _int, _char);
((SimpleKeyListenerHelper) _boolean).keyPressed(keyEvent);

Test 24: 
KeyEvent keyEvent = new KeyEvent((Component) 155, 155, 964, 155, '4', '4');

Test 25: 
boolean _boolean = false;
JCheckBox jCheckBox = new JCheckBox("Checkbox", (Icon) false, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
int _int = 127;
String string = "Hello World!";
((SimpleKeyListenerHelper) _boolean).notifyListener(simpleKeyListenerAdapter, _int, string);


* Minimizing test suite
* test suite isTestSuite: 13
Test 0: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 1: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);
Test 2: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();
Test 3: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}

Test 4: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);
Test 5: 
JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
Test 6: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);
Test 7: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");
Test 8: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 9: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 10: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 11: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 12: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Generated 13 tests with total length 55
* Resulting test suite's coverage: 100% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCheckBox arg0 = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();

** It was a parseable test case! 
refined test name is: testDetachSimpleKeyListenerHelper
* Compiling Tests
refined test name is: testDetachSimpleKeyListenerHelperFromJCheckBox
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCheckBox arg0 = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0);
SunHints.Key arg2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, arg2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}


** It was a parseable test case! 
refined test name is: testNotifyListenerNullArguments
* Compiling Tests
refined test name is: testNotifyListenerWithNullObjectAndInvalidKeyCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCheckBox arg0 = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg0);
Object arg2 = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, arg2);

** It was a parseable test case! 
refined test name is: testJCheckBoxSelectWithKeyPressEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCheckBox arg2 = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(arg2);
SimpleKeyListenerAdapter arg0 = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(arg0, 10, arg2);
assertFalse(arg2.isFocusTraversalPolicySet());


** It was a parseable test case! 
refined test name is: testNotifyListenerWithKeyEvent10
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:43.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:43.598 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:43.724 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:43.725 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:47:43.821 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:43.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:47:43.915 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:43.916 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 03:47:44.070 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:44.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
[MASTER] 03:47:44.235 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:44.236 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
[MASTER] 03:47:44.491 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 13
Test 0: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 1: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);
Test 2: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();
Test 3: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}

Test 4: 
JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
Test 5: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");
Test 6: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);
Test 7: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 8: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 9: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 10: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 11: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 12: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);

* Minimizing test suite
* test suite isTestSuite: 13
Test 0: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyReleased(keyEvent);

Test 1: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 2512, 0L, 964, 256, 'G');
simpleKeyListenerHelper.keyTyped(keyEvent);
Test 2: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
simpleKeyListenerHelper.detach();
simpleKeyListenerHelper.detach();
Test 3: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SunHints.Key sunHints_Key = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
// Undeclared exception!
try { 
  simpleKeyListenerHelper.notifyListener((Object) null, 9, sunHints_Key);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.lts.event.SimpleKeyListenerHelper", e);
}

Test 4: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
Object object = new Object();
simpleKeyListenerHelper.notifyListener((Object) null, 1, object);
Test 5: 
JCheckBox jCheckBox = new JCheckBox("v=I[");
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 10, jCheckBox);
Test 6: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 127, (Object) null);
Test 7: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
SimpleKeyListenerAdapter simpleKeyListenerAdapter = new SimpleKeyListenerAdapter();
simpleKeyListenerHelper.notifyListener(simpleKeyListenerAdapter, 155, "Alt+Shift");
Test 8: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 40, 40, 40, 9, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 9: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 0, 468L, (-4370), 10, '+');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 10: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 127, 1L, 127, 127, 'u');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 11: 
DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction = new DefaultEditorKit.InsertTabAction();
JMenu jMenu = new JMenu(defaultEditorKit_InsertTabAction);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jMenu);
KeyEvent keyEvent = new KeyEvent(jMenu, 155, 155, 964, 155, '4');
simpleKeyListenerHelper.keyPressed(keyEvent);
Test 12: 
JCheckBox jCheckBox = new JCheckBox("", (Icon) null, false);
SimpleKeyListenerHelper simpleKeyListenerHelper = new SimpleKeyListenerHelper(jCheckBox);
KeyEvent keyEvent = new KeyEvent(jCheckBox, 265, 0L, 127, 3, '7');
simpleKeyListenerHelper.keyPressed(keyEvent);

[MASTER] 03:47:49.117 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Generated 13 tests with total length 55
* Resulting test suite's coverage: 100% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:47:49.200 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
[MASTER] 03:47:49.623 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:51.125 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:51.257 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.260 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:51.393 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.394 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:47:51.541 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.547 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 03:47:51.746 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.748 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 03:47:51.839 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar450185543175156022.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:47:51.850 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar450185543175156022.jar
* Writing tests to file
[MASTER] 03:47:51.851 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'SimpleKeyListenerHelper_ESTest' to evosuite-tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
* Writing JUnit test case 'SimpleKeyListenerHelper_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
* Done!

* Computation finished
