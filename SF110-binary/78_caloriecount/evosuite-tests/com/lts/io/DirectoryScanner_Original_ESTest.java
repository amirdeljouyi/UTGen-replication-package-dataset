/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 10:59:13 GMT 2024
 */

package com.lts.io;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.DirectoryScanner;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectoryScanner_Original_ESTest extends DirectoryScanner_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIncludedReturningFalse() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] stringArray = new String[2];
      directoryScanner.includes = stringArray;
      stringArray[0] = "";
      stringArray[1] = "hB?";
      boolean included = directoryScanner.isIncluded("a4jaH+Xt5=yuD 7%xr,");
      assertFalse(included);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsExcludedReturningTrue() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] stringArray = new String[1];
      stringArray[0] = "**/";
      directoryScanner.excludes = stringArray;
      boolean excluded = directoryScanner.isExcluded("**/");
      assertTrue(excluded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBasedirReturningFileWhereLengthIsPositive() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("lHU");
      byte[] arg1 = new byte[5];
      FileSystemHandling.appendDataToFile(arg0, arg1);
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("lHU");
      File basedir = directoryScanner.getBasedir();
      assertTrue(basedir.canExecute());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBasedirReturningFileWhereIsDirectoryIsTrue() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("");
      File basedir = directoryScanner.getBasedir();
      assertFalse(basedir.isFile());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBasedirReturningFileWhereLastModifiedIsZero() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("/**/.cvsignore");
      File basedir = directoryScanner.getBasedir();
      assertEquals(".cvsignore", basedir.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCouldHoldIncludedReturningFalse() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[9];
      arg0[0] = "U`'Tzyv QUN7-jn~Pq#";
      arg0[1] = "13e3Md5q1MvJ(";
      arg0[2] = "3*\rU[z*}|,=(/2m";
      arg0[3] = "nr";
      arg0[4] = "*$\"J[cr(t";
      arg0[5] = "_q*L/l";
      arg0[6] = "";
      arg0[7] = "";
      arg0[8] = " *9I$@(";
      directoryScanner.setIncludes(arg0);
      boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("n");
      assertFalse(couldHoldIncluded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScandirThrowsException() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      File arg0 = MockFile.createTempFile("*jt`/CVS*", "*jt`/CVS*");
      try { 
        directoryScanner.scandir(arg0, "*jt`/CVS*", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /tmp/*jt`/CVS*0*jt`/CVS*
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetBasedirTakingFile() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      MockFile arg0 = new MockFile("hB?");
      directoryScanner.setBasedir((File) arg0);
      assertFalse(arg0.isDirectory());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDirectoryScannerAndCallsAddDefaultExcludes() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.addDefaultExcludes();
      directoryScanner.addDefaultExcludes();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExcludedDirectoriesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("*t/CVS/*");
      MockFile arg2 = new MockFile("*t/CVS/*");
      String[] arg0 = new String[1];
      arg0[0] = "*t/CVS/*";
      directoryScanner.setExcludes(arg0);
      MockFile.createTempFile("*t/CVS/*", "*t/CVS/*", (File) arg2);
      directoryScanner.scan();
      String[] excludedDirectories = directoryScanner.getExcludedDirectories();
      assertEquals(1, excludedDirectories.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNotIncludedDirectoriesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("**#/CV<Y/**");
      String[] arg0 = new String[5];
      arg0[0] = "**#/CV<Y/**";
      arg0[1] = "**#/CV<Y/**";
      arg0[2] = "**#/CV<Y/**";
      arg0[3] = "**#/CV<Y/**";
      arg0[4] = "**#/CV<Y/**";
      directoryScanner.setIncludes(arg0);
      MockFile arg2 = new MockFile("**#/CV<Y/**", "**#/CV<Y/**");
      MockFile.createTempFile("**#/CV<Y/**", "**#/CV<Y/**", (File) arg2);
      directoryScanner.scan();
      String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
      assertEquals(1, notIncludedDirectories.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIncludedDirectoriesReturningEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("");
      directoryScanner.scan();
      String[] includedDirectories = directoryScanner.getIncludedDirectories();
      assertEquals(0, includedDirectories.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExcludedFilesReturningEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("**/%*%");
      MockFile arg2 = new MockFile("**/%*%");
      MockFile.createTempFile("**/%*%", "**/%*%", (File) arg2);
      directoryScanner.scan();
      String[] excludedFiles = directoryScanner.getExcludedFiles();
      assertEquals(0, excludedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNotIncludedFilesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("~@OM0Fej");
      MockFile arg2 = new MockFile("~@OM0Fej");
      MockFile.createTempFile("~@OM0Fej", "~@OM0Fej", (File) arg2);
      directoryScanner.scan();
      String[] notIncludedFiles = directoryScanner.getNotIncludedFiles();
      assertEquals(1, notIncludedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNotIncludedFilesReturningEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("");
      directoryScanner.scan();
      String[] notIncludedFiles = directoryScanner.getNotIncludedFiles();
      assertEquals(0, notIncludedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIncludedFilesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("*t/b%[fS/*");
      MockFile arg2 = new MockFile("*t/b%[fS/*", "*t/b%[fS/*");
      MockFile.createTempFile("*t/b%[fS/*", "*t/b%[fS/*", (File) arg2);
      directoryScanner.scan();
      String[] includedFiles = directoryScanner.getIncludedFiles();
      assertEquals(1, includedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIncludedFilesReturningEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("");
      directoryScanner.scan();
      String[] includedFiles = directoryScanner.getIncludedFiles();
      assertEquals(0, includedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExcludedFilesThrowsException() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("*t/CVS/*");
      MockFile arg0 = new MockFile("*t/CVS/*", "*t/CVS/*");
      MockFile.createTempFile("*t/CVS/*", "*t/CVS/*", (File) arg0);
      directoryScanner.scan();
      directoryScanner.addDefaultExcludes();
      directoryScanner.scandir(arg0, "*t/CVS/*", false);
      try { 
        directoryScanner.getExcludedFiles();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/roham/Results-Utestgen/dataset/SF110-new-res/78_caloriecount/*t/CVS/*_/*t/CVS/**t
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNotIncludedDirectoriesReturningEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("**#/CV<Y/**");
      MockFile arg2 = new MockFile("**#/CV<Y/**", "**#/CV<Y/**");
      MockFile.createTempFile("**#/CV<Y/**", "**#/CV<Y/**", (File) arg2);
      directoryScanner.scan();
      String[] notIncludedDirectories = directoryScanner.getNotIncludedDirectories();
      assertEquals(0, notIncludedDirectories.length);
      
      String[] excludedDirectories = directoryScanner.getExcludedDirectories();
      assertEquals(0, excludedDirectories.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSlowScanThrowsNullPointerException() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      // Undeclared exception!
      try { 
        directoryScanner.slowScan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsIllegalStateException0() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      MockFile arg2 = new MockFile("&JAd&9SPU2vOs(");
      File createTempFile = MockFile.createTempFile("//com.lts.LTSException", "<A'n[", (File) arg2);
      directoryScanner.basedir = createTempFile;
      // Undeclared exception!
      try { 
        directoryScanner.scan();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // basedir is not a directory
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsIllegalStateExceptionAndSetBasedirTakingString() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("\"");
      // Undeclared exception!
      try { 
        directoryScanner.scan();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // basedir does not exist
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsIllegalStateException1() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      // Undeclared exception!
      try { 
        directoryScanner.scan();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No basedir set
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetExcludes() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[1];
      arg0[0] = "*/";
      directoryScanner.setExcludes(arg0);
      assertEquals(1, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetExcludesWithNull() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setExcludes((String[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsExcludedReturningFalse() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[0];
      directoryScanner.setExcludes(arg0);
      boolean excluded = directoryScanner.isExcluded("czW5}[I%;D");
      assertFalse(excluded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIncludesWithNull() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setIncludes((String[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningTrue0() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("dataseB0*?Gc*", "dataseB0*?Gc*");
      assertTrue(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningFalse0() throws Throwable  {
      boolean match = DirectoryScanner.match("*t/CVS/**", "U,.N[0#sQk");
      assertFalse(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningFalse1() throws Throwable  {
      boolean match = DirectoryScanner.match("**/*bS/**", "/");
      assertFalse(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningTrue0() throws Throwable  {
      boolean match = DirectoryScanner.match("*~", "~");
      assertTrue(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningFalse2() throws Throwable  {
      boolean match = DirectoryScanner.match("**/*a~", "~");
      assertFalse(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningTrueAndMatchWithEmptyString() throws Throwable  {
      boolean match = DirectoryScanner.match("**", "");
      assertTrue(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningTrue1() throws Throwable  {
      boolean match = DirectoryScanner.match("=?->CI*", "=?->CI*");
      assertTrue(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchAndMatchReturningFalseAndMatchWithEmptyString() throws Throwable  {
      boolean match = DirectoryScanner.match("6*", "");
      assertFalse(match);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIncludedReturningTrue() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[2];
      arg0[0] = "hB?";
      arg0[1] = "hB?";
      directoryScanner.setIncludes(arg0);
      boolean included = directoryScanner.isIncluded("hB?");
      assertTrue(included);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningTrue1() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("**/CV/**", "**/CV/**");
      assertTrue(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanAndAddDefaultExcludes() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("*u*~");
      MockFile arg2 = new MockFile("*u*~");
      directoryScanner.addDefaultExcludes();
      MockFile.createTempFile("*u*~", "*u*~", (File) arg2);
      directoryScanner.scan();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExcludedFilesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.addDefaultExcludes();
      directoryScanner.setBasedir("**/%*%");
      MockFile arg2 = new MockFile("**/%*%");
      MockFile.createTempFile("**/%*%", "**/%*%", (File) arg2);
      directoryScanner.scan();
      String[] excludedFiles = directoryScanner.getExcludedFiles();
      assertEquals(1, excludedFiles.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningFalse0() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("**/VS/*", "*");
      assertFalse(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningFalse1() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("/**/CVS/**", "/");
      assertFalse(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningFalse2() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("*==", "**/.cvsignore");
      assertFalse(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPathAndMatchPathReturningTrue2() throws Throwable  {
      boolean matchPath = DirectoryScanner.matchPath("**//**", "**//**");
      assertTrue(matchPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCouldHoldIncludedReturningTrue() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[1];
      arg0[0] = "**/";
      directoryScanner.setIncludes(arg0);
      boolean couldHoldIncluded = directoryScanner.couldHoldIncluded("**/");
      assertTrue(couldHoldIncluded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExcludedDirectoriesAndSetIncludes() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      String[] arg0 = new String[3];
      arg0[0] = "*t/CVS/*";
      arg0[1] = "*t/CVS/*";
      arg0[2] = "*t/CVS/*";
      directoryScanner.setIncludes(arg0);
      directoryScanner.setBasedir("*t/CVS/*");
      MockFile arg2 = new MockFile("*t/CVS/*", "*t/CVS/*");
      MockFile.createTempFile("*t/CVS/*", "*t/CVS/*", (File) arg2);
      directoryScanner.scan();
      String[] excludedDirectories = directoryScanner.getExcludedDirectories();
      assertEquals(0, excludedDirectories.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternStartReturningTrue() throws Throwable  {
      boolean matchPatternStart = DirectoryScanner.matchPatternStart("*?/CVS/*", "*?/CVS/*");
      assertTrue(matchPatternStart);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScan() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("/home/roham/Results-Utestgen/dataset/SF110-new-res");
      directoryScanner.scan();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternStartReturningFalse() throws Throwable  {
      boolean matchPatternStart = DirectoryScanner.matchPatternStart("**A/#*#", "**/CVS");
      assertFalse(matchPatternStart);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBasedirReturningNull() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      File basedir = directoryScanner.getBasedir();
      assertNull(basedir);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIncludedDirectoriesReturningNonEmptyArray() throws Throwable  {
      DirectoryScanner directoryScanner = new DirectoryScanner();
      directoryScanner.setBasedir("");
      MockFile arg0 = new MockFile("", "");
      directoryScanner.scan();
      directoryScanner.scandir(arg0, "**/%*%", false);
      String[] includedDirectories = directoryScanner.getIncludedDirectories();
      assertEquals(7, includedDirectories.length);
  }
}
