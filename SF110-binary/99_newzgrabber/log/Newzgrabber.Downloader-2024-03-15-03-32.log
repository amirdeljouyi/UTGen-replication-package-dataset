* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: Newzgrabber.Downloader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 18236
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:33:07.490 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:33:07.492 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:33:07.503 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:33:07.652 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:33:07.653 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:33:07.654 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 03:33:12.030 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 03:33:12.179 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 03:33:12.180 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 03:33:12.180 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 03:33:12.187 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 03:33:12.189 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 03:33:12.190 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 03:33:12.193 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 03:33:12.197 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 03:33:12.237 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 03:33:12.268 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Downloader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 905
* Using seed 1710473580339
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 91 / 905
[Progress:=>                            5%] [Cov:============>                      35%][Progress:=>                            6%] [Cov:============>                      36%][Progress:==>                           9%] [Cov:============>                      36%][Progress:==>                           9%] [Cov:============>                      36%][Progress:==>                           9%] [Cov:============>                      37%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:==============>                    40%][Progress:==============>               48%] [Cov:==============>                    40%][Progress:===============>              51%] [Cov:==============>                    40%][Progress:===============>              51%] [Cov:==============>                    40%][Progress:===============>              51%] [Cov:==============>                    40%][Progress:===============>              51%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:=====================>        72%] [Cov:==============>                    42%][Progress:=====================>        72%] [Cov:==============>                    42%][Progress:========================>     80%] [Cov:===============>                   43%][Progress:==========================>   87%] [Cov:===============>                   43%][Progress:==========================>   87%] [Cov:===============>                   43%][Progress:==========================>   87%] [Cov:===============>                   44%][Progress:===========================>  93%] [Cov:===============>                   44%][Progress:===========================>  93%] [Cov:===============>                   44%][Progress:===========================>  93%] [Cov:===============>                   44%][Progress:============================> 95%] [Cov:===============>                   44%][Progress:============================> 95%] [Cov:===============>                   44%][Progress:============================> 96%] [Cov:===============>                   44%][Progress:============================> 96%] [Cov:===============>                   44%][Progress:============================> 96%] [Cov:===============>                   44%][Progress:==============================100%] [Cov:===============>                   44%]
* Search finished after 203s and 41 generations, 14226 statements, best individual has fitness: 755.0
* Generated before the refinement 23 tests with total length 64
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines((-3130L))
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines((-3130L));
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTotalLines(1234567890);// Improved test data

        downloader.getTotalLines();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTotalLines(1234567890)// Improved test data
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(1234567890)// Improved test data
 target is: downloader method is: setTotalLines(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTotalLines(J)V
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTotalLines()J
TestCase is: Downloader downloader = new Downloader();
int _int = 1234567890;
downloader.setTotalLines(_int);
downloader.getTotalLines();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@5f36183 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[2]
statement is: setDownloadData([Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setDownloadData(arg0)
test data is: Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        Object[] objectArray = new Object[]{ new String("Hello"), new Integer(5) };
        downloader.setDownloadData(objectArray);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object[] objectArray = new Object[]{ new String("Hello"), new Integer(5) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Object[] objectArray = new Object[2] isAssignment: false Array: new Object[]{ new String("Hello"), new Integer(5) } Elements: [new String("Hello"), new Integer(5)]
lengths: [2] []
statement is: downloader.setDownloadData(objectArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDownloadData(objectArray) target is: downloader method is: setDownloadData(java.lang.Object[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadData([Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Downloader downloader = new Downloader();
Object[] objectArray = null;
downloader.setDownloadData(objectArray);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTableIndex(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTableIndex(0)
test data is: Downloader downloader = new Downloader();
downloader.setTableIndex(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTableIndex("https://www.example.com/");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTableIndex("https://www.example.com/"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTableIndex("https://www.example.com/") target is: downloader method is: setTableIndex(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTableIndex(I)V
TestCase is: Downloader downloader = new Downloader();
String string = "https://www.example.com/";
downloader.setTableIndex((int) string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setServer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setServer("Authenticating username and password")
test data is: Downloader downloader = new Downloader();
downloader.setServer("Authenticating username and password");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setServer("http://www.example.com", "user12345", "password12345");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setServer("http://www.example.com", "user12345", "password12345"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setServer("http://www.example.com", "user12345", "password12345") target is: downloader method is: setServer(java.lang.String,java.lang.String,java.lang.String)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTitle(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTitle("Authenticating username and password")
test data is: Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTitle("Authenticating username and password");
        downloader.setUrl("https://example.com/login");
        downloader.setUsername("johndoe");
        downloader.setPassword("password123");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTitle("Authenticating username and password"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTitle("Authenticating username and password") target is: downloader method is: setTitle(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTitle(Ljava/lang/String;)V
statement is: downloader.setUrl("https://example.com/login"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUrl("https://example.com/login") target is: downloader method is: setUrl(java.lang.String)
statement is: downloader.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("johndoe") target is: downloader method is: setUsername(java.lang.String)
statement is: downloader.setPassword("password123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPassword("password123") target is: downloader method is: setPassword(java.lang.String)
TestCase is: Downloader downloader = new Downloader();
String string = "Authenticating username and password";
downloader.setTitle(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setUsername(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setUsername("pAjfCFt<D#NM,")
test data is: Downloader downloader = new Downloader();
downloader.setUsername("pAjfCFt<D#NM,");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setUsername("johndoe123!");
        downloader.setUsername("janedoe456!");
        downloader.setUsername("admin789!");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setUsername("johndoe123!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("johndoe123!") target is: downloader method is: setUsername(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setUsername(Ljava/lang/String;)V
statement is: downloader.setUsername("janedoe456!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("janedoe456!") target is: downloader method is: setUsername(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setUsername(Ljava/lang/String;)V
statement is: downloader.setUsername("admin789!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("admin789!") target is: downloader method is: setUsername(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setUsername(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "johndoe123!";
downloader.setUsername(string);
String string = "janedoe456!";
downloader.setUsername(string);
String string = "admin789!";
downloader.setUsername(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.getGroup(GROUP_ID_FOR_TESTING);// passing a group id as an argument to the getGroup method }}

    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.getGroup(GROUP_ID_FOR_TESTING)// passing a group id as an argument to the getGroup method }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup(GROUP_ID_FOR_TESTING)// passing a group id as an argument to the getGroup method }}
 target is: downloader method is: getGroup()
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        assertEquals(100, downloader.getTotalLines());
        assertNotEquals(100, downloader.getTotalLines());
        assertTrue(downloader.getTotalLines() > 50);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(100, downloader.getTotalLines()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(100, downloader.getTotalLines()) target is:  method is: assertEquals(int,<unknown>)
statement is: assertNotEquals(100, downloader.getTotalLines()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(100, downloader.getTotalLines()) target is:  method is: assertNotEquals(int,<unknown>)
statement is: assertTrue(downloader.getTotalLines() > 50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(downloader.getTotalLines() > 50) target is:  method is: assertTrue(<unknown>)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("Sales Team");
        downloader.getGroup();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("Sales Team"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("Sales Team") target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: downloader.getGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
TestCase is: Downloader downloader = new Downloader();
String string = "Sales Team";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@f2946814 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[6]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 123456789, 987654321, 543210987, 789456123, 321098765 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: // Improved test data for the code snippet
Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321, 543210987, 789456123, 321098765 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[6] isAssignment: false Array: new long[]{ 123456789, 987654321, 543210987, 789456123, 321098765 } Elements: [123456789, 987654321, 543210987, 789456123, 321098765]
lengths: [6] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setPassword(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setPassword("?sx+M6aj$#kk?q^J")
test data is: Downloader downloader = new Downloader();
downloader.setPassword("?sx+M6aj$#kk?q^J");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;\':\"<>,./?");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;\':\"<>,./?"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;\':\"<>,./?") target is: downloader method is: setPassword(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setPassword(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;':\"<>,./?";
downloader.setPassword(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("cT,:Q[GiMuq;uy(2", "cT,:Q[GiMuq;uy(2", (File) null)
statement is: setDownloadDirectory(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setDownloadDirectory(arg0)
test data is: Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("cT,:Q[GiMuq;uy(2", "cT,:Q[GiMuq;uy(2", (File) null);
downloader.setDownloadDirectory(createTempFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        MockFile createTempFile = ((MockFile) (MockFile.createTempFile("myfile.txt", "text/plain", ((File) (null)))));
        downloader.setDownloadDirectory(createTempFile);
        // Set the expected output file name and directory
        String expectedOutputFileName = "output_file.txt";
        String expectedOutputDirectory = "/path/to/output/directory";
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile createTempFile = ((MockFile) (MockFile.createTempFile("myfile.txt", "text/plain", ((File) (null))))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((MockFile) (MockFile.createTempFile("myfile.txt", "text/plain", ((File) (null))))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: downloader.setDownloadDirectory(createTempFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDownloadDirectory(createTempFile) target is: downloader method is: setDownloadDirectory(MockFile)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadDirectory(Ljava/io/File;)V
statement is: // Set the expected output file name and directory
String expectedOutputFileName = "output_file.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutputDirectory = "/path/to/output/directory", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "output_file.txt"
* this is vulnerable: String string = "/path/to/output/directory"
TestCase is: Downloader downloader = new Downloader();
String string = "myfile.txt";
String string = "text/plain";
File file = null;
MockFile createTempFile = (MockFile)MockFile.createTempFile(string, string, file);
downloader.setDownloadDirectory(createTempFile);
String string = "output_file.txt";
String string = "/path/to/output/directory";

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Downloader downloader = new Downloader();
        downloader.getTimeout(10);// 10 seconds timeout }}

    }
}
statement is: // Improved test data
Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.getTimeout(10)// 10 seconds timeout }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout(10)// 10 seconds timeout }}
 target is: downloader method is: getTimeout(int)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Replace
        the primitive;
        with more;
        For example;
        For instead;
        of using;
    }
}
statement is: @Replace
the primitive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: with more, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For instead, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of using, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@ef4f4339 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[11]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[11];
downloader.setIds(longArray);
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
        downloader.setIds(longArray);
        downloader.getBaseMessageId();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[11] isAssignment: false Array: new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
lengths: [11] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.getBaseMessageId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId() target is: downloader method is: getBaseMessageId()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getBaseMessageId()J
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.getBaseMessageId();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader("https://www.example.com", "GET", 200, 1000);
        downloader.close();
    }
}
statement is: Downloader downloader = new Downloader("https://www.example.com", "GET", 200, 1000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@e30ecdc7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        Newzgrabber.verbose = true;
        downloader.close();
        // Set the URL to be downloaded
        String url = "https://example.com/downloads/file1.txt";
        // Set the output file name and path
        String outputFileName = "C:\\Downloads\\file1.txt";
        // Set the download options (e.g., number of threads, connection timeout)
        int numThreads = 4;
        long connectionTimeout = 30000L;
        downloader.download(url, outputFileName, numThreads, connectionTimeout);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: close()V
statement is: // Set the URL to be downloaded
String url = "https://example.com/downloads/file1.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Set the output file name and path
String outputFileName = "C:\\Downloads\\file1.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Set the download options (e.g., number of threads, connection timeout)
int numThreads = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: long connectionTimeout = 30000L, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.download(url, outputFileName, numThreads, connectionTimeout), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.download(url, outputFileName, numThreads, connectionTimeout) target is: downloader method is: download(java.lang.String,java.lang.String,int,long)
* this is vulnerable: String string = "https://example.com/downloads/file1.txt"
* this is vulnerable: String string = "C:\\Downloads\\file1.txt"
* this is vulnerable: int _int = 4
* this is vulnerable: long _long = 30000L
TestCase is: Downloader downloader = new Downloader();
downloader.close();
String string = "https://example.com/downloads/file1.txt";
String string = "C:\\Downloads\\file1.txt";
int _int = 4;
long _long = 30000L;

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@2002cb95 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[0]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Instead of using an empty long array, use a non-empty array with some example values
        long[] longArray = new long[]{ 1234567890, 0 };
        downloader.setIds(longArray);
        downloader.startDownload();
        // Improved test data for the String field
        String stringField = "This is a sample string";
        downloader.setStringField(stringField);
        downloader.startDownload();
        // Improved test data for the integer field
        int intField = 10;
        downloader.setIntField(intField);
        downloader.startDownload();
        // Improved test data for the double field
        double doubleField = 3.14;
        downloader.setDoubleField(doubleField);
        downloader.startDownload();
    }
}
statement is: // Improved test data
// Instead of using an empty long array, use a non-empty array with some example values
long[] longArray = new long[]{ 1234567890, 0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[0] isAssignment: false Array: new long[]{ 1234567890, 0 } Elements: [1234567890, 0]
lengths: [0] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
statement is: // Improved test data for the String field
String stringField = "This is a sample string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setStringField(stringField), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setStringField(stringField) target is: downloader method is: setStringField(java.lang.String)
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
statement is: // Improved test data for the integer field
int intField = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setIntField(intField), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIntField(intField) target is: downloader method is: setIntField(int)
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
statement is: // Improved test data for the double field
double doubleField = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setDoubleField(doubleField), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDoubleField(doubleField) target is: downloader method is: setDoubleField(double)
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
* this is vulnerable: String string = "This is a sample string"
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
TestCase is: String string = "This is a sample string";
int _int = 10;
double _double = 3.14;

statement is: org.evosuite.testcase.statements.AssignmentStatement@446845e8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@64e206b3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[6]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Newzgrabber.verbose = true;
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Newzgrabber.verbose = true;
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 123456789, 987654321, 1234567890, 0, 0, 0 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321, 1234567890, 0, 0, 0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[6] isAssignment: false Array: new long[]{ 123456789, 987654321, 1234567890, 0, 0, 0 } Elements: [123456789, 987654321, 1234567890, 0, 0, 0]
lengths: [6] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 1, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 1, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
((Downloader) longArray).setIds(longArray);
((Downloader) longArray).startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@dbc78238 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.IsBatch = true
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
Newzgrabber.IsBatch = true;
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private String url = "https://www.example.com";// a fictional URL for testing purposes


    private int timeout = 60;// a longer timeout value to ensure that the download takes longer than usual


    private boolean isBatch = true;// sets the batch mode to true, which will allow the downloader to process multiple files in parallel


    public void startDownload() {
        System.out.println("Downloading...");
    }
}
statement is: System.out.println("Downloading..."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Downloading...") target is: System.out method is: println(java.lang.String)
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("Sb>{[L")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("Sb>{[L");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("Special_Group");
        downloader.getGroup();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("Special_Group"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("Special_Group") target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: downloader.getGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
TestCase is: Downloader downloader = new Downloader();
String string = "Special_Group";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTimeout(2411)
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.setTimeout(2411);
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTimeout(500);// 500 milliseconds

        downloader.getTimeout();// 500 }}

    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTimeout(500)// 500 milliseconds
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(500)// 500 milliseconds
 target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
statement is: downloader.getTimeout()// 500 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout()// 500 }}
 target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
TestCase is: Downloader downloader = new Downloader();
int _int = 500;
downloader.setTimeout(_int);
downloader.getTimeout();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines(1L)
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines(1L);
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTotalLines(9223372036854775807L);
        downloader.getTotalLines();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTotalLines(9223372036854775807L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(9223372036854775807L) target is: downloader method is: setTotalLines(long)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTotalLines(J)V
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTotalLines()J
TestCase is: Downloader downloader = new Downloader();
long _long = 9223372036854775807L;
downloader.setTotalLines(_long);
downloader.getTotalLines();

* test suite isTestSuite: 43
Test 0: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-3130L));
downloader.getTotalLines();
Test 1: 
Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);
Test 2: 
Downloader downloader = new Downloader();
downloader.setTableIndex(0);
Test 3: 
Downloader downloader = new Downloader();
downloader.setServer("Authenticating username and password");
Test 4: 
Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");
Test 5: 
Downloader downloader = new Downloader();
downloader.setUsername("pAjfCFt<D#NM,");
Test 6: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 7: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 8: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 9: 
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 10: 
Downloader downloader = new Downloader();
downloader.setPassword("?sx+M6aj$#kk?q^J");
Test 11: 
Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("cT,:Q[GiMuq;uy(2", "cT,:Q[GiMuq;uy(2", (File) null);
downloader.setDownloadDirectory(createTempFile);
Test 12: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 13: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
long[] longArray = new long[11];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 15: 
Downloader downloader = new Downloader();
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 18: 
Newzgrabber.verbose = true;
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 19: 
Downloader downloader = new Downloader();
Newzgrabber.IsBatch = true;
downloader.startDownload();
Test 20: 
Downloader downloader = new Downloader();
downloader.setGroup("Sb>{[L");
downloader.getGroup();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTimeout(2411);
downloader.getTimeout();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1L);
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1234567890);
downloader.getTotalLines();

Test 24: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);

Test 25: 
Downloader downloader = new Downloader();
downloader.setTableIndex((int) "https://www.example.com/");

Test 26: 
Downloader downloader = new Downloader();

Test 27: 
Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");

Test 28: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe123!");
downloader.setUsername("janedoe456!");
downloader.setUsername("admin789!");

Test 29: 
Downloader downloader = new Downloader();

Test 30: 
Downloader downloader = new Downloader();

Test 31: 
Downloader downloader = new Downloader();
downloader.setGroup("Sales Team");
downloader.getGroup();

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;':\"<>,./?");

Test 34: 
Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("myfile.txt", "text/plain", (File) null);
downloader.setDownloadDirectory(createTempFile);

Test 35: 
Downloader downloader = new Downloader();

Test 36: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 37: 
Downloader downloader = new Downloader();
downloader.close();

Test 38: 

Test 39: 
Downloader downloader = new Downloader();
long[] longArray = null;
((Downloader) longArray).setIds(longArray);
((Downloader) longArray).startDownload();

Test 40: 
Downloader downloader = new Downloader();
downloader.setGroup("Special_Group");
downloader.getGroup();

Test 41: 
Downloader downloader = new Downloader();
downloader.setTimeout(500);
downloader.getTimeout();

Test 42: 
Downloader downloader = new Downloader();
downloader.setTotalLines(9223372036854775807L);
downloader.getTotalLines();


* Generated after the refinement and before minimization 43 tests with total length 110
* test suite isTestSuite: 43
Test 0: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-3130L));
downloader.getTotalLines();
Test 1: 
Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);
Test 2: 
Downloader downloader = new Downloader();
downloader.setTableIndex(0);
Test 3: 
Downloader downloader = new Downloader();
downloader.setServer("Authenticating username and password");
Test 4: 
Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");
Test 5: 
Downloader downloader = new Downloader();
downloader.setUsername("pAjfCFt<D#NM,");
Test 6: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 7: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 8: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 9: 
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 10: 
Downloader downloader = new Downloader();
downloader.setPassword("?sx+M6aj$#kk?q^J");
Test 11: 
Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("cT,:Q[GiMuq;uy(2", "cT,:Q[GiMuq;uy(2", (File) null);
downloader.setDownloadDirectory(createTempFile);
Test 12: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 13: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
long[] longArray = new long[11];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 15: 
Downloader downloader = new Downloader();
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 18: 
Newzgrabber.verbose = true;
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 19: 
Downloader downloader = new Downloader();
Newzgrabber.IsBatch = true;
downloader.startDownload();
Test 20: 
Downloader downloader = new Downloader();
downloader.setGroup("Sb>{[L");
downloader.getGroup();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTimeout(2411);
downloader.getTimeout();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1L);
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1234567890);
downloader.getTotalLines();

Test 24: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);

Test 25: 
Downloader downloader = new Downloader();
downloader.setTableIndex((int) "https://www.example.com/");

Test 26: 
Downloader downloader = new Downloader();

Test 27: 
Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");

Test 28: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe123!");
downloader.setUsername("janedoe456!");
downloader.setUsername("admin789!");

Test 29: 
Downloader downloader = new Downloader();

Test 30: 
Downloader downloader = new Downloader();

Test 31: 
Downloader downloader = new Downloader();
downloader.setGroup("Sales Team");
downloader.getGroup();

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;':\"<>,./?");

Test 34: 
Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("myfile.txt", "text/plain", (File) null);
downloader.setDownloadDirectory(createTempFile);

Test 35: 
Downloader downloader = new Downloader();

Test 36: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 37: 
Downloader downloader = new Downloader();
downloader.close();

Test 38: 

Test 39: 
Downloader downloader = new Downloader();
long[] longArray = null;
((Downloader) longArray).setIds(longArray);
((Downloader) longArray).startDownload();

Test 40: 
Downloader downloader = new Downloader();
downloader.setGroup("Special_Group");
downloader.getGroup();

Test 41: 
Downloader downloader = new Downloader();
downloader.setTimeout(500);
downloader.getTimeout();

Test 42: 
Downloader downloader = new Downloader();
downloader.setTotalLines(9223372036854775807L);
downloader.getTotalLines();


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1234567890);
downloader.getTotalLines();
Test 1: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
Test 2: 
Downloader downloader = new Downloader();
downloader.setTableIndex(0);
Test 3: 
Downloader downloader = new Downloader();
downloader.setServer("Authenticating username and password");
Test 4: 
Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");
Test 5: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe123!");
Test 6: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 7: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 8: 
Downloader downloader = new Downloader();
downloader.setGroup("Sales Team");
downloader.getGroup();
Test 9: 
Downloader downloader = new Downloader();
downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;':\"<>,./?");
Test 10: 
Downloader downloader = new Downloader();
MockFile createTempFile = (MockFile)MockFile.createTempFile("myfile.txt", "text/plain", (File) null);
downloader.setDownloadDirectory(createTempFile);
Test 11: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 12: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 13: 
Downloader downloader = new Downloader();
long[] longArray = new long[11];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
downloader.close();
Test 15: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 18: 
Newzgrabber.verbose = true;
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 19: 
Downloader downloader = new Downloader();
Newzgrabber.IsBatch = true;
downloader.startDownload();
Test 20: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTimeout(2411);
downloader.getTimeout();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-3130L));
downloader.getTotalLines();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 32
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 17%
* Total number of goals: 339
* Number of covered goals: 58
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 83%
* Total number of goals: 12
* Number of covered goals: 10
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 32
* Generated 23 tests with total length 63
* Resulting test suite's coverage: 45% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTotalLines(1234567890);
long totalLines = downloader.getTotalLines();
assertEquals(1234567890L, totalLines);


** It was a parseable test case! 
refined test name is: testGetTotalLinesShouldReturnExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadWithNullData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTableIndex(0);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadWithTableIndexAndNoTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setServer("Authenticating username and password");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadWithNoOptionsSpecified
* Compiling Tests
refined test name is: testDownloadWithoutOptions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTitle("Authenticating username and password");
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadWithValidCredentials
* Compiling Tests
refined test name is: testDownloadWithValidCredentials
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setUsername("johndoe123!");
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testSetUsernameAndGetTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.getGroup();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testGetTimeoutAndIsAbortMethods
* Compiling Tests
refined test name is: testDownloadTimesOutCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.getTotalLines();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testGetTotalLinesDefaultSettings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setGroup("Sales Team");
downloader.getGroup();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadGroupAndTimeout
* Compiling Tests
refined test name is: testSetGroupSalesTeam
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setPassword("!@#$%^&*()_+QAZXSWEDCVFR4567890~!@#$%^&*()_+-=[]{}|;':\"<>,./?");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testSetPasswordWithSpecialCharactersAndTimeout
* Compiling Tests
refined test name is: testDownloadWithSpecialCharsAndTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
File arg0 = MockFile.createTempFile("myfile.txt", "text/plain", (File) null);
downloader.setDownloadDirectory(arg0);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testShouldNotAllowDownloadsWithoutABORTFlagSet
* Compiling Tests
refined test name is: testShouldDownloadWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
int timeout = downloader.getTimeout();
assertEquals((-1), timeout);
assertFalse(downloader.ABORT);


** It was a parseable test case! 
