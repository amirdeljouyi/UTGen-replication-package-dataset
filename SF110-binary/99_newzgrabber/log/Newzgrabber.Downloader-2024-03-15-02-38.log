* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: Newzgrabber.Downloader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 16344
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:39:01.515 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:39:01.517 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:39:01.528 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:39:01.665 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:39:01.666 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:39:01.667 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:39:04.716 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 02:39:04.841 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 02:39:04.841 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 02:39:04.841 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 02:39:04.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 02:39:04.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 02:39:04.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 02:39:04.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 02:39:04.843 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 02:39:04.858 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 02:39:04.869 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Downloader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 905
* Using seed 1710470336192
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 91 / 905
[Progress:>                             0%] [Cov:=============>                     38%][Progress:>                             0%] [Cov:==============>                    40%][Progress:>                             0%] [Cov:==============>                    42%][Progress:>                             0%] [Cov:==============>                    42%][Progress:>                             1%] [Cov:==============>                    42%][Progress:>                             1%] [Cov:===============>                   43%][Progress:>                             1%] [Cov:===============>                   43%][Progress:>                             1%] [Cov:===============>                   43%][Progress:>                             1%] [Cov:===============>                   43%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:================>                  47%][Progress:=>                            4%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  48%][Progress:==>                           9%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:===>                          12%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:================>                  48%][Progress:======>                       21%] [Cov:================>                  48%][Progress:======>                       21%] [Cov:================>                  48%][Progress:======>                       21%] [Cov:================>                  48%][Progress:=======>                      24%] [Cov:================>                  48%][Progress:========>                     27%] [Cov:================>                  48%][Progress:========>                     29%] [Cov:================>                  48%][Progress:========>                     29%] [Cov:================>                  48%][Progress:=========>                    32%] [Cov:================>                  48%][Progress:==========>                   34%] [Cov:================>                  48%][Progress:==========>                   35%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:============>                 40%] [Cov:================>                  48%][Progress:============>                 40%] [Cov:================>                  48%][Progress:============>                 40%] [Cov:================>                  48%][Progress:===============>              53%] [Cov:================>                  48%][Progress:================>             55%] [Cov:================>                  48%][Progress:=================>            58%] [Cov:================>                  48%][Progress:=================>            58%] [Cov:================>                  48%][Progress:=================>            58%] [Cov:================>                  48%][Progress:==================>           60%] [Cov:================>                  48%][Progress:==================>           60%] [Cov:================>                  48%][Progress:==================>           61%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:===================>          66%] [Cov:================>                  48%][Progress:=====================>        71%] [Cov:================>                  48%][Progress:=======================>      77%] [Cov:================>                  48%][Progress:=======================>      77%] [Cov:================>                  48%][Progress:=======================>      77%] [Cov:================>                  48%][Progress:=======================>      77%] [Cov:================>                  48%][Progress:=======================>      77%] [Cov:================>                  48%][Progress:===========================>  92%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%]
* Search finished after 206s and 66 generations, 21965 statements, best individual has fitness: 753.0
* Generated before the refinement 24 tests with total length 69
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@8623ac9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[2]
statement is: setDownloadData([Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setDownloadData(arg0)
test data is: Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private Object[] downloadData;

    public void setDownloadData(Object[] data) {
        this.downloadData = data;
    }
}
statement is: this.downloadData = data, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTableIndex(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTableIndex(20)
test data is: Downloader downloader = new Downloader();
downloader.setTableIndex(20);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTableIndex(100);// This is an example of a more descriptive and representative value for the table index. It's not clear what the value 20 represents, but a value of 100 clearly indicates that it is used to set the table index. }}

    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTableIndex(100)// This is an example of a more descriptive and representative value for the table index. It's not clear what the value 20 represents, but a value of 100 clearly indicates that it is used to set the table index. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTableIndex(100)// This is an example of a more descriptive and representative value for the table index. It's not clear what the value 20 represents, but a value of 100 clearly indicates that it is used to set the table index. }}
 target is: downloader method is: setTableIndex(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTableIndex(I)V
TestCase is: Downloader downloader = new Downloader();
int _int = 100;
downloader.setTableIndex(_int);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setServer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setServer("J2GT5a+Z@_\"nU")
test data is: Downloader downloader = new Downloader();
downloader.setServer("J2GT5a+Z@_\"nU");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setServer("https://www.example.com");// Improved test data: A more descriptive and representative URL for testing the download functionality }}

    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setServer("https://www.example.com")// Improved test data: A more descriptive and representative URL for testing the download functionality }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setServer("https://www.example.com")// Improved test data: A more descriptive and representative URL for testing the download functionality }}
 target is: downloader method is: setServer(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setServer(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "https://www.example.com";
downloader.setServer(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTitle(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTitle("Pv_f1")
test data is: Downloader downloader = new Downloader();
downloader.setTitle("Pv_f1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTitle("Introduction to Java Programming");
        downloader.setUrl("https://www.javatpoint.com/java-tutorial");
        downloader.setFilePath("C:\\Users\\User\\Documents\\JavaTutorial.pdf");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTitle("Introduction to Java Programming"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTitle("Introduction to Java Programming") target is: downloader method is: setTitle(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTitle(Ljava/lang/String;)V
statement is: downloader.setUrl("https://www.javatpoint.com/java-tutorial"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUrl("https://www.javatpoint.com/java-tutorial") target is: downloader method is: setUrl(java.lang.String)
statement is: downloader.setFilePath("C:\\Users\\User\\Documents\\JavaTutorial.pdf"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setFilePath("C:\\Users\\User\\Documents\\JavaTutorial.pdf") target is: downloader method is: setFilePath(java.lang.String)
TestCase is: Downloader downloader = new Downloader();
String string = "Introduction to Java Programming";
downloader.setTitle(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setUsername(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setUsername("")
test data is: Downloader downloader = new Downloader();
downloader.setUsername("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setUsername("johndoe");
        downloader.setFileNames(new String[]{ "image.jpg", "document.docx" });
        downloader.setFileSizes(new Integer[]{ 100, 500 });
        downloader.setServerAddress("https://www.google.com");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setUsername("johndoe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("johndoe") target is: downloader method is: setUsername(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setUsername(Ljava/lang/String;)V
statement is: downloader.setFileNames(new String[]{ "image.jpg", "document.docx" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setFileNames(new String[]{ "image.jpg", "document.docx" }) target is: downloader method is: setFileNames(java.lang.String[])
statement is: downloader.setFileSizes(new Integer[]{ 100, 500 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setFileSizes(new Integer[]{ 100, 500 }) target is: downloader method is: setFileSizes(java.lang.Integer[])
statement is: downloader.setServerAddress("https://www.google.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setServerAddress("https://www.google.com") target is: downloader method is: setServerAddress(java.lang.String)
TestCase is: Downloader downloader = new Downloader();
String string = "johndoe";
downloader.setUsername(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.getGroup("Group1");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.getGroup("Group1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup("Group1") target is: downloader method is: getGroup(java.lang.String)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the "getTotalLines" method
        int totalLines = 10;
        String filePath = "/path/to/file.txt";
    }
}
statement is: // Improved test data for the "getTotalLines" method
int totalLines = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String filePath = "/path/to/file.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "/path/to/file.txt"
TestCase is: int _int = 10;
String string = "/path/to/file.txt";

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("123456789");
        downloader.getGroup();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("123456789") target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: downloader.getGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
TestCase is: Downloader downloader = new Downloader();
String string = "123456789";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTimeout(0)
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.setTimeout(0);
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTimeout(10);
        downloader.getTimeout();
        downloader.setTimeout(-1);
        downloader.getTimeout();
        downloader.setTimeout(10000);
        downloader.getTimeout();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTimeout(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(10) target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
statement is: downloader.setTimeout(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(-1) target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
statement is: downloader.setTimeout(10000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(10000) target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
TestCase is: Downloader downloader = new Downloader();
int _int = 10;
downloader.setTimeout(_int);
downloader.getTimeout();
int _int = null;
downloader.setTimeout(_int);
downloader.getTimeout();
int _int = 10000;
downloader.setTimeout(_int);
downloader.getTimeout();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@5b2a416a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[0]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 123456789, 987654321, 456789123, 109876543 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321, 456789123, 109876543 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[0] isAssignment: false Array: new long[]{ 123456789, 987654321, 456789123, 109876543 } Elements: [123456789, 987654321, 456789123, 109876543]
lengths: [0] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.getTimeout();
        // Improved test data
        int timeout = 10;
        downloader.setTimeout(timeout);
    }
}
statement is: Downloader downloader = new Downlo** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setPassword("$uper$ecureP@ssw0rd!");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setPassword("$uper$ecureP@ssw0rd!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPassword("$uper$ecureP@ssw0rd!") target is: downloader method is: setPassword(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setPassword(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "$uper$ecureP@ssw0rd!";
downloader.setPassword(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new M** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int baseMessageId = 98765;
        String messageType = "image";
        String senderName = "Jane Doe";
        String receiverName = "John Smith";
        String messageContent = "A picture of a cat.";
    }
}
statement is: int baseMessageId = 98765,** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        MockFile mockFile = new MockFile("/home/user/downloads", "example.txt");
        downloader.setDownloadDirectory(mockFile);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("/home/user/downloads", "example.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setDownloadDirectory(mockFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDownloadDirectory(mockFile) target is: downloader method is: setDownloadDirectory(MockFile)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadDirectory(Ljava/io/File;)V
TestCase is: Downloader downloader = new Downloader();
String string = "/home/user/downloads";
String string = "example.txt";
MockFile mockFile = new MockFile(string, string);
downloader.setDownloadDirectory(mockFile);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTimeout(30);// Set timeout to 30 seconds

        downloader.getTimeout();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTimeout(30)// Set timeout to 30 seconds
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(30)// Set timeout to 30 seconds
 target is: downloader method is: setTimeout(int)
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
TestCase is: Downloader downloader = new Downloader();
downloader.getTimeout();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setBaseMessageId("1234567890");
        downloader.setMessageType("message_type");
        downloader.setSender("sender@example.com");
        downloader.setReceiver("receiver@example.com");
        downloader.setSubject("Test Message");
        downloader.setBody("This is a test message.");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setBaseMessageId("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setBaseMessageId("1234567890") target is: downloader method is: setBaseMessageId(java.lang.String)
statement is: downloader.setMessageType("message_type"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setMessageType("message_type") target is: downloader method is: setMessageType(java.lang.String)
statement is: downloader.setSender("sender@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setSender("sender@example.com") target is: downloader method is: setSender(java.lang.String)
statement is: downloader.setReceiver("receiver@example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setReceiver("receiver@example.com") target is: downloader method is: setReceiver(java.lang.String)
statement is: downloader.setSubject("Test Message"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setSubject("Test Message") target is: downloader method is: setSubject(java.lang.String)
statement is: downloader.setBody("This is a test message."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setBody("This is a test message.") target is: downloader method is: setBody(java.lang.String)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@fdaf1680 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[6]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 1, 2, 3, 4, 5, 6 };// Improved test data: using a more descriptive and representative array of long values.

        downloader.setIds(longArray);
        downloader.getBaseMessageId();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 1, 2, 3, 4, 5, 6 }// Improved test data: using a more descriptive and representative array of long values.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[6] isAssignment: false Array: new long[]{ 1, 2, 3, 4, 5, 6 } Elements: [1, 2, 3, 4, 5, 6]
lengths: [6] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.getBaseMessageId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId() target is: downloader method is: getBaseMessageId()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getBaseMessageId()J
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.getBaseMessageId();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Downloader downloader = new Downloader("http://example.com", "GET");
        downloader.setRequestHeader("Authorization", "Bearer 1234567890");
        downloader.close();
    }
}
statement is: // Improved test data
Downloader downloader = new Downloader("http://example.com", "GET"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setRequestHeader("Authorization", "Bearer 1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setRequestHeader("Authorization", "Bearer 1234567890") target is: downloader method is: setRequestHeader(java.lang.String,java.lang.String)
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@89b11541 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        Newzgrabber.verbose = true;
        downloader.close();
        // Improved test data
        Downloader downloader = new Downloader("https://www.example.com", "example-downloader");
        Newzgrabber.verbose = true;
        downloader.setSaveDirectory("/path/to/save/directory");
        downloader.close();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: close()V
statement is: // Improved test data
Downloader downloader = new Downloader("https://www.example.com", "example-downloader"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: downloader.setSaveDirectory("/path/to/save/directory"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setSaveDirectory("/path/to/save/directory") target is: downloader method is: setSaveDirectory(java.lang.String)
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: close()V
TestCase is: Downloader downloader = new Downloader();
downloader.close();
downloader.close();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@efcbef80 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[16]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[16];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 123456789, 987654321, 1111111111, 999999999 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321, 1111111111, 999999999 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[16] isAssignment: false Array: new long[]{ 123456789, 987654321, 1111111111, 999999999 } Elements: [123456789, 987654321, 1111111111, 999999999]
lengths: [16] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@c139dd88 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: org.evosuite.testcase.statements.ArrayStatement@76a8ff9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[16]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[16];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        Newzgrabber.verbose = true;
        long[] longArray = new long[16];
        downloader.setIds(new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 });
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: long[] longArray = new long[16], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [16] Ct is: long[] longArray = new long[16] isAssignment: false Array: new long[16] Elements: []
lengths: [16] [16]
Their type are: class [J long[]
statement is: downloader.setIds(new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(new long[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = new long[16];
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@7d81c2f4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5686c226 type is: class org.evosuite.testcase.statements.AssignmentStatement return type long
statement code is: longArray[0] = (long) 95
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = (long) 95;
downloader.setIds(longArray);
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[1];
        longArray[0] = ((long) (89374592));
        downloader.setIds(longArray);
        downloader.getBaseMessageId();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: long[] longArray = new long[1] isAssignment: false Array: new long[1] Elements: []
lengths: [1] [1]
Their type are: class [J long[]
statement is: longArray[0] = ((long) (89374592)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : longArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl long Assignment:((long) (89374592)) Ct is: longArray[0] = ((long) (89374592))
target : longArray class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
statement is: downloader.getBaseMessageId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId() target is: downloader method is: getBaseMessageId()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getBaseMessageId()J
TestCase is: Downloader downloader = new Downloader();
long[] longArray = new long[1];
int _int = 89374592;
longArray[0] = (long) _int;
downloader.setIds(longArray);
downloader.getBaseMessageId();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("8:,A3~T4-z@aeh@8>")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("8:,A3~T4-z@aeh@8>");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("101234");
        downloader.getGroup();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("101234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("101234") target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: downloader.getGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
TestCase is: Downloader downloader = new Downloader();
String string = "101234";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTimeout(100)
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.setTimeout(100);
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTimeout(5000);
        downloader.getTimeout();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTimeout(5000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(5000) target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
TestCase is: Downloader downloader = new Downloader();
int _int = 5000;
downloader.setTimeout(_int);
downloader.getTimeout();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines((-288L))
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines((-288L));
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTotalLines(100L);
        downloader.getTotalLines();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTotalLines(100L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(100L) target is: downloader method is: setTotalLines(long)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTotalLines(J)V
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTotalLines()J
TestCase is: Downloader downloader = new Downloader();
long _long = 100L;
downloader.setTotalLines(_long);
downloader.getTotalLines();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines(500L)
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines(500L);
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTotalLines(1000L);// changed to a more descriptive value

        downloader.getTotalLines();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTotalLines(1000L)// changed to a more descriptive value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(1000L)// changed to a more descriptive value
 target is: downloader method is: setTotalLines(long)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTotalLines(J)V
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTotalLines()J
TestCase is: Downloader downloader = new Downloader();
long _long = 1000L;
downloader.setTotalLines(_long);
downloader.getTotalLines();

* test suite isTestSuite: 46
Test 0: 
Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);
Test 1: 
Downloader downloader = new Downloader();
downloader.setTableIndex(20);
Test 2: 
Downloader downloader = new Downloader();
downloader.setServer("J2GT5a+Z@_\"nU");
Test 3: 
Downloader downloader = new Downloader();
downloader.setTitle("Pv_f1");
Test 4: 
Downloader downloader = new Downloader();
downloader.setUsername("");
Test 5: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 6: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 7: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 8: 
Downloader downloader = new Downloader();
downloader.setTimeout(0);
downloader.getTimeout();
Test 9: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 10: 
Downloader downloader = new Downloader();
downloader.setPassword("");
Test 11: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("", "8vyr:(W-]~");
downloader.setDownloadDirectory(mockFile);
Test 12: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 13: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 15: 
Downloader downloader = new Downloader();
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[16];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 18: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[16];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 19: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = (long) 95;
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 20: 
Downloader downloader = new Downloader();
downloader.setGroup("8:,A3~T4-z@aeh@8>");
downloader.getGroup();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTimeout(100);
downloader.getTimeout();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-288L));
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTotalLines(500L);
downloader.getTotalLines();
Test 24: 
Downloader downloader = new Downloader();
downloader.setTableIndex(100);

Test 25: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com");

Test 26: 
Downloader downloader = new Downloader();
downloader.setTitle("Introduction to Java Programming");

Test 27: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe");

Test 28: 
Downloader downloader = new Downloader();

Test 29: 

Test 30: 
Downloader downloader = new Downloader();
downloader.setGroup("123456789");
downloader.getGroup();

Test 31: 
Downloader downloader = new Downloader();
downloader.setTimeout(10);
downloader.getTimeout();
downloader.setTimeout((int) (Integer) null);
downloader.getTimeout();
int _int = 10000;
downloader.setTimeout(_int);
downloader.getTimeout();

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setPassword("$uper$ecureP@ssw0rd!");

Test 34: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("/home/user/downloads", "example.txt");
downloader.setDownloadDirectory(mockFile);

Test 35: 
Downloader downloader = new Downloader();
downloader.getTimeout();

Test 36: 
Downloader downloader = new Downloader();

Test 37: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 38: 
Downloader downloader = new Downloader();
downloader.close();
downloader.close();

Test 39: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 40: 
Downloader downloader = new Downloader();
long[] longArray = new long[16];
downloader.setIds((long[]) null);
downloader.startDownload();

Test 41: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = (long) 89374592;
downloader.setIds(longArray);
downloader.getBaseMessageId();

Test 42: 
Downloader downloader = new Downloader();
downloader.setGroup("101234");
downloader.getGroup();

Test 43: 
Downloader downloader = new Downloader();
downloader.setTimeout(5000);
downloader.getTimeout();

Test 44: 
Downloader downloader = new Downloader();
downloader.setTotalLines(100L);
downloader.getTotalLines();

Test 45: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1000L);
downloader.getTotalLines();


* Generated after the refinement and before minimization 46 tests with total length 130
* test suite isTestSuite: 46
Test 0: 
Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);
Test 1: 
Downloader downloader = new Downloader();
downloader.setTableIndex(20);
Test 2: 
Downloader downloader = new Downloader();
downloader.setServer("J2GT5a+Z@_\"nU");
Test 3: 
Downloader downloader = new Downloader();
downloader.setTitle("Pv_f1");
Test 4: 
Downloader downloader = new Downloader();
downloader.setUsername("");
Test 5: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 6: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 7: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 8: 
Downloader downloader = new Downloader();
downloader.setTimeout(0);
downloader.getTimeout();
Test 9: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 10: 
Downloader downloader = new Downloader();
downloader.setPassword("");
Test 11: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("", "8vyr:(W-]~");
downloader.setDownloadDirectory(mockFile);
Test 12: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 13: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
long[] longArray = new long[6];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 15: 
Downloader downloader = new Downloader();
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[16];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 18: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[16];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 19: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = (long) 95;
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 20: 
Downloader downloader = new Downloader();
downloader.setGroup("8:,A3~T4-z@aeh@8>");
downloader.getGroup();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTimeout(100);
downloader.getTimeout();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-288L));
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTotalLines(500L);
downloader.getTotalLines();
Test 24: 
Downloader downloader = new Downloader();
downloader.setTableIndex(100);

Test 25: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com");

Test 26: 
Downloader downloader = new Downloader();
downloader.setTitle("Introduction to Java Programming");

Test 27: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe");

Test 28: 
Downloader downloader = new Downloader();

Test 29: 

Test 30: 
Downloader downloader = new Downloader();
downloader.setGroup("123456789");
downloader.getGroup();

Test 31: 
Downloader downloader = new Downloader();
downloader.setTimeout(10);
downloader.getTimeout();
downloader.setTimeout((int) (Integer) null);
downloader.getTimeout();
int _int = 10000;
downloader.setTimeout(_int);
downloader.getTimeout();

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setPassword("$uper$ecureP@ssw0rd!");

Test 34: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("/home/user/downloads", "example.txt");
downloader.setDownloadDirectory(mockFile);

Test 35: 
Downloader downloader = new Downloader();
downloader.getTimeout();

Test 36: 
Downloader downloader = new Downloader();

Test 37: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 38: 
Downloader downloader = new Downloader();
downloader.close();
downloader.close();

Test 39: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 40: 
Downloader downloader = new Downloader();
long[] longArray = new long[16];
downloader.setIds((long[]) null);
downloader.startDownload();

Test 41: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = (long) 89374592;
downloader.setIds(longArray);
downloader.getBaseMessageId();

Test 42: 
Downloader downloader = new Downloader();
downloader.setGroup("101234");
downloader.getGroup();

Test 43: 
Downloader downloader = new Downloader();
downloader.setTimeout(5000);
downloader.getTimeout();

Test 44: 
Downloader downloader = new Downloader();
downloader.setTotalLines(100L);
downloader.getTotalLines();

Test 45: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1000L);
downloader.getTotalLines();


* Minimizing test suite
* test suite isTestSuite: 24
Test 0: 
Downloader downloader = new Downloader();
downloader.setTotalLines(1000L);
downloader.getTotalLines();
Test 1: 
Downloader downloader = new Downloader();
Object[] objectArray = new Object[2];
downloader.setDownloadData(objectArray);
Test 2: 
Downloader downloader = new Downloader();
downloader.setTableIndex(100);
Test 3: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com");
Test 4: 
Downloader downloader = new Downloader();
downloader.setTitle("Introduction to Java Programming");
Test 5: 
Downloader downloader = new Downloader();
downloader.setUsername("johndoe");
Test 6: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 7: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 8: 
Downloader downloader = new Downloader();
downloader.setGroup("101234");
downloader.getGroup();
Test 9: 
Downloader downloader = new Downloader();
downloader.setPassword("$uper$ecureP@ssw0rd!");
Test 10: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("/home/user/downloads", "example.txt");
downloader.setDownloadDirectory(mockFile);
Test 11: 
Download** It was a parseable test case! 
refined test name is: testNullDownloadData
* Compiling Tests
refined test name is: testNullDownloadData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTableIndex(42);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadAbortFieldAndTimeoutValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testSetServerValidUrlSetsTimeoutAndAbortFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTitle("The Ultimate Video");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadVideoWithInfiniteTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setUsername("johndoe12345");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDefaultDownloadTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.getGroup();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadInvalidUrl
* Compiling Tests
refined test name is: testDownloadInvalidURL
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.getTotalLines();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testGetTotalLinesreturnsGreaterThanOrEqualToZero
* Compiling Tests
refined test name is: testGetTotalLinesValidInputReturnsNonNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTimeout(10);
int timeout = downloader.getTimeout();
assertEquals(10, timeout);


** It was a parseable test case! 
refined test name is: testSetAndGetTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setPassword("");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadSuccess
* Compiling Tests
refined test name is: testDownloadValidCredentials
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
MockFile arg0 = new MockFile("/home/user/Documents", "Test File");
downloader.setDownloadDirectory(arg0);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadWithValidDirectoryAndDefaultValues
* Compiling Tests
refined test name is: testInitWithValidDownloadDirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
int timeout = downloader.getTimeout();
assertFalse(downloader.ABORT);
assertEquals((-1), timeout);


** It was a parseable test case! 
refined test name is: testDownloadDoesNotAbortAndSetsTimeoutToMinusOne
* Compiling Tests
refined test name is: testDownloaderDoesNotAbortAndSetsTimeoutToMinusOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long baseMessageId = downloader.getBaseMessageId();
assertEquals((-1), downloader.getTimeout());
assertEquals((-1L), baseMessageId);
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadBaseMessageIdIsMinusOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long[] arg0 = new long[5];
downloader.setIds(arg0);
downloader.getBaseMessageId();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testSetIdsWithNegativeValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.close();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testSetTimeoutAndCheckFlags
* Compiling Tests
refined test name is: testSetDownloadTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloadTimeoutAndVerboseFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long[] arg0 = new long[4];
downloader.setIds(arg0);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}


** It was a parseable test case! 
* Computation finished
: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setPassword("$uper$ecureP@ssw0rd!");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloaderWithoutSetTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
MockFile arg0 = new MockFile("/home/user/downloads", "example.txt");
downloader.setDownloadDirectory(arg0);
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadDirectoryAndTimeout
* Compiling Tests
refined test name is: testGetTimeoutReturnsDefaultValueWhenNotSpecified
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
int timeout = downloader.getTimeout();
assertEquals((-1), timeout);
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testGetTimeoutReturnsDefaultValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long baseMessageId = downloader.getBaseMessageId();
assertEquals((-1L), baseMessageId);
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testDownloadParametersGettersAndSetters
* Compiling Tests
refined test name is: testDownloadParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long[] arg0 = new long[1];
downloader.setIds(arg0);
downloader.getBaseMessageId();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testInvalidUrlDownloaderTimeout
* Compiling Tests
refined test name is: testInvalidUrlAndNoTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.close();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testCloseDownloader
* Compiling Tests
refined test name is: testCloseDownloadNoTimeout
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testDownloaderVerbose
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long[] arg0 = new long[16];
downloader.setIds(arg0);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}


** It was a parseable test case! 
refined test name is: testStartDownloadWithNullIdsThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
long[] arg0 = new long[0];
downloader.setIds(arg0);
downloader.startDownload();
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testSetIdsWithEmptyArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] arg0 = new long[16];
downloader.setIds(arg0);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}


** It was a parseable test case! 
