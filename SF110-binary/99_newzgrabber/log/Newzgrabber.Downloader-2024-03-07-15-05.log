* EvoSuite 1.2.0
* WARNING - Generating JUnit 5 tests with the option to use a separate classloader will result in not runnable tests. Set either -Dtest_format=JUNIT4 or -Duse_separate_classloader=false
* Going to generate test cases for class: Newzgrabber.Downloader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-ES-res/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 8761
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 15:05:33.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 15:05:33.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 15:05:33.956 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 15:05:34.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 15:05:34.033 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 15:05:34.034 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 15:05:35.210 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 15:05:35.254 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 15:05:35.255 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 15:05:35.255 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 15:05:35.255 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 15:05:35.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 15:05:35.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 15:05:35.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 15:05:35.257 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 15:05:35.269 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 15:05:35.276 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Downloader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 905
* Using seed 1709823931798
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 91 / 905
[Progress:>                             0%] [Cov:============>                      36%][Progress:>                             0%] [Cov:==============>                    40%][Progress:>                             0%] [Cov:==============>                    42%][Progress:>                             0%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:================>                  47%][Progress:>                             1%] [Cov:================>                  47%][Progress:>                             1%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  37%] [Cov:================>                  48%][Progress:===========>                  38%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:================>                  48%][Progress:===============>              53%] [Cov:================>                  48%][Progress:===============>              53%] [Cov:================>                  48%][Progress:===============>              53%] [Cov:================>                  48%][Progress:===============>              53%] [Cov:================>                  48%][Progress:=================>            58%] [Cov:================>                  48%][Progress:=================>            58%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:==================>           63%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=======================>      79%] [Cov:================>                  48%][Progress:=========================>    85%] [Cov:================>                  48%][Progress:=========================>    85%] [Cov:================>                  48%][Progress:===========================>  90%] [Cov:================>                  48%][Progress:===========================>  90%] [Cov:================>                  48%][Progress:===========================>  90%] [Cov:================>                  48%][Progress:============================> 95%] [Cov:================>                  48%][Progress:============================> 95%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%][Progress:==============================100%] [Cov:================>                  48%]
* Search finished after 106s and 62 generations, 20890 statements, best individual has fitness: 753.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 31
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 17%
* Total number of goals: 339
* Number of covered goals: 56
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 31
* Generated 24 tests with total length 69
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'Downloader_ESTest' to evosuite-tests
* Done!

* Computation finished
