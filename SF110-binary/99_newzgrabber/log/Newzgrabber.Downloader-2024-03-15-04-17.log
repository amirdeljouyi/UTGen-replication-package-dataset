* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: Newzgrabber.Downloader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 5610
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:17:45.469 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:17:45.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:17:45.499 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:17:45.745 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:17:45.746 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:17:45.761 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 04:17:49.815 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 04:17:49.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 04:17:49.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 04:17:49.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 04:17:49.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 04:17:49.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 04:17:49.954 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 04:17:49.959 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 04:17:49.960 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 04:17:50.001 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 04:17:50.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Downloader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 905
* Using seed 1710476255537
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 91 / 905
[Progress:>                             3%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:============>                      37%][Progress:=>                            4%] [Cov:=============>                     39%][Progress:=>                            5%] [Cov:=============>                     39%][Progress:=>                            5%] [Cov:=============>                     39%][Progress:=>                            5%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:==============>                    41%][Progress:===>                          11%] [Cov:==============>                    41%][Progress:===>                          11%] [Cov:==============>                    41%][Progress:===>                          13%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   44%][Progress:====>                         14%] [Cov:===============>                   44%][Progress:====>                         14%] [Cov:===============>                   44%][Progress:====>                         14%] [Cov:===============>                   44%][Progress:=====>                        17%] [Cov:===============>                   44%][Progress:=====>                        17%] [Cov:===============>                   44%][Progress:=====>                        17%] [Cov:===============>                   44%][Progress:=====>                        17%] [Cov:===============>                   44%][Progress:======>                       20%] [Cov:===============>                   44%][Progress:======>                       20%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:==========>                   35%] [Cov:===============>                   44%][Progress:===========>                  38%] [Cov:===============>                   44%][Progress:============>                 40%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:===============>              51%] [Cov:===============>                   44%][Progress:===============>              51%] [Cov:===============>                   44%][Progress:===============>              51%] [Cov:===============>                   44%][Progress:================>             54%] [Cov:===============>                   44%][Progress:================>             54%] [Cov:================>                  46%][Progress:=================>            59%] [Cov:================>                  46%][Progress:==================>           62%] [Cov:================>                  46%][Progress:===================>          64%] [Cov:================>                  46%][Progress:====================>         67%] [Cov:================>                  46%][Progress:====================>         69%] [Cov:================>                  46%][Progress:====================>         69%] [Cov:================>                  46%][Progress:=======================>      77%] [Cov:================>                  46%][Progress:=======================>      77%] [Cov:================>                  46%][Progress:=======================>      77%] [Cov:================>                  46%][Progress:=======================>      77%] [Cov:================>                  46%][Progress:=======================>      77%] [Cov:================>                  46%][Progress:========================>     82%] [Cov:================>                  46%][Progress:=========================>    85%] [Cov:================>                  46%][Progress:=========================>    85%] [Cov:================>                  46%][Progress:===========================>  93%] [Cov:================>                  46%][Progress:===========================>  93%] [Cov:================>                  46%][Progress:===========================>  93%] [Cov:================>                  46%][Progress:============================> 95%] [Cov:================>                  46%][Progress:============================> 95%] [Cov:================>                  46%][Progress:==============================100%] [Cov:================>                  46%]
* Search finished after 207s and 67 generations, 21597 statements, best individual has fitness: 754.0
* Generated before the refinement 23 tests with total length 65
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTableIndex(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTableIndex((-1213))
test data is: Downloader downloader = new Downloader();
downloader.setTableIndex((-1213));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTableIndex(56);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTableIndex(56), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTableIndex(56) target is: downloader method is: setTableIndex(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTableIndex(I)V
TestCase is: Downloader downloader = new Downloader();
int _int = 56;
downloader.setTableIndex(_int);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTitle(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTitle("")
test data is: Downloader downloader = new Downloader();
downloader.setTitle("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Downloader downloader = new Downloader();
        downloader.setTitle("Java Tutorial for Beginners");
    }
}
statement is: // Improved test data
Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTitle("Java Tutorial for Beginners"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTitle("Java Tutorial for Beginners") target is: downloader method is: setTitle(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTitle(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "Java Tutorial for Beginners";
downloader.setTitle(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        Downloader downloader = new Downloader();
        downloader.getGroup("https://www.example.com");
    }
}
statement is: // Improved test data for the above code snippet
Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.getGroup("https://www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup("https://www.example.com") target is: downloader method is: getGroup(java.lang.String)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.getTotalLines(new File("C:\\Users\\User\\Documents\\testdata.txt"));
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.getTotalLines(new File("C:\\Users\\User\\Documents\\testdata.txt")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines(new File("C:\\Users\\User\\Documents\\testdata.txt")) target is: downloader method is: getTotalLines(File)
TestCase is: Downloader downloader = new Downloader();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("Group 1");
        String groupName = downloader.getGroup();
        assertEquals("Group 1", groupName);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("Group 1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("Group 1") target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: String groupName = downloader.getGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
statement is: assertEquals("Group 1", groupName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("Group 1", groupName) target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: Downloader downloader = new Downloader();
String string = "Group 1";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@cc839855 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[8]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[8];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        // Improve the test data by changing the primitive values and Strings to more descriptive examples
        long[] longArray = new long[]{ 123, 456, 789 };// Using more descriptive example for testing

        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improve the test data by changing the primitive values and Strings to more descriptive examples
long[] longArray = new long[]{ 123, 456, 789 }// Using more descriptive example for testing
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[8] isAssignment: false Array: new long[]{ 123, 456, 789 } Elements: [123, 456, 789]
lengths: [8] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the getTimeout method in the Downloader class
        int timeoutValue = 10;// Set a timeout value of 10 seconds

        Downloader downloader = new Downloader(timeoutValue);
        assertEquals(downloader.getTimeout(), timeoutValue);
        String url = "https://www.example.com";// Set a URL to be downloaded

        downloader.setUrl(url);
        downloader.start();
        assertTrue(downloader.isRunning());
        downloader.cancel();
        assertFalse(downloader.isRunning());
    }
}
statement is: // Improved test data for the getTimeout method in the Downloader class
int timeoutValue = 10// Set a timeout value of 10 seconds
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Downloader downloader = new Downloader(timeoutValue), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(downloader.getTimeout(), timeoutValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(downloader.getTimeout(), timeoutValue) target is:  method is: assertEquals(<unknown>,int)
statement is: String url = "https://www.example.com"// Set a URL to be downloaded
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setUrl(url), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUrl(url) target is: downloader method is: setUrl(java.lang.String)
statement is: downloader.start(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.start() target is: downloader method is: start()
statement is: assertTrue(downloader.isRunning()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(downloader.isRunning()) target is:  method is: assertTrue(<unknown>)
statement is: downloader.cancel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.cancel() target is: downloader method is: cancel()
statement is: assertFalse(downloader.isRunning()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(downloader.isRunning()) target is:  method is: assertFalse(<unknown>)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "https://www.example.com"
TestCase is: int _int = 10;
String string = "https://www.example.com";

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@f7413192 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[1]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[1];
downloader.setIds(longArray);
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 1234567890, 0 };// Improved test data - using more descriptive and representative values for the 'ids' parameter.

        downloader.setIds(longArray);
        downloader.getBaseMessageId();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 1234567890, 0 }// Improved test data - using more descriptive and representative values for the 'ids' parameter.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[1] isAssignment: false Array: new long[]{ 1234567890, 0 } Elements: [1234567890, 0]
lengths: [1] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.getBaseMessageId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId() target is: downloader method is: getBaseMessageId()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getBaseMessageId()J
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.getBaseMessageId();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int statusCode = 201;
        String contentType = "application/json";
    }
}
statement is: int statusCode = 201, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String contentType = "application/json", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 201
* this is vulnerable: String string = "application/json"
TestCase is: int _int = 201;
String string = "application/json";

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@721a3f00 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.close()
test data is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Downloader downloader = new Downloader("https://www.example.com", "Example Website");
        Newzgrabber.verbose = true;
        downloader.close();
    }
}
statement is: // Improved test data
Downloader downloader = new Downloader("https://www.example.com", "Example Website"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: downloader.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.close() target is: downloader method is: close()
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@d8817001 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[0]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[]{ 123456789, 987654321 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[0] isAssignment: false Array: new long[]{ 123456789, 987654321 } Elements: [123456789, 987654321]
lengths: [0] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.AssignmentStatement@49f45f53 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: Newzgrabber.verbose = true
statement is: org.evosuite.testcase.statements.ArrayStatement@146be930 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[1]
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: startDownload()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.startDownload()
test data is: Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[1];
downloader.setIds(longArray);
downloader.startDownload();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        Newzgrabber.verbose = true;
        long[] longArray = new long[]{ 123456789, 987654321 };
        downloader.setIds(longArray);
        downloader.startDownload();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Newzgrabber.verbose = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: long[] longArray = new long[]{ 123456789, 987654321 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: long[] longArray = new long[1] isAssignment: false Array: new long[]{ 123456789, 987654321 } Elements: [123456789, 987654321]
lengths: [1] []
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.startDownload(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.startDownload() target is: downloader method is: startDownload()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: startDownload()V
TestCase is: Downloader downloader = new Downloader();
long[] longArray = null;
downloader.setIds(longArray);
downloader.startDownload();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setServer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setServer("g$kQ]6#JYoP2su")
test data is: Downloader downloader = new Downloader();
downloader.setServer("g$kQ]6#JYoP2su");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setServer("https://www.example.com/api/v1");
        downloader.setUsername("jane.smith");
        downloader.setPassword("myStrongPassword!");
        downloader.setPort(8080);
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setServer("https://www.example.com/api/v1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setServer("https://www.example.com/api/v1") target is: downloader method is: setServer(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setServer(Ljava/lang/String;)V
statement is: downloader.setUsername("jane.smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("jane.smith") target is: downloader method is: setUsername(java.lang.String)
statement is: downloader.setPassword("myStrongPassword!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPassword("myStrongPassword!") target is: downloader method is: setPassword(java.lang.String)
statement is: downloader.setPort(8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPort(8080) target is: downloader method is: setPort(int)
TestCase is: Downloader downloader = new Downloader();
String string = "https://www.example.com/api/v1";
downloader.setServer(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setUsername(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setUsername("")
test data is: Downloader downloader = new Downloader();
downloader.setUsername("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setUsername("John Doe");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setUsername("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setUsername("John Doe") target is: downloader method is: setUsername(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setUsername(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "John Doe";
downloader.setUsername(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setPassword(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setPassword("")
test data is: Downloader downloader = new Downloader();
downloader.setPassword("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setPassword("123456789");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setPassword("123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setPassword("123456789") target is: downloader method is: setPassword(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setPassword(Ljava/lang/String;)V
TestCase is: Downloader downloader = new Downloader();
String string = "123456789";
downloader.setPassword(string);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("w:oj=N>t]", "")
statement is: setDownloadDirectory(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setDownloadDirectory(arg0)
test data is: Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        MockFile mockFile = new MockFile("w:oj=N>t]", "");
        downloader.setDownloadDirectory(mockFile);
        // Added file name to the download directory path for better representation of the situation being tested
        downloader.setDownloadDirectory(mockFile, "test_file.txt");
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("w:oj=N>t]", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setDownloadDirectory(mockFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDownloadDirectory(mockFile) target is: downloader method is: setDownloadDirectory(MockFile)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadDirectory(Ljava/io/File;)V
statement is: // Added file name to the download directory path for better representation of the situation being tested
downloader.setDownloadDirectory(mockFile, "test_file.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Added file name to the download directory path for better representation of the situation being tested
downloader.setDownloadDirectory(mockFile, "test_file.txt") target is: downloader method is: setDownloadDirectory(MockFile,java.lang.String)
TestCase is: Downloader downloader = new Downloader();
String string = "w:oj=N>t]";
String string = "";
MockFile mockFile = new MockFile(string, string);
downloader.setDownloadDirectory(mockFile);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setDownloadData([Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setDownloadData((Object[]) null)
test data is: Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setDownloadData(new Object[]{ "https://www.example.com", "file1.txt" });
        // Test with a valid URL and file name
        downloader.setDownloadData(new Object[]{ "http://www.example.org", "file2.jpg" });
        // Test with an invalid URL and valid file name
        downloader.setDownloadData(new Object[]{ null, "file3.pdf" });
        // Test with a valid URL and invalid file name
        downloader.setDownloadData(new Object[]{ "http://www.example.org", null });
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setDownloadData(new Object[]{ "https://www.example.com", "file1.txt" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setDownloadData(new Object[]{ "https://www.example.com", "file1.txt" }) target is: downloader method is: setDownloadData(java.lang.Object[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadData([Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Test with a valid URL and file name
downloader.setDownloadData(new Object[]{ "http://www.example.org", "file2.jpg" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test with a valid URL and file name
downloader.setDownloadData(new Object[]{ "http://www.example.org", "file2.jpg" }) target is: downloader method is: setDownloadData(java.lang.Object[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadData([Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Test with an invalid URL and valid file name
downloader.setDownloadData(new Object[]{ null, "file3.pdf" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test with an invalid URL and valid file name
downloader.setDownloadData(new Object[]{ null, "file3.pdf" }) target is: downloader method is: setDownloadData(java.lang.Object[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadData([Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Test with a valid URL and invalid file name
downloader.setDownloadData(new Object[]{ "http://www.example.org", null }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test with a valid URL and invalid file name
downloader.setDownloadData(new Object[]{ "http://www.example.org", null }) target is: downloader method is: setDownloadData(java.lang.Object[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setDownloadData([Ljava/lang/Object;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Downloader downloader = new Downloader();
Object[] objectArray = null;
downloader.setDownloadData(objectArray);
Object[] objectArray = null;
downloader.setDownloadData(objectArray);
Object[] objectArray = null;
downloader.setDownloadData(objectArray);
Object[] objectArray = null;
downloader.setDownloadData(objectArray);

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader("https://www.example.com");
        int baseMessageId = downloader.getBaseMessageId(123456789);
        String message = "Hello World";
    }
}
statement is: Downloader downloader = new Downloader("https://www.example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int baseMessageId = downloader.getBaseMessageId(123456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId(123456789) target is: downloader method is: getBaseMessageId(int)
statement is: String message = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello World"
TestCase is: String string = "Hello World";

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: org.evosuite.testcase.statements.ArrayStatement@af2645cb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [J
statement code is: long[] longArray = new long[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@11db231e type is: class org.evosuite.testcase.statements.AssignmentStatement return type long
statement code is: longArray[0] = 778L
statement is: setIds([J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setIds(arg0)
statement is: getBaseMessageId()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long baseMessageId = downloader.getBaseMessageId()
test data is: Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 778L;
downloader.setIds(longArray);
downloader.getBaseMessageId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        long[] longArray = new long[1];
        longArray[0] = 987654321L;// an example of a more descriptive and representative value for the test data

        downloader.setIds(longArray);
        downloader.getBaseMessageId();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long[] longArray = new long[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: long[] longArray = new long[1] isAssignment: false Array: new long[1] Elements: []
lengths: [1] [1]
Their type are: class [J long[]
statement is: longArray[0] = 987654321L// an example of a more descriptive and representative value for the test data
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : longArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl long Assignment:987654321L Ct is: longArray[0] = 987654321L// an example of a more descriptive and representative value for the test data

target : longArray class spoon.support.reflect.code.CtLiteralImpl
statement is: downloader.setIds(longArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setIds(longArray) target is: downloader method is: setIds(long[])
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setIds([J)V
statement is: downloader.getBaseMessageId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getBaseMessageId() target is: downloader method is: getBaseMessageId()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getBaseMessageId()J
TestCase is: Downloader downloader = new Downloader();
long[] longArray = new long[1];
long _long = 987654321L;
longArray[0] = _long;
downloader.setIds(longArray);
downloader.getBaseMessageId();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setGroup(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setGroup("Shutting down news object")
statement is: getGroup()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String group = downloader.getGroup()
test data is: Downloader downloader = new Downloader();
downloader.setGroup("Shutting down news object");
downloader.getGroup();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setGroup("Group 1");// Changed to more descriptive string value

        downloader.getGroup();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setGroup("Group 1")// Changed to more descriptive string value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setGroup("Group 1")// Changed to more descriptive string value
 target is: downloader method is: setGroup(java.lang.String)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setGroup(Ljava/lang/String;)V
statement is: downloader.getGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getGroup() target is: downloader method is: getGroup()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getGroup()Ljava/lang/String;
TestCase is: Downloader downloader = new Downloader();
String string = "Group 1";
downloader.setGroup(string);
downloader.getGroup();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTimeout(2754)
statement is: getTimeout()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int timeout = downloader.getTimeout()
test data is: Downloader downloader = new Downloader();
downloader.setTimeout(2754);
downloader.getTimeout();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTimeout(10000);// Improved test data: 10 seconds is a more appropriate value for the download timeout in this situation.

        downloader.getTimeout();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTimeout(10000)// Improved test data: 10 seconds is a more appropriate value for the download timeout in this situation.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTimeout(10000)// Improved test data: 10 seconds is a more appropriate value for the download timeout in this situation.
 target is: downloader method is: setTimeout(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTimeout(I)V
statement is: downloader.getTimeout(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTimeout() target is: downloader method is: getTimeout()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTimeout()I
TestCase is: Downloader downloader = new Downloader();
int _int = 10000;
downloader.setTimeout(_int);
downloader.getTimeout();

statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines((-1L))
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines((-1L));
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        downloader.setTotalLines(100L);
        downloader.getTotalLines();
        downloader.setFilePath("test_file.txt");
        downloader.getFilePath();
    }
}
statement is: downloader.setTotalLines(100L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(100L) target is: downloader method is: setTotalLines(long)
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
statement is: downloader.setFilePath("test_file.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setFilePath("test_file.txt") target is: downloader method is: setFilePath(java.lang.String)
statement is: downloader.getFilePath(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getFilePath() target is: downloader method is: getFilePath()
statement is: Newzgrabber.Downloader()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class Newzgrabber.Downloader
statement code is: Downloader downloader = new Downloader()
statement is: setTotalLines(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: downloader.setTotalLines(3)
statement is: getTotalLines()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long totalLines = downloader.getTotalLines()
test data is: Downloader downloader = new Downloader();
downloader.setTotalLines(3);
downloader.getTotalLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Downloader downloader = new Downloader();
        downloader.setTotalLines(Integer.MAX_VALUE);
        downloader.getTotalLines();
    }
}
statement is: Downloader downloader = new Downloader(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: downloader.setTotalLines(Integer.MAX_VALUE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.setTotalLines(Integer.MAX_VALUE) target is: downloader method is: setTotalLines(int)
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: setTotalLines(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: downloader.getTotalLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: downloader.getTotalLines() target is: downloader method is: getTotalLines()
source statement: Newzgrabber.Downloader()V callee: VariableReference: Statement 0, type Newzgrabber.Downloaderindex is: 0
Matched Method is: getTotalLines()J
TestCase is: Downloader downloader = new Downloader();
int _int = null;
downloader.setTotalLines(_int);
downloader.getTotalLines();

* test suite isTestSuite: 44
Test 0: 
Downloader downloader = new Downloader();
downloader.setTableIndex((-1213));
Test 1: 
Downloader downloader = new Downloader();
downloader.setTitle("");
Test 2: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 3: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 4: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 5: 
Downloader downloader = new Downloader();
long[] longArray = new long[8];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 6: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 7: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 8: 
Downloader downloader = new Downloader();
downloader.close();
Test 9: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 10: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 11: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[1];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 12: 
Downloader downloader = new Downloader();
downloader.setServer("g$kQ]6#JYoP2su");
Test 13: 
Downloader downloader = new Downloader();
downloader.setUsername("");
Test 14: 
Downloader downloader = new Downloader();
downloader.setPassword("");
Test 15: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);
Test 16: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
Test 17: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 18: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 778L;
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 19: 
Downloader downloader = new Downloader();
downloader.setGroup("Shutting down news object");
downloader.getGroup();
Test 20: 
Downloader downloader = new Downloader();
downloader.setTimeout(2754);
downloader.getTimeout();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-1L));
downloader.getTotalLines();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines(3);
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTableIndex(56);

Test 24: 
Downloader downloader = new Downloader();
downloader.setTitle("Java Tutorial for Beginners");

Test 25: 
Downloader downloader = new Downloader();

Test 26: 
Downloader downloader = new Downloader();

Test 27: 
Downloader downloader = new Downloader();
downloader.setGroup("Group 1");
downloader.getGroup();

Test 28: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 29: 

Test 30: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 31: 

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 34: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com/api/v1");

Test 35: 
Downloader downloader = new Downloader();
downloader.setUsername("John Doe");

Test 36: 
Downloader downloader = new Downloader();
downloader.setPassword("123456789");

Test 37: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);

Test 38: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);

Test 39: 

Test 40: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 987654321L;
downloader.setIds(longArray);
downloader.getBaseMessageId();

Test 41: 
Downloader downloader = new Downloader();
downloader.setGroup("Group 1");
downloader.getGroup();

Test 42: 
Downloader downloader = new Downloader();
downloader.setTimeout(10000);
downloader.getTimeout();

Test 43: 
Downloader downloader = new Downloader();
downloader.setTotalLines((long) (Long) null);
downloader.getTotalLines();


* Generated after the refinement and before minimization 44 tests with total length 114
* test suite isTestSuite: 44
Test 0: 
Downloader downloader = new Downloader();
downloader.setTableIndex((-1213));
Test 1: 
Downloader downloader = new Downloader();
downloader.setTitle("");
Test 2: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 3: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 4: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 5: 
Downloader downloader = new Downloader();
long[] longArray = new long[8];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 6: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 7: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 8: 
Downloader downloader = new Downloader();
downloader.close();
Test 9: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 10: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 11: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[1];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 12: 
Downloader downloader = new Downloader();
downloader.setServer("g$kQ]6#JYoP2su");
Test 13: 
Downloader downloader = new Downloader();
downloader.setUsername("");
Test 14: 
Downloader downloader = new Downloader();
downloader.setPassword("");
Test 15: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);
Test 16: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
Test 17: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 18: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 778L;
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 19: 
Downloader downloader = new Downloader();
downloader.setGroup("Shutting down news object");
downloader.getGroup();
Test 20: 
Downloader downloader = new Downloader();
downloader.setTimeout(2754);
downloader.getTimeout();
Test 21: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-1L));
downloader.getTotalLines();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines(3);
downloader.getTotalLines();
Test 23: 
Downloader downloader = new Downloader();
downloader.setTableIndex(56);

Test 24: 
Downloader downloader = new Downloader();
downloader.setTitle("Java Tutorial for Beginners");

Test 25: 
Downloader downloader = new Downloader();

Test 26: 
Downloader downloader = new Downloader();

Test 27: 
Downloader downloader = new Downloader();
downloader.setGroup("Group 1");
downloader.getGroup();

Test 28: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 29: 

Test 30: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.getBaseMessageId();

Test 31: 

Test 32: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 33: 
Downloader downloader = new Downloader();
downloader.setIds((long[]) null);
downloader.startDownload();

Test 34: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com/api/v1");

Test 35: 
Downloader downloader = new Downloader();
downloader.setUsername("John Doe");

Test 36: 
Downloader downloader = new Downloader();
downloader.setPassword("123456789");

Test 37: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);

Test 38: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);
downloader.setDownloadData((Object[]) null);

Test 39: 

Test 40: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 987654321L;
downloader.setIds(longArray);
downloader.getBaseMessageId();

Test 41: 
Downloader downloader = new Downloader();
downloader.setGroup("Group 1");
downloader.getGroup();

Test 42: 
Downloader downloader = new Downloader();
downloader.setTimeout(10000);
downloader.getTimeout();

Test 43: 
Downloader downloader = new Downloader();
downloader.setTotalLines((long) (Long) null);
downloader.getTotalLines();


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
Downloader downloader = new Downloader();
downloader.setTotalLines((-1L));
downloader.getTotalLines();
Test 1: 
Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
Test 2: 
Downloader downloader = new Downloader();
downloader.setTableIndex(56);
Test 3: 
Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com/api/v1");
Test 4: 
Downloader downloader = new Downloader();
downloader.setTitle("Java Tutorial for Beginners");
Test 5: 
Downloader downloader = new Downloader();
downloader.setUsername("John Doe");
Test 6: 
Downloader downloader = new Downloader();
downloader.getGroup();
Test 7: 
Downloader downloader = new Downloader();
downloader.getTotalLines();
Test 8: 
Downloader downloader = new Downloader();
downloader.setGroup("Group 1");
downloader.getGroup();
Test 9: 
Downloader downloader = new Downloader();
downloader.setTimeout(10000);
downloader.getTimeout();
Test 10: 
Downloader downloader = new Downloader();
downloader.setPassword("123456789");
Test 11: 
Downloader downloader = new Downloader();
MockFile mockFile = new MockFile("w:oj=N>t]", "");
downloader.setDownloadDirectory(mockFile);
Test 12: 
Downloader downloader = new Downloader();
downloader.getTimeout();
Test 13: 
Downloader downloader = new Downloader();
downloader.getBaseMessageId();
Test 14: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 15: 
Downloader downloader = new Downloader();
downloader.close();
Test 16: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
downloader.close();
Test 17: 
Downloader downloader = new Downloader();
long[] longArray = new long[8];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 18: 
Downloader downloader = new Downloader();
long[] longArray = new long[0];
downloader.setIds(longArray);
downloader.startDownload();
Test 19: 
Downloader downloader = new Downloader();
Newzgrabber.verbose = true;
long[] longArray = new long[1];
downloader.setIds(longArray);
// Undeclared exception!
try { 
  downloader.startDownload();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("Newzgrabber.Downloader", e);
}

Test 20: 
Downloader downloader = new Downloader();
long[] longArray = new long[1];
longArray[0] = 778L;
downloader.setIds(longArray);
downloader.getBaseMessageId();
Test 21: 
Downloader downloader = new Downloader();
downloader.setGroup("");
downloader.getGroup();
Test 22: 
Downloader downloader = new Downloader();
downloader.setTotalLines(3);
downloader.getTotalLines();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 31
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 17%
* Total number of goals: 339
* Number of covered goals: 56
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 92%
* Total number of goals: 12
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 12%
* Total number of goals: 268
* Number of covered goals: 31
* Generated 23 tests with total length 65
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTotalLines((-1L));
long totalLines = downloader.getTotalLines();
assertEquals((-1L), totalLines);


** It was a parseable test case! 
refined test name is: testGetTotalLinesWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setDownloadData((Object[]) null);
assertFalse(downloader.ABORT);
assertEquals((-1), downloader.getTimeout());


** It was a parseable test case! 
refined test name is: testNullDownloadDataDoesNotSetAbortFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setTableIndex(56);
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


** It was a parseable test case! 
refined test name is: testGetTimeoutWhenNoTimeoutIsSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Downloader downloader = new Downloader();
downloader.setServer("https://www.example.com/api/v1");
assertEquals((-1), downloader.getTimeout());
assertFalse(downloader.ABORT);


