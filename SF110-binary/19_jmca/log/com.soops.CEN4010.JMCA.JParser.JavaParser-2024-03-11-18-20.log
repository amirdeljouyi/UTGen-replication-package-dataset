* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JParser.JavaParser
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 12944
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:20:22.639 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:20:22.642 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:20:22.642 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:20:23.046 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JParser.JavaParser
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 20959
* Using seed 1710181217035
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 2618 / 20959
[Progress:>                             3%] [Cov:=====>                             16%][Progress:=>                            6%] [Cov:======>                            18%][Progress:==>                           9%] [Cov:=======>                           22%][Progress:===>                          13%] [Cov:========>                          23%][Progress:====>                         14%] [Cov:========>                          25%][Progress:====>                         16%] [Cov:========>                          25%][Progress:=====>                        18%] [Cov:=========>                         27%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:==========>                        29%][Progress:=======>                      24%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       33%][Progress:=================>            58%] [Cov:===========>                       34%][Progress:=================>            59%] [Cov:============>                      35%][Progress:==================>           61%] [Cov:============>                      35%][Progress:==================>           62%] [Cov:============>                      35%][Progress:===================>          65%] [Cov:============>                      35%][Progress:=====================>        72%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:======================>       75%] [Cov:============>                      36%][Progress:======================>       76%] [Cov:============>                      36%][Progress:=======================>      78%] [Cov:============>                      37%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=============================>98%] [Cov:=============>                     38%][Progress:==============================100%] [Cov:=============>                     39%][Progress:==============================100%] [Cov:=============>                     39%]
* Search finished after 105s and 32 generations, 11197 statements, best individual has fitness: 14711.0
[MASTER] 18:22:18.095 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 14 seconds more than allowed.
* Generated before the refinement 205 tests with total length 608
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit(javaParser.token_source)
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("H/\\$bm");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReInit(javaParser.token_source);
    }
}
statement is: StringReader stringReader = new StringReader("H/\\$bm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(javaParser.token_source), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(javaParser.token_source) target is: javaParser method is: ReInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "H/\\$bm";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
JavaParserTokenManager javaParserTokenManager = null;
((JavaParser) stringReader).ReInit(javaParserTokenManager);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.TypeParameter(new String[]{ "T", "U" }, new Class<?>[]{ Integer.class, Double.class });
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(new String[]{ "T", "U" }, new Class<?>[]{ Integer.class, Double.class }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter(new String[]{ "T", "U" }, new Class<?>[]{ Integer.class, Double.class }) target is: javaParser method is: TypeParameter(java.lang.String[],java.lang.Class[])
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: java.io.ByteArrayOutputStream(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayOutputStream
statement code is: ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115)
statement is: org.evosuite.runtime.mock.java.io.MockPrintStream(Ljava/io/OutputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintStream
statement code is: MockPrintStream mockPrintStream = new MockPrintStream(arg0)
statement is: org.evosuite.runtime.mock.java.io.MockPrintWriter(Ljava/io/OutputStream;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintWriter
statement code is: MockPrintWriter mockPrintWriter = new MockPrintWriter(arg0, false)
statement is: dump(Ljava/io/Writer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.dump(arg0)
test data is: JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);
javaParser.dump(mockPrintWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
        MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
        MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);
        javaParser.dump(mockPrintWriter);
        // Set up the test data
        File file = new File("path/to/source/file");
        String sourceCode = "class MyClass { public void myMethod() { System.out.println(\"Hello World\"); } }";
        String expectedOutput = "MyClass::myMethod():\n\tSystem.out.println(Hello World)\n";
        // Execute the test
        javaParser.parse(file, sourceCode);
        mockPrintWriter.assertEquals(expectedOutput);
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.dump(mockPrintWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.dump(mockPrintWriter) target is: javaParser method is: dump(MockPrintWriter)
statement is: // Set up the test data
File file = new File("path/to/source/file"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String sourceCode = "class MyClass { public void myMethod() { System.out.println(\"Hello World\"); } }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutput = "MyClass::myMethod():\n\tSystem.out.println(Hello World)\n", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Execute the test
javaParser.parse(file, sourceCode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Execute the test
javaParser.parse(file, sourceCode) target is: javaParser method is: parse(File,java.lang.String)
statement is: mockPrintWriter.assertEquals(expectedOutput), class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockPrintWriter.assertEquals(expectedOutput) target is: mockPrintWriter method is: assertEquals(java.lang.String)
* this is vulnerable: String string = "class MyClass { public void myMethod() { System.out.println(\"Hello World\"); } }"
* this is vulnerable: String string = "MyClass::myMethod():\n\tSystem.out.println(Hello World)\n"
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
int _int = 115;
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(_int);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
boolean _boolean = false;
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, _boolean);
String string = "class MyClass { public void myMethod() { System.out.println(\"Hello World\"); } }";
String string = "MyClass::myMethod():\n\tSystem.out.println(Hello World)\n";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("qAC+OAUMnW.ff bf'")
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: JavaParser javaParser = new JavaParser("qAC+OAUMnW.ff bf'");
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int maxValue = 10;
        String body = "System.out.println(i);";
        WhileStatement whileStatement = new WhileStatement(new Identifier("i"), new Literal(maxValue), new Block(new StatementList(new Println(new Variable(new Identifier("i"))), new Increment(new Variable(new Identifier("i"))))));
    }
}
statement is: int maxValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String body = "System.out.println(i);", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: WhileStatement whileStatement = new WhileStatement(new Identifier("i"), new Literal(maxValue), new Block(new StatementList(new Println(new Variable(new Identifier("i"))), new Increment(new Variable(new Identifier("i")))))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "System.out.println(i);"
TestCase is: int _int = 10;
String string = "System.out.println(i);";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<LETTER>")
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
test data is: JavaParser javaParser = new JavaParser("");
StringReader stringReader = new StringReader("<LETTER>");
javaParser.ReInit((Reader) stringReader);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        javaParser.ReInit(((Reader) (stringReader)));
    }
}
statement is: Parser javaParser = new JavaParser("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((Reader) (stringReader))) target is: javaParser method is: ReInit(Reader)
TestCase is: String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
JavaParser javaParser = new JavaParser(string);
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: disable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.disable_tracing()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        StringReader stringReader = new StringReader("'Hello World!'");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.disable_tracing();
    }
}
statement is: StringReader stringReader = new StringReader("'Hello World!'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.disable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.disable_tracing() target is: javaParser method is: disable_tracing()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: disable_tracing()V
TestCase is: String string = "'Hello World!'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: enable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.enable_tracing()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.enable_tracing();
        // Improved test data:
        StringReader stringReader = new StringReader("{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.enable_tracing();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.enable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.enable_tracing() target is: javaParser method is: enable_tracing()
statement is: // Improved test data:
StringReader stringReader = new StringReader("{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.enable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.enable_tracing() target is: javaParser method is: enable_tracing()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: enable_tracing()V
TestCase is: String string = "{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).enable_tracing();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(4096)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(4096);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPublic(4096);
        // The primitive values and Strings used in the original test data are not descriptive enough, so we will use more illustrative examples.
        javaParser_ModifierSet.isPrivate(1024);
        javaParser_ModifierSet.isProtected(2048);
        javaParser_ModifierSet.isStatic(8192);
        javaParser_ModifierSet.isFinal(16384);
        javaParser_ModifierSet.isSynchronized("synchronized");
        javaParser_ModifierSet.isNative("native");
        javaParser_ModifierSet.isStrictfp("strictfp");
    }
}
statement is: // Improved test data for the given code snippet
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPublic(4096), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic(4096) target is: javaParser_ModifierSet method is: isPublic(int)
statement is: // The primitive values and Strings used in the original test data are not descriptive enough, so we will use more illustrative examples.
javaParser_ModifierSet.isPrivate(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The primitive values and Strings used in the original test data are not descriptive enough, so we will use more illustrative examples.
javaParser_ModifierSet.isPrivate(1024) target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: javaParser_ModifierSet.isProtected(2048), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected(2048) target is: javaParser_ModifierSet method is: isProtected(int)
statement is: javaParser_ModifierSet.isStatic(8192), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic(8192) target is: javaParser_ModifierSet method is: isStatic(int)
statement is: javaParser_ModifierSet.isFinal(16384), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(16384) target is: javaParser_ModifierSet method is: isFinal(int)
statement is: javaParser_ModifierSet.isSynchronized("synchronized"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized("synchronized") target is: javaParser_ModifierSet method is: isSynchronized(java.lang.String)
statement is: javaParser_ModifierSet.isNative("native"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative("native") target is: javaParser_ModifierSet method is: isNative(java.lang.String)
statement is: javaParser_ModifierSet.isStrictfp("strictfp"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp("strictfp") target is: javaParser_ModifierSet method is: isStrictfp(java.lang.String)
statement is: removeModifier(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int removeModifier = JavaParser.ModifierSet.removeModifier(18, 1403)
test data is: JavaParser.ModifierSet.removeModifier(18, 1403);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 10;
        double y = 3.5;
        String z = "This is a longer string";
        char a = 'b';
        ModifierSet.removeModifier(x, y);
        ModifierSet.removeModifier(z, a);
    }
}
statement is: int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "This is a longer string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char a = 'b', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ModifierSet.removeModifier(x, y), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ModifierSet.removeModifier(x, y) target is: ModifierSet method is: removeModifier(int,double)
Matched Method is: removeModifier(II)I
statement is: ModifierSet.removeModifier(z, a), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ModifierSet.removeModifier(z, a) target is: ModifierSet method is: removeModifier(java.lang.String,char)
Matched Method is: removeModifier(II)I
TestCase is: int _int = 10;
double _double = 3.5;
String string = "This is a longer string";
char _char = 'b';
JavaParser.ModifierSet.removeModifier(_int, (int) _double);
JavaParser.ModifierSet.removeModifier((int) string, _char);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(91)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(91);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        assertThat(javaParser_ModifierSet.isPublic()).isEqualTo(true);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertThat(javaParser_ModifierSet.isPublic()).isEqualTo(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertThat(javaParser_ModifierSet.isPublic()).isEqualTo(true) target is: assertThat(javaParser_ModifierSet.isPublic()) method is: isEqualTo(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int value1 = 42;// Changed to a more descriptive example, such as "The answer to the Ultimate Question of Life, the Universe, and Everything"

        double value2 = 3.14;// Changed to a more descriptive example, such as "The ratio of a circle's circumference to its diameter"

        String value3 = "Hello, world!";// This string is already descriptive enough

        char value4 = 'A';// This character is already descriptive enough }}

    }
}
statement is: int value1 = 42// Changed to a more descriptive example, such as "The answer to the Ultimate Question of Life, the Universe, and Everything"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double value2 = 3.14// Changed to a more descriptive example, such as "The ratio of a circle's circumference to its diameter"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String value3 = "Hello, world!"// This string is already descriptive enough
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char value4 = 'A'// This character is already descriptive enough }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(22)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(22);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private int myField1 = 10;
        protected int myField2 = 20;
    }
}
statement is: private int myField1 = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: protected int myField2 = 20, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 20
TestCase is: int _int = 10;
int _int = 20;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic(512)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(512);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStatic("static");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStatic("static"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic("static") target is: javaParser_ModifierSet method is: isStatic(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract((-992))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract((-992));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser.ModifierSet class
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract(true);
        javaParser_ModifierSet.isFinal(false);
        javaParser_ModifierSet.isPrivate(true);
        javaParser_ModifierSet.isStatic(false);
    }
}
statement is: // Improved test data for the JavaParser.ModifierSet class
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract(true) target is: javaParser_ModifierSet method is: isAbstract(boolean)
statement is: javaParser_ModifierSet.isFinal(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(false) target is: javaParser_ModifierSet method is: isFinal(boolean)
statement is: javaParser_ModifierSet.isPrivate(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(true) target is: javaParser_ModifierSet method is: isPrivate(boolean)
statement is: javaParser_ModifierSet.isStatic(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic(false) target is: javaParser_ModifierSet method is: isStatic(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(8)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract("Cool");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract("Cool"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract("Cool") target is: javaParser_ModifierSet method is: isAbstract(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative(0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(1);// Modified to a more descriptive value, such as "true" or "false", to demonstrate the effect of changing the primitive value }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(1)// Modified to a more descriptive value, such as "true" or "false", to demonstrate the effect of changing the primitive value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(1)// Modified to a more descriptive value, such as "true" or "false", to demonstrate the effect of changing the primitive value }}
 target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-627))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-627));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(0);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(0) target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp(0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(1);// This modifier indicates that the method is strict in its floating-point computations, and will throw an exception if it detects any inconsistencies in the rounding mode or overflow/underflow of intermediate results }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(1)// This modifier indicates that the method is strict in its floating-point computations, and will throw an exception if it detects any inconsistencies in the rounding mode or overflow/underflow of intermediate results }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(1)// This modifier indicates that the method is strict in its floating-point computations, and will throw an exception if it detects any inconsistencies in the rounding mode or overflow/underflow of intermediate results }}
 target is: javaParser_ModifierSet method is: isStrictfp(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp((-842))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-842));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(1.234);// Improved test data: using a more descriptive value for the modifie }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(1.234)// Improved test data: using a more descriptive value for the modifie }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(1.234)// Improved test data: using a more descriptive value for the modifie }}
 target is: javaParser_ModifierSet method is: isStrictfp(double)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized(0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // Initialize the modifier set with the synchronized modifier
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(1);
    }
}
statement is: // Initialize the modifier set with the synchronized modifier
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(1) target is: javaParser_ModifierSet method is: isSynchronized(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized(64)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(64);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized("synchronized");// using a more descriptive String value for "synchronized" modifie }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized("synchronized")// using a more descriptive String value for "synchronized" modifie }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized("synchronized")// using a more descriptive String value for "synchronized" modifie }}
 target is: javaParser_ModifierSet method is: isSynchronized(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(20)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(20);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private static final String MY_CONSTANT = "my constant value";
        private int myField1 = 42;
        private double myField2 = 3.14;
        private String myField3 = "hello world";
        private char myField4 = 'A';
    }
}
statement is: private static final String MY_CONSTANT = "my constant value", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private int myField1 = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private double myField2 = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private String myField3 = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private char myField4 = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "my constant value"
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'A'
TestCase is: String string = "my constant value";
int _int = 42;
double _double = 3.14;
String string = "hello world";
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(1391)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1391);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isTransient("TEMPORARY");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isTransient("TEMPORARY"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isTransient("TEMPORARY") target is: javaParser_ModifierSet method is: isTransient(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(2)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile("volatile");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile("volatile"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile("volatile") target is: javaParser_ModifierSet method is: isVolatile(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(927)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(927);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile("volatile");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile("volatile"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile("volatile") target is: javaParser_ModifierSet method is: isVolatile(java.lang.String)
statement is: org.evosuite.testcase.statements.ArrayStatement@1fc04a3b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[5];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Welcome to Java";
        stringArray[1] = "A language for building applications";
        stringArray[2] = "With a focus on simplicity and readability";
        stringArray[3] = "JavaParser is a powerful tool for testing code";
        stringArray[4] = "Main method for running the test suite";
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Welcome to Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Welcome to Java" Ct is: stringArray[0] = "Welcome to Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "A language for building applications", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A language for building applications" Ct is: stringArray[1] = "A language for building applications"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "With a focus on simplicity and readability", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"With a focus on simplicity and readability" Ct is: stringArray[2] = "With a focus on simplicity and readability"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "JavaParser is a powerful tool for testing code", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"JavaParser is a powerful tool for testing code" Ct is: stringArray[3] = "JavaParser is a powerful tool for testing code"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Main method for running the test suite", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Main method for running the test suite" Ct is: stringArray[4] = "Main method for running the test suite"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[5];
JavaParser.main(stringArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CompilationUnit()V
TestCase is: String string = "class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).CompilationUnit();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: java.io.DataInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.DataInputStream
statement code is: DataInputStream dataInputStream = new DataInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream("Sample Input Stream".getBytes());
        DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
        JavaParser javaParser = new JavaParser(dataInputStream);
        javaParser.CompilationUnit();
        // Test data can be further improved by using more descriptive and representative values for the primitive variables and strings. For example, instead of using "Sample Input Stream" as a string value, we could use a more meaningful and realistic value such as "John Doe". Similarly, we could use more descriptive integer and double values for the primitive variables. }}
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream("Sample Input Stream".getBytes()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataInputStream dataInputStream = new DataInputStream(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.DataInputStream(Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(dataInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: // Test data can be further improved by using more descriptive and representative values for the primitive variables and strings. For example, instead of using "Sample Input Stream" as a string value, we could use a more meaningful and realistic value such as "John Doe". Similarly, we could use more descriptive integer and double values for the primitive variables. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("^igB+y,eO4J")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, (-4984))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class HelloWorld {\n" + ((("    public static void main(String[] args) {\n" + "        System.out.println(\"Hello, World!\");\n") + "    }\n") + "}"));
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("public class HelloWorld {\n" + ((("    public static void main(String[] args) {\n" + "        System.out.println(\"Hello, World!\");\n") + "    }\n") + "}")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: CompilationUnit()V
TestCase is: StringReader stringReader = new StringReader("^igB+y,eO4J");
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).CompilationUnit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 4, 64, 2)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("package com.example.myproject;");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.PackageDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("package com.example.myproject;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: PackageDeclaration()V
TestCase is: String string = "package com.example.myproject;";
StringReader stringReader = new StringReader(string);
int _int = 4;
int _int = 64;
int _int = 2;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).PackageDeclaration();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg1, arg1)
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ImportDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImportDeclaration()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, pipedInputStream);
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
javaParser.ImportDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream("Hello, World!");
        SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, "This is a test string.");
        PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
        JavaParser javaParser = new JavaParser(pushbackInputStream);
        javaParser.ImportDeclaration();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, "This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pushbackInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ImportDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ImportDeclaration() target is: javaParser method is: ImportDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ImportDeclaration()V
TestCase is: String string = "This is a test string.";
SequenceInputStream sequenceInputStream = new SequenceInputStream((InputStream) string, (InputStream) string);
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
javaParser.ImportDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2lv");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("2lv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "2lv";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        StringReader stringReader1 = new StringReader("2lv");
        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.AdditiveExpression();// This should return a valid AdditiveExpression object

        javaParser1.TypeDeclaration();// This should return a valid TypeDeclaration object

        StringReader stringReader2 = new StringReader("3m");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.AdditiveExpression();// This should return a valid AdditiveExpression object

        javaParser2.TypeDeclaration();// This should return a valid TypeDeclaration object

        StringReader stringReader3 = new StringReader("4kg");
        JavaParser javaParser3 = new JavaParser(stringReader3);
        javaParser3.AdditiveExpression();// This should return a valid AdditiveExpression object

        javaParser3.TypeDeclaration();// This should return a valid TypeDeclaration object

        StringReader stringReader4 = new StringReader("5ml");
        JavaParser javaParser4 = new JavaParser(stringReader4);
        javaParser4.AdditiveExpression();// This should return a valid AdditiveExpression object

        javaParser4.TypeDeclaration();// This should return a valid TypeDeclaration object }}

    }
}
statement is: // Improved test data for the JavaParser class
StringReader stringReader1 = new StringReader("2lv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.AdditiveExpression()// This should return a valid AdditiveExpression object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.AdditiveExpression()// This should return a valid AdditiveExpression object
 target is: javaParser1 method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
statement is: javaParser1.TypeDeclaration()// This should return a valid TypeDeclaration object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.TypeDeclaration()// This should return a valid TypeDeclaration object
 target is: javaParser1 method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeDeclaration()V
statement is: StringReader stringReader2 = new StringReader("3m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.AdditiveExpression()// This should return a valid AdditiveExpression object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.AdditiveExpression()// This should return a valid AdditiveExpression object
 target is: javaParser2 method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: AdditiveExpression()V
statement is: javaParser2.TypeDeclaration()// This should return a valid TypeDeclaration object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.TypeDeclaration()// This should return a valid TypeDeclaration object
 target is: javaParser2 method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: TypeDeclaration()V
statement is: StringReader stringReader3 = new StringReader("4kg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser3 = new JavaParser(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.AdditiveExpression()// This should return a valid AdditiveExpression object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.AdditiveExpression()// This should return a valid AdditiveExpression object
 target is: javaParser3 method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 12
Matched Method is: AdditiveExpression()V
statement is: javaParser3.TypeDeclaration()// This should return a valid TypeDeclaration object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.TypeDeclaration()// This should return a valid TypeDeclaration object
 target is: javaParser3 method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 12
Matched Method is: TypeDeclaration()V
statement is: StringReader stringReader4 = new StringReader("5ml"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser4 = new JavaParser(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser4.AdditiveExpression()// This should return a valid AdditiveExpression object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.AdditiveExpression()// This should return a valid AdditiveExpression object
 target is: javaParser4 method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 17
Matched Method is: AdditiveExpression()V
statement is: javaParser4.TypeDeclaration()// This should return a valid TypeDeclaration object }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.TypeDeclaration()// This should return a valid TypeDeclaration object }}
 target is: javaParser4 method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 17
Matched Method is: TypeDeclaration()V
TestCase is: String string = "2lv";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "3m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "4kg";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "5ml";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("?-,(")
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: JavaParser javaParser = new JavaParser("?-,(");
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        javaParser.TypeDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
TestCase is: String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(587)
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
javaParser.ClassOrInterfaceDeclaration(587);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(" ")
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(959)
test data is: JavaParser javaParser = new JavaParser(" ");
javaParser.ClassOrInterfaceDeclaration(959);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExtendsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExtendsList(true)
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExtendsList(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("H/");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExtendsList(true);
    }
}
statement is: StringReader stringReader = new StringReader("H/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExtendsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExtendsList(true) target is: javaParser method is: ExtendsList(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExtendsList(Z)V
TestCase is: String string = "H/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = true;
((JavaParser) stringReader).ExtendsList(_boolean);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("0%U)t9f{g~z?")
statement is: ImplementsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImplementsList(true)
test data is: JavaParser javaParser = new JavaParser("0%U)t9f{g~z?");
javaParser.ImplementsList(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ImplementsList(true);
    }
}
statement is: Parser.ImplementsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ImplementsList(true) target is: Parser method is: ImplementsList(boolean)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration((-1185))
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumDeclaration((-1185));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.EnumDeclaration(0x1234);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.EnumDeclaration(0x1234), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration(0x1234) target is: javaParser method is: EnumDeclaration(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration(8)
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.EnumDeclaration(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser example
        JavaParser javaParser = new JavaParser("Hello, World!");
        javaParser.EnumDeclaration(8);
    }
}
statement is: // Improved test data for the JavaParser example
JavaParser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumDeclaration(8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration(8) target is: javaParser method is: EnumDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: EnumDeclaration(I)V
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser((Reader) string);
int _int = 8;
((JavaParser) string).EnumDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{%B)1I;}o3")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 53, 53)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: StringReader stringReader = new StringReader("{%B)1I;}o3");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 53, 53);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.EnumBody();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 53, 53), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumBody() target is: javaParser method is: EnumBody()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: EnumBody()V
TestCase is: int _int = 53;
int _int = 53;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).EnumBody();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameters()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameters();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameters() target is: javaParser method is: TypeParameters()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameters()V
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("mI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("myString");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: StringReader stringReader = new StringReader("myString"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
TestCase is: String string = "myString";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2eitz")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeBound();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeBound() target is: javaParser method is: TypeBound()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeBound()V
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(true)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBody(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.2:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.2:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Java Parser Version 1.2:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor();
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.ClassOrInterfaceBodyDeclaration(true);
        // Improved test data
        FileDescriptor fileDescriptor = new FileDescriptor("testFile", "rwxr-x---");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceBodyDeclaration(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(true) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Improved test data
FileDescriptor fileDescriptor = new FileDescriptor("testFile", "rwxr-x---"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
boolean _boolean = true;
javaParser.ClassOrInterfaceBodyDeclaration(_boolean);
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("dI8Z~l8")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("dI8Z~l8");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("dI8Z~l8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AndExpression()V
TestCase is: String string = "dI8Z~l8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("H$bm");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.FormalParameter();
    }
}
statement is: StringReader stringReader = new StringReader("H$bm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameter()V
TestCase is: String string = "H$bm";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String name = \"John Doe\";");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String name = \"John Doe\";"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "int x = 5; double y = 3.14; String name = \"John Doe\";";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArrayInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayInitializer() target is: javaParser method is: ArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayInitializer()V
TestCase is: String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("B;\'Q[\"-^>BO:B\n" + (((((((("int x = 5;\n" + "void foo() {\n") + "    System.out.println(\"Hello, world!\");\n") + "}\n") + "class MyClass {\n") + "    public static void main(String[] args) {\n") + "        System.out.println(\"Hello, Java!\");\n") + "    }\n") + "}"));
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Name();
        javaParser.AnnotationTypeMemberDeclaration();
        javaParser.ArrayInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("B;\'Q[\"-^>BO:B\n" + (((((((("int x = 5;\n" + "void foo() {\n") + "    System.out.println(\"Hello, world!\");\n") + "}\n") + "class MyClass {\n") + "    public static void main(String[] args) {\n") + "        System.out.println(\"Hello, Java!\");\n") + "    }\n") + "}")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: Name()V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AnnotationTypeMemberDeclaration()V
statement is: javaParser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayInitializer() target is: javaParser method is: ArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: ArrayInitializer()V
TestCase is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
javaParser.ArrayInitializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("(")
statement is: FormalParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameters()
test data is: JavaParser javaParser = new JavaParser("(");
javaParser.FormalParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.FormalParameters(new int[]{ 2 ^ (3 + 7), (-5) / 2 }, "hello world", 'c');
    }
}
statement is: Parser.FormalParameters(new int[]{ 2 ^ (3 + 7), (-5) / 2 }, "hello world", 'c'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.FormalParameters(new int[]{ 2 ^ (3 + 7), (-5) / 2 }, "hello world", 'c') target is: Parser method is: FormalParameters(int[],java.lang.String,char)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: FormalParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameters()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.FormalParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("(Reader) null");
        javaParser.formalParameters();
    }
}
statement is: Parser javaParser = new JavaParser("(Reader) null"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.formalParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.formalParameters() target is: javaParser method is: formalParameters()
TestCase is: String string = "(Reader) null";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameter();
        javaParser.WildcardBounds();
        // Improved test data
        StringReader stringReader1 = new StringReader("Java Parser Version 2.0:  No errors detected during parse.");
        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.FormalParameter();
        javaParser1.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameter()V
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
statement is: // Improved test data
StringReader stringReader1 = new StringReader("Java Parser Version 2.0:  No errors detected during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.FormalParameter() target is: javaParser1 method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: FormalParameter()V
statement is: javaParser1.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.WildcardBounds() target is: javaParser1 method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: WildcardBounds()V
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();
String string = "Java Parser Version 2.0:  No errors detected during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // This is a sample test method that demonstrates the use of the JavaParser library.
        JavaParser javaParser = new JavaParser("This is a sample input string for the JavaParser.");
        javaParser.ConstructorDeclaration();
    }
}
statement is: // This is a sample test method that demonstrates the use of the JavaParser library.
JavaParser javaParser = new JavaParser("This is a sample input string for the JavaParser."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: ConstructorDeclaration()V
TestCase is: String string = "This is a sample input string for the JavaParser.";
JavaParser javaParser = new JavaParser((Reader) string);
((JavaParser) string).ConstructorDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("JYz7,[G1>%}")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("JYz7,[G1>%}");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test StringReader object with multiple lines.\nThis is the second line.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test StringReader object with multiple lines.\nThis is the second line."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "This is a test StringReader object with multiple lines.\nThis is the second line.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("C:\\Temp\\Test.java");
        javaParser.parse(new FileInputStream("C:\\Temp\\Test.java"), "UTF-8");
    }
}
statement is: Parser javaParser = new JavaParser("C:\\Temp\\Test.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.parse(new FileInputStream("C:\\Temp\\Test.java"), "UTF-8"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse(new FileInputStream("C:\\Temp\\Test.java"), "UTF-8") target is: javaParser method is: parse(FileInputStream,java.lang.String)
TestCase is: String string = "C:\\Temp\\Test.java";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2eitz")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Identifier();
        javaParser.AssignmentOperator();
        javaParser.Expression();
        javaParser.Semicolon();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Identifier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Identifier() target is: javaParser method is: Identifier()
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
statement is: javaParser.Semicolon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Semicolon() target is: javaParser method is: Semicolon()
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String input = "This is a sample string.";
        List<Integer> list = new ArrayList<>();
        list.add(2);
        list.add(4);
        list.add(6);
        JavaParser parser = new JavaParser(input);
        parser.Initializer();
    }
}
statement is: String input = "This is a sample string.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: List<Integer> list = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: list.add(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.add(2) target is: list method is: add(int)
statement is: list.add(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.add(4) target is: list method is: add(int)
statement is: list.add(6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.add(6) target is: list method is: add(int)
statement is: JavaParser parser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.Initializer() target is: parser method is: Initializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: Initializer()V
TestCase is: String string = "This is a sample string.";
JavaParser javaParser = new JavaParser((Reader) string);
javaParser.Initializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.Type(new Type("int", "10"));// Testing the parsing of an integer primitive type with a value of 10

        javaParser.Type(new Type("double", "3.14"));// Testing the parsing of a double primitive type with a value of 3.14

        javaParser.Type(new Type("String", "\"hello world\""));// Testing the parsing of a String primitive type with a value of "hello world"

        javaParser.Type(new Type("char", "'a'"));// Testing the parsing of a char primitive type with a value of 'a }}

    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(new Type("int", "10"))// Testing the parsing of an integer primitive type with a value of 10
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type(new Type("int", "10"))// Testing the parsing of an integer primitive type with a value of 10
 target is: javaParser method is: Type(Type)
statement is: javaParser.Type(new Type("double", "3.14"))// Testing the parsing of a double primitive type with a value of 3.14
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type(new Type("double", "3.14"))// Testing the parsing of a double primitive type with a value of 3.14
 target is: javaParser method is: Type(Type)
statement is: javaParser.Type(new Type("String", "\"hello world\""))// Testing the parsing of a String primitive type with a value of "hello world"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type(new Type("String", "\"hello world\""))// Testing the parsing of a String primitive type with a value of "hello world"
 target is: javaParser method is: Type(Type)
statement is: javaParser.Type(new Type("char", "'a'"))// Testing the parsing of a char primitive type with a value of 'a }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type(new Type("char", "'a'"))// Testing the parsing of a char primitive type with a value of 'a }}
 target is: javaParser method is: Type(Type)
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("BWEWl")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("BWEWl");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        // Improved test data:
        // Replace the hardcoded primitive values with more descriptive and representative examples:
        int age = 35;// Replace with a more meaningful value, such as 25 or 40

        double height = 180.0;// Replace with a more meaningful value, such as 160.0 or 190.0

        String name = "John Doe";// Replace with a more descriptive and representative string

        char gender = 'M';// Replace with a more descriptive and representative character

        // Use the improved primitive values in the test data:
        stringReader = new StringReader((((((("BWEWl" + age) + ",") + height) + ",") + name) + ",") + gender);
        javaParser = new JavaParser(stringReader);
        javaParser.Type();
    }
}
statement is: StringReader stringReader = new StringReader("BWEWl"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: // Improved test data:
// Replace the hardcoded primitive values with more descriptive and representative examples:
int age = 35// Replace with a more meaningful value, such as 25 or 40
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 180.0// Replace with a more meaningful value, such as 160.0 or 190.0
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe"// Replace with a more descriptive and representative string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M'// Replace with a more descriptive and representative character
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use the improved primitive values in the test data:
stringReader = new StringReader((((((("BWEWl" + age) + ",") + height) + ",") + name) + ",") + gender), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
* this is vulnerable: int _int = 35
* this is vulnerable: double _double = 180.0
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'M'
TestCase is: String string = "BWEWl";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
int _int = 35;
double _double = 180.0;
String string = "John Doe";
char _char = 'M';
((JavaParser) stringReader).Type();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameter();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameter()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

statement is: org.evosuite.testcase.statements.ArrayStatement@fa94f91e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: java.io.ByteArrayInputStream([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0, (-2146), 49)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2146), 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, 2, 4);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
    }
}
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde } Elements: [0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde]
lengths: [7] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, 2, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 2;
int _int = 4;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) _int, _int, 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("NullLiteral")
statement is: TypeArguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArguments()
test data is: JavaParser javaParser = new JavaParser("NullLiteral");
javaParser.TypeArguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved code
        JavaParser javaParser = /* Introduce more descriptive variable name */
        new JavaParser("NullLiteralForTestingPurpose");
        javaParser.TypeArguments();
    }
}
statement is: // Improved code
JavaParser javaParser = /* Introduce more descriptive variable name */
new JavaParser("NullLiteralForTestingPurpose"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArguments() target is: javaParser method is: TypeArguments()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: TypeArguments()V
TestCase is: String string = "NullLiteralForTestingPurpose";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).TypeArguments();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.TypeArgument();
    }
}
statement is: Parser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.TypeArgument() target is: Parser method is: TypeArgument()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("");
        javaParser.WildcardBounds(new WildcardBoundType[]{ WildcardBoundType.SUPER, WildcardBoundType.EXTENDS });
        String[] types = new String[]{ "int", "double", "String", "char" };
        for (String type : types) {
            javaParser.WildcardBounds(type);
        }
        javaParser.WildcardBounds("?");
        javaParser.WildcardBounds("<?>");
    }
}
statement is: Parser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(new WildcardBoundType[]{ WildcardBoundType.SUPER, WildcardBoundType.EXTENDS }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds(new WildcardBoundType[]{ WildcardBoundType.SUPER, WildcardBoundType.EXTENDS }) target is: javaParser method is: WildcardBounds(WildcardBoundType[])
statement is: String[] types = new String[]{ "int", "double", "String", "char" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (String type : types) {
    javaParser.WildcardBounds(type);
}, class spoon.support.reflect.code.CtForEachImpl
statement is: javaParser.WildcardBounds("?"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds("?") target is: javaParser method is: WildcardBounds(java.lang.String)
statement is: javaParser.WildcardBounds("<?>"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds("<?>") target is: javaParser method is: WildcardBounds(java.lang.String)
TestCase is: String string = "";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaParserTokenManager(null));
        javaParser.PrimitiveType();
        // Improved test data:
        javaParser.PrimitiveType("int");
        javaParser.PrimitiveType("double");
        javaParser.PrimitiveType("String");
        javaParser.PrimitiveType("char");
    }
}
statement is: Parser javaParser = new JavaParser(new JavaParserTokenManager(null)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimitiveType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType() target is: javaParser method is: PrimitiveType()
statement is: // Improved test data:
javaParser.PrimitiveType("int"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
javaParser.PrimitiveType("int") target is: javaParser method is: PrimitiveType(java.lang.String)
statement is: javaParser.PrimitiveType("double"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType("double") target is: javaParser method is: PrimitiveType(java.lang.String)
statement is: javaParser.PrimitiveType("String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType("String") target is: javaParser method is: PrimitiveType(java.lang.String)
statement is: javaParser.PrimitiveType("char"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType("char") target is: javaParser method is: PrimitiveType(java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("1 + 2 * 3");
        javaParser.ResultType();
        int integerValue = 5;
        double doubleValue = 3.14;
        String stringValue = "This is a test string";
        char charValue = 'a';
    }
}
statement is: Parser javaParser = new JavaParser("1 + 2 * 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ResultType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType() target is: javaParser method is: ResultType()
statement is: int integerValue = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: char _char = 'a'
TestCase is: String string = "1 + 2 * 3";
JavaParser javaParser = new JavaParser(string);
int _int = 5;
double _double = 3.14;
String string = "This is a test string";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] myIntArray = new int[]{ 1, 2, 3, 4, 5 };
        String[] myStringArray = new String[]{ "apple", "banana", "cherry" };
        double[] myDoubleArray = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5 };
    }
}
statement is: // Improved test data
int[] myIntArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] myStringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] myDoubleArray = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Test");// This sets the input to be a string "Test" instead of a null value.

        javaParser.NameList();
    }
}
statement is: Parser javaParser = new JavaParser("Test")// This sets the input to be a string "Test" instead of a null value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
TestCase is: String string = "Test";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@b994467f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 'A', 'B', 'C' };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.NameList();
    }
}
statement is: byte[] byteArray = new byte[]{ 'A', 'B', 'C' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ 'A', 'B', 'C' } Elements: ['A', 'B', 'C']
lengths: [6] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        JavaParser javaParser = new JavaParser("input.txt");
        javaParser.ArgumentList();
    }
}
statement is: JavaParser javaParser = new JavaParser("input.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: ArgumentList()V
TestCase is: String string = "input.txt";
JavaParser javaParser = new JavaParser((Reader) string);
((JavaParser) string).ArgumentList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>")
statement is: org.evosuite.testcase.statements.ArrayStatement@3c528207 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[5]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
        char[] charArray = new char[5];
        stringReader.read(charArray);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
        javaParser.AssignmentOperator();
    }
}
statement is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: char[] charArray = new char[5] isAssignment: false Array: new char[5] Elements: []
lengths: [5] [5]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read([C)I
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: RelationalExpression()V
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: AssignmentOperator()V
TestCase is: String string = "<?xml version='1.0' encoding='UTF-8' ?>";
StringReader stringReader = new StringReader(string);
char[] charArray = new char[5];
int read = ((Reader) string).read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).RelationalExpression();
((JavaParser) read).AssignmentOperator();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("3t")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: JavaParser javaParser = new JavaParser("3t");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("TestData.java");
        javaParser.parse("TestData", false);
    }
}
statement is: Parser javaParser = new JavaParser("TestData.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.parse("TestData", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse("TestData", false) target is: javaParser method is: parse(java.lang.String,boolean)
TestCase is: String string = "TestData.java";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("LXW+")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("LXW+");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
    }
}
statement is: StringReader stringReader = new StringReader("LXW+"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
TestCase is: String string = "LXW+";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: read()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        stringReader.read();
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("case")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("case");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
        // Improved test data
        StringReader stringReader = new StringReader("switch");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
    }
}
statement is: StringReader stringReader = new StringReader("case"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArgumentList()V
statement is: // Improved test data
StringReader stringReader = new StringReader("switch"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: ArgumentList()V
TestCase is: String string = "case";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
String string = "switch";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("transient")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser method "AdditiveExpression"
        StringReader stringReader = new StringReader("transient");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
        // Changed primitive values and Strings to more descriptive examples
        int x = 5;// changed from 3 to a more descriptive value

        double y = 10.5;// changed from 20.5 to a more descriptive value

        String name = "John";// changed from "Jane" to a more descriptive value

        char initial = 'A';// changed from 'B' to a more descriptive value

        // Added test data for a more representative scenario
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] names = new String[]{ "John", "Jane", "Bob" };
        boolean[] booleans = new boolean[]{ true, false, true, false };
    }
}
statement is: // Improved test data for the JavaParser method "AdditiveExpression"
StringReader stringReader = new StringReader("transient"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
statement is: // Changed primitive values and Strings to more descriptive examples
int x = 5// changed from 3 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 10.5// changed from 20.5 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John"// changed from "Jane" to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char initial = 'A'// changed from 'B' to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Added test data for a more representative scenario
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] names = new String[]{ "John", "Jane", "Bob" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean[] booleans = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 10.5
* this is vulnerable: String string = "John"
* this is vulnerable: char _char = 'A'
TestCase is: String string = "transient";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
int _int = 5;
double _double = 10.5;
String string = "John";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("if (x > 0) { return x; } else { return -x; }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("if (x > 0) { return x; } else { return -x; }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
TestCase is: String string = "if (x > 0) { return x; } else { return -x; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";z*pr3\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: StringReader stringReader = new StringReader(";z*pr3\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("$,!wLe")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("$,!wLe");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This\tis\ta\ttest\tstring");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.InclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("This\tis\ta\ttest\tstring"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
TestCase is: String string = "This\tis\ta\ttest\tstring";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).InclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".?!")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader(".?!");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("123.456");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MultiplicativeExpression();
    }
}
statement is: StringReader stringReader = new StringReader("123.456"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MultiplicativeExpression()V
TestCase is: String string = "123.456";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@mV+$fpE(IKq{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("@mV+$fpE(IKq{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) throws Exception {
        StringReader stringReader = new StringReader("<");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression();
    }
}
statement is: StringReader stringReader = new StringReader("<"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
TestCase is: String string = "<";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("2eitz")
statement is: PreIncrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreIncrementExpression()
test data is: JavaParser javaParser = new JavaParser("2eitz");
javaParser.PreIncrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(2);// Changed primitive value to a more descriptive example (e.g., 2)

        javaParser.PreIncrementExpression();
    }
}
statement is: Parser javaParser = new JavaParser(2)// Changed primitive value to a more descriptive example (e.g., 2)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreIncrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreIncrementExpression() target is: javaParser method is: PreIncrementExpression()
TestCase is: int _int = 2;
JavaParser javaParser = new JavaParser((String) _int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PreDecrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreDecrementExpression()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PreDecrementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreDecrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreDecrementExpression() target is: javaParser method is: PreDecrementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PreDecrementExpression()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
        javaParser.UnaryExpressionNotPlusMinus();
        // Improved test data:
        StringReader stringReader = new StringReader("\"A1234567890aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: // Improved test data:
StringReader stringReader = new StringReader("\"A1234567890aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "\"A1234567890aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2eitz")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CastLookahead();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastLookahead()V
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2eitz")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2147483647");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
        javaParser.CastLookahead();
    }
}
statement is: StringReader stringReader = new StringReader("2147483647"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArgumentList()V
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastLookahead()V
TestCase is: String string = "2147483647";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
((JavaParser) stringReader).CastLookahead();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: read()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read()
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.read();
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        stringReader.read();
        javaParser.RelationalExpression();
        // Improved test data:
        StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");// More descriptive String value for testing RelationalExpression() method.

        JavaParser javaParser = new JavaParser(stringReader);
        stringReader.read();
        javaParser.RelationalExpression();
        // Improved test data:
        StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");// More descriptive String value for testing RelationalExpression() method.

        JavaParser javaParser = new JavaParser(stringReader);
        stringReader.read();
        javaParser.RelationalExpression();
        // Improved test data:
        StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");// More descriptive String value for testing RelationalExpression() method.

        JavaParser javaParser = new JavaParser(stringReader);
        stringReader.read();
        javaParser.RelationalExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
statement is: // Improved test data:
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")// More descriptive String value for testing RelationalExpression() method.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read()I
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")// More descriptive String value for testing RelationalExpression() method.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 6
Matched Method is: read()I
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: RelationalExpression()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")// More descriptive String value for testing RelationalExpression() method.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 11
Matched Method is: read()I
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 12
Matched Method is: RelationalExpression()V
TestCase is: String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("");
        javaParser.CastExpression();
    }
}
statement is: Parser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
TestCase is: String string = "";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("myVariable.getMyMethod()");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("myVariable.getMyMethod()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
TestCase is: String string = "myVariable.getMyMethod()";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new FileReader("path/to/file.java"));
        String code = "int x = 10;";
        javaParser.CompilationUnit(code);
    }
}
statement is: Parser javaParser = new JavaParser(new FileReader("path/to/file.java")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String code = "int x = 10;", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.CompilationUnit(code), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit(code) target is: javaParser method is: CompilationUnit(java.lang.String)
* this is vulnerable: String string = "int x = 10;"
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
String string = "int x = 10;";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("^igB+y,eO4J")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, (-4984))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.getNextToken();
javaParser.UnaryExpression();
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("^igB+y,eO4J");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.getNextToken();
        javaParser.UnaryExpression();
        javaParser.PrimarySuffix();
    }
}
statement is: StringReader stringReader = new StringReader("^igB+y,eO4J"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getNextToken() target is: javaParser method is: getNextToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: PrimarySuffix()V
TestCase is: String string = "^igB+y,eO4J";
StringReader stringReader = new StringReader(string);
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimarySuffix();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        String[] stringArray = new String[]{ "hello", "world" };
        double[] doubleArray = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 };
        char[] charArray = new char[]{ 'a', 'b', 'c', 'd' };
        // Improved test data for the JavaParserTokenManager class
        String input = "This is a test input";
        int lineNumber = 123;
        int columnNumber = 456;
    }
}
statement is: // Improved test data for the JavaParser class
int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubleArray = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] charArray = new char[]{ 'a', 'b', 'c', 'd' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Improved test data for the JavaParserTokenManager class
String input = "This is a test input", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int lineNumber = 123, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int columnNumber = 456, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is a test input"
* this is vulnerable: int _int = 123
* this is vulnerable: int _int = 456
TestCase is: String string = "This is a test input";
int _int = 123;
int _int = 456;

statement is: org.evosuite.testcase.statements.ArrayStatement@e89b5274 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x41, 0x42 };// Improved test data: Using a more descriptive and representative array of bytes.

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Literal();
    }
}
statement is: byte[] byteArray = new byte[]{ 0x41, 0x42 }// Improved test data: Using a more descriptive and representative array of bytes.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ 0x41, 0x42 } Elements: [0x41, 0x42]
lengths: [2] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?T5,lT")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: StringReader stringReader = new StringReader("?T5,lT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("10, true");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BooleanLiteral();
    }
}
statement is: StringReader stringReader = new StringReader("10, true"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral() target is: javaParser method is: BooleanLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BooleanLiteral()V
TestCase is: String string = "10, true";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BooleanLiteral();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NullLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NullLiteral()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NullLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1000");// Improved test data: A more descriptive value that better represents the situation being tested

        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NullLiteral();
    }
}
statement is: StringReader stringReader = new StringReader("1000")// Improved test data: A more descriptive value that better represents the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NullLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NullLiteral() target is: javaParser method is: NullLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NullLiteral()V
TestCase is: String string = "1000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Alice");
        javaParser.Arguments();
    }
}
statement is: Parser javaParser = new JavaParser("Alice"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Arguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Arguments() target is: javaParser method is: Arguments()
TestCase is: String string = "Alice";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AllocationExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AllocationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AllocationExpression() target is: javaParser method is: AllocationExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AllocationExpression()V
TestCase is: String string = "Java Parser Version 1.1: Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AllocationExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
        String[] names = new String[]{ "John", "Jane", "Bob" };
        int[] scores = new int[]{ 90, 85, 72 };
        javaParser.ArrayDimsAndInits(names, scores);
    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] names = new String[]{ "John", "Jane", "Bob" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] scores = new int[]{ 90, 85, 72 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: javaParser.ArrayDimsAndInits(names, scores), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits(names, scores) target is: javaParser method is: ArrayDimsAndInits(java.lang.String[],int[])
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
        javaParser.ArrayDimsAndInits();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(" ")
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: JavaParser javaParser = new JavaParser(" ");
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "\"Hello, World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-3484), (-1836))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3484), (-1836));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("B;\'Q[\"-^>BO:B");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);// changed to a more descriptive value for the starting position

        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("B;\'Q[\"-^>BO:B"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12)// changed to a more descriptive value for the starting position
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: BlockStatement()V
TestCase is: String string = "B;'Q[\"-^>BO:B";
StringReader stringReader = new StringReader(string);
int _int = 0;
int _int = 12;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("^igB+y,eO4J")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 749, 749)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AssertStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssertStatement()
test data is: StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AssertStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.AssertStatement();
    }
}
statement is: StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello World\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssertStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssertStatement() target is: javaParser method is: AssertStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: AssertStatement()V
TestCase is: String string = "public class Test { public static void main(String[] args) { System.out.println(\"Hello World\"); } }";
StringReader stringReader = new StringReader(string);
int _int = 749;
int _int = 749;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).AssertStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("volatile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("volatile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".  Encountered: ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<ti,)B=Z")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("<ti,)B=Z");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("dI8Z~l8")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2 + 2");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AndExpression();
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("2 + 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AndExpression()V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "2 + 2";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();
((JavaParser) stringReader).BlockStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(".?!")
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: JavaParser javaParser = new JavaParser(".?!");
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, world!");
        javaParser.BlockStatement();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
TestCase is: String string = "Hello, world!";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: LocalVariableDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LocalVariableDeclaration()
test data is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.LocalVariableDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.LocalVariableDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LocalVariableDeclaration()V
TestCase is: String string = "int x = 5;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LocalVariableDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EmptyStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EmptyStatement()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EmptyStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5; int y = 10;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EmptyStatement();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5; int y = 10;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EmptyStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EmptyStatement() target is: javaParser method is: EmptyStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EmptyStatement()V
TestCase is: String string = "int x = 5; int y = 10;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("u?Oq")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("u?Oq");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
    }
}
statement is: StringReader stringReader = new StringReader("u?Oq"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
TestCase is: String string = "u?Oq";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("l*ba\u0000")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("l*ba\u0000");// Changed to a more descriptive and representative string value

        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("l*ba\u0000")// Changed to a more descriptive and representative string value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "l*ba\u0000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("H@1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("H@1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "H@1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.SwitchStatement();
        // Improved test data
        StringReader improvedStringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.SwitchStatement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.SwitchStatement() target is: improvedJavaParser method is: SwitchStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SwitchStatement()V
TestCase is: String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.ConditionalExpression();
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
        javaParser.SwitchStatement();
    }
}
statement is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SwitchStatement()V
TestCase is: String string = "AC+OA4UMnW.ff bf'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

statement is: mock(java.util.Enumeration<java.io.BufferedInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.BufferedInputStream>
statement code is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchLabel()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchLabel()
test data is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.SwitchLabel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(false, false).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.SwitchLabel();
    }
}
statement is: Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.BufferedInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: doReturn(false, false).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false, false).when(enumeration).hasMoreElements() target is: doReturn(false, false).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchLabel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchLabel() target is: javaParser method is: SwitchLabel()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: SwitchLabel()V
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).SwitchLabel();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A,.`")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: StringReader stringReader = new StringReader("A,.`");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A,1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.IfStatement();
    }
}
statement is: StringReader stringReader = new StringReader("A,1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IfStatement() target is: javaParser method is: IfStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: IfStatement()V
TestCase is: String string = "A,1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        "  public void myMethod() {\n" = "    System.out.println(\"Hello, world!\");\n" + ("  }\n" + "}");
        String invalidJavaCode = "public class MyClass {\n" + ((("  public void myMethod() {\n" + "    System.out.println(\"Goodbye, world!\");\n") + "  }\n") + "}");
        // Code to test
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.IfStatement();
    }
}
statement is: // Improved test data
"  public void myMethod() {\n" = "    System.out.println(\"Hello, world!\");\n" + ("  }\n" + "}"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: String invalidJavaCode = "public class MyClass {\n" + ((("  public void myMethod() {\n" + "    System.out.println(\"Goodbye, world!\");\n") + "  }\n") + "}"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: "public class MyClass {\n" + ((("  public void myMethod() {\n" + "    System.out.println(\"Goodbye, world!\");\n") + "  }\n") + "}")
statement is: // Code to test
JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IfStatement() target is: javaParser method is: IfStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 0
Matched Method is: IfStatement()V
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.IfStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid character \'\\\' in character literal.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.DoStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid character \'\\\' in character literal."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.DoStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DoStatement() target is: javaParser method is: DoStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: DoStatement()V
TestCase is: String string = "Java Parser Version 1.1: Encountered errors during parse. Invalid character '\\' in character literal.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).DoStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("yC#_H\"")
statement is: ForStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForStatement()
test data is: JavaParser javaParser = new JavaParser("yC#_H\"");
javaParser.ForStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("yC#_H\"");
        assertEquals(javaParser.getToken(), "yC#_H\"");
    }
}
statement is: Parser javaParser = new JavaParser("yC#_H\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(javaParser.getToken(), "yC#_H\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(javaParser.getToken(), "yC#_H\"") target is:  method is: assertEquals(<unknown>,java.lang.String)
TestCase is: String string = "yC#_H\"";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("2lv")
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: JavaParser javaParser = new JavaParser("2lv");
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("2lv");
        javaParser.ForInit(new int[]{ 1, 2, 3 }, new String[]{ "apple", "banana", "cherry" });
    }
}
statement is: Parser javaParser = new JavaParser("2lv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(new int[]{ 1, 2, 3 }, new String[]{ "apple", "banana", "cherry" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit(new int[]{ 1, 2, 3 }, new String[]{ "apple", "banana", "cherry" }) target is: javaParser method is: ForInit(int[],java.lang.String[])
TestCase is: String string = "2lv";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
        javaParser.ForUpdate();
        // Improved test data
        String[] inputStrings = new String[]{ "Hello", "World" };
        int[] inputIntegers = new int[]{ 1, 2, 3, 4, 5 };
        double[] inputDoubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 };
        char[] inputChars = new char[]{ 'a', 'b', 'c' };
        javaParser.ForEach(inputStrings);
        javaParser.ForEach(inputIntegers);
        javaParser.ForEach(inputDoubles);
        javaParser.ForEach(inputChars);
    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: // Improved test data
String[] inputStrings = new String[]{ "Hello", "World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] inputIntegers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] inputDoubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] inputChars = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: javaParser.ForEach(inputStrings), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForEach(inputStrings) target is: javaParser method is: ForEach(java.lang.String[])
statement is: javaParser.ForEach(inputIntegers), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForEach(inputIntegers) target is: javaParser method is: ForEach(int[])
statement is: javaParser.ForEach(inputDoubles), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForEach(inputDoubles) target is: javaParser method is: ForEach(double[])
statement is: javaParser.ForEach(inputChars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForEach(inputChars) target is: javaParser method is: ForEach(char[])
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("h&[]8PNl> ?#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: StringReader stringReader = new StringReader("h&[]8PNl> ?#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("helloWorld");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ThrowStatement();
    }
}
statement is: StringReader stringReader = new StringReader("helloWorld"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ThrowStatement()V
TestCase is: String string = "helloWorld";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("OR")
statement is: SynchronizedStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SynchronizedStatement()
test data is: JavaParser javaParser = new JavaParser("OR");
javaParser.SynchronizedStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser = new JavaParser("AND");
        javaParser.SynchronizedStatement();
    }
}
statement is: Parser = new JavaParser("AND"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.SynchronizedStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement() target is: javaParser method is: SynchronizedStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("KB/908ifhj}+")
statement is: TryStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TryStatement()
test data is: JavaParser javaParser = new JavaParser("KB/908ifhj}+");
javaParser.TryStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new BigDecimal("123456789.0987654321"));
        javaParser.TryStatement();
    }
}
statement is: Parser javaParser = new JavaParser(new BigDecimal("123456789.0987654321")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TryStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TryStatement() target is: javaParser method is: TryStatement()
TestCase is: JavaParser javaParser = new JavaParser("KB/908ifhj}+");

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RUNSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RUNSIGNEDSHIFT()
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.RUNSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("C:/example/test.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.RUNSIGNEDSHIFT();
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("C:/example/test.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.RUNSIGNEDSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RUNSIGNEDSHIFT() target is: javaParser method is: RUNSIGNEDSHIFT()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: RSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RSIGNEDSHIFT()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.RSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a string with multiple words.");
        javaParser.Annotation();
    }
}
statement is: Parser javaParser = new JavaParser("This is a string with multiple words."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Annotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation() target is: javaParser method is: Annotation()
TestCase is: String string = "This is a string with multiple words.";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.Annotation(new Annotation("This is a sample annotation", "This is a sample comment"));
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Annotation(new Annotation("This is a sample annotation", "This is a sample comment")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(new Annotation("This is a sample annotation", "This is a sample comment")) target is: javaParser method is: Annotation(Annotation)
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: NormalAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NormalAnnotation()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.NormalAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser example
        String code = "public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }";
        JavaParser javaParser = new JavaParser(code);
        javaParser.NormalAnnotation();
    }
}
statement is: // Improved test data for the JavaParser example
String code = "public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(code), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NormalAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NormalAnnotation() target is: javaParser method is: NormalAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: NormalAnnotation()V
TestCase is: String string = "public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).NormalAnnotation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.parse();
        // Assert that the parse() method returns a non-null value, indicating success.
        assertNotNull(javaParser.getResult());
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.parse(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse() target is: javaParser method is: parse()
statement is: // Assert that the parse() method returns a non-null value, indicating success.
assertNotNull(javaParser.getResult()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert that the parse() method returns a non-null value, indicating success.
assertNotNull(javaParser.getResult()) target is:  method is: assertNotNull(<unknown>)
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("A string with some basic HTML tags such as <p>, <b>, and <i>.");
        javaParser.MarkerAnnotation();
    }
}
statement is: Parser javaParser = new JavaParser("A string with some basic HTML tags such as <p>, <b>, and <i>."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
TestCase is: String string = "A string with some basic HTML tags such as <p>, <b>, and <i>.";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@cd2281bc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg1, arg1)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.MarkerAnnotation();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [5] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SingleMemberAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SingleMemberAnnotation()
test data is: StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SingleMemberAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class with multiple lines of code.\npublic class TestClass {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.parse();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class with multiple lines of code.\npublic class TestClass {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.parse(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse() target is: javaParser method is: parse()
TestCase is: String string = "This is a test string for testing the JavaParser class with multiple lines of code.\npublic class TestClass {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: org.evosuite.testcase.statements.ArrayStatement@5cab25dc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: java.io.ByteArrayInputStream([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0, (-2462), 69)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, -2462, 69);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.MemberValuePair();
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe))]
lengths: [6] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, -2462, 69), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValuePair(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePair() target is: javaParser method is: MemberValuePair()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValuePair()V
TestCase is: int _int = 69;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) _int, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValuePair();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Od{5fc ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("/qL)-/0Zh`|Od{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "Hello, world!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
        // Parse a JSON array initializer containing multiple integer values
        int[] intValues = new int[]{ 1, 2, 3, 4 };
        String jsonIntValues = ("[" + String.join(", ", IntStream.of(intValues).mapToObj(Integer::toString))) + "]";
        stringReader = new StringReader(jsonIntValues);
        javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
        // Parse a JSON array initializer containing multiple string values
        String[] stringValues = new String[]{ "apple", "banana", "cherry" };
        String jsonStringValues = ("[\"" + String.join("\", \"", stringValues)) + "\"]";
        stringReader = new StringReader(jsonStringValues);
        javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
        // Parse a JSON array initializer containing multiple object values
        Map<String, Object>[] objectValues = new Map<String, Object>[]{ new String[]{ "name", "John", "age", 30 }, new String[]{ "name", "Jane", "age", 25 } };
        String jsonObjectValues = ((((((("[{\"name\": \"" + objectValues[0].get("name")) + "\", \"age\": ") + objectValues[0].get("age")) + "}, {\"name\": \"") + objectValues[1].get("name")) + "\", \"age\": ") + objectValues[1].get("age")) + "}]";
        stringReader = new StringReader(jsonObjectValues);
        javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
statement is: // Parse a JSON array initializer containing multiple integer values
int[] intValues = new int[]{ 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String jsonIntValues = ("[" + String.join(", ", IntStream.of(intValues).mapToObj(Integer::toString))) + "]", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: ("[" + String.join(", ", IntStream.of(intValues).mapToObj(Integer::toString))) + "]"
statement is: stringReader = new StringReader(jsonIntValues), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
statement is: // Parse a JSON array initializer containing multiple string values
String[] stringValues = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String jsonStringValues = ("[\"" + String.join("\", \"", stringValues)) + "\"]", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: ("[\"" + String.join("\", \"", stringValues)) + "\"]"
statement is: stringReader = new StringReader(jsonStringValues), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
statement is: // Parse a JSON array initializer containing multiple object values
Map<String, Object>[] objectValues = new Map<String, Object>[]{ new String[]{ "name", "John", "age", 30 }, new String[]{ "name", "Jane", "age", 25 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String jsonObjectValues = ((((((("[{\"name\": \"" + objectValues[0].get("name")) + "\", \"age\": ") + objectValues[0].get("age")) + "}, {\"name\": \"") + objectValues[1].get("name")) + "\", \"age\": ") + objectValues[1].get("age")) + "}]", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: ((((((("[{\"name\": \"" + objectValues[0].get("name")) + "\", \"age\": ") + objectValues[0].get("age")) + "}, {\"name\": \"") + objectValues[1].get("name")) + "\", \"age\": ") + objectValues[1].get("age")) + "}]"
statement is: stringReader = new StringReader(jsonObjectValues), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
statement is: org.evosuite.testcase.statements.ArrayStatement@7b7c7db2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a };
        String input = "Hello World!";
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(input.getBytes());
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56, 0x78, 0x9a } Elements: [0x12, 0x34, 0x56, 0x78, 0x9a]
lengths: [5] []
statement is: String input = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(input.getBytes()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValueArrayInitializer()V
TestCase is: byte[] byteArray = "Hello World!";
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValueArrayInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeDeclaration((-2002))
test data is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeDeclaration((-2002));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test input for the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeDeclaration(-2002);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test input for the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeDeclaration(-2002), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeDeclaration(-2002) target is: javaParser method is: AnnotationTypeDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeDeclaration(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "This is a test input for the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
int _int = null;
((JavaParser) stringReader).AnnotationTypeDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("H/\\$bm");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeBody();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("H/\\$bm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody() target is: javaParser method is: AnnotationTypeBody()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeBody()V
TestCase is: String string = "H/\\$bm";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("]wSKYm-^xpV");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
        // Improved test data
        StringReader improvedStringReader = new StringReader("]wSKYm-^xpV");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("]wSKYm-^xpV"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("]wSKYm-^xpV"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.AnnotationTypeMemberDeclaration() target is: improvedJavaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "]wSKYm-^xpV";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();
String string = "]wSKYm-^xpV";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int age = 30;
        double salary = 50000.0;
        String name = "Jane Smith";
        char gender = 'F';
        boolean employed = true;
    }
}
statement is: // Improved test data
int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double salary = 50000.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "Jane Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'F', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean employed = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 30
* this is vulnerable: double _double = 50000.0
* this is vulnerable: String string = "Jane Smith"
* this is vulnerable: char _char = 'F'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 30;
double _double = 50000.0;
String string = "Jane Smith";
char _char = 'F';
boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: DefaultValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DefaultValue()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.DefaultValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // Initialize the parser with a sample Java source code
        JavaParser javaParser = new JavaParser("");
        // Set the default value of an integer variable to 10, which is a more descriptive and representative number for the situation being tested
        int x = 10;
        // Set the default value of a double variable to 2.5, which is also a more descriptive and representative number for the situation being tested
        double y = 2.5;
        // Set the default value of a string variable to "Hello World", which is a more descriptive and representative String for the situation being tested
        String message = "Hello World";
        // Call the DefaultValue method on the JavaParser object
        javaParser.DefaultValue();
    }
}
statement is: // Initialize the parser with a sample Java source code
JavaParser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Set the default value of an integer variable to 10, which is a more descriptive and representative number for the situation being tested
int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Set the default value of a double variable to 2.5, which is also a more descriptive and representative number for the situation being tested
double y = 2.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Set the default value of a string variable to "Hello World", which is a more descriptive and representative String for the situation being tested
String message = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Call the DefaultValue method on the JavaParser object
javaParser.DefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the DefaultValue method on the JavaParser object
javaParser.DefaultValue() target is: javaParser method is: DefaultValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: DefaultValue()V
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 2.5
* this is vulnerable: String string = "Hello World"
TestCase is: String string = "";
JavaParser javaParser = new JavaParser(string);
int _int = 10;
double _double = 2.5;
String string = "Hello World";
((JavaParser) string).DefaultValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: DefaultValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DefaultValue()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.DefaultValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("path/to/a/file.java");
        javaParser.DefaultValue();
    }
}
statement is: Parser javaParser = new JavaParser("path/to/a/file.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.DefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DefaultValue() target is: javaParser method is: DefaultValue()
TestCase is: String string = "path/to/a/file.java";
JavaParser javaParser = new JavaParser((JavaParserTokenManager) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.getNextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com/soops/CEN4010/JMCA/JParser/JavaParser$1.java");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
        javaParser.getNextToken();
    }
}
statement is: StringReader stringReader = new StringReader("com/soops/CEN4010/JMCA/JParser/JavaParser$1.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
statement is: javaParser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getNextToken() target is: javaParser method is: getNextToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "com/soops/CEN4010/JMCA/JParser/JavaParser$1.java";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).getNextToken();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FieldDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FieldDeclaration((-1))
test data is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FieldDeclaration((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FieldDeclaration(-1);
    }
}
statement is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FieldDeclaration(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FieldDeclaration(-1) target is: javaParser method is: FieldDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FieldDeclaration(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "AC+OA4UMnW.ff bf'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
int _int = null;
((JavaParser) stringReader).FieldDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("mI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclarator();
        javaParser.Literal();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclarator()V
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Literal()V
TestCase is: String string = "This is a test string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();
((JavaParser) stringReader).Literal();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("aW1wcmludG9sZnJhbmsuY29tcGFyZXRv");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclarator();
    }
}
statement is: StringReader stringReader = new StringReader("aW1wcmludG9sZnJhbmsuY29tcGFyZXRv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclarator()V
TestCase is: String string = "aW1wcmludG9sZnJhbmsuY29tcGFyZXRv";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("8o-DsZ3~q@\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclaratorId()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclaratorId()
test data is: StringReader stringReader = new StringReader("8o-DsZ3~q@\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A string with some characters, like letters and numbers.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclaratorId();
    }
}
statement is: StringReader stringReader = new StringReader("A string with some characters, like letters and numbers."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclaratorId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclaratorId() target is: javaParser method is: VariableDeclaratorId()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclaratorId()V
TestCase is: String string = "A string with some characters, like letters and numbers.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: MethodDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclarator()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.MethodDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("void main(String[] args) { System.out.println(\"Hello World\"); }");
        javaParser.MethodDeclarator();
    }
}
statement is: Parser javaParser = new JavaParser("void main(String[] args) { System.out.println(\"Hello World\"); }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclarator() target is: javaParser method is: MethodDeclarator()
TestCase is: String string = "void main(String[] args) { System.out.println(\"Hello World\"); }";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer());
        javaParser.Name();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: org.evosuite.testcase.statements.ArrayStatement@d61319f7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.Expression();
    }
}
statement is: byte[] byteArray = new byte[]{ 0x12, 0x34, 0x56 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ 0x12, 0x34, 0x56 } Elements: [0x12, 0x34, 0x56]
lengths: [0] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a string that will be parsed.");
        javaParser.ConditionalExpression();
    }
}
statement is: Parser javaParser = new JavaParser("This is a string that will be parsed."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
TestCase is: String string = "This is a string that will be parsed.";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#B ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.ConditionalAndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("");
        javaParser.ConditionalAndExpression(new String[]{ "John", "Smith" }, 30, true);
    }
}
statement is: Parser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalAndExpression(new String[]{ "John", "Smith" }, 30, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression(new String[]{ "John", "Smith" }, 30, true) target is: javaParser method is: ConditionalAndExpression(java.lang.String[],int,boolean)
TestCase is: String string = "";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("H/$bm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("H/+bm");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
        int integerValue = 1;
        double doubleValue = 2.5;
    }
}
statement is: StringReader stringReader = new StringReader("H/+bm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
statement is: int integerValue = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 2.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1
* this is vulnerable: double _double = 2.5
TestCase is: String string = "H/+bm";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();
int _int = 1;
double _double = 2.5;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaParserTokenManager());
        String input = "5 || 10";
        javaParser.ExclusiveOrExpression();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaParserTokenManager()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String input = "5 || 10", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
* this is vulnerable: String string = "5 || 10"
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
String string = "5 || 10";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("2lv")
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: JavaParser javaParser = new JavaParser("2lv");
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("20");// 20 is a more descriptive and representative value for a primitive integer type

        javaParser.ExclusiveOrExpression();
    }
}
statement is: Parser javaParser = new JavaParser("20")// 20 is a more descriptive and representative value for a primitive integer type
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
TestCase is: String string = "20";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data 6
        StringReader stringReader = new StringReader("999-abc-def");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: // Improved test data 6
StringReader stringReader = new StringReader("999-abc-def"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "999-abc-def";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello, world!".getBytes()));
        JavaParser javaParser = new JavaParser(pipedInputStream);
        javaParser.AndExpression();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello, world!".getBytes())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.AndExpression();
        // Improved test data
        javaParser.setCharStream(new ANTLRStringStream("if (y > 10) { return true; } else if (y == 5) { return false; } else { return null; }"));
        javaParser.AndExpression();
    }
}
statement is: Parser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.AndExpression() target is: Parser method is: AndExpression()
statement is: // Improved test data
javaParser.setCharStream(new ANTLRStringStream("if (y > 10) { return true; } else if (y == 5) { return false; } else { return null; }")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
javaParser.setCharStream(new ANTLRStringStream("if (y > 10) { return true; } else if (y == 5) { return false; } else { return null; }")) target is: javaParser method is: setCharStream(ANTLRStringStream)
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid input file found.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid input file found."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
TestCase is: String string = "Java Parser Version 1.1: Encountered errors during parse. Invalid input file found.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int a = 1;
        double b = 2.5;
        String str = "hello";
        char c = 'a';
    }
}
statement is: int a = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double b = 2.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1
* this is vulnerable: double _double = 2.5
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 1;
double _double = 2.5;
String string = "hello";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yC#_H\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("yC#_H\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
TestCase is: String string = "234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse of a large Java program with complex syntax.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse of a large Java program with complex syntax."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
TestCase is: String string = "Java Parser Version 1.1: Encountered errors during parse of a large Java program with complex syntax.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("test_file.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.ShiftExpression();
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("test_file.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("  public static void main(String[] args) {\n" + ((("    System.out.println(\"Hello, world!\");\n" + "  }\n") + "}\n") + "System.exit(0);"));
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("  public static void main(String[] args) {\n" + ((("    System.out.println(\"Hello, world!\");\n" + "  }\n") + "}\n") + "System.exit(0);")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: UnaryExpression()V
TestCase is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("^igB+y,eO4J")
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: JavaParser javaParser = new JavaParser("^igB+y,eO4J");
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("A complex mathematical expression with a mix of integers, doubles, strings, and chars");
        javaParser.UnaryExpression();
    }
}
statement is: Parser javaParser = new JavaParser("A complex mathematical expression with a mix of integers, doubles, strings, and chars"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
TestCase is: String string = "A complex mathematical expression with a mix of integers, doubles, strings, and chars";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"This is a test string containing numbers 123 and special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~.\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\"This is a test string containing numbers 123 and special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "\"This is a test string containing numbers 123 and special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: org.evosuite.testcase.statements.ArrayStatement@1ceb9482 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4 };// Improved test data: using a more descriptive example of a byte array

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.UnaryExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4 }// Improved test data: using a more descriptive example of a byte array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "Java Parser Version 1.1:  Encountered errors during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("AND");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PostfixExpression();
    }
}
statement is: StringReader stringReader = new StringReader("AND"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PostfixExpression()V
TestCase is: String string = "AND";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("u<+]$vf=8 PY")
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("u<+]$vf=8 PY");
        javaParser.PostfixExpression();
        String input = "u<+]$vf=8 PY";
        String expectedOutput = "u<+]$vf=8 PY";
        assertEquals(expectedOutput, javaParser.PostfixExpression());
    }
}
statement is: Parser javaParser = new JavaParser("u<+]$vf=8 PY"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
statement is: String input = "u<+]$vf=8 PY", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutput = "u<+]$vf=8 PY", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedOutput, javaParser.PostfixExpression()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, javaParser.PostfixExpression()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "u<+]$vf=8 PY"
* this is vulnerable: String string = "u<+]$vf=8 PY"
TestCase is: String string = "u<+]$vf=8 PY";
JavaParser javaParser = new JavaParser(string);
String string = "u<+]$vf=8 PY";
String string = "u<+]$vf=8 PY";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("3+aZt")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("3+aZt");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("5+2*aZt");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
        StringReader stringReader1 = new StringReader("");
        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.PrimaryExpression();
        StringReader stringReader2 = new StringReader(null);
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.PrimaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("5+2*aZt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
statement is: StringReader stringReader1 = new StringReader(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.PrimaryExpression() target is: javaParser1 method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: PrimaryExpression()V
statement is: StringReader stringReader2 = new StringReader(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.PrimaryExpression() target is: javaParser2 method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 9
Matched Method is: PrimaryExpression()V
TestCase is: String string = "5+2*aZt";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#B ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 42;// change this to a more descriptive value, such as -10 or 3.14

        String str = "hello";// change this to a more descriptive string, such as "goodbye" or "Hello, world!"

        double d = 3.14;// change this to a more descriptive double value, such as -10.0 or 1000.0

        char c = 'a';// change this to a more descriptive char value, such as 'A' or 'z' }}

    }
}
statement is: int x = 42// change this to a more descriptive value, such as -10 or 3.14
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "hello"// change this to a more descriptive string, such as "goodbye" or "Hello, world!"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// change this to a more descriptive double value, such as -10.0 or 1000.0
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// change this to a more descriptive char value, such as 'A' or 'z' }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: String string = "hello"
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 42;
String string = "hello";
double _double = 3.14;
char _char = 'a';

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: java.io.DataInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.DataInputStream
statement code is: DataInputStream dataInputStream = new DataInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello, World!".getBytes()));
        DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
        JavaParser javaParser = new JavaParser(dataInputStream);
        javaParser.PrimaryPrefix();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello, World!".getBytes())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataInputStream dataInputStream = new DataInputStream(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.DataInputStream(Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(dataInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"}\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"\\u007B\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("\"\\u007B\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "\"\\u007B\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2lv")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for testing.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for testing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "This is a sample input for testing.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("ReturnStatement")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("ReturnStatement");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("ReturnStatement"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "ReturnStatement";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("b/|tp0_DGs,d_]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("b/|tp0_DGs,d_]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("John Doe");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "John Doe";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("'E@)")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 2428, (-486))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("'E@)");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, -486);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("'E@)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, -486), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "'E@)";
StringReader stringReader = new StringReader(string);
int _int = 2428;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("^igB+y,eO4J")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, (-4984))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("^igB+y,eO4J");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.PrimarySuffix();
    }
}
statement is: StringReader stringReader = new StringReader("^igB+y,eO4J"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, -4984), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: PrimarySuffix()V
TestCase is: String string = "^igB+y,eO4J";
StringReader stringReader = new StringReader(string);
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimarySuffix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Block()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Block()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Block();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("package com.example; public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Block();
    }
}
statement is: StringReader stringReader = new StringReader("package com.example; public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Block(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Block() target is: javaParser method is: Block()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Block()V
TestCase is: String string = "package com.example; public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("package")
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: JavaParser javaParser = new JavaParser("package");
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Primitive values;
        int x = 5;
        double y = 3.14;
        char c = 'a';
        boolean z = true;
        Improved test;
        data : .class = $missing$;
        x = 10;
        double y = 2.78;
        char c = 'A';
        boolean z = false;
        2.0 = $missing$;
        Strings : String = $missing$;
        s1 = "hello";
        String s2 = "world";
        Improved test;
        data : String = $missing$;
        s1 = "goodbye";
        String s2 = "cruel world";
        3.0 = $missing$;
    }
}
statement is: Primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean z = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Improved test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: data : .class = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: x = 10, class spoon.support.reflect.code.CtAssignmentImpl
statement is: double y = 2.78, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean z = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: 2.0 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Strings : String = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: s1 = "hello", class spoon.support.reflect.code.CtAssignmentImpl
statement is: String s2 = "world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Improved test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: data : String = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: s1 = "goodbye", class spoon.support.reflect.code.CtAssignmentImpl
statement is: String s2 = "cruel world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: 3.0 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
* this is vulnerable: double _double = 2.78
* this is vulnerable: char _char = 'A'
* this is vulnerable: boolean _boolean = false
* this is vulnerable: String string = "world"
* this is vulnerable: String string = "cruel world"
TestCase is: int _int = 5;
double _double = 3.14;
char _char = 'a';
boolean _boolean = true;
double _double = 2.78;
char _char = 'A';
boolean _boolean = false;
String string = "world";
String string = "cruel world";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("KB/908ifhj}+")
statement is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token token = javaParser.getToken(36)
test data is: JavaParser javaParser = new JavaParser("KB/908ifhj}+");
javaParser.getToken(36);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser("KB/908ifhj]+");
        javaParser.getToken(36);
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser("KB/908ifhj]+"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.getToken(36), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getToken(36) target is: javaParser method is: getToken(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "KB/908ifhj]+";
JavaParser javaParser = new JavaParser(string);
int _int = 36;
((JavaParser) string).getToken(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("mI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ConstructorDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]wSKYm-^xpV")
statement is: read()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        stringReader.read();
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValuePair();
    }
}
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.MemberValuePair(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePair() target is: javaParser method is: MemberValuePair()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(512)
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MethodDeclaration(512);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MethodDeclaration(512);
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclaration(512), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(512) target is: javaParser method is: MethodDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MethodDeclaration(I)V
TestCase is: String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
int _int = 512;
((JavaParser) stringReader).MethodDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.ParseException
statement code is: ParseException generateParseException = javaParser.generateParseException()
test data is: StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.generateParseException();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.generateParseException();
    }
}
statement is: StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.generateParseException(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.generateParseException() target is: javaParser method is: generateParseException()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;
TestCase is: String string = "class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();

* test suite isTestSuite: 360
Test 0: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 2: 
JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);
// Undeclared exception!
try { 
  javaParser.dump(mockPrintWriter);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
JavaParser javaParser = new JavaParser("qAC+OAUMnW.ff bf'");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 4: 
JavaParser javaParser = new JavaParser("");
StringReader stringReader = new StringReader("<LETTER>");
javaParser.ReInit((Reader) stringReader);
Test 5: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 6: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(4096);
Test 8: 
JavaParser.ModifierSet.removeModifier(18, 1403);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(91);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(0);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(22);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(512);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract((-992));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(0);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-627));
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(0);
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-842));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(0);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(64);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(20);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1391);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(2);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(927);
Test 25: 
String[] stringArray = new String[5];
JavaParser.main(stringArray);
Test 26: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.CompilationUnit();
Test 27: 
PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.CompilationUnit();
Test 28: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 4, column 63.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
PipedInputStream pipedInputStream = new PipedInputStream();
SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, pipedInputStream);
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
JavaParser javaParser = new JavaParser("?-,(");
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.ClassOrInterfaceDeclaration(587);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.ClassOrInterfaceDeclaration(959);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser("0%U)t9f{g~z?");
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration((-1185));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(8);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 40: 
StringReader stringReader = new StringReader("{%B)1I;}o3");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 53, column 54.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 10.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 51: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"[\" (91), after : \"\\'Q\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 53: 
JavaParser javaParser = new JavaParser("(");
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 55: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 57: 
StringReader stringReader = new StringReader("JYz7,[G1>%}");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: JYz7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 60: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 64: 
StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
Test 65: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 43.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2146), 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 67: 
JavaParser javaParser = new JavaParser("NullLiteral");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 74: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 75: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 76: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
javaParser.AssignmentOperator();
Test 77: 
JavaParser javaParser = new JavaParser("3t");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: case
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: transient
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader(";z*pr3\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("$,!wLe");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader(".?!");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("@mV+$fpE(IKq{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
JavaParser javaParser = new JavaParser("2eitz");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 92: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.read();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 97: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 99: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.getNextToken();
javaParser.UnaryExpression();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4980.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 100: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 102: 
StringReader stringReader = new StringReader("?T5,lT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2l
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 111: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3484), (-1836));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.BlockStatement();
Test 112: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 749, column 749.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("volatile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: volatile
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader("<ti,)B=Z");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser(".?!");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
Test 123: 
StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.ConditionalExpression();
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 18.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 128: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 129: 
StringReader stringReader = new StringReader("A,.`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 131: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
JavaParser javaParser = new JavaParser("yC#_H\"");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
StringReader stringReader = new StringReader("h&[]8PNl> ?#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: h
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
JavaParser javaParser = new JavaParser("OR");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 142: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 145: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 146: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: kjZUjIY
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 148: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Od{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"}\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 152: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration((-2002));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.getNextToken();
Test 160: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("8o-DsZ3~q@\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Name();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 168: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 169: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 171: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 174: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 177: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
StringReader stringReader = new StringReader("yC#_H\"");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 179: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 180: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
JavaParser javaParser = new JavaParser("^igB+y,eO4J");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 184: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 185: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 186: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 187: 
JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader("3+aZt");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 189: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 192: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 193: 
StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 15.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("b/|tp0_DGs,d_]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 195: 
StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2428, column -484.  Encountered: \"@\" (64), after : \"\\'E\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 196: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("package");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
javaParser.getToken(36);
Test 201: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: -
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(512);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReInit((JavaParserTokenManager) null);

Test 206: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 207: 
JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);

Test 208: 

Test 209: 
JavaParser javaParser = new JavaParser("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

Test 210: 
StringReader stringReader = new StringReader("'Hello World!'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

Test 211: 
StringReader stringReader = new StringReader("{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).enable_tracing();

Test 212: 
String string = "This is a longer string";
char _char = 'b';
JavaParser.ModifierSet.removeModifier(10, (int) 3.5);
JavaParser.ModifierSet.removeModifier((int) string, _char);

Test 213: 

Test 214: 

Test 215: 

Test 216: 
String[] stringArray = new String[5];
JavaParser.main(stringArray);

Test 217: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).CompilationUnit();

Test 218: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).CompilationUnit();

Test 219: 
StringReader stringReader = new StringReader("package com.example.myproject;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)64).PackageDeclaration();

Test 220: 
SequenceInputStream sequenceInputStream = new SequenceInputStream((InputStream) "This is a test string.", (InputStream) "This is a test string.");
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
javaParser.ImportDeclaration();

Test 221: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 222: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "3m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "4kg";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "5ml";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();

Test 223: 
JavaParser javaParser = new JavaParser("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");

Test 224: 
StringReader stringReader = new StringReader("H/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(true);

Test 225: 
String string = "Hello, World!";
JavaParser javaParser = new JavaParser((Reader) "Hello, World!");
int _int = 8;
((JavaParser) string).EnumDeclaration(_int);

Test 226: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 53, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).EnumBody();

Test 227: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

Test 228: 
StringReader stringReader = new StringReader("myString");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 229: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

Test 230: 
StringReader stringReader = new StringReader("Java Parser Version 1.2:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);

Test 231: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ClassOrInterfaceBodyDeclaration(true);
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

Test 232: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

Test 233: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 234: 
StringReader stringReader = new StringReader("H$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

Test 235: 
StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String name = \"John Doe\";");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 236: 
StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayInitializer();

Test 237: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
javaParser.ArrayInitializer();

Test 238: 
JavaParser javaParser = new JavaParser((Reader) "(Reader) null");

Test 239: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();
String string = "Java Parser Version 2.0:  No errors detected during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();

Test 240: 
String string = "This is a sample input string for the JavaParser.";
JavaParser javaParser = new JavaParser((Reader) "This is a sample input string for the JavaParser.");
((JavaParser) string).ConstructorDeclaration();

Test 241: 
StringReader stringReader = new StringReader("This is a test StringReader object with multiple lines.\nThis is the second line.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 242: 
JavaParser javaParser = new JavaParser((Reader) "C:TempTest.java");

Test 243: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);

Test 244: 
JavaParser javaParser = new JavaParser((Reader) "This is a sample string.");
javaParser.Initializer();

Test 245: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 246: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 247: 
StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Type();

Test 248: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 249: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 2, 4, 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);

Test 250: 
JavaParser javaParser = new JavaParser("NullLiteralForTestingPurpose");
((JavaParser)"NullLiteralForTestingPurpose").TypeArguments();

Test 251: 
JavaParser javaParser = new JavaParser("");

Test 252: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 253: 
JavaParser javaParser = new JavaParser("1 + 2 * 3");

Test 254: 
JavaParser javaParser = new JavaParser((Reader) "Test");

Test 255: 
String string = "input.txt";
JavaParser javaParser = new JavaParser((Reader) "input.txt");
((JavaParser) string).ArgumentList();

Test 256: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
char[] charArray = new char[5];
int read = ((Reader)"<?xml version='1.0' encoding='UTF-8' ?>").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).RelationalExpression();
((JavaParser) read).AssignmentOperator();

Test 257: 
JavaParser javaParser = new JavaParser("TestData.java");

Test 258: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 259: 
StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 260: 
StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
String string = "switch";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 261: 
StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 262: 
StringReader stringReader = new StringReader("if (x > 0) { return x; } else { return -x; }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 263: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 264: 
StringReader stringReader = new StringReader("This\tis\ta\ttest\tstring");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).InclusiveOrExpression();

Test 265: 
StringReader stringReader = new StringReader("123.456");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 266: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 267: 
JavaParser javaParser = new JavaParser((String) 2);

Test 268: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

Test 269: 
StringReader stringReader = new StringReader("\"A1234567890aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 270: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

Test 271: 
StringReader stringReader = new StringReader("2147483647");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
((JavaParser) stringReader).CastLookahead();

Test 272: 
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
((StringReader)"{Lr6[gpJ>d2_l{T;Y").read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();

Test 273: 
JavaParser javaParser = new JavaParser("");

Test 274: 
StringReader stringReader = new StringReader("myVariable.getMyMethod()");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 275: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 276: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimarySuffix();

Test 277: 

Test 278: 
StringReader stringReader = new StringReader("10, true");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BooleanLiteral();

Test 279: 
StringReader stringReader = new StringReader("1000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

Test 280: 
JavaParser javaParser = new JavaParser("Alice");

Test 281: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AllocationExpression();

Test 282: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");

Test 283: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 284: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 285: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 286: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 287: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)12).BlockStatement();

Test 288: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)749).AssertStatement();

Test 289: 
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 290: 
StringReader stringReader = new StringReader("2 + 2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();
((JavaParser) stringReader).BlockStatement();

Test 291: 
JavaParser javaParser = new JavaParser("Hello, world!");

Test 292: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LocalVariableDeclaration();

Test 293: 
StringReader stringReader = new StringReader("int x = 5; int y = 10;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

Test 294: 
StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 295: 
StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 296: 
StringReader stringReader = new StringReader("H@1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 297: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 298: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 299: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).SwitchLabel();

Test 300: 
StringReader stringReader = new StringReader("A,1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 301: 
JavaParser javaParser = new JavaParser((Reader) null);
javaParser.IfStatement();

Test 302: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid character '' in character literal.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).DoStatement();

Test 303: 
JavaParser javaParser = new JavaParser("yC#_H\"");

Test 304: 
JavaParser javaParser = new JavaParser("2lv");

Test 305: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");

Test 306: 
StringReader stringReader = new StringReader("helloWorld");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

Test 307: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");

Test 308: 
JavaParser javaParser = new JavaParser("This is a string with multiple words.");

Test 309: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 310: 
JavaParser javaParser = new JavaParser("public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }");
((JavaParser)"public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }").NormalAnnotation();

Test 311: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);

Test 312: 
JavaParser javaParser = new JavaParser((Reader) "A string with some basic HTML tags such as <p>, <b>, and <i>.");

Test 313: 
StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class with multiple lines of code.\npublic class TestClass {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}");
JavaParser javaParser = new JavaParser(stringReader);

Test 314: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 69, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValuePair();

Test 315: 
StringReader stringReader = new StringReader("Hello, world!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 316: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 317: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) "Hello World!");
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValueArrayInitializer();

Test 318: 
StringReader stringReader = new StringReader("This is a test input for the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeDeclaration((int) (Integer) null);

Test 319: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 320: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();
String string = "]wSKYm-^xpV";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 321: 

Test 322: 
JavaParser javaParser = new JavaParser("");
((JavaParser)"").DefaultValue();

Test 323: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "path/to/a/file.java");

Test 324: 
StringReader stringReader = new StringReader("com/soops/CEN4010/JMCA/JParser/JavaParser$1.java");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).getNextToken();

Test 325: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) (Integer) null);

Test 326: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();
((JavaParser) stringReader).Literal();

Test 327: 
StringReader stringReader = new StringReader("aW1wcmludG9sZnJhbmsuY29tcGFyZXRv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 328: 
StringReader stringReader = new StringReader("A string with some characters, like letters and numbers.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

Test 329: 
JavaParser javaParser = new JavaParser("void main(String[] args) { System.out.println(\"Hello World\"); }");

Test 330: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 331: 
JavaParser javaParser = new JavaParser((Reader) "This is a string that will be parsed.");

Test 332: 
JavaParser javaParser = new JavaParser("");

Test 333: 
StringReader stringReader = new StringReader("H/+bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 334: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 335: 
JavaParser javaParser = new JavaParser("20");

Test 336: 
StringReader stringReader = new StringReader("999-abc-def");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 337: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid input file found.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 338: 

Test 339: 
StringReader stringReader = new StringReader("234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 340: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse of a large Java program with complex syntax.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 341: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

Test 342: 
JavaParser javaParser = new JavaParser("A complex mathematical expression with a mix of integers, doubles, strings, and chars");

Test 343: 
StringReader stringReader = new StringReader("\"This is a test string containing numbers 123 and special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 344: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 345: 
StringReader stringReader = new StringReader("AND");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 346: 
JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");

Test 347: 
StringReader stringReader = new StringReader("5+2*aZt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 348: 

Test 349: 
StringReader stringReader = new StringReader("\"{\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 350: 
StringReader stringReader = new StringReader("This is a sample input for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 351: 
StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).PrimaryPrefix();

Test 352: 
StringReader stringReader = new StringReader("John Doe");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 353: 
StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimaryPrefix();

Test 354: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimarySuffix();

Test 355: 
StringReader stringReader = new StringReader("package com.example; public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

Test 356: 

Test 357: 
JavaParser javaParser = new JavaParser("KB/908ifhj]+");
((JavaParser)"KB/908ifhj]+").getToken(36);

Test 358: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MethodDeclaration(512);

Test 359: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();


* Generated after the refinement and before minimization 360 tests with total length 1058
* test suite isTestSuite: 360
Test 0: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 2: 
JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);
// Undeclared exception!
try { 
  javaParser.dump(mockPrintWriter);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
JavaParser javaParser = new JavaParser("qAC+OAUMnW.ff bf'");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 4: 
JavaParser javaParser = new JavaParser("");
StringReader stringReader = new StringReader("<LETTER>");
javaParser.ReInit((Reader) stringReader);
Test 5: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 6: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(4096);
Test 8: 
JavaParser.ModifierSet.removeModifier(18, 1403);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(91);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(0);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(22);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(512);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract((-992));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(0);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-627));
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(0);
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-842));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(0);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(64);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(20);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1391);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(2);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(927);
Test 25: 
String[] stringArray = new String[5];
JavaParser.main(stringArray);
Test 26: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.CompilationUnit();
Test 27: 
PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.CompilationUnit();
Test 28: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 4, column 63.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
PipedInputStream pipedInputStream = new PipedInputStream();
SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, pipedInputStream);
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
JavaParser javaParser = new JavaParser("?-,(");
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.ClassOrInterfaceDeclaration(587);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.ClassOrInterfaceDeclaration(959);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser("0%U)t9f{g~z?");
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration((-1185));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(8);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 40: 
StringReader stringReader = new StringReader("{%B)1I;}o3");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 53, column 54.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 10.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 51: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"[\" (91), after : \"\\'Q\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 53: 
JavaParser javaParser = new JavaParser("(");
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 55: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 57: 
StringReader stringReader = new StringReader("JYz7,[G1>%}");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: JYz7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 60: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 64: 
StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
Test 65: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 43.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2146), 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 67: 
JavaParser javaParser = new JavaParser("NullLiteral");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 74: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 75: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 76: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
javaParser.AssignmentOperator();
Test 77: 
JavaParser javaParser = new JavaParser("3t");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: case
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: transient
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader(";z*pr3\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("$,!wLe");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader(".?!");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("@mV+$fpE(IKq{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
JavaParser javaParser = new JavaParser("2eitz");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 92: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.read();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 97: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 99: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.getNextToken();
javaParser.UnaryExpression();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4980.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 100: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 102: 
StringReader stringReader = new StringReader("?T5,lT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2l
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 111: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3484), (-1836));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.BlockStatement();
Test 112: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 749, column 749.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("volatile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: volatile
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader("<ti,)B=Z");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser(".?!");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
Test 123: 
StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.ConditionalExpression();
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 18.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 128: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 129: 
StringReader stringReader = new StringReader("A,.`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 131: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
JavaParser javaParser = new JavaParser("yC#_H\"");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
StringReader stringReader = new StringReader("h&[]8PNl> ?#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: h
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
JavaParser javaParser = new JavaParser("OR");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 142: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 145: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 146: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: kjZUjIY
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 148: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Od{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"}\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 152: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration((-2002));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.getNextToken();
Test 160: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("8o-DsZ3~q@\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Name();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 168: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 169: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 171: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 174: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 177: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
StringReader stringReader = new StringReader("yC#_H\"");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 179: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 180: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
JavaParser javaParser = new JavaParser("^igB+y,eO4J");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 184: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 185: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 186: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 187: 
JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader("3+aZt");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 189: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 192: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 193: 
StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 15.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("b/|tp0_DGs,d_]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 195: 
StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2428, column -484.  Encountered: \"@\" (64), after : \"\\'E\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 196: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("package");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
javaParser.getToken(36);
Test 201: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: -
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(512);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReInit((JavaParserTokenManager) null);

Test 206: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 207: 
JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);

Test 208: 

Test 209: 
JavaParser javaParser = new JavaParser("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

Test 210: 
StringReader stringReader = new StringReader("'Hello World!'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

Test 211: 
StringReader stringReader = new StringReader("{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).enable_tracing();

Test 212: 
String string = "This is a longer string";
char _char = 'b';
JavaParser.ModifierSet.removeModifier(10, (int) 3.5);
JavaParser.ModifierSet.removeModifier((int) string, _char);

Test 213: 

Test 214: 

Test 215: 

Test 216: 
String[] stringArray = new String[5];
JavaParser.main(stringArray);

Test 217: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).CompilationUnit();

Test 218: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).CompilationUnit();

Test 219: 
StringReader stringReader = new StringReader("package com.example.myproject;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)64).PackageDeclaration();

Test 220: 
SequenceInputStream sequenceInputStream = new SequenceInputStream((InputStream) "This is a test string.", (InputStream) "This is a test string.");
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
javaParser.ImportDeclaration();

Test 221: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 222: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "3m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "4kg";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();
String string = "5ml";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).TypeDeclaration();

Test 223: 
JavaParser javaParser = new JavaParser("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");

Test 224: 
StringReader stringReader = new StringReader("H/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(true);

Test 225: 
String string = "Hello, World!";
JavaParser javaParser = new JavaParser((Reader) "Hello, World!");
int _int = 8;
((JavaParser) string).EnumDeclaration(_int);

Test 226: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 53, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).EnumBody();

Test 227: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

Test 228: 
StringReader stringReader = new StringReader("myString");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 229: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

Test 230: 
StringReader stringReader = new StringReader("Java Parser Version 1.2:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);

Test 231: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ClassOrInterfaceBodyDeclaration(true);
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

Test 232: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

Test 233: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 234: 
StringReader stringReader = new StringReader("H$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

Test 235: 
StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String name = \"John Doe\";");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 236: 
StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayInitializer();

Test 237: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
javaParser.ArrayInitializer();

Test 238: 
JavaParser javaParser = new JavaParser((Reader) "(Reader) null");

Test 239: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();
String string = "Java Parser Version 2.0:  No errors detected during parse.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();
((JavaParser) stringReader).WildcardBounds();

Test 240: 
String string = "This is a sample input string for the JavaParser.";
JavaParser javaParser = new JavaParser((Reader) "This is a sample input string for the JavaParser.");
((JavaParser) string).ConstructorDeclaration();

Test 241: 
StringReader stringReader = new StringReader("This is a test StringReader object with multiple lines.\nThis is the second line.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 242: 
JavaParser javaParser = new JavaParser((Reader) "C:TempTest.java");

Test 243: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);

Test 244: 
JavaParser javaParser = new JavaParser((Reader) "This is a sample string.");
javaParser.Initializer();

Test 245: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 246: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 247: 
StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Type();

Test 248: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 249: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 2, 4, 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);

Test 250: 
JavaParser javaParser = new JavaParser("NullLiteralForTestingPurpose");
((JavaParser)"NullLiteralForTestingPurpose").TypeArguments();

Test 251: 
JavaParser javaParser = new JavaParser("");

Test 252: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 253: 
JavaParser javaParser = new JavaParser("1 + 2 * 3");

Test 254: 
JavaParser javaParser = new JavaParser((Reader) "Test");

Test 255: 
String string = "input.txt";
JavaParser javaParser = new JavaParser((Reader) "input.txt");
((JavaParser) string).ArgumentList();

Test 256: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
char[] charArray = new char[5];
int read = ((Reader)"<?xml version='1.0' encoding='UTF-8' ?>").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).RelationalExpression();
((JavaParser) read).AssignmentOperator();

Test 257: 
JavaParser javaParser = new JavaParser("TestData.java");

Test 258: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 259: 
StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 260: 
StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
String string = "switch";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 261: 
StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 262: 
StringReader stringReader = new StringReader("if (x > 0) { return x; } else { return -x; }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 263: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 264: 
StringReader stringReader = new StringReader("This\tis\ta\ttest\tstring");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).InclusiveOrExpression();

Test 265: 
StringReader stringReader = new StringReader("123.456");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 266: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 267: 
JavaParser javaParser = new JavaParser((String) 2);

Test 268: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

Test 269: 
StringReader stringReader = new StringReader("\"A1234567890aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 270: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

Test 271: 
StringReader stringReader = new StringReader("2147483647");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();
((JavaParser) stringReader).CastLookahead();

Test 272: 
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
((StringReader)"{Lr6[gpJ>d2_l{T;Y").read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();
String string = "{Lr6[gpJ>d2_l{T;Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((StringReader) string).read();
((JavaParser) stringReader).RelationalExpression();

Test 273: 
JavaParser javaParser = new JavaParser("");

Test 274: 
StringReader stringReader = new StringReader("myVariable.getMyMethod()");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 275: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 276: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimarySuffix();

Test 277: 

Test 278: 
StringReader stringReader = new StringReader("10, true");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BooleanLiteral();

Test 279: 
StringReader stringReader = new StringReader("1000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

Test 280: 
JavaParser javaParser = new JavaParser("Alice");

Test 281: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AllocationExpression();

Test 282: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");

Test 283: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 284: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 285: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 286: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 287: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)12).BlockStatement();

Test 288: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)749).AssertStatement();

Test 289: 
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 290: 
StringReader stringReader = new StringReader("2 + 2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();
((JavaParser) stringReader).BlockStatement();

Test 291: 
JavaParser javaParser = new JavaParser("Hello, world!");

Test 292: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LocalVariableDeclaration();

Test 293: 
StringReader stringReader = new StringReader("int x = 5; int y = 10;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

Test 294: 
StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 295: 
StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 296: 
StringReader stringReader = new StringReader("H@1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 297: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 298: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 299: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).SwitchLabel();

Test 300: 
StringReader stringReader = new StringReader("A,1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 301: 
JavaParser javaParser = new JavaParser((Reader) null);
javaParser.IfStatement();

Test 302: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid character '' in character literal.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).DoStatement();

Test 303: 
JavaParser javaParser = new JavaParser("yC#_H\"");

Test 304: 
JavaParser javaParser = new JavaParser("2lv");

Test 305: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");

Test 306: 
StringReader stringReader = new StringReader("helloWorld");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

Test 307: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");

Test 308: 
JavaParser javaParser = new JavaParser("This is a string with multiple words.");

Test 309: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 310: 
JavaParser javaParser = new JavaParser("public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }");
((JavaParser)"public class MyClass { public void myMethod() { System.out.println(\"Hello, World!\"); } }").NormalAnnotation();

Test 311: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);

Test 312: 
JavaParser javaParser = new JavaParser((Reader) "A string with some basic HTML tags such as <p>, <b>, and <i>.");

Test 313: 
StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class with multiple lines of code.\npublic class TestClass {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}");
JavaParser javaParser = new JavaParser(stringReader);

Test 314: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) 69, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValuePair();

Test 315: 
StringReader stringReader = new StringReader("Hello, world!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 316: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 317: 
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[]) "Hello World!");
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValueArrayInitializer();

Test 318: 
StringReader stringReader = new StringReader("This is a test input for the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeDeclaration((int) (Integer) null);

Test 319: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 320: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();
String string = "]wSKYm-^xpV";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 321: 

Test 322: 
JavaParser javaParser = new JavaParser("");
((JavaParser)"").DefaultValue();

Test 323: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "path/to/a/file.java");

Test 324: 
StringReader stringReader = new StringReader("com/soops/CEN4010/JMCA/JParser/JavaParser$1.java");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).getNextToken();

Test 325: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) (Integer) null);

Test 326: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();
((JavaParser) stringReader).Literal();

Test 327: 
StringReader stringReader = new StringReader("aW1wcmludG9sZnJhbmsuY29tcGFyZXRv");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 328: 
StringReader stringReader = new StringReader("A string with some characters, like letters and numbers.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

Test 329: 
JavaParser javaParser = new JavaParser("void main(String[] args) { System.out.println(\"Hello World\"); }");

Test 330: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 331: 
JavaParser javaParser = new JavaParser((Reader) "This is a string that will be parsed.");

Test 332: 
JavaParser javaParser = new JavaParser("");

Test 333: 
StringReader stringReader = new StringReader("H/+bm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 334: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 335: 
JavaParser javaParser = new JavaParser("20");

Test 336: 
StringReader stringReader = new StringReader("999-abc-def");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 337: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse. Invalid input file found.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 338: 

Test 339: 
StringReader stringReader = new StringReader("234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 340: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Encountered errors during parse of a large Java program with complex syntax.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 341: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

Test 342: 
JavaParser javaParser = new JavaParser("A complex mathematical expression with a mix of integers, doubles, strings, and chars");

Test 343: 
StringReader stringReader = new StringReader("\"This is a test string containing numbers 123 and special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 344: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 345: 
StringReader stringReader = new StringReader("AND");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 346: 
JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");

Test 347: 
StringReader stringReader = new StringReader("5+2*aZt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 348: 

Test 349: 
StringReader stringReader = new StringReader("\"{\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 350: 
StringReader stringReader = new StringReader("This is a sample input for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 351: 
StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).PrimaryPrefix();

Test 352: 
StringReader stringReader = new StringReader("John Doe");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 353: 
StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimaryPrefix();

Test 354: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).PrimarySuffix();

Test 355: 
StringReader stringReader = new StringReader("package com.example; public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

Test 356: 

Test 357: 
JavaParser javaParser = new JavaParser("KB/908ifhj]+");
((JavaParser)"KB/908ifhj]+").getToken(36);

Test 358: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MethodDeclaration(512);

Test 359: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();


* Minimizing test suite
* test suite isTestSuite: 204
Test 0: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
JavaParser javaParser = new JavaParser((Reader) null);
ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(115);
MockPrintStream mockPrintStream = new MockPrintStream(byteArrayOutputStream);
MockPrintWriter mockPrintWriter = new MockPrintWriter(mockPrintStream, false);
// Undeclared exception!
try { 
  javaParser.dump(mockPrintWriter);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
JavaParser javaParser = new JavaParser("");
StringReader stringReader = new StringReader("<LETTER>");
javaParser.ReInit((Reader) stringReader);
Test 4: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 5: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(4096);
Test 7: 
JavaParser.ModifierSet.removeModifier(18, 1403);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(91);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(0);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(22);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(512);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract((-992));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(0);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-627));
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(0);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-842));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(0);
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(64);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(20);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1391);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(2);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(927);
Test 24: 
String[] stringArray = new String[5];
JavaParser.main(stringArray);
Test 25: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.CompilationUnit();
Test 26: 
PipedInputStream pipedInputStream = new PipedInputStream();
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.CompilationUnit();
Test 27: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 28: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 4, 64, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 4, column 63.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
PipedInputStream pipedInputStream = new PipedInputStream();
SequenceInputStream sequenceInputStream = new SequenceInputStream(pipedInputStream, pipedInputStream);
PushbackInputStream pushbackInputStream = new PushbackInputStream(sequenceInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser("?-,(");
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.ClassOrInterfaceDeclaration(587);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.ClassOrInterfaceDeclaration(959);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
JavaParser javaParser = new JavaParser("0%U)t9f{g~z?");
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(8);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration((-1185));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
StringReader stringReader = new StringReader("{%B)1I;}o3");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 53, 53);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 53, column 54.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 10.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 49: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.AnnotationTypeMemberDeclaration();
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"[\" (91), after : \"\\'Q\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 52: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(512);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 53: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 54: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 43.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 57: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
StringReader stringReader = new StringReader("JYz7,[G1>%}");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: JYz7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 65: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2146), 49);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 67: 
JavaParser javaParser = new JavaParser("NullLiteral");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Name();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 73: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 74: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Fd{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 76: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 77: 
StringReader stringReader = new StringReader("case");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: case
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
javaParser.AssignmentOperator();
Test 79: 
JavaParser javaParser = new JavaParser("3t");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
StringReader stringReader = new StringReader("LXW+");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
StringReader stringReader = new StringReader("transient");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: transient
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader(";z*pr3\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("$,!wLe");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader(".?!");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("@mV+$fpE(IKq{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("2eitz");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 94: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
StringReader stringReader = new StringReader("2eitz");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: eitz
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 97: 
JavaParser javaParser = new JavaParser("u<+]$vf=8 PY");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 100: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.getNextToken();
javaParser.UnaryExpression();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4980.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 102: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 103: 
StringReader stringReader = new StringReader("?T5,lT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 2l
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
JavaParser javaParser = new JavaParser(" ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 111: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("B;'Q[\"-^>BO:B");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3484), (-1836));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.BlockStatement();
Test 113: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 749, 749);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 749, column 749.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
StringReader stringReader = new StringReader("volatile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: volatile
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
StringReader stringReader = new StringReader("<ti,)B=Z");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
StringReader stringReader = new StringReader("dI8Z~l8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AndExpression();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
JavaParser javaParser = new JavaParser(".?!");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader("u?Oq");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
Test 124: 
StringReader stringReader = new StringReader("l*ba\u0000");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.ConditionalExpression();
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 18.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 129: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 131: 
StringReader stringReader = new StringReader("A,.`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
JavaParser javaParser = new JavaParser("qAC+OAUMnW.ff bf'");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser("yC#_H\"");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
StringReader stringReader = new StringReader("h&[]8PNl> ?#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: h
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("OR");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 143: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 145: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 147: 
StringReader stringReader = new StringReader("kjZUjIY|V`[2<S(]1|");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: kjZUjIY
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-2462), 69);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
}

Test 149: 
StringReader stringReader = new StringReader("/qL)-/0Zh`|Od{5fc ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"}\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 153: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration((-2002));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: H
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 160: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.getNextToken();
Test 161: 
StringReader stringReader = new StringReader("mI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("8o-DsZ3~q@\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
JavaParser javaParser = new JavaParser("(");
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("BWEWl");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
Test 167: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 169: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 170: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 171: 
StringReader stringReader = new StringReader("H/$bm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 172: 
JavaParser javaParser = new JavaParser("2lv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 175: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 178: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
StringReader stringReader = new StringReader("yC#_H\"");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 180: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 182: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
JavaParser javaParser = new JavaParser("^igB+y,eO4J");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 185: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 186: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 187: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 188: 
StringReader stringReader = new StringReader("3+aZt");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 189: 
StringReader stringReader = new StringReader("#B ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
StringReader stringReader = new StringReader("{Hr6[~pJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
StringReader stringReader = new StringReader("2lv");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 192: 
StringReader stringReader = new StringReader("\"}\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 193: 
StringReader stringReader = new StringReader("ReturnStatement");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 15.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("b/|tp0_DGs,d_]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 195: 
StringReader stringReader = new StringReader("'E@)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2428, (-486));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2428, column -484.  Encountered: \"@\" (64), after : \"\\'E\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 196: 
StringReader stringReader = new StringReader("^igB+y,eO4J");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, (-4984));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column -4984.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 14.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("package");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
StringReader stringReader = new StringReader("{Lr6[gpJ>d2_l{T;Y");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.read();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser("KB/908ifhj}+");
javaParser.getToken(36);
Test 202: 
StringReader stringReader = new StringReader("]wSKYm-^xpV");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: -
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
StringReader stringReader = new StringReader("AC+OA4UMnW.ff bf'");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 7938
* Number of covered goals: 2233
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 43%
* Total number of goals: 4940
* Number of covered goals: 2100
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 9
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 90%
* Total number of goals: 134
* Number of covered goals: 120
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 25%
* Total number of goals: 7938
* Number of covered goals: 1958
* Generated 204 tests with total length 604
* Resulting test suite's coverage: 39% (average coverage for all fitness functions)
* Generating assertions
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: Class too large: com/soops/CEN4010/JMCA/JParser/JavaParser
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:30.836 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 19:13:30.876 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:30.903 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 19:13:30.944 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:237)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 23 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:241)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 20 common frames omitted
[MASTER] 19:13:30.983 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:460)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 22 common frames omitted
[MASTER] 19:13:31.029 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.050 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.091 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.115 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.181 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.201 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 19:13:31.222 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.232 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.259 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.271 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.293 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.305 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.326 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.338 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.362 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.373 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.396 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.409 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.432 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 19:13:31.444 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 19:13:31.676 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
* Error while initializing target class: com/soops/CEN4010/JMCA/JParser/JavaParser
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
[MASTER] 19:13:31.800 [logback-1] WARN  SimpleMutationAssertionGenerator - Could not initialize SUT before Assertion generation
[MASTER] 19:13:32.358 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 19:13:32.360 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
* Computation finished
