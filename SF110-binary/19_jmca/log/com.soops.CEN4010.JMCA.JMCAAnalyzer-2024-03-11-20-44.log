* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JMCAAnalyzer
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 21229
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:44:05.398 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:44:05.402 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:44:05.403 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:44:05.442 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JMCAAnalyzer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 626
* Using seed 1710189842693
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 96 / 626
[Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           7%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:==>                           9%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        17%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:=====>                        19%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:=======>                      26%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     27%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       33%][Progress:===========>                  37%] [Cov:===========>                       33%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 40%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 42%] [Cov:==============>                    42%][Progress:============>                 42%] [Cov:==============>                    42%][Progress:============>                 42%] [Cov:==============>                    42%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 42%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:============>                 43%] [Cov:===============>                   44%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                44%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:=============>                46%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               47%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:==============>               49%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              52%] [Cov:=====================>             60%][Progress:===============>              52%] [Cov:=====================>             60%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             54%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:================>             56%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            57%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            63%][Progress:=================>            59%] [Cov:======================>            64%][Progress:=================>            59%] [Cov:======================>            64%][Progress:=================>            59%] [Cov:======================>            64%][Progress:=================>            59%] [Cov:======================>            64%][Progress:=================>            59%] [Cov:======================>            64%][Progress:=================>            59%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           60%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         68%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:====================>         69%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        70%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           66%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:========================>          69%][Progress:=====================>        71%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        72%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:=====================>        73%] [Cov:========================>          69%][Progress:======================>       74%] [Cov:========================>          69%][Progress:======================>       74%] [Cov:========================>          69%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          71%][Progress:========================>     80%] [Cov:========================>          71%][Progress:========================>     80%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     81%] [Cov:========================>          71%][MASTER] 20:46:49.620 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:========================>     81%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     82%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:========================>     83%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    84%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    85%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:=========================>    86%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   87%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   88%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:==========================>   89%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  90%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  91%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  92%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:=============================>99%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%]
* Search finished after 201s and 2161 generations, 1092691 statements, best individual has fitness: 150.0
* Generated before the refinement 24 tests with total length 223
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: setFileName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jMCAAnalyzer.setFileName(" ")
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName(" ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.setFileName("C:\\path\\to\\sample.txt");
    }
}
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.setFileName("C:\\path\\to\\sample.txt"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.setFileName("C:\\path\\to\\sample.txt") target is: jMCAAnalyzer method is: setFileName(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: setFileName(Ljava/lang/String;)V
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String string = "C:\\path\\to\\sample.txt";
jMCAAnalyzer.setFileName(string);

statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze((ASTNode) null)
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);

** It was a parseable test case! 
Improved test data is: // Perform analysis on the node
class DummyClass {
    public static void main() {
        return;
    }
}
statement is: return, class spoon.support.reflect.code.CtReturnImpl
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("StatementExpression");
        aSTNode.setIdentity("StatementExpression");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("StatementExpression") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("+=", "+=", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("+=", "+=", "Addition");
        aSTNode.addChild(new ASTNode("1", "Literal", 1));
        aSTNode.addChild(new ASTNode("2", "Literal", 2));
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("+=", "+=", "Addition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("1", "Literal", 1)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("1", "Literal", 1)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("2", "Literal", 2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("2", "Literal", 2)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 4
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "+=";
String string = "+=";
String string = "Addition";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", arg2)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("--")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("uniqueMethodName", "uniqueMethodName", aSTNode);
        aSTNode.setIdentity("--");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("METHOD_DECLARATION");
        aSTNode.setIdentity("STATEMENT_EXPRESSION");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("uniqueMethodName", "uniqueMethodName", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("--"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("--") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("METHOD_DECLARATION"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("METHOD_DECLARATION") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("STATEMENT_EXPRESSION"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("STATEMENT_EXPRESSION") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 7
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "uniqueMethodName";
String string = "uniqueMethodName";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "STATEMENT_EXPRESSION";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8(", "8(", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@7ef26456 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("--")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("methodName()", "methodName()", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        aSTNode.setIdentity("--");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("methodName()", "methodName()", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("--"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("--") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 7
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "methodName()";
String string = "methodName()";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("(", "(", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("(", "(", aSTNode);// Replaced with "MethodDeclaration" to make the test data more descriptive and representative of the situation being tested.

        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("StatementExpression");// Replaced with "MethodDeclaration" to make the test data more descriptive and representative of the situation being tested.

        aSTNode.setIdentity("MethodDeclaration");// Replaced with "StatementExpression" to make the test data more descriptive and representative of the situation being tested.

        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("(", "(", aSTNode)// Replaced with "MethodDeclaration" to make the test data more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("StatementExpression")// Replaced with "MethodDeclaration" to make the test data more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("StatementExpression")// Replaced with "MethodDeclaration" to make the test data more descriptive and representative of the situation being tested.
 target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("MethodDeclaration")// Replaced with "StatementExpression" to make the test data more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("MethodDeclaration")// Replaced with "StatementExpression" to make the test data more descriptive and representative of the situation being tested.
 target is: aSTNode method is: setIdentity(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "(";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@b9c7579c type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("--")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", null);
        ArrayList<ASTNode> arrayList = new ArrayList<>();
        arrayList.add(new ASTNode("Identifier", "identifier1", null));
        arrayList.add(new ASTNode("StringLiteral", "string literal 1", null));
        aSTNode.setIdentity("--");
        aSTNode.addChild(new ASTNode("Block", "block", arrayList));
        aSTNode.addChild(new ASTNode("IfStatement", "if statement", new ArrayList<>() {
            {
                add(new ASTNode("Identifier", "identifier2", null));
            }
        }));
        aSTNode.addChild(new ASTNode("WhileLoop", "while loop", new ArrayList<>() {
            {
                add(new ASTNode("Identifier", "identifier3", null));
            }
        }));
        aSTNode.addChild(new ASTNode("TryCatchBlock", "try-catch block", new ArrayList<>() {
            {
                add(new ASTNode("Identifier", "identifier4", null));
            }
        }));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(new ASTNode("Identifier", "identifier1", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Identifier", "identifier1", null)) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("StringLiteral", "string literal 1", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StringLiteral", "string literal 1", null)) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("--"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("--") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(new ASTNode("Block", "block", arrayList)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Block", "block", arrayList)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("IfStatement", "if statement", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier2", null));
    }
})), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("IfStatement", "if statement", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier2", null));
    }
})) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("WhileLoop", "while loop", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier3", null));
    }
})), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("WhileLoop", "while loop", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier3", null));
    }
})) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("TryCatchBlock", "try-catch block", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier4", null));
    }
})), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("TryCatchBlock", "try-catch block", new ArrayList<>() {
    {
        add(new ASTNode("Identifier", "identifier4", null));
    }
})) target is: aSTNode method is: addChild(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 11, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "--";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("Selection", "Selection", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", "public static void main(String[] args)");
        ASTNode aSTNode1 = new ASTNode("BlockStatement", "", "{}");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode1);
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", "public static void main(String[] args)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ASTNode aSTNode1 = new ASTNode("BlockStatement", "", "{}"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode1) target is: aSTNode method is: addChild(ASTNode)
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
TestCase is: String string = "MethodDeclaration";
String string = "methodName";
String string = "public static void main(String[] args)";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "BlockStatement";
String string = "";
String string = "{}";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("Iteration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration");
        aSTNode.addChild(new ASTNode("LocalVariableDeclaration", "int i;"));
        aSTNode.addChild(new ASTNode("ExpressionStatement", "System.out.println(\"Hello, world!\");"));
        aSTNode.setType("Iteration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("LocalVariableDeclaration", "int i;")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("LocalVariableDeclaration", "int i;")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("ExpressionStatement", "System.out.println(\"Hello, world!\");")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("ExpressionStatement", "System.out.println(\"Hello, world!\");")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("Iteration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("Iteration") target is: aSTNode method is: setType(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 5, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: org.evosuite.testcase.statements.AssignmentStatement@a53f3d50 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_1", null);
        aSTNode.addChild(new ASTNode("StringLiteral", "myMethod", null));
        aSTNode.addChild(new ASTNode("FormalParameters", null, null));
        aSTNode.addChild(new ASTNode("Block", null, null));
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_2", aSTNode);
        aSTNode.addChild(new ASTNode("StringLiteral", "myOtherMethod", null));
        aSTNode.addChild(new ASTNode("FormalParameters", null, null));
        aSTNode.addChild(new ASTNode("Block", null, null));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_1", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("StringLiteral", "myMethod", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("StringLiteral", "myMethod", null)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("FormalParameters", null, null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("FormalParameters", null, null)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Block", null, null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Block", null, null)) target is: aSTNode method is: addChild(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_2", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("StringLiteral", "myOtherMethod", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("StringLiteral", "myOtherMethod", null)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("FormalParameters", null, null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("FormalParameters", null, null)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Block", null, null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Block", null, null)) target is: aSTNode method is: addChild(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "MethodDeclaration_1";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "MethodDeclaration";
String string = "MethodDeclaration_2";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8(", "8(", arg2)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("[")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(aSTNode.parent)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode.parent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.setIdentity("+");
        aSTNode.addChild(new ASTNode("x", "5"));
        aSTNode.addChild(new ASTNode("4", "4"));
        aSTNode.addChild(new ASTNode("3", "3"));
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("+"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("+") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(new ASTNode("x", "5")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("x", "5")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("4", "4")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("4", "4")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("3", "3")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("3", "3")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 11
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
String string = "+";
aSTNode.setIdentity(string);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("=", "=", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("Addition", "+", aSTNode);
        aSTNode.addChild(new ASTNode("NumberLiteral", 5));
        aSTNode.addChild(new ASTNode("Identifier", "x"));
        aSTNode.setType("Equation");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("Addition", "+", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("NumberLiteral", 5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("NumberLiteral", 5)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Identifier", "x")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Identifier", "x")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("Equation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("Equation") target is: aSTNode method is: setType(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "Addition";
String string = "+";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@67d900d4 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("-=")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        aSTNode.setIdentity("-=");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("-="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("-=") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 12
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
String string = "8jP(";
String string = "8jP(";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = "-=";
((ASTNode) string).setIdentity(string);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "StatementExpression";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8jP(", "8jP(", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@7e5b9585 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("--")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        ASTNode aSTNode = new ASTNode("methodInvocation", "methodInvocation", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        aSTNode.setIdentity("node123");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("A descriptive name for the node");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ASTNode aSTNode = new ASTNode("methodInvocation", "methodInvocation", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("node123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("node123") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.setIdentity("A descriptive name for the node"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("A descriptive name for the node") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 10, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 12
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
String string = "methodInvocation";
String string = "methodInvocation";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = "node123";
((ASTNode) string).setIdentity(string);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "A descriptive name for the node";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) string).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@a4e06438 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@39941883 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = ")"
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", "MethodDeclaration");
        ArrayList<ASTNode> arrayList = new ArrayList<>();
        arrayList.add(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("StatementExpression");
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("StatementExpression") target is: aSTNode method is: setType(java.lang.String)
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
TestCase is: String string = "com.soops.CEN4010.JMCA.ASTNode";
String string = "com.soops.CEN4010.JMCA.ASTNode";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@fc19c17c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "*"
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("methodDeclaration1", "methodDeclaration1", aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.identity = "*";
        aSTNode.setType("StatementExpression");
        aSTNode.setIdentity("*");
        aSTNode.addChild(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("methodDeclaration1", "methodDeclaration1", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.identity = "*", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.setType("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("StatementExpression") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("*"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("*") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "methodDeclaration1";
String string = "methodDeclaration1";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(")", ")", arg2)
statement is: org.evosuite.testcase.statements.AssignmentStatement@a3692801 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "new"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration");
        aSTNode.addChild(new ASTNode("identifier", "int"));
        aSTNode.addChild(new ASTNode("identifier", "main"));
        aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]"));
        aSTNode.addChild(new ASTNode("block", "{...}"));
        ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration");
        aSTNode.addChild(new ASTNode("identifier", "void"));
        aSTNode.addChild(new ASTNode("identifier", "main"));
        aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]"));
        aSTNode.addChild(new ASTNode("block", "{...}"));
        ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration");
        aSTNode.addChild(new ASTNode("identifier", "String"));
        aSTNode.addChild(new ASTNode("identifier", "main"));
        aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]"));
        aSTNode.addChild(new ASTNode("block", "{...}"));
        ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration");
        aSTNode.addChild(new ASTNode("identifier", "void"));
        aSTNode.addChild(new ASTNode("identifier", "main"));
        aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]"));
    }
}
statement is: ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("identifier", "int")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "int")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("identifier", "main")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "main")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("block", "{...}")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("block", "{...}")) target is: aSTNode method is: addChild(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("identifier", "void")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "void")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("identifier", "main")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "main")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("block", "{...}")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("block", "{...}")) target is: aSTNode method is: addChild(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("identifier", "String")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "String")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("identifier", "main")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "main")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("block", "{...}")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("block", "{...}")) target is: aSTNode method is: addChild(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("method_declaration", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("identifier", "void")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "void")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("identifier", "main")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("identifier", "main")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("formalParameters", "[(Identifier:x, Identifier:int), (Identifier:y, Identifier:int)]")) target is: aSTNode method is: addChild(ASTNode)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("(", "(", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", 0);
        aSTNode.addChild(new ASTNode());
        aSTNode.addChild(new ASTNode());
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 4
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
int _int = 0;
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) _int);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@801b6e18 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("[")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.setIdentity("This is a test method");
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        aSTNode.setIdentity("[");
        aSTNode.addChild(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("This is a test method"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("This is a test method") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("["), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("[") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 10
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
String string = "This is a test method";
aSTNode.setIdentity(string);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "StatementExpression";
aSTNode.setIdentity(string);
String string = "[";
aSTNode.setIdentity(string);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("?9", "?9", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("+")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", "+");
        aSTNode.addChild(new ASTNode("Identifier", "int", "x"));
        aSTNode.addChild(new ASTNode("Literal", "x"));
        aSTNode.addChild(new ASTNode("Assignment", "="));
        aSTNode.addChild(new ASTNode("Identifier", "int", "y"));
        aSTNode.addChild(new ASTNode("Literal", "y"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", "+"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("Identifier", "int", "x")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Identifier", "int", "x")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Literal", "x")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Literal", "x")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Assignment", "=")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Assignment", "=")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Identifier", "int", "y")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Identifier", "int", "y")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Literal", "y")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Literal", "y")) target is: aSTNode method is: addChild(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 4
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
String string = "+";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("(", "(", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("-")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("(methodName", "(", "MethodDeclaration");
        aSTNode.addChild(aSTNode);
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        aSTNode.addChild(aSTNode);
        aSTNode.setIdentity("-");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("(methodName", "(", "MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setIdentity("-"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("-") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 3
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 8
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "(methodName";
String string = "(";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "-";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("new", "new", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@9815778d type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("new", "new", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "new", null, null, true, 0, 1);
        ASTNode aSTNode2 = new ASTNode("StatementExpression", "new", null, null, false, 1, 2);
        ArrayList<ASTNode> arrayList = new ArrayList<>();
        arrayList.add(aSTNode);
        arrayList.add(aSTNode2);
        aSTNode.setIdentity("");
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "new", null, null, true, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ASTNode aSTNode2 = new ASTNode("StatementExpression", "new", null, null, false, 1, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode2) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("8(", "8(", arg2)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("StatementExpression")
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity(".")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
        aSTNode.addChild(new ASTNode("Integer", "8", aSTNode));
        aSTNode.addChild(new ASTNode("Double", "8.5", aSTNode));
        aSTNode.addChild(new ASTNode("String", "\"Hello World\"", aSTNode));
        aSTNode.setType("MethodDeclaration");
        aSTNode.setIdentity("StatementExpression");
        aSTNode.setIdentity(".");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("Integer", "8", aSTNode)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Integer", "8", aSTNode)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("Double", "8.5", aSTNode)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Double", "8.5", aSTNode)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.addChild(new ASTNode("String", "\"Hello World\"", aSTNode)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("String", "\"Hello World\"", aSTNode)) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.setIdentity("."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity(".") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 7
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = ".";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

* test suite isTestSuite: 46
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName(" ");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode.parent);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("new", "new", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 23: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 24: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("C:path\tosample.txt");

Test 25: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
ASTNode aSTNode = new ASTNode("+=", "+=", (ASTNode) "Addition");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
String string = "uniqueMethodName";
ASTNode aSTNode = new ASTNode("uniqueMethodName", "uniqueMethodName", (ASTNode) "uniqueMethodName");
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "STATEMENT_EXPRESSION";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 28: 
String string = "methodName()";
ASTNode aSTNode = new ASTNode("methodName()", "methodName()", (ASTNode) "methodName()");
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 29: 
ASTNode aSTNode = new ASTNode("(", "(", (ASTNode) "(");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 30: 
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", (ASTNode) "MethodDeclaration");
String string = "--";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 31: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", (ASTNode) "public static void main(String[] args)");
String string = "BlockStatement";
String string = "";
String string = "{}";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);

Test 32: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_1", (ASTNode) "MethodDeclaration");
String string = "MethodDeclaration";
String string = "MethodDeclaration_2";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 34: 
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("+");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 35: 
ASTNode aSTNode = new ASTNode("Addition", "+", (ASTNode) "Addition");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 36: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
((ASTNode)"8jP(").setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "StatementExpression";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

Test 37: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("methodInvocation", "methodInvocation", aSTNode);
((ASTNode)"methodInvocation").setIdentity("node123");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "A descriptive name for the node";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) string).analyze(aSTNode);

Test 38: 
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", (ASTNode) "MethodDeclaration");

Test 39: 
ASTNode aSTNode = new ASTNode("methodDeclaration1", "methodDeclaration1", (ASTNode) "methodDeclaration1");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 40: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) 0);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 41: 
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("This is a test method");
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 42: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 43: 
String string = "(";
ASTNode aSTNode = new ASTNode("(methodName", "(", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "-";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 44: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 45: 
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = ".";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();


* Generated after the refinement and before minimization 46 tests with total length 325
* test suite isTestSuite: 46
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName(" ");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode.parent);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("new", "new", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 23: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 24: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("C:path\tosample.txt");

Test 25: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
ASTNode aSTNode = new ASTNode("+=", "+=", (ASTNode) "Addition");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
String string = "uniqueMethodName";
ASTNode aSTNode = new ASTNode("uniqueMethodName", "uniqueMethodName", (ASTNode) "uniqueMethodName");
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "STATEMENT_EXPRESSION";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 28: 
String string = "methodName()";
ASTNode aSTNode = new ASTNode("methodName()", "methodName()", (ASTNode) "methodName()");
String string = "--";
((ASTNode) string).setIdentity(string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 29: 
ASTNode aSTNode = new ASTNode("(", "(", (ASTNode) "(");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 30: 
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", (ASTNode) "MethodDeclaration");
String string = "--";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 31: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", (ASTNode) "public static void main(String[] args)");
String string = "BlockStatement";
String string = "";
String string = "{}";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);

Test 32: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration_1", (ASTNode) "MethodDeclaration");
String string = "MethodDeclaration";
String string = "MethodDeclaration_2";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 34: 
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("+");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 35: 
ASTNode aSTNode = new ASTNode("Addition", "+", (ASTNode) "Addition");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 36: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
((ASTNode)"8jP(").setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "StatementExpression";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

Test 37: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("methodInvocation", "methodInvocation", aSTNode);
((ASTNode)"methodInvocation").setIdentity("node123");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
String string = "A descriptive name for the node";
aSTNode.setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) string).analyze(aSTNode);

Test 38: 
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", (ASTNode) "MethodDeclaration");

Test 39: 
ASTNode aSTNode = new ASTNode("methodDeclaration1", "methodDeclaration1", (ASTNode) "methodDeclaration1");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 40: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) 0);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 41: 
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("This is a test method");
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 42: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 43: 
String string = "(";
ASTNode aSTNode = new ASTNode("(methodName", "(", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "-";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 44: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 45: 
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = ".";
((ASTNode) string).setIdentity(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("C:path\tosample.txt");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode.parent);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 199
* Number of covered goals: 143
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 222
* Number of covered goals: 184
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 72%
* Total number of goals: 199
* Number of covered goals: 143
* Generated 23 tests with total length 212
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("C:path\tosample.txt");

** It was a parseable test case! 
refined test name is: testSetFileNameWithValidFilePath
* Compiling Tests
refined test name is: testSetFileNameWithValidPath
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze((ASTNode) null);
assertEquals("File did not parse correctly", analyze);


** It was a parseable test case! 
refined test name is: testJMCAAnalyzerWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:55:18.316 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:18.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:18.383 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:18.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:55:18.443 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:18.444 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 20:55:18.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:18.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
[MASTER] 20:55:18.917 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 24
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName(" ");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode.parent);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("new", "new", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 23: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName(" ");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Selection", "Selection", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("Iteration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", "ClassVariableDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("+=", "+=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("=", "=", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.identity = "StatementExpression";
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode.parent);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setIdentity("-=");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8jP(", "8jP(", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("--");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("com.soops.CEN4010.JMCA.ASTNode", "com.soops.CEN4010.JMCA.ASTNode", aSTNode);
aSTNode.addChild(aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
arrayList.add(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = ")";
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(" 4h6N!(uPpG|,w_-", " 4h6N!(uPpG|,w_-", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "*";
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode(")", ")", aSTNode);
aSTNode.identity = "new";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("Sk$\"6Fk<Nh{+", "Sk$\"6Fk<Nh{+", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("[");
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("?9", "?9", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity("+");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("(", "(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.addChild(aSTNode);
aSTNode.setIdentity("-");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("8(", "8(", aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
aSTNode.setIdentity("StatementExpression");
aSTNode.setIdentity(".");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

[MASTER] 20:55:22.344 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 199
* Number of covered goals: 143
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 222
* Number of covered goals: 184
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 72%
* Total number of goals: 199
* Number of covered goals: 143
* Generated 23 tests with total length 212
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:55:22.432 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 37%
[MASTER] 20:55:31.345 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:55:32.242 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:32.243 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:55:32.280 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:32.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 20:55:32.321 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:32.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 20:55:32.368 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/tmp/EvoSuite_pathingJar7498008816986488794.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:32.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7498008816986488794.jar
* Writing tests to file
[MASTER] 20:55:32.370 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'JMCAAnalyzer_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
* Writing JUnit test case 'JMCAAnalyzer_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
* Done!

* Computation finished
