* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JParser.JavaCharStream
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 20944
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JParser.JavaCharStream
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 738
* Using seed 1709243723433
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 297 / 738
[Progress:>                             0%] [Cov:===========>                       33%][Progress:>                             1%] [Cov:=================>                 49%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:=====================>             60%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:=======================>           66%][Progress:==>                           9%] [Cov:=======================>           67%][Progress:==>                           9%] [Cov:========================>          69%][Progress:==>                           9%] [Cov:========================>          70%][Progress:===>                          10%] [Cov:========================>          71%][Progress:====>                         15%] [Cov:=========================>         72%][Progress:====>                         15%] [Cov:=========================>         73%][Progress:====>                         15%] [Cov:=========================>         74%][Progress:====>                         16%] [Cov:=========================>         74%][Progress:====>                         16%] [Cov:==========================>        75%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        77%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:=============>                45%] [Cov:=============================>     85%][Progress:===============>              50%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:==================>           63%] [Cov:==============================>    88%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:====================>         68%] [Cov:===============================>   89%][Progress:====================>         68%] [Cov:===============================>   89%][Progress:====================>         68%] [Cov:===============================>   89%][Progress:====================>         68%] [Cov:===============================>   89%][Progress:====================>         68%] [Cov:===============================>   89%][Progress:====================>         69%] [Cov:===============================>   89%][Progress:====================>         69%] [Cov:===============================>   89%][Progress:======================>       74%] [Cov:===============================>   89%][Progress:======================>       74%] [Cov:===============================>   90%][Progress:======================>       74%] [Cov:===============================>   90%][Progress:=======================>      79%] [Cov:===============================>   90%][Progress:=========================>    84%] [Cov:===============================>   90%][Progress:=========================>    84%] [Cov:===============================>   90%][Progress:=========================>    84%] [Cov:===============================>   90%][Progress:=========================>    84%] [Cov:===============================>   90%][Progress:==========================>   89%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:===========================>  90%] [Cov:===============================>   90%][Progress:==============================100%] [Cov:===============================>   90%][Progress:==============================100%] [Cov:===============================>   90%][Progress:==============================100%] [Cov:===============================>   90%]
* Search finished after 106s and 89 generations, 38280 statements, best individual has fitness: 83.0
* Generated before the refinement 100 tests with total length 233
statement is: org.evosuite.testcase.statements.ArrayStatement@5f744ed1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: ReInit(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((InputStream) arg0, (int) (byte) (-114), (int) (byte)86)
test data is: byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, (int) (byte) (-114), (int) (byte)86);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[2];// Use a non-empty array for better coverage of the lexer's tokenization logic

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
        javaCharStream.ReInit(((InputStream) (byteArrayInputStream)), ((int) ((byte) (-100))), ((int) ((byte) (86))));// Use a negative starting position to test the lexer's error handling logic }}

    }
}
statement is: byte[] byteArray = new byte[2]// Use a non-empty array for better coverage of the lexer's tokenization logic
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReInit(((InputStream) (byteArrayInputStream)), ((int) ((byte) (-100))), ((int) ((byte) (86))))// Use a negative starting position to test the lexer's error handling logic }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((InputStream) (byteArrayInputStream)), ((int) ((byte) (-100))), ((int) ((byte) (86))))// Use a negative starting position to test the lexer's error handling logic }}
 target is: javaCharStream method is: ReInit(InputStream,int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: ReInit(Ljava/io/InputStream;II)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
int _int = 86;
byte _byte = null;
javaCharStream.ReInit((InputStream) byteArrayInputStream, _int, (int) _byte);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((Reader) arg0)
test data is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReInit((Reader) stringReader);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world!");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.ReInit(((Reader) (stringReader)));
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((Reader) (stringReader))) target is: javaCharStream method is: ReInit(Reader)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: ReInit(Ljava/io/Reader;)V
TestCase is: String string = "Hello, world!";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).ReInit((Reader) stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("VF);\"`gbV^=7")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: getBeginColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginColumn = javaCharStream.getBeginColumn()
test data is: StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for JavaCharStream.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.getBeginColumn();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for JavaCharStream."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.getBeginColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginColumn() target is: javaCharStream method is: getBeginColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getBeginColumn()I
TestCase is: String string = "This is a test string for JavaCharStream.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginColumn();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: getBeginLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginLine = javaCharStream.getBeginLine()
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for testing.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.getBeginLine();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for testing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.getBeginLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginLine() target is: javaCharStream method is: getBeginLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getBeginLine()I
TestCase is: String string = "This is a sample input for testing.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginLine();

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('0')
test data is: JavaCharStream.hexval('0');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('1');
        JavaCharStream.hexval('A');
        JavaCharStream.hexval('F');
    }
}
statement is: CharStream.hexval('1'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('1') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '1';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('A')
test data is: JavaCharStream.hexval('A');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('g');// returns 10 }}

    }
}
statement is: CharStream.hexval('g')// returns 10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('g')// returns 10 }}
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'g';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('1')
test data is: JavaCharStream.hexval('1');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(0x1, JavaCharStream.hexval('1'));
    }
}
statement is: assertEquals(0x1, JavaCharStream.hexval('1')), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(0x1, JavaCharStream.hexval('1')) target is:  method is: assertEquals(int,<unknown>)
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('2')
test data is: JavaCharStream.hexval('2');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('3')
test data is: JavaCharStream.hexval('3');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
        JavaCharStream.hexval('z');
        JavaCharStream.hexval('0');
        JavaCharStream.hexval('\n');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('z') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('0'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('0') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('\n'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('\n') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('4')
test data is: JavaCharStream.hexval('4');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');
    }
}
statement is: CharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('5')
test data is: JavaCharStream.hexval('5');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('6')
test data is: JavaCharStream.hexval('6');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// 'A' has a value of 10

        JavaCharStream.hexval('F');// 'F' has a value of 15

        JavaCharStream.hexval('a');// 'a' has a value of 10

        JavaCharStream.hexval('f');// 'f' has a value of 1 }}

    }
}
statement is: CharStream.hexval('A')// 'A' has a value of 10
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// 'A' has a value of 10
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F')// 'F' has a value of 15
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F')// 'F' has a value of 15
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// 'a' has a value of 10
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// 'a' has a value of 10
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('f')// 'f' has a value of 1 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('f')// 'f' has a value of 1 }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'f';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('7')
test data is: JavaCharStream.hexval('7');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaCharStream.hexval(0x7);
    }
}
statement is: // Improved test data
JavaCharStream.hexval(0x7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
JavaCharStream.hexval(0x7) target is: JavaCharStream method is: hexval(int)
Matched Method is: hexval(C)I
TestCase is: int _int = 7;
JavaCharStream.hexval((char) _int);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('8')
test data is: JavaCharStream.hexval('8');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// ASCII code for 'A'

        JavaCharStream.hexval('Z');// ASCII code for 'Z'

        JavaCharStream.hexval('a');// ASCII code for 'a'

        JavaCharStream.hexval('z');// ASCII code for 'z'

        JavaCharStream.hexval('0');// ASCII code for '0'

        JavaCharStream.hexval('9');// ASCII code for '9'

        JavaCharStream.hexval('!');// ASCII code for '!'

        JavaCharStream.hexval('@');// ASCII code for '@ }}

    }
}
statement is: CharStream.hexval('A')// ASCII code for 'A'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// ASCII code for 'A'
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('Z')// ASCII code for 'Z'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('Z')// ASCII code for 'Z'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// ASCII code for 'a'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// ASCII code for 'a'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('z')// ASCII code for 'z'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('z')// ASCII code for 'z'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('0')// ASCII code for '0'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('0')// ASCII code for '0'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('9')// ASCII code for '9'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('9')// ASCII code for '9'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('!')// ASCII code for '!'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('!')// ASCII code for '!'
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('@')// ASCII code for '@ }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('@')// ASCII code for '@ }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'Z';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('9')
test data is: JavaCharStream.hexval('9');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals("The hex value of '9' should be 9", 9, JavaCharStream.hexval('9'));
    }
}
statement is: assertEquals("The hex value of '9' should be 9", 9, JavaCharStream.hexval('9')), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("The hex value of '9' should be 9", 9, JavaCharStream.hexval('9')) target is:  method is: assertEquals(java.lang.String,int,<unknown>)
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval(':')
test data is: JavaCharStream.hexval(':');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// 'A' is a hexadecimal character representing the ASCII value 65

        JavaCharStream.hexval(0x41);// 0x41 is a hexadecimal number representing the ASCII value 65

        JavaCharStream.hexval(97);// 97 is a decimal number representing the ASCII value 97 (which corresponds to the character 'a')

        JavaCharStream.hexval("61");// "61" is a string representation of the hexadecimal character 'a'

        JavaCharStream.hexval('a');// 'a' is a character literal representing the ASCII value 97 (which corresponds to the character 'a' }}

    }
}
statement is: CharStream.hexval('A')// 'A' is a hexadecimal character representing the ASCII value 65
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// 'A' is a hexadecimal character representing the ASCII value 65
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval(0x41)// 0x41 is a hexadecimal number representing the ASCII value 65
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval(0x41)// 0x41 is a hexadecimal number representing the ASCII value 65
 target is: JavaCharStream method is: hexval(int)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval(97)// 97 is a decimal number representing the ASCII value 97 (which corresponds to the character 'a')
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval(97)// 97 is a decimal number representing the ASCII value 97 (which corresponds to the character 'a')
 target is: JavaCharStream method is: hexval(int)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval("61")// "61" is a string representation of the hexadecimal character 'a'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval("61")// "61" is a string representation of the hexadecimal character 'a'
 target is: JavaCharStream method is: hexval(java.lang.String)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// 'a' is a character literal representing the ASCII value 97 (which corresponds to the character 'a' }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// 'a' is a character literal representing the ASCII value 97 (which corresponds to the character 'a' }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
int _int = 65;
JavaCharStream.hexval((char) _int);
int _int = 97;
JavaCharStream.hexval((char) _int);
String string = "61";
JavaCharStream.hexval((char) string);
char _char = 'a';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval(';')
test data is: JavaCharStream.hexval(';');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Instead of using a single character, use a more descriptive value to represent the character we want to convert
        JavaCharStream.hexval('\n');
        // Instead of using a hardcoded integer value, use a more representative value for the radix parameter
        JavaCharStream.hexval(' ', 16);
    }
}
statement is: // Improved test data
// Instead of using a single character, use a more descriptive value to represent the character we want to convert
JavaCharStream.hexval('\n'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
// Instead of using a single character, use a more descriptive value to represent the character we want to convert
JavaCharStream.hexval('\n') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: // Instead of using a hardcoded integer value, use a more representative value for the radix parameter
JavaCharStream.hexval(' ', 16), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Instead of using a hardcoded integer value, use a more representative value for the radix parameter
JavaCharStream.hexval(' ', 16) target is: JavaCharStream method is: hexval(char,int)
TestCase is: char _char = '\n';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('<')
test data is: JavaCharStream.hexval('<');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');
    }
}
statement is: CharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('=')
test data is: JavaCharStream.hexval('=');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int expected = 0x3d;
        assertEquals(expected, JavaCharStream.hexval('='));
    }
}
statement is: int expected = 0x3d, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expected, JavaCharStream.hexval('=')), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expected, JavaCharStream.hexval('=')) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: int _int = 61
TestCase is: int _int = 61;

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('>')
test data is: JavaCharStream.hexval('>');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('?')
test data is: JavaCharStream.hexval('?');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('@')
test data is: JavaCharStream.hexval('@');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('B')
test data is: JavaCharStream.hexval('B');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return c - '0';
    }

    {
        return (c - 'a') + 10;
    }

    {
        return (c - 'A') + 10;
    }
}
statement is: return c - '0', class spoon.support.reflect.code.CtReturnImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('C')
test data is: JavaCharStream.hexval('C');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
        JavaCharStream.hexval('F');
        JavaCharStream.hexval('0');
        JavaCharStream.hexval('9');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('0'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('0') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('9'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('9') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('D')
test data is: JavaCharStream.hexval('D');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('1');// change this value to a more illustrative example

        JavaCharStream.hexval('A');// change this value to a more illustrative example

        JavaCharStream.hexval('F');// change this value to a more illustrative exampl }}

    }
}
statement is: CharStream.hexval('1')// change this value to a more illustrative example
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('1')// change this value to a more illustrative example
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A')// change this value to a more illustrative example
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A')// change this value to a more illustrative example
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F')// change this value to a more illustrative exampl }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F')// change this value to a more illustrative exampl }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '1';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('E')
test data is: JavaCharStream.hexval('E');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval("The letter 'e'");
    }
}
statement is: CharStream.hexval("The letter 'e'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval("The letter 'e'") target is: CharStream method is: hexval(java.lang.String)
Matched Method is: hexval(C)I
TestCase is: String string = "The letter 'e'";
JavaCharStream.hexval((char) string);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('F')
test data is: JavaCharStream.hexval('F');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// replace with a more descriptive value, such as '0xFF'

        JavaCharStream.hexval('F');
    }
}
statement is: CharStream.hexval('A')// replace with a more descriptive value, such as '0xFF'
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// replace with a more descriptive value, such as '0xFF'
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('G')
test data is: JavaCharStream.hexval('G');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval(' ');// Space character

        JavaCharStream.hexval('\t');// Tab character

        JavaCharStream.hexval('\n');// Newline character

        JavaCharStream.hexval('\r');// Carriage return character

        JavaCharStream.hexval('A');// Uppercase letter A

        JavaCharStream.hexval('a');// Lowercase letter a

        JavaCharStream.hexval('0');// Digit 0

        JavaCharStream.hexval('9');// Digit 9

        JavaCharStream.hexval('\u0000');// Null character

        JavaCharStream.hexval('￿');// Invalid character (above the Unicode limit }}

    }
}
statement is: CharStream.hexval(' ')// Space character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval(' ')// Space character
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('\t')// Tab character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('\t')// Tab character
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('\n')// Newline character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('\n')// Newline character
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('\r')// Carriage return character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('\r')// Carriage return character
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A')// Uppercase letter A
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A')// Uppercase letter A
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// Lowercase letter a
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// Lowercase letter a
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('0')// Digit 0
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('0')// Digit 0
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('9')// Digit 9
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('9')// Digit 9
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('\u0000')// Null character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('\u0000')// Null character
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('￿')// Invalid character (above the Unicode limit }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('￿')// Invalid character (above the Unicode limit }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = ' ';
JavaCharStream.hexval(_char);
char _char = '\t';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);
char _char = '\r';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '\u0000';
JavaCharStream.hexval(_char);
char _char = '\uFFFF';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('H')
test data is: JavaCharStream.hexval('H');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('G');
    }
}
statement is: CharStream.hexval('G'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('G') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'G';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('I')
test data is: JavaCharStream.hexval('I');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String expected = "capital letter I";
        JavaCharStream.hexval('I');
    }
}
statement is: String expected = "capital letter I", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaCharStream.hexval('I'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('I') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
* this is vulnerable: String string = "capital letter I"
TestCase is: String string = "capital letter I";
char _char = 'I';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('J')
test data is: JavaCharStream.hexval('J');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('K')
test data is: JavaCharStream.hexval('K');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// returns 65

        JavaCharStream.hexval('B');// returns 66

        JavaCharStream.hexval('C');// returns 6 }}

    }
}
statement is: CharStream.hexval('A')// returns 65
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// returns 65
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('B')// returns 66
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('B')// returns 66
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('C')// returns 6 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('C')// returns 6 }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'B';
JavaCharStream.hexval(_char);
char _char = 'C';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('L')
test data is: JavaCharStream.hexval('L');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('M')
test data is: JavaCharStream.hexval('M');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// hexval of 'A' is 41 in decimal

        JavaCharStream.hexval('B');// hexval of 'B' is 42 in decimal

        JavaCharStream.hexval('C');// hexval of 'C' is 43 in decima }}

    }
}
statement is: CharStream.hexval('A')// hexval of 'A' is 41 in decimal
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// hexval of 'A' is 41 in decimal
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('B')// hexval of 'B' is 42 in decimal
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('B')// hexval of 'B' is 42 in decimal
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('C')// hexval of 'C' is 43 in decima }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('C')// hexval of 'C' is 43 in decima }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'B';
JavaCharStream.hexval(_char);
char _char = 'C';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('N')
test data is: JavaCharStream.hexval('N');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');
    }
}
statement is: CharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('O')
test data is: JavaCharStream.hexval('O');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');// Returns 41 (decimal) or 0x41 (hexadecimal)

        JavaCharStream.hexval('a');// Returns 97 (decimal) or 0x61 (hexadecimal)

        JavaCharStream.hexval('5');// Returns 53 (decimal) or 0x35 (hexadecimal }}

    }
}
statement is: CharStream.hexval('A')// Returns 41 (decimal) or 0x41 (hexadecimal)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A')// Returns 41 (decimal) or 0x41 (hexadecimal)
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// Returns 97 (decimal) or 0x61 (hexadecimal)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// Returns 97 (decimal) or 0x61 (hexadecimal)
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('5')// Returns 53 (decimal) or 0x35 (hexadecimal }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('5')// Returns 53 (decimal) or 0x35 (hexadecimal }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = '5';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('P')
test data is: JavaCharStream.hexval('P');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('p');// lowercase 'p' characte }}

    }
}
statement is: CharStream.hexval('p')// lowercase 'p' characte }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('p')// lowercase 'p' characte }}
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'p';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('Q')
test data is: JavaCharStream.hexval('Q');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('R')
test data is: JavaCharStream.hexval('R');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('0');
    }
}
statement is: CharStream.hexval('0'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('0') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '0';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('S')
test data is: JavaCharStream.hexval('S');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('T')
test data is: JavaCharStream.hexval('T');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // 1F4A }}
    }
}
statement is: // 1F4A }}, class spoon.support.reflect.code.CtCommentImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('U')
test data is: JavaCharStream.hexval('U');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');
    }
}
statement is: CharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('V')
test data is: JavaCharStream.hexval('V');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('W')
test data is: JavaCharStream.hexval('W');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // }}
    }
}
statement is: // }}, class spoon.support.reflect.code.CtCommentImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('X')
test data is: JavaCharStream.hexval('X');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');
    }
}
statement is: CharStream.hexval('F'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('Y')
test data is: JavaCharStream.hexval('Y');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('Z')
test data is: JavaCharStream.hexval('Z');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('0');// 0x30

        JavaCharStream.hexval('9');// 0x39

        JavaCharStream.hexval('A');// 0x41

        JavaCharStream.hexval('F');// 0x46

        JavaCharStream.hexval('a');// 0x61

        JavaCharStream.hexval('f');// 0x6 }}

    }
}
statement is: CharStream.hexval('0')// 0x30
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('0')// 0x30
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('9')// 0x39
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('9')// 0x39
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A')// 0x41
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A')// 0x41
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('F')// 0x46
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('F')// 0x46
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// 0x61
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// 0x61
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('f')// 0x6 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('f')// 0x6 }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'F';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'f';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('[')
test data is: JavaCharStream.hexval('[');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('0');// Returns "0"

        JavaCharStream.hexval('A');// Returns "A"

        JavaCharStream.hexval('Z');// Returns "5a"

        JavaCharStream.hexval('a');// Returns "61"

        JavaCharStream.hexval('z');// Returns "7a }}

    }
}
statement is: CharStream.hexval('0')// Returns "0"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('0')// Returns "0"
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A')// Returns "A"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A')// Returns "A"
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('Z')// Returns "5a"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('Z')// Returns "5a"
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// Returns "61"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// Returns "61"
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('z')// Returns "7a }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('z')// Returns "7a }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '0';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'Z';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('\\')
test data is: JavaCharStream.hexval('\\');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        if ((c >= '0') && (c <= '9')) {
            return c - '0';
        }
        if ((c >= 'a') && (c <= 'f')) {
            return (c - 'a') + 10;
        }
        if ((c >= 'A') && (c <= 'F')) {
            return (c - 'A') + 10;
        }
        throw new IllegalArgumentException("Invalid hexadecimal character: " + c);
    }
}
statement is: if ((c >= '0') && (c <= '9')) {
    return c - '0';
}, class spoon.support.reflect.code.CtIfImpl
statement is: if ((c >= 'a') && (c <= 'f')) {
    return (c - 'a') + 10;
}, class spoon.support.reflect.code.CtIfImpl
statement is: if ((c >= 'A') && (c <= 'F')) {
    return (c - 'A') + 10;
}, class spoon.support.reflect.code.CtIfImpl
statement is: throw new IllegalArgumentException("Invalid hexadecimal character: " + c), class spoon.support.reflect.code.CtThrowImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval(']')
test data is: JavaCharStream.hexval(']');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('\\');
    }
}
statement is: CharStream.hexval('\\'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('\\') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '\\';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('^')
test data is: JavaCharStream.hexval('^');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 56789;
        double y = 3.14159265359;
        String z = "Hello World!";
        char c = 'A';
    }
}
statement is: int x = 56789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14159265359, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 56789
* this is vulnerable: double _double = 3.14159265359
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 56789;
double _double = 3.14159265359;
String string = "Hello World!";
char _char = 'A';

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('_')
test data is: JavaCharStream.hexval('_');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before:
        JavaCharStream.hexval('_');
        // After:
        JavaCharStream.hexval('A');
    }
}
statement is: // Before:
JavaCharStream.hexval('_'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Before:
JavaCharStream.hexval('_') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: // After:
JavaCharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After:
JavaCharStream.hexval('A') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '_';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('`')
test data is: JavaCharStream.hexval('`');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
        JavaCharStream.hexval('Z');
        JavaCharStream.hexval('0');
        JavaCharStream.hexval('9');
        JavaCharStream.hexval('$');
        JavaCharStream.hexval('@');
        JavaCharStream.hexval('!');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('Z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('Z') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('0'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('0') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('9'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('9') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('$'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('$') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('@'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('@') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('!'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('!') target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'Z';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '$';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('a')
test data is: JavaCharStream.hexval('a');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // U+00E9
        // U+1F60 }}
    }
}
statement is: // U+00E9, class spoon.support.reflect.code.CtCommentImpl
statement is: // U+1F60 }}, class spoon.support.reflect.code.CtCommentImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('b')
test data is: JavaCharStream.hexval('b');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval(0xb);
    }
}
statement is: CharStream.hexval(0xb), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval(0xb) target is: CharStream method is: hexval(int)
Matched Method is: hexval(C)I
TestCase is: int _int = 11;
JavaCharStream.hexval((char) _int);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('c')
test data is: JavaCharStream.hexval('c');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Unicode character "poop }}
    }
}
statement is: // Unicode character "poop }}, class spoon.support.reflect.code.CtCommentImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('d')
test data is: JavaCharStream.hexval('d');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for JavaCharStream.hexval() method
        int[] hexVals = new int[]{ 0x12, 0x34, 0x56, 0x78, 0x9a };
        String[] hexStrs = new String[]{ "12", "34", "56", "78", "9a" };
    }
}
statement is: // Improved test data for JavaCharStream.hexval() method
int[] hexVals = new int[]{ 0x12, 0x34, 0x56, 0x78, 0x9a }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] hexStrs = new String[]{ "12", "34", "56", "78", "9a" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('e')
test data is: JavaCharStream.hexval('e');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('F');// equivalent to JavaCharStream.hexval(15)

        JavaCharStream.hexval('A');// equivalent to JavaCharStream.hexval(10)

        JavaCharStream.hexval('f');// equivalent to JavaCharStream.hexval(15)

        JavaCharStream.hexval('a');// equivalent to JavaCharStream.hexval(10 }}

    }
}
statement is: CharStream.hexval('F')// equivalent to JavaCharStream.hexval(15)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('F')// equivalent to JavaCharStream.hexval(15)
 target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('A')// equivalent to JavaCharStream.hexval(10)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('A')// equivalent to JavaCharStream.hexval(10)
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('f')// equivalent to JavaCharStream.hexval(15)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('f')// equivalent to JavaCharStream.hexval(15)
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
statement is: JavaCharStream.hexval('a')// equivalent to JavaCharStream.hexval(10 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaCharStream.hexval('a')// equivalent to JavaCharStream.hexval(10 }}
 target is: JavaCharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'F';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'f';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('f')
test data is: JavaCharStream.hexval('f');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('A');
    }
}
statement is: CharStream.hexval('A'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('A') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = 'A';
JavaCharStream.hexval(_char);

statement is: hexval(C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hexval = JavaCharStream.hexval('(')
test data is: JavaCharStream.hexval('(');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream.hexval('(');
    }
}
statement is: CharStream.hexval('('), class spoon.support.reflect.code.CtInvocationImpl
invocation is: CharStream.hexval('(') target is: CharStream method is: hexval(char)
Matched Method is: hexval(C)I
TestCase is: char _char = '(';
JavaCharStream.hexval(_char);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: AdjustBuffSize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.AdjustBuffSize()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.AdjustBuffSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(1024);
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 8 * 1024);
        javaCharStream.AdjustBuffSize(16 * 1024);
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 8 * 1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.AdjustBuffSize(16 * 1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.AdjustBuffSize(16 * 1024) target is: javaCharStream method is: AdjustBuffSize(int)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: FillBuff()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.FillBuff()
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.FillBuff();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string that contains the letter 'e'.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.FillBuff();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string that contains the letter 'e'."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.FillBuff(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.FillBuff() target is: javaCharStream method is: FillBuff()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: FillBuff()V
TestCase is: String string = "This is a test string that contains the letter 'e'.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).FillBuff();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 64)
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: getColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int column = javaCharStream.getColumn()
test data is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 64);
javaCharStream.BeginToken();
javaCharStream.getColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 64);
        javaCharStream.BeginToken();
        javaCharStream.getColumn();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 64), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: BeginToken()C
statement is: javaCharStream.getColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getColumn() target is: javaCharStream method is: getColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: getColumn()I
TestCase is: String string = "The quick brown fox jumps over the lazy dog";
StringReader stringReader = new StringReader(string);
int _int = 20;
int _int = 64;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, 64);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getColumn();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 21, 21)
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup(1)
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
javaCharStream.backup(1);
javaCharStream.BeginToken();
javaCharStream.readChar();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
        javaCharStream.backup(1);
        javaCharStream.BeginToken();
        javaCharStream.readChar();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(1) target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: backup(I)V
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: BeginToken()C
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: readChar()C
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 21;
int _int = 21;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
int _int = 1;
((JavaCharStream) _int).backup(_int);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).readChar();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iS)X1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@eccc28cd type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.available = (-1075)
statement is: AdjustBuffSize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.AdjustBuffSize()
test data is: StringReader stringReader = new StringReader("iS)X1");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.available = (-1075);
javaCharStream.AdjustBuffSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test sentence.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.available = 14;
        javaCharStream.AdjustBuffSize();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.available = 14, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.AdjustBuffSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.AdjustBuffSize() target is: javaCharStream method is: AdjustBuffSize()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: AdjustBuffSize()V
TestCase is: String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).AdjustBuffSize();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24))
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b7eb637 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.available = 3569
statement is: AdjustBuffSize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.AdjustBuffSize()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.available = 3569;
javaCharStream.AdjustBuffSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -24, -24);
        javaCharStream.available = 3569;
        javaCharStream.AdjustBuffSize();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -24, -24), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.available = 3569, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.AdjustBuffSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.AdjustBuffSize() target is: javaCharStream method is: AdjustBuffSize()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: AdjustBuffSize()V
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.AdjustBuffSize();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Invalid escape character at line ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@6138ad4e type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: javaCharStream.prevCharIsLF = true
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
test data is: StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsLF = true;
javaCharStream.readChar();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Invalid escape character at line 5");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.prevCharIsLF = true;
        javaCharStream.readChar();
    }
}
statement is: StringReader stringReader = new StringReader("Invalid escape character at line 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.prevCharIsLF = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
TestCase is: String string = "Invalid escape character at line 5";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Iqvalid escae character at ine ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@d9d5423c type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: javaCharStream.prevCharIsCR = true
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
test data is: StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsCR = true;
javaCharStream.readChar();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.prevCharIsCR = false;
        javaCharStream.readChar();
    }
}
statement is: StringReader stringReader = new StringReader("Iqvalid escae character at ine "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.prevCharIsCR = false, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
TestCase is: String string = "Iqvalid escae character at ine ";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: org.evosuite.testcase.statements.ArrayStatement@2419348 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e87e42d2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)12
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0, arg1)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)12;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
javaCharStream.readChar();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        byte[] byteArray = new byte[5];
        byteArray[0] = ((byte) ('A'));// use a more descriptive value for the first byte

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
        JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
        javaCharStream.readChar();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) ('A'))// use a more descriptive value for the first byte
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('A')) Ct is: byteArray[0] = ((byte) ('A'))// use a more descriptive value for the first byte

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V callee: VariableReference: Statement 5, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 6
Matched Method is: readChar()C
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
char _char = 'A';
byteArray[0] = (byte) _char;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
((JavaCharStream) sequenceInputStream).readChar();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 37, 37)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("g&OC^{H|:wE(^")
statement is: Done()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.Done()
statement is: ReInit(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((Reader) arg0, 92, 74, (-1225))
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("g&OC^{H|:wE(^");
javaCharStream.Done();
javaCharStream.ReInit((Reader) stringReader, 92, 74, (-1225));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        javaCharStream.Done();
        javaCharStream.ReInit(((Reader) (stringReader)), 92, 74, -1225);
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.Done(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.Done() target is: javaCharStream method is: Done()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: Done()V
statement is: javaCharStream.ReInit(((Reader) (stringReader)), 92, 74, -1225), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((Reader) (stringReader)), 92, 74, -1225) target is: javaCharStream method is: ReInit(Reader,int,int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: ReInit(Ljava/io/Reader;III)V
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 37;
int _int = 37;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
((JavaCharStream) _int).Done();
int _int = 92;
int _int = 74;
int _int = null;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int, _int);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-13), (-13))
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup(1941)
statement is: GetImage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String GetImage = javaCharStream.GetImage()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.GetImage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 13, 13);// replace -13 with 13

        javaCharStream.backup(987654321);// replace 1941 with a large number

        String expected = "This is a test string.";
        String actual = javaCharStream.GetImage();
        assertEquals(expected, actual);
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 13, 13)// replace -13 with 13
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(987654321)// replace 1941 with a large number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(987654321)// replace 1941 with a large number
 target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: backup(I)V
statement is: String expected = "This is a test string.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actual = javaCharStream.GetImage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.GetImage() target is: javaCharStream method is: GetImage()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: GetImage()Ljava/lang/String;
statement is: assertEquals(expected, actual), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expected, actual) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "This is a test string."
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 13;
int _int = 13;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
int _int = 987654321;
((JavaCharStream) _int).backup(_int);
String string = "This is a test string.";
((JavaCharStream) _int).GetImage();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("VF);\"`gbV^=7")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn(90, 90)
statement is: getBeginColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginColumn = javaCharStream.getBeginColumn()
test data is: StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A string with some text");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.adjustBeginLineColumn(90, 90);
        javaCharStream.getBeginColumn();
    }
}
statement is: StringReader stringReader = new StringReader("A string with some text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(90, 90), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(90, 90) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: adjustBeginLineColumn(II)V
statement is: javaCharStream.getBeginColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginColumn() target is: javaCharStream method is: getBeginColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getBeginColumn()I
TestCase is: String string = "A string with some text";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = 90;
int _int = 90;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);
((JavaCharStream) stringReader).getBeginColumn();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#Np%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn(1617, (byte)82)
test data is: StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.adjustBeginLineColumn(1617, (byte)82);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("#Np%");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
        javaCharStream.adjustBeginLineColumn(1617, ((byte) (82)));
    }
}
statement is: StringReader stringReader = new StringReader("#Np%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
statement is: javaCharStream.adjustBeginLineColumn(1617, ((byte) (82))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(1617, ((byte) (82))) target is: javaCharStream method is: adjustBeginLineColumn(int,byte)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: adjustBeginLineColumn(II)V
TestCase is: String string = "#Np%";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
int _int = 1617;
int _int = 82;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);

statement is: java.io.PipedOutputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedOutputStream
statement code is: PipedOutputStream pipedOutputStream = new PipedOutputStream()
statement is: java.io.PipedInputStream(Ljava/io/PipedOutputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream(arg0, 11)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 11, 11, 11)
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn(0, 11)
test data is: PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 11);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 11, 11, 11);
javaCharStream.adjustBeginLineColumn(0, 11);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedOutputStream pipedOutputStream = new PipedOutputStream();
        PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 1024);// Changed from 11 to a more representative value

        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 1024, 1024);// Changed from 11 to a more representative value

        javaCharStream.adjustBeginLineColumn(0, 1024);// Changed from 11 to a more representative value }}

    }
}
statement is: PipedOutputStream pipedOutputStream = new PipedOutputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 1024)// Changed from 11 to a more representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 1024, 1024)// Changed from 11 to a more representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(0, 1024)// Changed from 11 to a more representative value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(0, 1024)// Changed from 11 to a more representative value }}
 target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 6
Matched Method is: adjustBeginLineColumn(II)V
TestCase is: PipedOutputStream pipedOutputStream = new PipedOutputStream();
int _int = 1024;
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, _int);
int _int = 1024;
int _int = 1024;
int _int = 1024;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int, _int);
int _int = 0;
int _int = 1024;
((JavaCharStream) pipedInputStream).adjustBeginLineColumn(_int, _int);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24))
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn((-24), (-24))
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn((-1), (-2586))
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.adjustBeginLineColumn((-1), (-2586));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 4, 3);
        javaCharStream.adjustBeginLineColumn(10, 15);
        javaCharStream.adjustBeginLineColumn(-2, -3);
        // Tests that the adjustBeginLineColumn() method correctly sets the beginLine and beginColumn parameters based on the given values. }}
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 4, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(10, 15), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(10, 15) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: adjustBeginLineColumn(II)V
statement is: javaCharStream.adjustBeginLineColumn(-2, -3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(-2, -3) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: adjustBeginLineColumn(II)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: // Tests that the adjustBeginLineColumn() method correctly sets the beginLine and beginColumn parameters based on the given values. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 4;
int _int = 3;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
int _int = 10;
int _int = 15;
((JavaCharStream) _int).adjustBeginLineColumn(_int, _int);
int _int = null;
int _int = null;
((JavaCharStream) _int).adjustBeginLineColumn(_int, _int);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2), (-2))
statement is: ReInit(Ljava/io/InputStream;III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((InputStream) arg0, (-2), (-469), (-2))
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-2), (-2));
javaCharStream.ReInit((InputStream) pipedInputStream, (-2), (-469), (-2));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new File("test.txt"));
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -2, -2);
        javaCharStream.ReInit(((InputStream) (pipedInputStream)), -2, -469, -2);
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new File("test.txt")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -2, -2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V
statement is: javaCharStream.ReInit(((InputStream) (pipedInputStream)), -2, -469, -2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((InputStream) (pipedInputStream)), -2, -469, -2) target is: javaCharStream method is: ReInit(InputStream,int,int,int)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
test data is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("-34 q|C;CyiMPvkr");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
    }
}
statement is: StringReader stringReader = new StringReader("-34 q|C;CyiMPvkr"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
TestCase is: String string = "-34 q|C;CyiMPvkr";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]rbXHa-b;")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup((-2668))
test data is: StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup((-2668));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("]rbXHa-b;");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.backup(-2668);
        // Improved test data:
        StringReader stringReader = new StringReader("]rbXHa-b;");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.backup(-1000);
    }
}
statement is: StringReader stringReader = new StringReader("]rbXHa-b;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(-2668), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(-2668) target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: backup(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data:
StringReader stringReader = new StringReader("]rbXHa-b;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(-1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(-1000) target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 7
Matched Method is: backup(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "]rbXHa-b;";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = null;
((JavaCharStream) stringReader).backup(_int);
String string = "]rbXHa-b;";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = null;
((JavaCharStream) stringReader).backup(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3458, 102, 102)
statement is: ReInit(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((Reader) arg0, 7, 2277, 102)
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
javaCharStream.ReInit((Reader) stringReader, 7, 2277, 102);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample text for testing JavaCharStream");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
        javaCharStream.ReInit(((Reader) (stringReader)), 7, 2277, 102);
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample text for testing JavaCharStream"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReInit(((Reader) (stringReader)), 7, 2277, 102), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((Reader) (stringReader)), 7, 2277, 102) target is: javaCharStream method is: ReInit(Reader,int,int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 5
Matched Method is: ReInit(Ljava/io/Reader;III)V
TestCase is: String string = "This is a sample text for testing JavaCharStream";
StringReader stringReader = new StringReader(string);
int _int = 3458;
int _int = 102;
int _int = 102;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, _int);
int _int = 7;
int _int = 2277;
int _int = 102;
((JavaCharStream) stringReader).ReInit((Reader) stringReader, _int, _int, _int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 78)
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
test data is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.readChar();
javaCharStream.BeginToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 78);
        javaCharStream.BeginToken();
        javaCharStream.readChar();
        javaCharStream.BeginToken();
    }
}
statement is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 78), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: BeginToken()C
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: readChar()C
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: BeginToken()C
TestCase is: String string = "9 q|C;CyiMPvkr";
StringReader stringReader = new StringReader(string);
int _int = 20;
int _int = 78;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).BeginToken();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Invalid escape character at line ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 7, 7, 117)
statement is: ReInit(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((Reader) arg0, (-1639), 0, 0)
statement is: GetImage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String GetImage = javaCharStream.GetImage()
test data is: StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
javaCharStream.ReInit((Reader) stringReader, (-1639), 0, 0);
javaCharStream.GetImage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Invalid escape character at line 23");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
        javaCharStream.ReInit(((Reader) (stringReader)), -1639, 0, 0);
        javaCharStream.GetImage();
    }
}
statement is: StringReader stringReader = new StringReader("Invalid escape character at line 23"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReInit(((Reader) (stringReader)), -1639, 0, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((Reader) (stringReader)), -1639, 0, 0) target is: javaCharStream method is: ReInit(Reader,int,int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 5
Matched Method is: ReInit(Ljava/io/Reader;III)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: javaCharStream.GetImage(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.GetImage() target is: javaCharStream method is: GetImage()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 5
Matched Method is: GetImage()Ljava/lang/String;
TestCase is: String string = "Invalid escape character at line 23";
StringReader stringReader = new StringReader(string);
int _int = 7;
int _int = 7;
int _int = 117;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, _int);
int _int = 0;
int _int = 0;
int _int = null;
((JavaCharStream) stringReader).ReInit((Reader) stringReader, _int, _int, _int);
((JavaCharStream) stringReader).GetImage();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("EqSs")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: GetSuffix(I)[C type is: class org.evosuite.testcase.statements.MethodStatement return type class [C
statement code is: char[] GetSuffix = javaCharStream.GetSuffix(0)
test data is: StringReader stringReader = new StringReader("EqSs");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.GetSuffix(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test String for the JavaCharStream");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.GetSuffix(5);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test String for the JavaCharStream"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.GetSuffix(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.GetSuffix(5) target is: javaCharStream method is: GetSuffix(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: GetSuffix(I)[C
TestCase is: String string = "This is a test String for the JavaCharStream";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = 5;
((JavaCharStream) stringReader).GetSuffix(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@13eeb933 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c28afb84 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)112
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 5, 893, (-1))
statement is: ReadByte()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char ReadByte = javaCharStream.ReadByte()
test data is: byte[] byteArray = new byte[6];
byteArray[0] = (byte)112;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 893, (-1));
javaCharStream.ReadByte();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[6];
        byteArray[0] = ((byte) (48));// ASCII value of '0'

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
        JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 1234, -1);// The second parameter is the length of the input stream, and the third parameter is the encoding, which is set to -1 in this case.

        javaCharStream.ReadByte();
    }
}
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (48))// ASCII value of '0'
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (48)) Ct is: byteArray[0] = ((byte) (48))// ASCII value of '0'

target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 1234, -1)// The second parameter is the length of the input stream, and the third parameter is the encoding, which is set to -1 in this case.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReadByte(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReadByte() target is: javaCharStream method is: ReadByte()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 7
Matched Method is: ReadByte()C
TestCase is: byte[] byteArray = new byte[6];
int _int = 48;
byteArray[0] = (byte) _int;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
int _int = 5;
int _int = 1234;
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, _int, _int, (-1));
((JavaCharStream) bufferedInputStream).ReadByte();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, 0)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X")
statement is: ReInit(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((Reader) arg0, 99, 0)
statement is: ReadByte()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char ReadByte = javaCharStream.ReadByte()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X");
javaCharStream.ReInit((Reader) stringReader, 99, 0);
javaCharStream.ReadByte();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello World!".getBytes()));
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
        StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X");
        javaCharStream.ReInit(((Reader) (stringReader)), 99, 0);
        javaCharStream.ReadByte();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("Hello World!".getBytes())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.ReInit(((Reader) (stringReader)), 99, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((Reader) (stringReader)), 99, 0) target is: javaCharStream method is: ReInit(Reader,int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: ReInit(Ljava/io/Reader;II)V
statement is: javaCharStream.ReadByte(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReadByte() target is: javaCharStream method is: ReadByte()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: ReadByte()C
TestCase is: int _int = 0;
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) _int, _int, 0);
String string = "4DppZva5nb%W8n?@X";
StringReader stringReader = new StringReader(string);
int _int = 99;
int _int = 0;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int);
((JavaCharStream) _int).ReadByte();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#Np%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: ReadByte()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char ReadByte = javaCharStream.ReadByte()
test data is: StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReadByte();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world!");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readByte();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readByte(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readByte() target is: javaCharStream method is: readByte()
TestCase is: String string = "Hello, world!";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-1183), 12)
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn((-571), (-1405))
statement is: getBeginColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginColumn = javaCharStream.getBeginColumn()
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-1183), 12);
javaCharStream.adjustBeginLineColumn((-571), (-1405));
javaCharStream.getBeginColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);
        javaCharStream.adjustBeginLineColumn(0, 0);
        javaCharStream.getBeginColumn();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(0, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(0, 0) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: adjustBeginLineColumn(II)V
statement is: javaCharStream.getBeginColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginColumn() target is: javaCharStream method is: getBeginColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: getBeginColumn()I
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
int _int = 0;
int _int = 12;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
int _int = 0;
int _int = 0;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);
((JavaCharStream) stringReader).getBeginColumn();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24))
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn((-24), (-24))
statement is: getBeginLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginLine = javaCharStream.getBeginLine()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.getBeginLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
        javaCharStream.adjustBeginLineColumn(10, 20);
        javaCharStream.getBeginLine();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(10, 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(10, 20) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: adjustBeginLineColumn(II)V
statement is: javaCharStream.getBeginLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginLine() target is: javaCharStream method is: getBeginLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: getBeginLine()I
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 0;
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
int _int = 10;
int _int = 20;
((JavaCharStream) _int).adjustBeginLineColumn(_int, _int);
((JavaCharStream) _int).getBeginLine();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("VF);\"`gbV^=7")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: adjustBeginLineColumn(II)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.adjustBeginLineColumn(90, 90)
statement is: getBeginLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int beginLine = javaCharStream.getBeginLine()
test data is: StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample text");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.adjustBeginLineColumn(90, 90);
        javaCharStream.getBeginLine();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.adjustBeginLineColumn(90, 90), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.adjustBeginLineColumn(90, 90) target is: javaCharStream method is: adjustBeginLineColumn(int,int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: adjustBeginLineColumn(II)V
statement is: javaCharStream.getBeginLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getBeginLine() target is: javaCharStream method is: getBeginLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getBeginLine()I
TestCase is: String string = "This is a sample text";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = 90;
int _int = 90;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);
((JavaCharStream) stringReader).getBeginLine();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Iqvalid escae character at ine ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: getColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int column = javaCharStream.getColumn()
test data is: StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
        javaCharStream.getColumn();
        // Improved test data
        StringReader stringReader = new StringReader("Invalid escape character at index 5");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
        javaCharStream.getColumn();
    }
}
statement is: StringReader stringReader = new StringReader("Iqvalid escae character at ine "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
statement is: javaCharStream.getColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getColumn() target is: javaCharStream method is: getColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getColumn()I
statement is: // Improved test data
StringReader stringReader = new StringReader("Invalid escape character at index 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 7
Matched Method is: readChar()C
statement is: javaCharStream.getColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getColumn() target is: javaCharStream method is: getColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 7
Matched Method is: getColumn()I
TestCase is: String string = "Iqvalid escae character at ine ";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();
String string = "Invalid escape character at index 5";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("iS)41")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup(90)
statement is: getColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int column = javaCharStream.getColumn()
test data is: StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup(90);
javaCharStream.getColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("iS)41");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.backup(90);
        javaCharStream.getColumn();
    }
}
statement is: StringReader stringReader = new StringReader("iS)41"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(90), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(90) target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: backup(I)V
statement is: javaCharStream.getColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getColumn() target is: javaCharStream method is: getColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getColumn()I
TestCase is: String string = "iS)41";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = 90;
((JavaCharStream) stringReader).backup(_int);
((JavaCharStream) stringReader).getColumn();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 78)
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: getEndColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endColumn = javaCharStream.getEndColumn()
test data is: StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.getEndColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input stream for testing the JavaCharStream class. It contains a mix of letters, numbers, and special characters.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 78);
        javaCharStream.BeginToken();
        javaCharStream.getEndColumn();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input stream for testing the JavaCharStream class. It contains a mix of letters, numbers, and special characters."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, -4, 78), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: BeginToken()C
statement is: javaCharStream.getEndColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndColumn() target is: javaCharStream method is: getEndColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 4
Matched Method is: getEndColumn()I
TestCase is: String string = "This is a sample input stream for testing the JavaCharStream class. It contains a mix of letters, numbers, and special characters.";
StringReader stringReader = new StringReader(string);
int _int = 20;
int _int = 78;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getEndColumn();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 56, 66)
statement is: org.evosuite.testcase.statements.AssignmentStatement@39bdad16 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.maxNextCharInd = 56
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: getEndColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endColumn = javaCharStream.getEndColumn()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 66);
        javaCharStream.maxNextCharInd = 56;
        javaCharStream.BeginToken();
        javaCharStream.getEndColumn();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 66), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.maxNextCharInd = 56, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: BeginToken()C
statement is: javaCharStream.getEndColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndColumn() target is: javaCharStream method is: getEndColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 3
Matched Method is: getEndColumn()I
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 1024;
int _int = 66;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, _int, _int);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).getEndColumn();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup(1853)
statement is: getEndColumn()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endColumn = javaCharStream.getEndColumn()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
        javaCharStream.backup(1853);// Using a more descriptive value for the position, e.g., 1000

        javaCharStream.getEndColumn();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(1853)// Using a more descriptive value for the position, e.g., 1000
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(1853)// Using a more descriptive value for the position, e.g., 1000
 target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: backup(I)V
statement is: javaCharStream.getEndColumn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndColumn() target is: javaCharStream method is: getEndColumn()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: getEndColumn()I
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
int _int = 1853;
javaCharStream.backup(_int);
javaCharStream.getEndColumn();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-13), (-13))
statement is: backup(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.backup(1941)
statement is: UpdateLineColumn(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.UpdateLineColumn('+')
statement is: getEndLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endLine = javaCharStream.getEndLine()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -13, -13);
        javaCharStream.backup(1941);
        javaCharStream.UpdateLineColumn('+');
        javaCharStream.getEndLine();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, -13, -13), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.backup(1941), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.backup(1941) target is: javaCharStream method is: backup(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: backup(I)V
statement is: javaCharStream.UpdateLineColumn('+'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.UpdateLineColumn('+') target is: javaCharStream method is: UpdateLineColumn(char)
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: UpdateLineColumn(C)V
statement is: javaCharStream.getEndLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndLine() target is: javaCharStream method is: getEndLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 1
Matched Method is: getEndLine()I
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
int _int = 1941;
javaCharStream.backup(_int);
char _char = '+';
javaCharStream.UpdateLineColumn(_char);
javaCharStream.getEndLine();

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 56, 66)
statement is: org.evosuite.testcase.statements.AssignmentStatement@7dacde85 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.maxNextCharInd = 56
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: getEndLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endLine = javaCharStream.getEndLine()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("This is a sample input stream".getBytes()));
        JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
        javaCharStream.maxNextCharInd = 56;
        javaCharStream.BeginToken();
        javaCharStream.getEndLine();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("This is a sample input stream".getBytes())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.maxNextCharInd = 56, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: BeginToken()C
statement is: javaCharStream.getEndLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndLine() target is: javaCharStream method is: getEndLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;II)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getEndLine()I
TestCase is: int _int = 56;
int _int = 66;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) _int, _int, 66);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).getEndLine();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("'Bl/GLbd+")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: ExpandBuff(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ExpandBuff(true)
statement is: getEndLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endLine = javaCharStream.getEndLine()
test data is: StringReader stringReader = new StringReader("'Bl/GLbd+");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.ExpandBuff(true);
javaCharStream.getEndLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
        int endLine = 5;
        javaCharStream.getEndLine();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
statement is: int endLine = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaCharStream.getEndLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getEndLine() target is: javaCharStream method is: getEndLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getEndLine()I
* this is vulnerable: int _int = 5
TestCase is: String string = "Hello World";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
int _int = 5;
((JavaCharStream) stringReader).getEndLine();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("cPALTVKkcPX,m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: getLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int line = javaCharStream.getLine()
test data is: StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("cPALTVKkcPX,m");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.readChar();
        javaCharStream.getLine();
    }
}
statement is: StringReader stringReader = new StringReader("cPALTVKkcPX,m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
statement is: javaCharStream.getLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getLine() target is: javaCharStream method is: getLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getLine()I
TestCase is: String string = "cPALTVKkcPX,m";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Invalid escape character at line ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@a25fcb81 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.inBuf = 11
statement is: readChar()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char readChar = javaCharStream.readChar()
statement is: getLine()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int line = javaCharStream.getLine()
test data is: StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.inBuf = 11;
javaCharStream.readChar();
javaCharStream.getLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Invalid escape character at line ");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        javaCharStream.inBuf = 11;
        javaCharStream.readChar();
        javaCharStream.getLine();
    }
}
statement is: StringReader stringReader = new StringReader("Invalid escape character at line "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.inBuf = 11, class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaCharStream.readChar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.readChar() target is: javaCharStream method is: readChar()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: readChar()C
statement is: javaCharStream.getLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.getLine() target is: javaCharStream method is: getLine()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: getLine()I
TestCase is: String string = "Invalid escape character at line ";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53)
statement is: GetSuffix(I)[C type is: class org.evosuite.testcase.statements.MethodStatement return type class [C
statement code is: char[] GetSuffix = javaCharStream.GetSuffix(53)
test data is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53);
javaCharStream.GetSuffix(53);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream("This is a sample string.", 53, 53);
        javaCharStream.GetSuffix(53);
    }
}
statement is: CharStream javaCharStream = new JavaCharStream("This is a sample string.", 53, 53), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.GetSuffix(53), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.GetSuffix(53) target is: javaCharStream method is: GetSuffix(int)
TestCase is: String string = "This is a sample string.";
int _int = 53;
int _int = 53;
JavaCharStream javaCharStream = new JavaCharStream((Reader) string, _int, _int);

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: ReInit(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.ReInit((InputStream) arg0)
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
javaCharStream.ReInit((InputStream) mockFileInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("example.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
        javaCharStream.ReInit(((InputStream) (mockFileInputStream)));
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("example.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V
statement is: javaCharStream.ReInit(((InputStream) (mockFileInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.ReInit(((InputStream) (mockFileInputStream))) target is: javaCharStream method is: ReInit(InputStream)
* test suite isTestSuite: 185
Test 0: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, (int) (byte) (-114), (int) (byte)86);
Test 1: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReInit((Reader) stringReader);
Test 2: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginColumn();
Test 3: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginLine();
Test 4: 
JavaCharStream.hexval('0');
Test 5: 
JavaCharStream.hexval('A');
Test 6: 
JavaCharStream.hexval('1');
Test 7: 
JavaCharStream.hexval('2');
Test 8: 
JavaCharStream.hexval('3');
Test 9: 
JavaCharStream.hexval('4');
Test 10: 
JavaCharStream.hexval('5');
Test 11: 
JavaCharStream.hexval('6');
Test 12: 
JavaCharStream.hexval('7');
Test 13: 
JavaCharStream.hexval('8');
Test 14: 
JavaCharStream.hexval('9');
Test 15: 
try { 
  JavaCharStream.hexval(':');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 16: 
try { 
  JavaCharStream.hexval(';');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 17: 
try { 
  JavaCharStream.hexval('<');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 18: 
try { 
  JavaCharStream.hexval('=');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 19: 
try { 
  JavaCharStream.hexval('>');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 20: 
try { 
  JavaCharStream.hexval('?');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 21: 
try { 
  JavaCharStream.hexval('@');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 22: 
JavaCharStream.hexval('B');
Test 23: 
JavaCharStream.hexval('C');
Test 24: 
JavaCharStream.hexval('D');
Test 25: 
JavaCharStream.hexval('E');
Test 26: 
JavaCharStream.hexval('F');
Test 27: 
try { 
  JavaCharStream.hexval('G');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 28: 
try { 
  JavaCharStream.hexval('H');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 29: 
try { 
  JavaCharStream.hexval('I');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 30: 
try { 
  JavaCharStream.hexval('J');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 31: 
try { 
  JavaCharStream.hexval('K');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 32: 
try { 
  JavaCharStream.hexval('L');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 33: 
try { 
  JavaCharStream.hexval('M');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 34: 
try { 
  JavaCharStream.hexval('N');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 35: 
try { 
  JavaCharStream.hexval('O');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 36: 
try { 
  JavaCharStream.hexval('P');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 37: 
try { 
  JavaCharStream.hexval('Q');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 38: 
try { 
  JavaCharStream.hexval('R');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 39: 
try { 
  JavaCharStream.hexval('S');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 40: 
try { 
  JavaCharStream.hexval('T');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 41: 
try { 
  JavaCharStream.hexval('U');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 42: 
try { 
  JavaCharStream.hexval('V');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 43: 
try { 
  JavaCharStream.hexval('W');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 44: 
try { 
  JavaCharStream.hexval('X');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 45: 
try { 
  JavaCharStream.hexval('Y');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 46: 
try { 
  JavaCharStream.hexval('Z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 47: 
try { 
  JavaCharStream.hexval('[');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 48: 
try { 
  JavaCharStream.hexval('\\');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 49: 
try { 
  JavaCharStream.hexval(']');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 50: 
try { 
  JavaCharStream.hexval('^');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 51: 
try { 
  JavaCharStream.hexval('_');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 52: 
try { 
  JavaCharStream.hexval('`');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 53: 
JavaCharStream.hexval('a');
Test 54: 
JavaCharStream.hexval('b');
Test 55: 
JavaCharStream.hexval('c');
Test 56: 
JavaCharStream.hexval('d');
Test 57: 
JavaCharStream.hexval('e');
Test 58: 
JavaCharStream.hexval('f');
Test 59: 
try { 
  JavaCharStream.hexval('(');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 60: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.AdjustBuffSize();
Test 61: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
try { 
  javaCharStream.FillBuff();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 62: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 64);
javaCharStream.BeginToken();
javaCharStream.getColumn();
Test 63: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
javaCharStream.backup(1);
javaCharStream.BeginToken();
try { 
  javaCharStream.readChar();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // Pipe not connected
   //
   verifyException("java.io.PipedInputStream", e);
}

Test 64: 
StringReader stringReader = new StringReader("iS)X1");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.available = (-1075);
// Undeclared exception!
try { 
  javaCharStream.AdjustBuffSize();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 65: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.available = 3569;
javaCharStream.AdjustBuffSize();
Test 66: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsLF = true;
javaCharStream.readChar();
Test 67: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsCR = true;
javaCharStream.readChar();
Test 68: 
PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)12;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
javaCharStream.readChar();
Test 69: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("g&OC^{H|:wE(^");
javaCharStream.Done();
// Undeclared exception!
try { 
  javaCharStream.ReInit((Reader) stringReader, 92, 74, (-1225));
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 70: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.GetImage();
Test 71: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginColumn();
Test 72: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.adjustBeginLineColumn(1617, (byte)82);
Test 73: 
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 11);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 11, 11, 11);
javaCharStream.adjustBeginLineColumn(0, 11);
Test 74: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.adjustBeginLineColumn((-1), (-2586));
Test 75: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-2), (-2));
javaCharStream.ReInit((InputStream) pipedInputStream, (-2), (-469), (-2));
Test 76: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
Test 77: 
StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup((-2668));
Test 78: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
javaCharStream.ReInit((Reader) stringReader, 7, 2277, 102);
Test 79: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.readChar();
javaCharStream.BeginToken();
Test 80: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
javaCharStream.ReInit((Reader) stringReader, (-1639), 0, 0);
javaCharStream.GetImage();
Test 81: 
StringReader stringReader = new StringReader("EqSs");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.GetSuffix(0);
Test 82: 
byte[] byteArray = new byte[6];
byteArray[0] = (byte)112;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 893, (-1));
javaCharStream.ReadByte();
Test 83: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X");
javaCharStream.ReInit((Reader) stringReader, 99, 0);
javaCharStream.ReadByte();
Test 84: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReadByte();
Test 85: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-1183), 12);
javaCharStream.adjustBeginLineColumn((-571), (-1405));
javaCharStream.getBeginColumn();
Test 86: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.getBeginLine();
Test 87: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginLine();
Test 88: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getColumn();
Test 89: 
StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup(90);
javaCharStream.getColumn();
Test 90: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 91: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 92: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();
Test 93: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();
Test 94: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndLine();
Test 95: 
StringReader stringReader = new StringReader("'Bl/GLbd+");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.ExpandBuff(true);
javaCharStream.getEndLine();
Test 96: 
StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getLine();
Test 97: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.inBuf = 11;
javaCharStream.readChar();
javaCharStream.getLine();
Test 98: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53);
javaCharStream.GetSuffix(53);
Test 99: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
javaCharStream.ReInit((InputStream) mockFileInputStream);
Test 100: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, 86, (int) (Integer) null);

Test 101: 
StringReader stringReader = new StringReader("Hello, world!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).ReInit((Reader) stringReader);

Test 102: 
StringReader stringReader = new StringReader("This is a test string for JavaCharStream.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginColumn();

Test 103: 
StringReader stringReader = new StringReader("This is a sample input for testing.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginLine();

Test 104: 
JavaCharStream.hexval('1');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 105: 
JavaCharStream.hexval('g');

Test 106: 
JavaCharStream.hexval('A');

Test 107: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('z');
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);

Test 108: 
JavaCharStream.hexval('F');

Test 109: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('a');
JavaCharStream.hexval('f');

Test 110: 
JavaCharStream.hexval((char) 7);

Test 111: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);

Test 112: 
JavaCharStream.hexval('A');
JavaCharStream.hexval((char) 65);
int _int = 97;
JavaCharStream.hexval((char) _int);
String string = "61";
JavaCharStream.hexval((char) string);
char _char = 'a';
JavaCharStream.hexval(_char);

Test 113: 
JavaCharStream.hexval('\n');

Test 114: 
JavaCharStream.hexval('F');

Test 115: 

Test 116: 
JavaCharStream.hexval('A');

Test 117: 
JavaCharStream.hexval('A');

Test 118: 
JavaCharStream.hexval('A');

Test 119: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('0');
JavaCharStream.hexval('9');

Test 120: 
JavaCharStream.hexval('1');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 121: 
JavaCharStream.hexval((char) "The letter 'e'");

Test 122: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 123: 
JavaCharStream.hexval(' ');
char _char = '\t';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);
char _char = '\r';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '\u0000';
JavaCharStream.hexval(_char);
char _char = '\uFFFF';
JavaCharStream.hexval(_char);

Test 124: 
JavaCharStream.hexval('G');

Test 125: 
JavaCharStream.hexval('I');

Test 126: 
JavaCharStream.hexval('A');

Test 127: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('B');
JavaCharStream.hexval('C');

Test 128: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('B');
JavaCharStream.hexval('C');

Test 129: 
JavaCharStream.hexval('F');

Test 130: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('a');
JavaCharStream.hexval('5');

Test 131: 
JavaCharStream.hexval('p');

Test 132: 
JavaCharStream.hexval('A');

Test 133: 
JavaCharStream.hexval('0');

Test 134: 
JavaCharStream.hexval('F');

Test 135: 
JavaCharStream.hexval('A');

Test 136: 
JavaCharStream.hexval('F');

Test 137: 
JavaCharStream.hexval('A');

Test 138: 
JavaCharStream.hexval('0');
JavaCharStream.hexval('9');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('a');
JavaCharStream.hexval('f');

Test 139: 
JavaCharStream.hexval('0');
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);

Test 140: 
JavaCharStream.hexval('\\');

Test 141: 

Test 142: 
JavaCharStream.hexval('_');
char _char = 'A';
JavaCharStream.hexval(_char);

Test 143: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '$';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);

Test 144: 
JavaCharStream.hexval((char) 11);

Test 145: 
JavaCharStream.hexval('F');
JavaCharStream.hexval('A');
JavaCharStream.hexval('f');
JavaCharStream.hexval('a');

Test 146: 
JavaCharStream.hexval('A');

Test 147: 
JavaCharStream.hexval('(');

Test 148: 
StringReader stringReader = new StringReader("This is a test string that contains the letter 'e'.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).FillBuff();

Test 149: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 64, 64);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getColumn();

Test 150: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 21;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
((JavaCharStream)21).backup(1);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).readChar();

Test 151: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).AdjustBuffSize();

Test 152: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.AdjustBuffSize();

Test 153: 
StringReader stringReader = new StringReader("Invalid escape character at line 5");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 154: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 155: 
PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 'A';
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
((JavaCharStream) sequenceInputStream).readChar();

Test 156: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 37;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
((JavaCharStream)37).Done();
int _int = 92;
int _int = 74;
int _int = null;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int, _int);

Test 157: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 13;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 13, 13);
((JavaCharStream)13).backup(987654321);
((JavaCharStream) _int).GetImage();

Test 158: 
StringReader stringReader = new StringReader("A string with some text");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).adjustBeginLineColumn(90, 90);
((JavaCharStream) stringReader).getBeginColumn();

Test 159: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
int _int = 1617;
int _int = 82;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);

Test 160: 
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 1024);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 1024, 1024);
((JavaCharStream) pipedInputStream).adjustBeginLineColumn(0, 1024);

Test 161: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 4;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 4, 3);
((JavaCharStream)4).adjustBeginLineColumn(10, 15);
int _int = null;
int _int = null;
((JavaCharStream) _int).adjustBeginLineColumn(_int, _int);

Test 162: 
StringReader stringReader = new StringReader("-34 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 163: 
StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).backup((int) (Integer) null);
String string = "]rbXHa-b;";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = null;
((JavaCharStream) stringReader).backup(_int);

Test 164: 
StringReader stringReader = new StringReader("This is a sample text for testing JavaCharStream");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
((JavaCharStream) stringReader).ReInit((Reader) stringReader, 7, 2277, 102);

Test 165: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 78, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).BeginToken();

Test 166: 
StringReader stringReader = new StringReader("Invalid escape character at line 23");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
((JavaCharStream) stringReader).ReInit((Reader) stringReader, 0, 0, (int) (Integer) null);
((JavaCharStream) stringReader).GetImage();

Test 167: 
StringReader stringReader = new StringReader("This is a test String for the JavaCharStream");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).GetSuffix(5);

Test 168: 
byte[] byteArray = new byte[6];
byteArray[0] = (byte) 48;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 1234, (-1));
((JavaCharStream) bufferedInputStream).ReadByte();

Test 169: 
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 0, 0, 0);
String string = "4DppZva5nb%W8n?@X";
StringReader stringReader = new StringReader(string);
int _int = 99;
int _int = 0;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int);
((JavaCharStream) _int).ReadByte();

Test 170: 
StringReader stringReader = new StringReader("Hello, world!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);

Test 171: 
StringReader stringReader = new StringReader("Hello, World!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);
((JavaCharStream) stringReader).adjustBeginLineColumn(0, 0);
((JavaCharStream) stringReader).getBeginColumn();

Test 172: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
((JavaCharStream)0).adjustBeginLineColumn(10, 20);
((JavaCharStream) _int).getBeginLine();

Test 173: 
StringReader stringReader = new StringReader("This is a sample text");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).adjustBeginLineColumn(90, 90);
((JavaCharStream) stringReader).getBeginLine();

Test 174: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();
String string = "Invalid escape character at index 5";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();

Test 175: 
StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).backup(90);
((JavaCharStream) stringReader).getColumn();

Test 176: 
StringReader stringReader = new StringReader("This is a sample input stream for testing the JavaCharStream class. It contains a mix of letters, numbers, and special characters.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 78, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getEndColumn();

Test 177: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 1024;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 66);
((JavaCharStream)1024).BeginToken();
((JavaCharStream) _int).getEndColumn();

Test 178: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();

Test 179: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();

Test 180: 
int _int = 66;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 56, 66, 66);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).getEndLine();

Test 181: 
StringReader stringReader = new StringReader("Hello World");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getEndLine();

Test 182: 
StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

Test 183: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

Test 184: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) "This is a sample string.", 53, 53);


* Generated after the refinement and before minimization 185 tests with total length 545
* test suite isTestSuite: 185
Test 0: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, (int) (byte) (-114), (int) (byte)86);
Test 1: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReInit((Reader) stringReader);
Test 2: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginColumn();
Test 3: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginLine();
Test 4: 
JavaCharStream.hexval('0');
Test 5: 
JavaCharStream.hexval('A');
Test 6: 
JavaCharStream.hexval('1');
Test 7: 
JavaCharStream.hexval('2');
Test 8: 
JavaCharStream.hexval('3');
Test 9: 
JavaCharStream.hexval('4');
Test 10: 
JavaCharStream.hexval('5');
Test 11: 
JavaCharStream.hexval('6');
Test 12: 
JavaCharStream.hexval('7');
Test 13: 
JavaCharStream.hexval('8');
Test 14: 
JavaCharStream.hexval('9');
Test 15: 
try { 
  JavaCharStream.hexval(':');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 16: 
try { 
  JavaCharStream.hexval(';');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 17: 
try { 
  JavaCharStream.hexval('<');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 18: 
try { 
  JavaCharStream.hexval('=');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 19: 
try { 
  JavaCharStream.hexval('>');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 20: 
try { 
  JavaCharStream.hexval('?');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 21: 
try { 
  JavaCharStream.hexval('@');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 22: 
JavaCharStream.hexval('B');
Test 23: 
JavaCharStream.hexval('C');
Test 24: 
JavaCharStream.hexval('D');
Test 25: 
JavaCharStream.hexval('E');
Test 26: 
JavaCharStream.hexval('F');
Test 27: 
try { 
  JavaCharStream.hexval('G');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 28: 
try { 
  JavaCharStream.hexval('H');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 29: 
try { 
  JavaCharStream.hexval('I');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 30: 
try { 
  JavaCharStream.hexval('J');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 31: 
try { 
  JavaCharStream.hexval('K');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 32: 
try { 
  JavaCharStream.hexval('L');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 33: 
try { 
  JavaCharStream.hexval('M');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 34: 
try { 
  JavaCharStream.hexval('N');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 35: 
try { 
  JavaCharStream.hexval('O');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 36: 
try { 
  JavaCharStream.hexval('P');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 37: 
try { 
  JavaCharStream.hexval('Q');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 38: 
try { 
  JavaCharStream.hexval('R');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 39: 
try { 
  JavaCharStream.hexval('S');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 40: 
try { 
  JavaCharStream.hexval('T');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 41: 
try { 
  JavaCharStream.hexval('U');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 42: 
try { 
  JavaCharStream.hexval('V');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 43: 
try { 
  JavaCharStream.hexval('W');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 44: 
try { 
  JavaCharStream.hexval('X');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 45: 
try { 
  JavaCharStream.hexval('Y');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 46: 
try { 
  JavaCharStream.hexval('Z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 47: 
try { 
  JavaCharStream.hexval('[');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 48: 
try { 
  JavaCharStream.hexval('\\');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 49: 
try { 
  JavaCharStream.hexval(']');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 50: 
try { 
  JavaCharStream.hexval('^');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 51: 
try { 
  JavaCharStream.hexval('_');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 52: 
try { 
  JavaCharStream.hexval('`');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 53: 
JavaCharStream.hexval('a');
Test 54: 
JavaCharStream.hexval('b');
Test 55: 
JavaCharStream.hexval('c');
Test 56: 
JavaCharStream.hexval('d');
Test 57: 
JavaCharStream.hexval('e');
Test 58: 
JavaCharStream.hexval('f');
Test 59: 
try { 
  JavaCharStream.hexval('(');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 60: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.AdjustBuffSize();
Test 61: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
try { 
  javaCharStream.FillBuff();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 62: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 64);
javaCharStream.BeginToken();
javaCharStream.getColumn();
Test 63: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
javaCharStream.backup(1);
javaCharStream.BeginToken();
try { 
  javaCharStream.readChar();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // Pipe not connected
   //
   verifyException("java.io.PipedInputStream", e);
}

Test 64: 
StringReader stringReader = new StringReader("iS)X1");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.available = (-1075);
// Undeclared exception!
try { 
  javaCharStream.AdjustBuffSize();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 65: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.available = 3569;
javaCharStream.AdjustBuffSize();
Test 66: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsLF = true;
javaCharStream.readChar();
Test 67: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsCR = true;
javaCharStream.readChar();
Test 68: 
PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)12;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
javaCharStream.readChar();
Test 69: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("g&OC^{H|:wE(^");
javaCharStream.Done();
// Undeclared exception!
try { 
  javaCharStream.ReInit((Reader) stringReader, 92, 74, (-1225));
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 70: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.GetImage();
Test 71: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginColumn();
Test 72: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.adjustBeginLineColumn(1617, (byte)82);
Test 73: 
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 11);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 11, 11, 11);
javaCharStream.adjustBeginLineColumn(0, 11);
Test 74: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.adjustBeginLineColumn((-1), (-2586));
Test 75: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-2), (-2));
javaCharStream.ReInit((InputStream) pipedInputStream, (-2), (-469), (-2));
Test 76: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
Test 77: 
StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup((-2668));
Test 78: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
javaCharStream.ReInit((Reader) stringReader, 7, 2277, 102);
Test 79: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.readChar();
javaCharStream.BeginToken();
Test 80: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
javaCharStream.ReInit((Reader) stringReader, (-1639), 0, 0);
javaCharStream.GetImage();
Test 81: 
StringReader stringReader = new StringReader("EqSs");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.GetSuffix(0);
Test 82: 
byte[] byteArray = new byte[6];
byteArray[0] = (byte)112;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 893, (-1));
javaCharStream.ReadByte();
Test 83: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X");
javaCharStream.ReInit((Reader) stringReader, 99, 0);
javaCharStream.ReadByte();
Test 84: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReadByte();
Test 85: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-1183), 12);
javaCharStream.adjustBeginLineColumn((-571), (-1405));
javaCharStream.getBeginColumn();
Test 86: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.getBeginLine();
Test 87: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginLine();
Test 88: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getColumn();
Test 89: 
StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup(90);
javaCharStream.getColumn();
Test 90: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 91: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 92: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();
Test 93: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();
Test 94: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndLine();
Test 95: 
StringReader stringReader = new StringReader("'Bl/GLbd+");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.ExpandBuff(true);
javaCharStream.getEndLine();
Test 96: 
StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getLine();
Test 97: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.inBuf = 11;
javaCharStream.readChar();
javaCharStream.getLine();
Test 98: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53);
javaCharStream.GetSuffix(53);
Test 99: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
javaCharStream.ReInit((InputStream) mockFileInputStream);
Test 100: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, 86, (int) (Integer) null);

Test 101: 
StringReader stringReader = new StringReader("Hello, world!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).ReInit((Reader) stringReader);

Test 102: 
StringReader stringReader = new StringReader("This is a test string for JavaCharStream.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginColumn();

Test 103: 
StringReader stringReader = new StringReader("This is a sample input for testing.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).getBeginLine();

Test 104: 
JavaCharStream.hexval('1');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 105: 
JavaCharStream.hexval('g');

Test 106: 
JavaCharStream.hexval('A');

Test 107: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('z');
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);

Test 108: 
JavaCharStream.hexval('F');

Test 109: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('a');
JavaCharStream.hexval('f');

Test 110: 
JavaCharStream.hexval((char) 7);

Test 111: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);

Test 112: 
JavaCharStream.hexval('A');
JavaCharStream.hexval((char) 65);
int _int = 97;
JavaCharStream.hexval((char) _int);
String string = "61";
JavaCharStream.hexval((char) string);
char _char = 'a';
JavaCharStream.hexval(_char);

Test 113: 
JavaCharStream.hexval('\n');

Test 114: 
JavaCharStream.hexval('F');

Test 115: 

Test 116: 
JavaCharStream.hexval('A');

Test 117: 
JavaCharStream.hexval('A');

Test 118: 
JavaCharStream.hexval('A');

Test 119: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('0');
JavaCharStream.hexval('9');

Test 120: 
JavaCharStream.hexval('1');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 121: 
JavaCharStream.hexval((char) "The letter 'e'");

Test 122: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');

Test 123: 
JavaCharStream.hexval(' ');
char _char = '\t';
JavaCharStream.hexval(_char);
char _char = '\n';
JavaCharStream.hexval(_char);
char _char = '\r';
JavaCharStream.hexval(_char);
char _char = 'A';
JavaCharStream.hexval(_char);
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '\u0000';
JavaCharStream.hexval(_char);
char _char = '\uFFFF';
JavaCharStream.hexval(_char);

Test 124: 
JavaCharStream.hexval('G');

Test 125: 
JavaCharStream.hexval('I');

Test 126: 
JavaCharStream.hexval('A');

Test 127: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('B');
JavaCharStream.hexval('C');

Test 128: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('B');
JavaCharStream.hexval('C');

Test 129: 
JavaCharStream.hexval('F');

Test 130: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('a');
JavaCharStream.hexval('5');

Test 131: 
JavaCharStream.hexval('p');

Test 132: 
JavaCharStream.hexval('A');

Test 133: 
JavaCharStream.hexval('0');

Test 134: 
JavaCharStream.hexval('F');

Test 135: 
JavaCharStream.hexval('A');

Test 136: 
JavaCharStream.hexval('F');

Test 137: 
JavaCharStream.hexval('A');

Test 138: 
JavaCharStream.hexval('0');
JavaCharStream.hexval('9');
JavaCharStream.hexval('A');
JavaCharStream.hexval('F');
JavaCharStream.hexval('a');
JavaCharStream.hexval('f');

Test 139: 
JavaCharStream.hexval('0');
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = 'a';
JavaCharStream.hexval(_char);
char _char = 'z';
JavaCharStream.hexval(_char);

Test 140: 
JavaCharStream.hexval('\\');

Test 141: 

Test 142: 
JavaCharStream.hexval('_');
char _char = 'A';
JavaCharStream.hexval(_char);

Test 143: 
JavaCharStream.hexval('A');
JavaCharStream.hexval('Z');
char _char = '0';
JavaCharStream.hexval(_char);
char _char = '9';
JavaCharStream.hexval(_char);
char _char = '$';
JavaCharStream.hexval(_char);
char _char = '@';
JavaCharStream.hexval(_char);
char _char = '!';
JavaCharStream.hexval(_char);

Test 144: 
JavaCharStream.hexval((char) 11);

Test 145: 
JavaCharStream.hexval('F');
JavaCharStream.hexval('A');
JavaCharStream.hexval('f');
JavaCharStream.hexval('a');

Test 146: 
JavaCharStream.hexval('A');

Test 147: 
JavaCharStream.hexval('(');

Test 148: 
StringReader stringReader = new StringReader("This is a test string that contains the letter 'e'.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).FillBuff();

Test 149: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 64, 64);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getColumn();

Test 150: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 21;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
((JavaCharStream)21).backup(1);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).readChar();

Test 151: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).AdjustBuffSize();

Test 152: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.AdjustBuffSize();

Test 153: 
StringReader stringReader = new StringReader("Invalid escape character at line 5");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 154: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 155: 
PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte) 'A';
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
((JavaCharStream) sequenceInputStream).readChar();

Test 156: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 37;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
((JavaCharStream)37).Done();
int _int = 92;
int _int = 74;
int _int = null;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int, _int);

Test 157: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 13;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 13, 13);
((JavaCharStream)13).backup(987654321);
((JavaCharStream) _int).GetImage();

Test 158: 
StringReader stringReader = new StringReader("A string with some text");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).adjustBeginLineColumn(90, 90);
((JavaCharStream) stringReader).getBeginColumn();

Test 159: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
int _int = 1617;
int _int = 82;
((JavaCharStream) stringReader).adjustBeginLineColumn(_int, _int);

Test 160: 
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 1024);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 1024, 1024);
((JavaCharStream) pipedInputStream).adjustBeginLineColumn(0, 1024);

Test 161: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 4;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 4, 3);
((JavaCharStream)4).adjustBeginLineColumn(10, 15);
int _int = null;
int _int = null;
((JavaCharStream) _int).adjustBeginLineColumn(_int, _int);

Test 162: 
StringReader stringReader = new StringReader("-34 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();

Test 163: 
StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).backup((int) (Integer) null);
String string = "]rbXHa-b;";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
int _int = null;
((JavaCharStream) stringReader).backup(_int);

Test 164: 
StringReader stringReader = new StringReader("This is a sample text for testing JavaCharStream");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
((JavaCharStream) stringReader).ReInit((Reader) stringReader, 7, 2277, 102);

Test 165: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 78, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).BeginToken();

Test 166: 
StringReader stringReader = new StringReader("Invalid escape character at line 23");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
((JavaCharStream) stringReader).ReInit((Reader) stringReader, 0, 0, (int) (Integer) null);
((JavaCharStream) stringReader).GetImage();

Test 167: 
StringReader stringReader = new StringReader("This is a test String for the JavaCharStream");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).GetSuffix(5);

Test 168: 
byte[] byteArray = new byte[6];
byteArray[0] = (byte) 48;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 1234, (-1));
((JavaCharStream) bufferedInputStream).ReadByte();

Test 169: 
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 0, 0, 0);
String string = "4DppZva5nb%W8n?@X";
StringReader stringReader = new StringReader(string);
int _int = 99;
int _int = 0;
((JavaCharStream) _int).ReInit((Reader) stringReader, _int, _int);
((JavaCharStream) _int).ReadByte();

Test 170: 
StringReader stringReader = new StringReader("Hello, world!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);

Test 171: 
StringReader stringReader = new StringReader("Hello, World!");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 12);
((JavaCharStream) stringReader).adjustBeginLineColumn(0, 0);
((JavaCharStream) stringReader).getBeginColumn();

Test 172: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 0;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
((JavaCharStream)0).adjustBeginLineColumn(10, 20);
((JavaCharStream) _int).getBeginLine();

Test 173: 
StringReader stringReader = new StringReader("This is a sample text");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).adjustBeginLineColumn(90, 90);
((JavaCharStream) stringReader).getBeginLine();

Test 174: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();
String string = "Invalid escape character at index 5";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getColumn();

Test 175: 
StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).backup(90);
((JavaCharStream) stringReader).getColumn();

Test 176: 
StringReader stringReader = new StringReader("This is a sample input stream for testing the JavaCharStream class. It contains a mix of letters, numbers, and special characters.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, 78, 78);
((JavaCharStream) stringReader).BeginToken();
((JavaCharStream) stringReader).getEndColumn();

Test 177: 
PipedInputStream pipedInputStream = new PipedInputStream();
int _int = 1024;
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 1024, 66);
((JavaCharStream)1024).BeginToken();
((JavaCharStream) _int).getEndColumn();

Test 178: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();

Test 179: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();

Test 180: 
int _int = 66;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 56, 66, 66);
((JavaCharStream) _int).BeginToken();
((JavaCharStream) _int).getEndLine();

Test 181: 
StringReader stringReader = new StringReader("Hello World");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getEndLine();

Test 182: 
StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

Test 183: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
((JavaCharStream) stringReader).readChar();
((JavaCharStream) stringReader).getLine();

Test 184: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) "This is a sample string.", 53, 53);


* Minimizing test suite
* test suite isTestSuite: 101
Test 0: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.AdjustBuffSize();
Test 1: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream);
javaCharStream.ReInit((InputStream) byteArrayInputStream, (int) (byte) (-114), (int) (byte)86);
Test 2: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReInit((Reader) stringReader);
Test 3: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginColumn();
Test 4: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
javaCharStream.ReInit((InputStream) mockFileInputStream);
Test 5: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 0, 0);
StringReader stringReader = new StringReader("4DppZva5nb%W8n?@X");
javaCharStream.ReInit((Reader) stringReader, 99, 0);
javaCharStream.ReadByte();
Test 6: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.getBeginLine();
Test 7: 
JavaCharStream.hexval('0');
Test 8: 
JavaCharStream.hexval('A');
Test 9: 
JavaCharStream.hexval('1');
Test 10: 
JavaCharStream.hexval('2');
Test 11: 
JavaCharStream.hexval('3');
Test 12: 
JavaCharStream.hexval('4');
Test 13: 
JavaCharStream.hexval('5');
Test 14: 
JavaCharStream.hexval('6');
Test 15: 
JavaCharStream.hexval('7');
Test 16: 
JavaCharStream.hexval('8');
Test 17: 
JavaCharStream.hexval('9');
Test 18: 
try { 
  JavaCharStream.hexval(':');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 19: 
try { 
  JavaCharStream.hexval(';');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 20: 
try { 
  JavaCharStream.hexval('<');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 21: 
try { 
  JavaCharStream.hexval('=');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 22: 
try { 
  JavaCharStream.hexval('>');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 23: 
try { 
  JavaCharStream.hexval('?');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 24: 
try { 
  JavaCharStream.hexval('@');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 25: 
JavaCharStream.hexval('B');
Test 26: 
JavaCharStream.hexval('C');
Test 27: 
JavaCharStream.hexval('D');
Test 28: 
JavaCharStream.hexval('E');
Test 29: 
JavaCharStream.hexval('F');
Test 30: 
try { 
  JavaCharStream.hexval('G');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 31: 
try { 
  JavaCharStream.hexval('H');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 32: 
try { 
  JavaCharStream.hexval('I');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 33: 
try { 
  JavaCharStream.hexval('J');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 34: 
try { 
  JavaCharStream.hexval('K');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 35: 
try { 
  JavaCharStream.hexval('L');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 36: 
try { 
  JavaCharStream.hexval('M');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 37: 
try { 
  JavaCharStream.hexval('N');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 38: 
try { 
  JavaCharStream.hexval('O');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 39: 
try { 
  JavaCharStream.hexval('P');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 40: 
try { 
  JavaCharStream.hexval('Q');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 41: 
try { 
  JavaCharStream.hexval('R');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 42: 
try { 
  JavaCharStream.hexval('S');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 43: 
try { 
  JavaCharStream.hexval('T');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 44: 
try { 
  JavaCharStream.hexval('U');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 45: 
try { 
  JavaCharStream.hexval('V');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 46: 
try { 
  JavaCharStream.hexval('W');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 47: 
try { 
  JavaCharStream.hexval('X');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 48: 
try { 
  JavaCharStream.hexval('Y');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 49: 
try { 
  JavaCharStream.hexval('Z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 50: 
try { 
  JavaCharStream.hexval('[');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 51: 
try { 
  JavaCharStream.hexval('\\');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 52: 
try { 
  JavaCharStream.hexval(']');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 53: 
try { 
  JavaCharStream.hexval('^');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 54: 
try { 
  JavaCharStream.hexval('_');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 55: 
try { 
  JavaCharStream.hexval('`');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 56: 
JavaCharStream.hexval('a');
Test 57: 
JavaCharStream.hexval('b');
Test 58: 
JavaCharStream.hexval('c');
Test 59: 
JavaCharStream.hexval('d');
Test 60: 
JavaCharStream.hexval('e');
Test 61: 
JavaCharStream.hexval('f');
Test 62: 
try { 
  JavaCharStream.hexval('z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 63: 
StringReader stringReader = new StringReader("iS)X1");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.available = (-1075);
// Undeclared exception!
try { 
  javaCharStream.AdjustBuffSize();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 64: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
try { 
  javaCharStream.FillBuff();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 65: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.ReadByte();
Test 66: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 67: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 21, 21);
javaCharStream.backup(1);
javaCharStream.BeginToken();
try { 
  javaCharStream.readChar();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // Pipe not connected
   //
   verifyException("java.io.PipedInputStream", e);
}

Test 68: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.available = 3569;
javaCharStream.AdjustBuffSize();
Test 69: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsLF = true;
javaCharStream.readChar();
Test 70: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.prevCharIsCR = true;
javaCharStream.readChar();
Test 71: 
PipedInputStream pipedInputStream = new PipedInputStream();
byte[] byteArray = new byte[5];
byteArray[0] = (byte)12;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, pipedInputStream);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream);
javaCharStream.readChar();
Test 72: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.inBuf = 11;
javaCharStream.readChar();
javaCharStream.getLine();
Test 73: 
StringReader stringReader = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup((-2668));
Test 74: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 37, 37);
StringReader stringReader = new StringReader("g&OC^{H|:wE(^");
javaCharStream.Done();
// Undeclared exception!
try { 
  javaCharStream.ReInit((Reader) stringReader, 92, 74, (-1225));
  fail("Expecting exception: NegativeArraySizeException");

} catch(NegativeArraySizeException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}

Test 75: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
javaCharStream.ReInit((Reader) stringReader, (-1639), 0, 0);
javaCharStream.GetImage();
Test 76: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 7, 7, 117);
javaCharStream.GetImage();
Test 77: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.GetImage();
Test 78: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53);
javaCharStream.GetSuffix(53);
Test 79: 
StringReader stringReader = new StringReader("EqSs");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.GetSuffix(0);
Test 80: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.adjustBeginLineColumn((-1), (-2586));
Test 81: 
StringReader stringReader = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.adjustBeginLineColumn(1617, (byte)82);
Test 82: 
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 11);
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 11, 11, 11);
javaCharStream.adjustBeginLineColumn(0, 11);
Test 83: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-2), (-2));
javaCharStream.ReInit((InputStream) pipedInputStream, (-2), (-469), (-2));
Test 84: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3458, 102, 102);
javaCharStream.ReInit((Reader) stringReader, 7, 2277, 102);
Test 85: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.readChar();
javaCharStream.BeginToken();
Test 86: 
byte[] byteArray = new byte[6];
byteArray[0] = (byte)112;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaCharStream javaCharStream = new JavaCharStream(bufferedInputStream, 5, 893, (-1));
javaCharStream.ReadByte();
Test 87: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-1183), 12);
javaCharStream.adjustBeginLineColumn((-571), (-1405));
javaCharStream.getBeginColumn();
Test 88: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginColumn();
Test 89: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.getBeginLine();
Test 90: 
StringReader stringReader = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.adjustBeginLineColumn(90, 90);
javaCharStream.getBeginLine();
Test 91: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 64);
javaCharStream.BeginToken();
javaCharStream.getColumn();
Test 92: 
StringReader stringReader = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getColumn();
Test 93: 
StringReader stringReader = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.backup(90);
javaCharStream.getColumn();
Test 94: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.getEndColumn();
Test 95: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();
Test 96: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
javaCharStream.getEndLine();
Test 97: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(pipedInputStream, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
javaCharStream.getEndLine();
Test 98: 
StringReader stringReader = new StringReader("'Bl/GLbd+");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.ExpandBuff(true);
javaCharStream.getEndLine();
Test 99: 
StringReader stringReader = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();
javaCharStream.getLine();
Test 100: 
StringReader stringReader = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
javaCharStream.readChar();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 216
* Number of covered goals: 190
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 239
* Number of covered goals: 196
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 89%
* Total number of goals: 36
* Number of covered goals: 32
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 216
* Number of covered goals: 190
* Generated 101 tests with total length 236
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 31%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24));
javaCharStream.AdjustBuffSize();
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testAdjustBuffSizeBufferPositionIsSetToMinusOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.ReInit((Reader) arg0);
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBufPosIsInitiallyAtBeginning
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.getBeginColumn();
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testGetBeginColumnNoComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.getBeginLine();
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testCreateJavaCharStreamWithEmptyStringReader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('0');
assertEquals(0, hexval);


** It was a parseable test case! 
refined test name is: testHexvalMethodWithCharacterZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('A');
assertEquals(10, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfUppercaseLetterA
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('1');
assertEquals(1, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('2');
assertEquals(2, hexval);


** It was a parseable test case! 
refined test name is: testHexvalForSingleCharacterWithValueTwo
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('3');
assertEquals(3, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('4');
assertEquals(4, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfDigitFour
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('5');
assertEquals(5, hexval);


** It was a parseable test case! 
refined test name is: testConvertCharacterToIntegerValueHexVal
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('6');
assertEquals(6, hexval);


** It was a parseable test case! 
refined test name is: testHexvalOfCharacterReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('7');
assertEquals(7, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfSevenShouldBeSeven
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('8');
assertEquals(8, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfChar8
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('9');
assertEquals(9, hexval);


** It was a parseable test case! 
refined test name is: testHexValReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval(':');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidCharacterHexvalThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval(';');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionOnInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('<');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexValThrowsIOExceptionForInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('=');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('>');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('?');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidHexInputThrowsIOExceptionWithoutMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('@');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalvalidCharacterreturnsCorrectHexValue
* Compiling Tests
refined test name is: testHexvalvalidCharacterreturnsCorrectHexValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('B');
assertEquals(11, hexval);


** It was a parseable test case! 
refined test name is: testHexValForCharacterReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('C');
assertEquals(12, hexval);


** It was a parseable test case! 
refined test name is: testHexvalReturnsCorrectValueForGivenCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('D');
assertEquals(13, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfCharacterD
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('E');
assertEquals(14, hexval);


** It was a parseable test case! 
refined test name is: testHexVal
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('F');
assertEquals(15, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfCharFIsFifteen
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('G');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidCharacterThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('H');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionForInvalidDigit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('I');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexValThrowsExceptionOnNonHexDigit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('J');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexValInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('K');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsExceptionOnInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('L');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('M');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsExceptionForNonHexDigitCharacters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('N');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionForNonHexDigit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('O');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidHexInputThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('P');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexValParsing
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('Q');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testIOExceptionThrownForNonDigitCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('R');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalOutsideRange
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('S');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidCharacterThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('T');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidHexValueThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('U');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsExceptionForInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('V');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('W');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('X');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidInputThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('Y');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionForInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('Z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalthrowsIOExceptionWithNoMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('[');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionWithInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('\\');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidInputHexadecimalValueThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval(']');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalThrowsIOExceptionWithNullMessage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('^');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidCharacterException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('_');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testInvalidInputThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('`');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testHexvalInvalidCharacterException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('a');
assertEquals(10, hexval);


** It was a parseable test case! 
refined test name is: testHexValForCharA
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('b');
assertEquals(11, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfCharacterB
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('c');
assertEquals(12, hexval);


** It was a parseable test case! 
refined test name is: testHexvalReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('d');
assertEquals(13, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfCharacterDShouldBeEleven
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('e');
assertEquals(14, hexval);


** It was a parseable test case! 
refined test name is: testHexValOfLetterE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int hexval = JavaCharStream.hexval('f');
assertEquals(15, hexval);


** It was a parseable test case! 
refined test name is: testHexvalOfCharacterF
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: try { 
  JavaCharStream.hexval('z');
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testIOExceptionWithNoMessageInException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("iS)X1");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.available = (-1075);
// Undeclared exception!
try { 
  javaCharStream.AdjustBuffSize();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testExceptionThrownWhenAvailableValueIsNegative
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
try { 
  javaCharStream.FillBuff();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
}


** It was a parseable test case! 
refined test name is: testFillBuffThrowsExceptionOnEmptyStream
* Compiling Tests
refined test name is: testCreateFromEmptyStringThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
char ReadByte = javaCharStream.ReadByte();
assertEquals('#', ReadByte);
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testReadByteInputHasHashSignAndPercentSymbol
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
int endColumn = javaCharStream.getEndColumn();
assertEquals(0, javaCharStream.bufpos);
assertEquals(66, endColumn);


** It was a parseable test case! 
refined test name is: testCreateAndSetFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, 21, 21);
javaCharStream.backup(1);
javaCharStream.BeginToken();
try { 
  javaCharStream.readChar();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // Pipe not connected
   //
   verifyException("java.io.PipedInputStream", e);
}


** It was a parseable test case! 
refined test name is: testBackupWithNegativeArgumentThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24));
javaCharStream.available = 3569;
javaCharStream.AdjustBuffSize();
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBufferSizeAdjustment
* Compiling Tests
refined test name is: testBufferSizeAdjustmentWithAvailableData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.prevCharIsLF = true;
char readChar = javaCharStream.readChar();
assertEquals(0, javaCharStream.bufpos);
assertEquals('I', readChar);


** It was a parseable test case! 
refined test name is: testPrevCharIsLF
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.prevCharIsCR = true;
char readChar = javaCharStream.readChar();
assertEquals(0, javaCharStream.bufpos);
assertEquals('I', readChar);


** It was a parseable test case! 
refined test name is: testReadCharvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.inBuf = 11;
javaCharStream.readChar();
int line = javaCharStream.getLine();
assertEquals(0, javaCharStream.bufpos);
assertEquals(0, line);


** It was a parseable test case! 
refined test name is: testInvalidEscapeCharacterAtStartOfInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("]rbXHa-b;");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.backup((-2668));
assertEquals(2667, javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBackupMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 7, 7, 117);
javaCharStream.ReInit((Reader) arg0, (-1639), 0, 0);
String GetImage = javaCharStream.GetImage();
assertEquals("", GetImage);


** It was a parseable test case! 
refined test name is: testInvalidEscapeCharacterAtLine
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Invalid escape character at line ");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 7, 7, 117);
String GetImage = javaCharStream.GetImage();
assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", GetImage);


** It was a parseable test case! 
refined test name is: testGetImageinvalidEscapeCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.GetImage();
assertEquals(2154, javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBackupMethodWithPositiveArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 53, 53);
char[] GetSuffix = javaCharStream.GetSuffix(53);
assertEquals(53, GetSuffix.length);
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testGetSuffixWithLength53
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("EqSs");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
char[] GetSuffix = javaCharStream.GetSuffix(0);
assertEquals(0, GetSuffix.length);


** It was a parseable test case! 
refined test name is: testGetSuffixEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
javaCharStream.adjustBeginLineColumn((-1), (-2586));
assertEquals((-2586), javaCharStream.getBeginColumn());


** It was a parseable test case! 
refined test name is: testAdjustBeginLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("#Np%");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.readChar();
javaCharStream.adjustBeginLineColumn(1617, (byte)82);
assertEquals(0, javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testjavaCharsreamhandlesNonPrintables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2), (-2));
javaCharStream.ReInit((InputStream) arg0, (-2), (-469), (-2));
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testReinitWithNegativeValues
* Compiling Tests
refined test name is: testReinitWithInputStreamAndExpectedValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 3458, 102, 102);
javaCharStream.ReInit((Reader) arg0, 7, 2277, 102);
assertEquals((-1), javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBufferPositionInitialization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 78);
javaCharStream.BeginToken();
javaCharStream.readChar();
char BeginToken = javaCharStream.BeginToken();
assertEquals(0, javaCharStream.bufpos);
assertEquals('q', BeginToken);


** It was a parseable test case! 
refined test name is: testReadFirstCharacterFromStream
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-1183), 12);
javaCharStream.adjustBeginLineColumn((-571), (-1405));
int beginColumn = javaCharStream.getBeginColumn();
assertEquals((-570), javaCharStream.getBeginLine());
assertEquals((-1405), beginColumn);


** It was a parseable test case! 
refined test name is: testAdjustBeginLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.adjustBeginLineColumn(90, 90);
int beginColumn = javaCharStream.getBeginColumn();
assertEquals(90, beginColumn);


** It was a parseable test case! 
refined test name is: testAdjustBeginLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-24), (-24));
javaCharStream.adjustBeginLineColumn((-24), (-24));
int beginLine = javaCharStream.getBeginLine();
assertEquals((-24), javaCharStream.getBeginColumn());
assertEquals((-23), beginLine);


** It was a parseable test case! 
refined test name is: testAdjustBeginLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("VF);\"`gbV^=7");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.adjustBeginLineColumn(90, 90);
int beginLine = javaCharStream.getBeginLine();
assertEquals(90, javaCharStream.getBeginColumn());
assertEquals(91, beginLine);


** It was a parseable test case! 
refined test name is: testAdjustBeginLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 64);
javaCharStream.BeginToken();
int column = javaCharStream.getColumn();
assertEquals((-4), javaCharStream.getBeginColumn());
assertEquals((-4), column);


** It was a parseable test case! 
refined test name is: testBeginTokenWithInitialBufferSize
* Compiling Tests
refined test name is: testBeginTokenSetsColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("Iqvalid escae character at ine ");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.readChar();
int column = javaCharStream.getColumn();
assertEquals(0, javaCharStream.bufpos);
assertEquals(1, column);


** It was a parseable test case! 
refined test name is: testReadCharIncrementBufferPositionAndColumnNumber
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("iS)41");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.backup(90);
javaCharStream.getColumn();
assertEquals(4005, javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBackup90CharsInJavaCharStream
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(arg0, 20, (-4), 78);
javaCharStream.BeginToken();
int endColumn = javaCharStream.getEndColumn();
assertEquals((-4), javaCharStream.getBeginColumn());
assertEquals((-4), endColumn);


** It was a parseable test case! 
refined test name is: testBeginAndEndColumns
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.backup(1853);
javaCharStream.getEndColumn();
assertEquals(2242, javaCharStream.bufpos);


** It was a parseable test case! 
refined test name is: testBackupMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, (-13), (-13));
javaCharStream.backup(1941);
javaCharStream.UpdateLineColumn('+');
int endLine = javaCharStream.getEndLine();
assertEquals(2154, javaCharStream.bufpos);
assertEquals((-13), endLine);


** It was a parseable test case! 
refined test name is: testBackupAndUpdateLineColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
JavaCharStream javaCharStream = new JavaCharStream(arg0, 56, 66);
javaCharStream.maxNextCharInd = 56;
javaCharStream.BeginToken();
int endLine = javaCharStream.getEndLine();
assertEquals(66, javaCharStream.getBeginColumn());
assertEquals(56, endLine);


** It was a parseable test case! 
refined test name is: testPipedInputStreamTokenization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("'Bl/GLbd+");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.readChar();
javaCharStream.ExpandBuff(true);
int endLine = javaCharStream.getEndLine();
assertEquals(4096, javaCharStream.bufpos);
assertEquals(0, endLine);


** It was a parseable test case! 
refined test name is: testReadCharAndExpandBuffer
* Compiling Tests
refined test name is: testReadCharMethodOfJavaCharStreamClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("cPALTVKkcPX,m");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
javaCharStream.readChar();
int line = javaCharStream.getLine();
assertEquals(0, javaCharStream.bufpos);
assertEquals(1, line);


** It was a parseable test case! 
refined test name is: testReadCharSetsBufposAndLineNumberCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringReader arg0 = new StringReader("9 q|C;CyiMPvkr");
JavaCharStream javaCharStream = new JavaCharStream(arg0);
char readChar = javaCharStream.readChar();
assertEquals(0, javaCharStream.bufpos);
assertEquals('9', readChar);


** It was a parseable test case! 
refined test name is: testCreatingJavaCharStreamWithStringReader
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.522 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:50.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:50.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:50.820 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:50.903 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:50.993 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:50.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.077 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.160 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.242 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.327 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.413 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.495 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.497 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.575 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.577 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.658 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.660 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.742 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.832 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:51.916 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:51.918 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.009 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.101 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.192 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:52.196 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.280 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:16:52.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.449 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.451 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.529 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.530 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.587 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.588 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.643 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.644 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.699 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.756 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:52.757 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.807 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.860 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.861 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.911 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.913 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:52.962 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:52.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:53.015 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:53.084 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.086 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:53.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.172 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:53.260 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:53.348 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.350 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.440 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.442 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.533 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.637 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.643 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.732 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.828 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:53.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:53.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.023 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.125 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.221 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.415 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.417 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.514 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.516 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.607 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.609 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.703 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.799 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.802 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.900 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:54.992 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:54.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.091 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.191 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.287 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.518 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.590 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.592 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.745 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:16:55.819 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.887 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.889 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:55.963 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:55.965 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.041 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:16:56.118 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.120 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.192 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.264 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.339 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.341 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.491 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.493 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
[MASTER] 22:16:56.563 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.639 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.719 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:56.794 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:56.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:57.514 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:57.516 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:57.594 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:57.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:16:57.668 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:57.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:57.739 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:57.740 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:57.806 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:57.807 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:58.489 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:58.491 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:59.131 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:59.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:16:59.769 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:16:59.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.423 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.426 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:17:00.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.583 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.657 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.659 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.804 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.806 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.882 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:00.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:00.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:17:01.011 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:01.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:01.062 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:01.063 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:17:01.124 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:01.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 21 called: 0 to improve: false
** Write a test suite: 61 called: 1 to improve: false
** Write a test suite: 65 called: 2 to improve: false
** Write a test suite: 77 called: 3 to improve: false
** Write a test suite: 84 called: 4 to improve: false
** Write a test suite: 91 called: 5 to improve: false
[MASTER] 22:17:05.463 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:05.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 28 called: 3 to improve: false
** Write a test suite: 32 called: 4 to improve: false
** Write a test suite: 72 called: 5 to improve: false
[MASTER] 22:17:08.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2864275575534364659.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:17:08.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2864275575534364659.jar
* Writing tests to file
* Writing JUnit test case 'JavaCharStream_ESTest' to evosuite-tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 28 called: 3 to improve: false
** Write a test suite: 32 called: 4 to improve: false
** Write a test suite: 72 called: 5 to improve: false
* Done!

* Computation finished
