* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JMCAAnalyzer
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 17140
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:13:55.693 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:13:55.698 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:13:55.699 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:13:55.752 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JMCAAnalyzer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 626
* Using seed 1710184433329
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 96 / 626
[Progress:>                             0%] [Cov:==========>                        30%][Progress:>                             1%] [Cov:==========>                        30%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             2%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:>                             3%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            4%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           7%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:==>                           9%] [Cov:==========>                        31%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          11%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          12%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:===>                          13%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       32%][Progress:====>                         14%] [Cov:===========>                       33%][Progress:====>                         14%] [Cov:===========>                       33%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:==============>                    42%][Progress:=====>                        18%] [Cov:==============>                    42%][Progress:=====>                        18%] [Cov:==============>                    42%][Progress:=====>                        18%] [Cov:==============>                    42%][Progress:=====>                        19%] [Cov:==============>                    42%][Progress:=====>                        19%] [Cov:==============>                    42%][Progress:=====>                        19%] [Cov:==============>                    42%][Progress:=====>                        19%] [Cov:==============>                    42%][Progress:=====>                        19%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:===============>                   44%][Progress:======>                       21%] [Cov:===============>                   44%][Progress:======>                       21%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       22%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      24%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:===============>                   44%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    31%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    32%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:=========>                    33%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:==========>                   36%] [Cov:====================>              59%][Progress:===========>                  37%] [Cov:====================>              59%][Progress:===========>                  37%] [Cov:====================>              59%][Progress:===========>                  37%] [Cov:====================>              59%][Progress:===========>                  37%] [Cov:====================>              59%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  37%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             60%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:===========>                  39%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 42%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                44%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               47%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:==============>               49%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              51%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              52%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:===============>              53%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             54%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             55%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:================>             56%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            58%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:==================>           60%] [Cov:=====================>             62%][Progress:==================>           60%] [Cov:=====================>             62%][Progress:==================>           60%] [Cov:=====================>             62%][Progress:==================>           60%] [Cov:=====================>             62%][Progress:==================>           60%] [Cov:======================>            63%][Progress:==================>           60%] [Cov:======================>            63%][Progress:==================>           60%] [Cov:======================>            63%][Progress:==================>           61%] [Cov:======================>            63%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][MASTER] 19:14:58.497 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           62%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:===================>          66%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         67%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            64%][Progress:====================>         69%] [Cov:======================>            64%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    85%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:=========================>    86%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   87%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   88%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:==========================>   89%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  90%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  91%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  92%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:===========================>  93%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 94%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 95%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:============================> 96%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>97%] [Cov:=======================>           66%][Progress:=============================>98%] [Cov:=======================>           66%][Progress:=============================>98%] [Cov:=======================>           66%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>98%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:=============================>99%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%][Progress:==============================100%] [Cov:=======================>           67%]
* Search finished after 101s and 845 generations, 507765 statements, best individual has fitness: 203.0
* Generated before the refinement 18 tests with total length 167
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: setFileName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jMCAAnalyzer.setFileName("MethodDeclaration")
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.setFileName("MethodDeclaration");
        jMCAAnalyzer.setMethodName("getPerson");
        jMCAAnalyzer.setReturnType("Person");
        jMCAAnalyzer.addParameter("id", "Integer");
        jMCAAnalyzer.addParameter("name", "String");
        jMCAAnalyzer.addParameter("age", "Integer");
    }
}
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.setFileName("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.setFileName("MethodDeclaration") target is: jMCAAnalyzer method is: setFileName(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: setFileName(Ljava/lang/String;)V
statement is: jMCAAnalyzer.setMethodName("getPerson"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.setMethodName("getPerson") target is: jMCAAnalyzer method is: setMethodName(java.lang.String)
statement is: jMCAAnalyzer.setReturnType("Person"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.setReturnType("Person") target is: jMCAAnalyzer method is: setReturnType(java.lang.String)
statement is: jMCAAnalyzer.addParameter("id", "Integer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.addParameter("id", "Integer") target is: jMCAAnalyzer method is: addParameter(java.lang.String,java.lang.String)
statement is: jMCAAnalyzer.addParameter("name", "String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.addParameter("name", "String") target is: jMCAAnalyzer method is: addParameter(java.lang.String,java.lang.String)
statement is: jMCAAnalyzer.addParameter("age", "Integer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.addParameter("age", "Integer") target is: jMCAAnalyzer method is: addParameter(java.lang.String,java.lang.String)
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String string = "MethodDeclaration";
jMCAAnalyzer.setFileName(string);

statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze((ASTNode) null)
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze("void main(String[] args)");
    }
}
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze("void main(String[] args)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze("void main(String[] args)") target is: jMCAAnalyzer method is: analyze(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String string = "void main(String[] args)";
jMCAAnalyzer.analyze((ASTNode) string);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("ClassVariableDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("VariableDeclaration", "int", "x"));
        aSTNode.addChild(new ASTNode("Assignment", "x", 10));
        aSTNode.addChild(new ASTNode("MethodInvocation", "print", new String[]{ "Hello, World!" }));
        aSTNode.setType("ClassVariableDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("VariableDeclaration", "int", "x")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("VariableDeclaration", "int", "x")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("Assignment", "x", 10)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Assignment", "x", 10)) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("MethodInvocation", "print", new String[]{ "Hello, World!" })), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("MethodInvocation", "print", new String[]{ "Hello, World!" })) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.setType("ClassVariableDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("ClassVariableDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
String string = "ClassVariableDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@3a24ea65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("Identifier", "x"));// Changed x to be more descriptive

        aSTNode.addChild(new ASTNode("AssignmentExpression", "="));
        aSTNode.addChild(new ASTNode("MethodInvocation", "foo()"));// Changed foo() to be more representative of the situation being tested

        aSTNode.identity = "StatementExpression";
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("Identifier", "x"))// Changed x to be more descriptive
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Identifier", "x"))// Changed x to be more descriptive
 target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("AssignmentExpression", "=")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("AssignmentExpression", "=")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("MethodInvocation", "foo()"))// Changed foo() to be more representative of the situation being tested
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("MethodInvocation", "foo()"))// Changed foo() to be more representative of the situation being tested
 target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.identity = "StatementExpression", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("+=")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("+=")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@7e2168dc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("+=", "BinaryOperator"));
        aSTNode.addChild(new ASTNode("StatementExpression", "MethodDeclaration"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("+=", "BinaryOperator")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("+=", "BinaryOperator")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("StatementExpression", "MethodDeclaration")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("StatementExpression", "MethodDeclaration")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("h&?")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@76531669 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: org.evosuite.testcase.statements.AssignmentStatement@31070337 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "--"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(aSTNode);
        ASTNode aSTNode = new ASTNode();
        aSTNode.setType("if");
        aSTNode.addChild(aSTNode);
        aSTNode.identity = "StatementExpression";
        aSTNode.identity = "--";
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setType("if"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("if") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.identity = "StatementExpression", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.identity = "--", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 2
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
String string = "if";
aSTNode.setType(string);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("(")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("(")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@9eeeaa16 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(aSTNode);
        aSTNode.setIdentity("(");
        aSTNode.setType("LeftParenthesis");
        aSTNode.addChild(aSTNode);
        aSTNode.identity = "StatementExpression";
        aSTNode.addChild(aSTNode);
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setIdentity("("), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("(") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.setType("LeftParenthesis"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("LeftParenthesis") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.identity = "StatementExpression", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.addChild(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 8
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
String string = "LeftParenthesis";
aSTNode.setType(string);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("Selection")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@7c7a74d7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementEpression"
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("Selection", "StatementExpression"));
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("Selection", "StatementExpression")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Selection", "StatementExpression")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("9")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@fd205d69 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: org.evosuite.testcase.statements.AssignmentStatement@23284ba5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode());
        aSTNode.setType("MethodDeclaration");
        aSTNode.identity = "StatementExpression";
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.identity = "StatementExpression", class spoon.support.reflect.code.CtAssignmentImpl
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("+=")
statement is: org.evosuite.testcase.statements.AssignmentStatement@b755e61 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "="
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@c02b46ed type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("PLUS_EQUALS", "="));
        aSTNode.identity = "AssignmentStatement";
        aSTNode.addChild(new ASTNode("AdditionMethodName", "Identifier"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("PLUS_EQUALS", "=")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("PLUS_EQUALS", "=")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.identity = "AssignmentStatement", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.addChild(new ASTNode("AdditionMethodName", "Identifier")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("AdditionMethodName", "Identifier")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity(")")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType(")")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@e6cca10 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("MethodDeclaration"));
        aSTNode.addChild(new ASTNode("Identifier", "myMethod"));
        aSTNode.addChild(new ASTNode("FormalParameters"));
        aSTNode.addChild(new ASTNode("VariableDeclaratorId", "myVar"));
        aSTNode.addChild(new ASTNode("StringLiteral", "\"hello world\""));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("MethodDeclaration")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("MethodDeclaration")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("Identifier", "myMethod")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("Identifier", "myMethod")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("FormalParameters")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("FormalParameters")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("VariableDeclaratorId", "myVar")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("VariableDeclaratorId", "myVar")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("StringLiteral", "\"hello world\"")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("StringLiteral", "\"hello world\"")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 10, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 11
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("*")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("*")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@9f06aa80 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("VariableDeclaration"));
        aSTNode.setIdentity("*");
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("VariableDeclaration")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("VariableDeclaration")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.setIdentity("*"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("*") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 5
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("(")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("(")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d4721c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode("+", "BinaryOperation"));
        aSTNode.addChild(new ASTNode("10.5", "NumericLiteral"));
        aSTNode.addChild(new ASTNode("*", "BinaryOperation"));
        aSTNode.addChild(new ASTNode("20.75", "NumericLiteral"));
        ASTNode aSTNode = new ASTNode();
        aSTNode.setIdentity("+");
        aSTNode.setType("BinaryOperation");
        aSTNode.addChild(new ASTNode("10.5", "NumericLiteral"));
        aSTNode.addChild(new ASTNode("*", "BinaryOperation"));
        aSTNode.addChild(new ASTNode("20.75", "NumericLiteral"));
        ASTNode aSTNode = new ASTNode();
        aSTNode.setIdentity("-");
        aSTNode.setType("BinaryOperation");
        aSTNode.addChild(new ASTNode("10.5", "NumericLiteral"));
        aSTNode.addChild(new ASTNode("*", "BinaryOperation"));
        aSTNode.addChild(new ASTNode("20.75", "NumericLiteral"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("+", "BinaryOperation")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("+", "BinaryOperation")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("+"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("+") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.setType("BinaryOperation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("BinaryOperation") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 9
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("-"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("-") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.setType("BinaryOperation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("BinaryOperation") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("10.5", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("*", "BinaryOperation")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("20.75", "NumericLiteral")) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 18
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 10, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 27
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
String string = "BinaryOperation";
aSTNode.setType(string);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
String string = "BinaryOperation";
aSTNode.setType(string);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) string).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("X")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@fc625c2e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "+"
statement is: org.evosuite.testcase.statements.AssignmentStatement@a9e95910 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(aSTNode);// This line adds the node to itself, which is not a valid test case

        aSTNode.setType("X");// This sets the type of the node to "X", which is not a valid value for the type field

        aSTNode.addChild(aSTNode);// This line adds the node to itself again, which is not a valid test case

        aSTNode.identity = "+";// This sets the identity of the node to "+", which is not a valid value for the identity field

        aSTNode.identity = "StatementExpression";// This sets the identity of the node to "StatementExpression", which is not a valid value for the identity field

        aSTNode.addChild(aSTNode);// This line adds the node to itself again, which is not a valid test case

        aSTNode.setType("MethodDeclaration");// This sets the type of the node to "MethodDeclaration", which is a valid value for the type field

        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);// This line creates an instance of the JMCAAnalyzer class and passes in the node as a parameter, which is a valid test case }}

    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(aSTNode)// This line adds the node to itself, which is not a valid test case
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode)// This line adds the node to itself, which is not a valid test case
 target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("X")// This sets the type of the node to "X", which is not a valid value for the type field
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("X")// This sets the type of the node to "X", which is not a valid value for the type field
 target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(aSTNode)// This line adds the node to itself again, which is not a valid test case
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode)// This line adds the node to itself again, which is not a valid test case
 target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.identity = "+"// This sets the identity of the node to "+", which is not a valid value for the identity field
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.identity = "StatementExpression"// This sets the identity of the node to "StatementExpression", which is not a valid value for the identity field
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.addChild(aSTNode)// This line adds the node to itself again, which is not a valid test case
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(aSTNode)// This line adds the node to itself again, which is not a valid test case
 target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration")// This sets the type of the node to "MethodDeclaration", which is a valid value for the type field
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration")// This sets the type of the node to "MethodDeclaration", which is a valid value for the type field
 target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode)// This line creates an instance of the JMCAAnalyzer class and passes in the node as a parameter, which is a valid test case }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode)// This line creates an instance of the JMCAAnalyzer class and passes in the node as a parameter, which is a valid test case }}
 target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 8
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
String string = "X";
aSTNode.setType(string);
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("-")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("-")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@22e636fd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@127a1a58 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("");
aSTNode.setType("");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration");
        aSTNode.addChild(new ASTNode("VariableDeclarationStatement"));
        aSTNode.setIdentity("StatementExpression");
        aSTNode.setType("MethodInvocation");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode("VariableDeclarationStatement")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode("VariableDeclarationStatement")) target is: aSTNode method is: addChild(ASTNode)
statement is: aSTNode.setIdentity("StatementExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("StatementExpression") target is: aSTNode method is: setIdentity(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.ASTNodeindex is: 1
Matched Method is: setIdentity(Ljava/lang/String;)V
statement is: aSTNode.setType("MethodInvocation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodInvocation") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode(Lcom/soops/CEN4010/JMCA/ASTNode;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.ASTNodeindex is: 1
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode((ASTNode) string);
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "MethodInvocation";
((ASTNode) string).setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity(">>")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType(">>")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@44aa91e0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode();
        aSTNode.addChild(new ASTNode());
        aSTNode.setIdentity(">>");
        aSTNode.setType(">>");
        aSTNode.addChild(new ASTNode());
        aSTNode.identity = "StatementExpression";
        aSTNode.addChild(new ASTNode());
        aSTNode.setType("MethodDeclaration");
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setIdentity(">>"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity(">>") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: aSTNode.setType(">>"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType(">>") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.identity = "StatementExpression", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.addChild(new ASTNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.addChild(new ASTNode()) target is: aSTNode method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
statement is: aSTNode.setType("MethodDeclaration"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setType("MethodDeclaration") target is: aSTNode method is: setType(java.lang.String)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 11
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
String string = ">>";
aSTNode.setType(string);
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
String string = "MethodDeclaration";
aSTNode.setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) string).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: arg0.addChild(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity(".")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType(".")
statement is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.addChild(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@fbad4714 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: aSTNode.identity = "StatementExpression"
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("MethodDeclaration")
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode root = new ASTNode();
        root.addChild(new ASTNode("MethodInvocation", "method1"));
        root.addChild(new ASTNode("MethodInvocation", "method2"));
        root.addChild(new ASTNode("StatementExpression", "x = 5;"));
        root.addChild(new ASTNode("MethodDeclaration", "void method1() {}"));
        root.addChild(new ASTNode("MethodDeclaration", "void method2() {}"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(root);
    }
}
statement is: ASTNode root = new ASTNode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: root.addChild(new ASTNode("MethodInvocation", "method1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: root.addChild(new ASTNode("MethodInvocation", "method1")) target is: root method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: root.addChild(new ASTNode("MethodInvocation", "method2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: root.addChild(new ASTNode("MethodInvocation", "method2")) target is: root method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: root.addChild(new ASTNode("StatementExpression", "x = 5;")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: root.addChild(new ASTNode("StatementExpression", "x = 5;")) target is: root method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: root.addChild(new ASTNode("MethodDeclaration", "void method1() {}")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: root.addChild(new ASTNode("MethodDeclaration", "void method1() {}")) target is: root method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: root.addChild(new ASTNode("MethodDeclaration", "void method2() {}")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: root.addChild(new ASTNode("MethodDeclaration", "void method2() {}")) target is: root method is: addChild(ASTNode)
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
source statement: com.soops.CEN4010.JMCA.ASTNode()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.ASTNodeindex is: 0
Matched Method is: addChild(Lcom/soops/CEN4010/JMCA/ASTNode;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(root), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(root) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 11
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
ASTNode aSTNode = null;
aSTNode.addChild(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) _void).analyze(aSTNode);

* test suite isTestSuite: 35
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 9: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("");
aSTNode.setType("");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 18: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");

Test 19: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) "void main(String[] args)");

Test 20: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = null;
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

Test 21: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 22: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 23: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("if");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 24: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("LeftParenthesis");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 25: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 28: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 29: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 30: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("BinaryOperation");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("BinaryOperation");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)"BinaryOperation").analyze(aSTNode);

Test 31: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 32: 
ASTNode aSTNode = new ASTNode((ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "MethodInvocation";
((ASTNode) string).setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType(">>");
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)"MethodDeclaration").analyze(aSTNode);

Test 34: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);


* Generated after the refinement and before minimization 35 tests with total length 280
* test suite isTestSuite: 35
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 9: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("");
aSTNode.setType("");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 18: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");

Test 19: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) "void main(String[] args)");

Test 20: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = null;
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

Test 21: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 22: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 23: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("if");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 24: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("LeftParenthesis");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 25: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 28: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);

Test 29: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 30: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("BinaryOperation");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("BinaryOperation");
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)"BinaryOperation").analyze(aSTNode);

Test 31: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 32: 
ASTNode aSTNode = new ASTNode((ASTNode) "MethodDeclaration");
String string = "StatementExpression";
((ASTNode) string).setIdentity(string);
String string = "MethodInvocation";
((ASTNode) string).setType(string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType(">>");
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)"MethodDeclaration").analyze(aSTNode);

Test 34: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
aSTNode.addChild((ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer)null).analyze(aSTNode);


* Minimizing test suite
* test suite isTestSuite: 18
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 199
* Number of covered goals: 127
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 222
* Number of covered goals: 166
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 64%
* Total number of goals: 199
* Number of covered goals: 127
* Generated 18 tests with total length 164
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 34%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");

** It was a parseable test case! 
refined test name is: testJMCAAnalyzerOnMethodDeclaration
* Compiling Tests
refined test name is: testMethodDeclarationAnalysis
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze((ASTNode) null);
assertEquals("File did not parse correctly", analyze);


** It was a parseable test case! 
refined test name is: testJMCAAnalyzerReturnsCorrectlyParsedAnalysis
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ASTNode arg0 = new ASTNode();
arg0.addChild(arg0);
arg0.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze(arg0);
assertEquals("\nFile:  \n\nClass: null\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\n", analyze);


** It was a parseable test case! 
refined test name is: testClassVariableDeclarationCohesionLevel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ASTNode arg0 = new ASTNode();
arg0.addChild(arg0);
arg0.identity = "StatementExpression";
arg0.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze(arg0);
assertEquals("\nFile:  \n\nClass: StatementExpression\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\nStatementExpression               No Class Level Assignments\n", analyze);


** It was a parseable test case! 
refined test name is: testAnalyzeASTNodeReturnsAnalysisResult
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ASTNode arg0 = new ASTNode();
arg0.addChild(arg0);
arg0.addChild(arg0);
arg0.identity = "StatementExpression";
arg0.addChild(arg0);
arg0.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze(arg0);
assertEquals("\nFile:  \n\nClass: StatementExpression\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\n\nClass: StatementExpression\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\n\nClass: StatementExpression\n\nMethod Name                             Cohesion Level\n--------------------------------------------------------------\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\nStatementExpression               No Class Level Assignments\n", analyze);


** It was a parseable test case! 
refined test name is: testClassLevelAssignments
* Compiling Tests
refined test name is: testNoClassLevelAssignmentsInMethodDeclaration
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:40.721 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:40.743 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:24:40.797 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:40.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:24:40.873 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:40.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:24:40.954 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:40.955 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:41.063 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:41.064 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
[MASTER] 19:24:41.237 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:41.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
[MASTER] 19:24:41.407 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:41.408 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
[MASTER] 19:24:41.791 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 18
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 9: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("");
aSTNode.setType("");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}


* Minimizing test suite
* test suite isTestSuite: 18
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.setType("ClassVariableDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setIdentity("+=");
aSTNode.setType("+=");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("h&?");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "--";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("Selection");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementEpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("9");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 10: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode(aSTNode);
aSTNode.setType("+=");
aSTNode.identity = "=";
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(")");
aSTNode.setType(")");
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("*");
aSTNode.setType("*");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("(");
aSTNode.setType("(");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setType("X");
aSTNode.addChild(aSTNode);
aSTNode.identity = "+";
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity("-");
aSTNode.setType("-");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(">>");
aSTNode.setType(">>");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.addChild(aSTNode);
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
aSTNode.addChild(aSTNode);
ASTNode aSTNode = new ASTNode();
aSTNode.setIdentity(".");
aSTNode.setType(".");
aSTNode.addChild(aSTNode);
aSTNode.identity = "StatementExpression";
aSTNode.setType("MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}


[MASTER] 19:24:45.548 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 199
* Number of covered goals: 127
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 222
* Number of covered goals: 166
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 64%
* Total number of goals: 199
* Number of covered goals: 127
* Generated 18 tests with total length 164
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:24:45.636 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 19:24:52.279 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:53.173 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.174 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:53.218 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.218 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:53.264 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:53.312 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.312 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:24:53.403 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.406 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
[MASTER] 19:24:53.506 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
[MASTER] 19:24:53.597 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar8562094912467068683.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:24:53.598 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8562094912467068683.jar
* Writing tests to file
[MASTER] 19:24:53.600 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'JMCAAnalyzer_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
* Writing JUnit test case 'JMCAAnalyzer_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
* Done!

* Computation finished
