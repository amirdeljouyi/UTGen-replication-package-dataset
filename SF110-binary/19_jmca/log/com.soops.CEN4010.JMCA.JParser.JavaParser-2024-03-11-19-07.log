* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JParser.JavaParser
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 19860
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:07:43.921 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:07:43.923 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:07:43.924 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:07:44.345 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JParser.JavaParser
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 20959
* Using seed 1710184058458
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 2618 / 20959
[Progress:>                             1%] [Cov:===>                               10%][Progress:>                             3%] [Cov:===>                               11%][Progress:>                             3%] [Cov:====>                              13%][Progress:=>                            4%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:======>                            18%][Progress:=>                            6%] [Cov:=======>                           20%][Progress:=>                            6%] [Cov:=======>                           22%][Progress:==>                           7%] [Cov:=======>                           22%][Progress:==>                           7%] [Cov:========>                          23%][Progress:==>                           9%] [Cov:========>                          24%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        31%][Progress:====>                         15%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       32%][Progress:====>                         16%] [Cov:===========>                       33%][Progress:======>                       20%] [Cov:===========>                       33%][Progress:=======>                      24%] [Cov:===========>                       34%][Progress:=======>                      25%] [Cov:============>                      36%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:=============>                     39%][Progress:========>                     28%] [Cov:=============>                     39%][Progress:========>                     28%] [Cov:=============>                     39%][Progress:========>                     29%] [Cov:=============>                     39%][Progress:=========>                    30%] [Cov:==============>                    40%][Progress:=========>                    33%] [Cov:==============>                    40%][Progress:==========>                   34%] [Cov:==============>                    40%][Progress:============>                 40%] [Cov:==============>                    40%][Progress:============>                 41%] [Cov:==============>                    40%][Progress:============>                 41%] [Cov:==============>                    40%][Progress:============>                 42%] [Cov:==============>                    40%][Progress:============>                 43%] [Cov:==============>                    40%][Progress:==============>               48%] [Cov:==============>                    40%][Progress:==============>               49%] [Cov:==============>                    40%][Progress:===============>              53%] [Cov:==============>                    40%][Progress:================>             56%] [Cov:==============>                    40%][Progress:=================>            59%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         68%] [Cov:===============>                   43%][Progress:====================>         69%] [Cov:===============>                   44%][Progress:=====================>        70%] [Cov:===============>                   44%][Progress:=====================>        71%] [Cov:===============>                   44%][Progress:=====================>        72%] [Cov:===============>                   44%][Progress:=====================>        73%] [Cov:===============>                   44%][Progress:======================>       75%] [Cov:===============>                   44%][Progress:======================>       76%] [Cov:===============>                   44%][Progress:=======================>      77%] [Cov:===============>                   44%][Progress:=======================>      78%] [Cov:===============>                   44%][Progress:=======================>      79%] [Cov:===============>                   44%][Progress:========================>     80%] [Cov:===============>                   44%][Progress:========================>     82%] [Cov:===============>                   44%][Progress:========================>     83%] [Cov:===============>                   44%][Progress:===========================>  92%] [Cov:===============>                   44%][Progress:===========================>  93%] [Cov:===============>                   44%][Progress:============================> 94%] [Cov:===============>                   44%][Progress:=============================>98%] [Cov:===============>                   44%][Progress:=============================>99%] [Cov:===============>                   44%][Progress:==============================100%] [Cov:===============>                   44%]
* Search finished after 210s and 65 generations, 22059 statements, best individual has fitness: 13979.0
[MASTER] 19:11:31.137 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 26 seconds more than allowed.
* Generated before the refinement 283 tests with total length 850
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "`J/)92oiL1-xpxvX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("e")
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e");
FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX");
JavaParser javaParser = new JavaParser("e");
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("test_file");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX");
        JavaParser javaParser = new JavaParser("test_file");
        javaParser.MarkerAnnotation();
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("test_file"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: JavaParser javaParser = new JavaParser("test_file"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: MarkerAnnotation()V
TestCase is: String string = "`J/)92oiL1-xpxvX";
String string = null;
boolean appendStringToFile = FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
String string = "test_file";
JavaParser javaParser = new JavaParser(string);
((JavaParser) appendStringToFile).MarkerAnnotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: disable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.disable_tracing()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.disable_tracing();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.disable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.disable_tracing() target is: javaParser method is: disable_tracing()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: disable_tracing()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("4{m)C_Hta],4X%X")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: enable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.enable_tracing()
test data is: StringReader stringReader = new StringReader("4{m)C_Hta],4X%X");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.enable_tracing();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.enable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.enable_tracing() target is: javaParser method is: enable_tracing()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(2258)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(2258);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPublic(10);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPublic(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic(10) target is: javaParser_ModifierSet method is: isPublic(int)
statement is: removeModifier(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int removeModifier = JavaParser.ModifierSet.removeModifier((-77), 26)
test data is: JavaParser.ModifierSet.removeModifier((-77), 26);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ModifierSet.removeModifier(PUBLIC, 10);
    }
}
statement is: ModifierSet.removeModifier(PUBLIC, 10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ModifierSet.removeModifier(PUBLIC, 10) target is: ModifierSet method is: removeModifier(int)
Matched Method is: removeModifier(II)I
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 10;
int _int = null;
JavaParser.ModifierSet.removeModifier(_int, _int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(591)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(591);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
statement is: System.out.println("Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello, World!") target is: System.out method is: println(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(16)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(16);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isProtected("protected");
    }
}
statement is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isProtected("protected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected("protected") target is: javaParser_ModifierSet method is: isProtected(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(62)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(62);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isProtected(PROTECTED);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isProtected(PROTECTED), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected(PROTECTED) target is: javaParser_ModifierSet method is: isProtected()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate(0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(1);
        javaParser_ModifierSet.isPublic(0);
        javaParser_ModifierSet.isProtected(0);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(1) target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: javaParser_ModifierSet.isPublic(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic(0) target is: javaParser_ModifierSet method is: isPublic(int)
statement is: javaParser_ModifierSet.isProtected(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected(0) target is: javaParser_ModifierSet method is: isProtected(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate((-330))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-330));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(123);// A private field with an integer value of 123 }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(123)// A private field with an integer value of 123 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(123)// A private field with an integer value of 123 }}
 target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic(10)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(10);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStatic(32);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStatic(32), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic(32) target is: javaParser_ModifierSet method is: isStatic(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic((-392))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-392));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStatic(true);// This boolean value represents whether the method or field is static }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStatic(true)// This boolean value represents whether the method or field is static }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic(true)// This boolean value represents whether the method or field is static }}
 target is: javaParser_ModifierSet method is: isStatic(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(256)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(256);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract(Integer.MAX_VALUE);
    }
}
statement is: // Improved test data:
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract(Integer.MAX_VALUE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract(Integer.MAX_VALUE) target is: javaParser_ModifierSet method is: isAbstract(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(44)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(44);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract("JAVA");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract("JAVA"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract("JAVA") target is: javaParser_ModifierSet method is: isAbstract(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal(345)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(345);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal("A");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal("A"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal("A") target is: javaParser_ModifierSet method is: isFinal(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal((-408))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-408));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal(123);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal(123), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(123) target is: javaParser_ModifierSet method is: isFinal(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-1179))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1179));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative("INVALID_MODIFIER");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative("INVALID_MODIFIER"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative("INVALID_MODIFIER") target is: javaParser_ModifierSet method is: isNative(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-2310))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2310));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.add(NATIVE);
        if (javaParser_ModifierSet.isNative()) {
            System.out.println("The modifier set contains the NATIVE modifier");
        } else {
            System.out.println("The modifier set does not contain the NATIVE modifier");
        }
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.add(NATIVE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.add(NATIVE) target is: javaParser_ModifierSet method is: add()
statement is: if (javaParser_ModifierSet.isNative()) {
    System.out.println("The modifier set contains the NATIVE modifier");
} else {
    System.out.println("The modifier set does not contain the NATIVE modifier");
}, class spoon.support.reflect.code.CtIfImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp(512)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(512);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(512);
        javaParser_ModifierSet.isSynchronized(2048);
        javaParser_ModifierSet.isNative(4096);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(512), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(512) target is: javaParser_ModifierSet method is: isStrictfp(int)
statement is: javaParser_ModifierSet.isSynchronized(2048), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(2048) target is: javaParser_ModifierSet method is: isSynchronized(int)
statement is: javaParser_ModifierSet.isNative(4096), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(4096) target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized(34)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(34);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(null);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(null) target is: javaParser_ModifierSet method is: isSynchronized(<unknown>)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized(2910)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(2910);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized("Thread-safe method");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized("Thread-safe method"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized("Thread-safe method") target is: javaParser_ModifierSet method is: isSynchronized(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(1256)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1256);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isTransient("Hello, world!");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isTransient("Hello, world!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isTransient("Hello, world!") target is: javaParser_ModifierSet method is: isTransient(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(2040)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2040);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // Test data for the modifier set
        JavaParser.ModifierSet modifierSet = new JavaParser.ModifierSet();
        modifierSet.isTransient(3254);
    }
}
statement is: // Test data for the modifier set
JavaParser.ModifierSet modifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifierSet.isTransient(3254), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifierSet.isTransient(3254) target is: modifierSet method is: isTransient(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(32)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(32);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile("volatile");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile("volatile"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile("volatile") target is: javaParser_ModifierSet method is: isVolatile(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(776)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(776);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile("volatile");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile("volatile"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile("volatile") target is: javaParser_ModifierSet method is: isVolatile(java.lang.String)
statement is: org.evosuite.testcase.statements.ArrayStatement@efd4e904 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[2];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "-d", "/home/user/project/src" };
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "-d", "/home/user/project/src" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "-d", "/home/user/project/src" } Elements: ["-d", "/home/user/project/src"]
lengths: [2] []
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JavaParser.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@525b97ac type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[0];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser.main(stringArray);
    }
}
statement is: // Improved test data
JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
JavaParser.main(stringArray) target is: JavaParser method is: main()
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JavaParser.main(stringArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("<jD1TR=X;#");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
        // Improved test data:
        StringReader stringReader2 = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("<jD1TR=X;#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CompilationUnit()V
statement is: // Improved test data:
StringReader stringReader2 = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.CompilationUnit() target is: javaParser2 method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: CompilationUnit()V
TestCase is: String string = "<jD1TR=X;#";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();
String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.example.test");
        javaParser.PackageDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser("com.example.test"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
TestCase is: String string = "com.example.test";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.PackageDeclaration();
        int a = -5;
        String b = "This is a test string";
        double c = 1.2;
        char d = 'A';
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
statement is: int a = -5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -5
statement is: String b = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double c = 1.2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char d = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: double _double = 1.2
* this is vulnerable: char _char = 'A'
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
String string = "This is a test string";
double _double = 1.2;
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("O")
statement is: ImportDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImportDeclaration()
test data is: JavaParser javaParser = new JavaParser("O");
javaParser.ImportDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("O");
        javaParser.ImportDeclaration(new ImportDeclaration("java.util", "List"));
    }
}
statement is: Parser javaParser = new JavaParser("O"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ImportDeclaration(new ImportDeclaration("java.util", "List")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ImportDeclaration(new ImportDeclaration("java.util", "List")) target is: javaParser method is: ImportDeclaration(ImportDeclaration)
TestCase is: String string = "O";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("ItVPp8t'{/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
        // Improved test data
        StringReader stringReader2 = new StringReader("@MyAnnotatedClass\n" + ((("public @interface MyInterface {\n" + "\t@MyMethodAnnotation\n") + "\tpublic void myMethod();\n") + "}"));
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.AnnotationTypeMemberDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
statement is: // Improved test data
StringReader stringReader2 = new StringReader("@MyAnnotatedClass\n" + ((("public @interface MyInterface {\n" + "\t@MyMethodAnnotation\n") + "\tpublic void myMethod();\n") + "}")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.AnnotationTypeMemberDeclaration() target is: javaParser2 method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A sample string for testing.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
        javaParser.TypeDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("A sample string for testing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeDeclaration()V
TestCase is: String string = "A sample string for testing.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).TypeDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new StringReader("public class MyClass {\n\tpublic static void main(String[] args) {\n\t\tsystem.out.println(\"Hello, World!\");\n\t}\n}"));
        javaParser.TypeDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(new StringReader("public class MyClass {\n\tpublic static void main(String[] args) {\n\t\tsystem.out.println(\"Hello, World!\");\n\t}\n}")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",`5BmOV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration((-3283))
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.ClassOrInterfaceDeclaration((-3283));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("         java+JavaParor < inputfile");
    }
}
statement is: Parser javaParser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "         java+JavaParor < inputfile";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("true")
statement is: ExtendsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExtendsList(false)
test data is: JavaParser javaParser = new JavaParser("true");
javaParser.ExtendsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("false");
        javaParser.ExtendsList(true);
    }
}
statement is: Parser javaParser = new JavaParser("false"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExtendsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExtendsList(true) target is: javaParser method is: ExtendsList(boolean)
TestCase is: String string = "false";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: ImplementsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImplementsList(false)
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.ImplementsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.ImplementsList(true);
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ImplementsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ImplementsList(true) target is: javaParser method is: ImplementsList(boolean)
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:")
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration((-4821))
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.EnumDeclaration((-4821));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
        javaParser.EnumDeclaration(42);// This value represents a hypothetical enum constant that is being tested }}

    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumDeclaration(42)// This value represents a hypothetical enum constant that is being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration(42)// This value represents a hypothetical enum constant that is being tested }}
 target is: javaParser method is: EnumDeclaration(int)
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("         java+JavaParor < inputfile");
        javaParser.EnumBody();
    }
}
statement is: Parser javaParser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumBody() target is: javaParser method is: EnumBody()
TestCase is: String string = "         java+JavaParor < inputfile";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.EnumConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("         java+JavaParor < inputfile");
        javaParser.EnumConstant();
        // Improved test data
        javaParser = new JavaParser("         java+JavaParor < 'inputfile'");
        javaParser.EnumConstant();
    }
}
statement is: Parser javaParser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
statement is: // Improved test data
javaParser = new JavaParser("         java+JavaParor < 'inputfile'"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
TestCase is: String string = "         java+JavaParor < inputfile";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.EnumConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Integer[] values = new Integer[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        double[] doubles = new double[]{ 1.0, 2.0, 3.0 };
        char[] chars = new char[]{ 'a', 'b', 'c' };
    }
}
statement is: // Improved test data
Integer[] values = new Integer[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubles = new double[]{ 1.0, 2.0, 3.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] chars = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
test data is: SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.EnumConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
        JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
        javaParser.EnumConstant();
    }
}
statement is: SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: EnumConstant()V
TestCase is: String string = "`C?p2k5vD+Ow0C%p%?r";
SystemInUtil.addInputLine(string);
String string = "         java+JavaParor < inputfile";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).EnumConstant();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Vb[&Zn*\"")
statement is: TypeParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameters()
test data is: JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
javaParser.TypeParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(input);
        String actualOutput = javaParser.TypeParameters();
        assertEquals(expectedOutput, actualOutput);
    }
}
statement is: Parser javaParser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String actualOutput = javaParser.TypeParameters(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameters() target is: javaParser method is: TypeParameters()
statement is: assertEquals(expectedOutput, actualOutput), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, actualOutput) target is:  method is: assertEquals(<unknown>,java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser("Vb[&Zn*\"");

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// Can be changed to int x = 10; or int x = -2; to test different scenarios

        double y = 3.14;// Can be changed to double y = 3.1416; or double y = 0.0; to test different scenarios

        String s = "Hello, world!";// Can be changed to String s = "Goodbye, cruel world!"; or String s = ""; to test different scenarios

        char c = 'a';// Can be changed to char c = 'A'; or char c = '$'; to test different scenarios }}

    }
}
statement is: int x = 5// Can be changed to int x = 10; or int x = -2; to test different scenarios
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// Can be changed to double y = 3.1416; or double y = 0.0; to test different scenarios
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello, world!"// Can be changed to String s = "Goodbye, cruel world!"; or String s = ""; to test different scenarios
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// Can be changed to char c = 'A'; or char c = '$'; to test different scenarios }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.TypeParameter();
        // Improved test data
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.TypeParameter();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
statement is: // Improved test data
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EnumConstant()V
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: TypeParameter()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for JavaParser type bound test case
        String input1 = "public class MyClass { public void myMethod() {} }";
        JavaParser javaParser = new JavaParser(input1);
        javaParser.TypeBound();
        assertEquals("MyClass", javaParser.getClassName());
        assertEquals("myMethod", javaParser.getMethodName());
        assertTrue(javaParser.isValid());
        String input2 = "public class MyOtherClass { public void myOtherMethod() {} }";
        JavaParser javaParser2 = new JavaParser(input2);
        javaParser2.TypeBound();
        assertEquals("MyOtherClass", javaParser2.getClassName());
        assertEquals("myOtherMethod", javaParser2.getMethodName());
        assertTrue(javaParser2.isValid());
    }
}
statement is: // Improved test data for JavaParser type bound test case
String input1 = "public class MyClass { public void myMethod() {} }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(input1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeBound() target is: javaParser method is: TypeBound()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: TypeBound()V
statement is: assertEquals("MyClass", javaParser.getClassName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("MyClass", javaParser.getClassName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("myMethod", javaParser.getMethodName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("myMethod", javaParser.getMethodName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertTrue(javaParser.isValid()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.isValid()) target is:  method is: assertTrue(<unknown>)
statement is: String input2 = "public class MyOtherClass { public void myOtherMethod() {} }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser2 = new JavaParser(input2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.TypeBound() target is: javaParser2 method is: TypeBound()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: TypeBound()V
statement is: assertEquals("MyOtherClass", javaParser2.getClassName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("MyOtherClass", javaParser2.getClassName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("myOtherMethod", javaParser2.getMethodName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("myOtherMethod", javaParser2.getMethodName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertTrue(javaParser2.isValid()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser2.isValid()) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "public class MyClass { public void myMethod() {} }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).TypeBound();
String string = "public class MyOtherClass { public void myOtherMethod() {} }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).TypeBound();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_TXc[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("MyEnum");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
    }
}
statement is: StringReader stringReader = new StringReader("MyEnum"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
TestCase is: String string = "MyEnum";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "<?xml version='1.0' encoding='UTF-8' ?>";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.Name();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int primitiveValue1 = 42;// Changed from 0 to a more descriptive value

        double primitiveValue2 = 3.14;// Changed from 0 to a more descriptive value

        String stringValue1 = "Hello, world!";// Changed from an empty string to a more descriptive value

        char charValue1 = 'A';// Changed from '\u0000' to a more descriptive value }}

    }
}
statement is: // Improved test data
int primitiveValue1 = 42// Changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveValue2 = 3.14// Changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue1 = "Hello, world!"// Changed from an empty string to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue1 = 'A'// Changed from '\u0000' to a more descriptive value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@ee04a65a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [3] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  File /home/user/Documents/file.txt");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File /home/user/Documents/file.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "Java Parser Version 1.1:  File /home/user/Documents/file.txt";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FieldDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FieldDeclaration(1329)
test data is: StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FieldDeclaration(1329);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FieldDeclaration("This is a sample field declaration with an integer value of 1329.");
    }
}
statement is: StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FieldDeclaration("This is a sample field declaration with an integer value of 1329."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FieldDeclaration("This is a sample field declaration with an integer value of 1329.") target is: javaParser method is: FieldDeclaration(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FieldDeclaration(I)V
TestCase is: String string = "v1jDlrt7\"k(L2px";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
String string = "This is a sample field declaration with an integer value of 1329.";
((JavaParser) stringReader).FieldDeclaration((int) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_X[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("_X[");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclarator();
    }
}
statement is: StringReader stringReader = new StringReader("_X["), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclarator()V
TestCase is: String string = "_X[";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
        javaParser.VariableInitializer(new String[]{ "inputfile" });
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(new String[]{ "inputfile" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer(new String[]{ "inputfile" }) target is: javaParser method is: VariableInitializer(java.lang.String[])
TestCase is: String string = "         java+JavaParor < inputfile";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.Expression();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.Expression();
        javaParser.Statement();
        // Improved test data
        StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");// A more descriptive and representative string

        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.Expression();
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
statement is: // Improved test data
StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ")// A more descriptive and representative string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: VariableInitializer()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: Expression()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: Statement()V
TestCase is: String string = "9v,Z%GPib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\";\"")
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("\"Hello World\"");
        JavaParser javaParser = new JavaParser("\"Hello World\"");
        javaParser.VariableInitializer();
    }
}
statement is: SystemInUtil.addInputLine("\"Hello World\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("\"Hello World\"") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("\"Hello World\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: VariableInitializer()V
TestCase is: String string = "\"Hello World\"";
SystemInUtil.addInputLine(string);
String string = "\"Hello World\"";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("<tlSI$^]IC#")
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
        javaParser.ReInit(((Reader) (stringReader)));
        javaParser.VariableInitializer();
        javaParser.FormalParameter();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser("<tlSI$^]IC#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((Reader) (stringReader))) target is: javaParser method is: ReInit(Reader)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ReInit(Ljava/io/Reader;)V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: VariableInitializer()V
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: FormalParameter()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
String string = "<tlSI$^]IC#";
JavaParser javaParser = new JavaParser(string);
((JavaParser) stringReader).ReInit((Reader) stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",`5BmOV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5 * (3 + 2);");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5 * (3 + 2);"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "int x = 5 * (3 + 2);";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".-0/iv]jU")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: VariableInitializer()V
TestCase is: String string = "This is a test string.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("!N8_wk>G'w")
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
StringReader stringReader = new StringReader("!N8_wk>G'w");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.1: Encountered errors during parse.");
        StringReader stringReader = new StringReader("This is a test string to demonstrate the use of a StringReader object in Java");
        javaParser.ReInit(((Reader) (stringReader)));
        javaParser.VariableInitializer();
    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.1: Encountered errors during parse."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("This is a test string to demonstrate the use of a StringReader object in Java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((Reader) (stringReader))) target is: javaParser method is: ReInit(Reader)
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
TestCase is: String string = "Java Parser Version 1.1: Encountered errors during parse.";
JavaParser javaParser = new JavaParser(string);
String string = "This is a test string to demonstrate the use of a StringReader object in Java";
StringReader stringReader = new StringReader(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("-/9")
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("-/9")
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: JavaParser javaParser = new JavaParser("-/9");
StringReader stringReader = new StringReader("-/9");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        javaParser.ReInit(((Reader) (stringReader)));
        javaParser.VariableInitializer();
    }
}
statement is: Parser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((Reader) (stringReader))) target is: javaParser method is: ReInit(Reader)
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
TestCase is: String string = "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
JavaParser javaParser = new JavaParser(string);
String string = "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
StringReader stringReader = new StringReader(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("         java+JavaParor < inputfile1");
        javaParser.ArrayInitializer();
    }
}
statement is: Parser javaParser = new JavaParser("         java+JavaParor < inputfile1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayInitializer() target is: javaParser method is: ArrayInitializer()
TestCase is: String string = "         java+JavaParor < inputfile1";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ArrayInitializer();
    }
}
statement is: Parser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ArrayInitializer() target is: Parser method is: ArrayInitializer()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("pL`'J")
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration((byte) (-113))
test data is: JavaParser javaParser = new JavaParser("pL`'J");
javaParser.MethodDeclaration((byte) (-113));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("pL`'J");
        javaParser.MethodDeclaration(((byte) (-127)));
    }
}
statement is: Parser javaParser = new JavaParser("pL`'J"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclaration(((byte) (-127))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(((byte) (-127))) target is: javaParser method is: MethodDeclaration(byte)
TestCase is: String string = "pL`'J";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: MethodDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclarator()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MethodDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for parsing a method declaration
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.MethodDeclarator();
        String methodName = "myMethod";
        String returnType = "int";
        String[] parameters = new String[]{ "int", "double" };
        boolean isStatic = false;
        boolean isFinal = false;
        // Test data for parsing a method body
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.CompilationUnit();
        String methodBody = "System.out.println(\"Hello, world!\");";
    }
}
statement is: // Test data for parsing a method declaration
JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclarator() target is: javaParser method is: MethodDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 0
Matched Method is: MethodDeclarator()V
statement is: String methodName = "myMethod", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String returnType = "int", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] parameters = new String[]{ "int", "double" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean isStatic = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isFinal = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Test data for parsing a method body
JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: String methodBody = "System.out.println(\"Hello, world!\");", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "myMethod"
* this is vulnerable: String string = "int"
* this is vulnerable: boolean _boolean = false
* this is vulnerable: boolean _boolean = false
* this is vulnerable: String string = "System.out.println(\"Hello, world!\");"
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MethodDeclarator();
String string = "myMethod";
String string = "int";
boolean _boolean = false;
boolean _boolean = false;
JavaParser javaParser = new JavaParser((Reader) null);
String string = "System.out.println(\"Hello, world!\");";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ClassOrInterfaceBodyDeclaration(true);
        // Improved test data
        StringReader stringReader = new StringReader("Java Parser Version 1.2:  File with multiple classes and interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  File "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceBodyDeclaration(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(true) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Improved test data
StringReader stringReader = new StringReader("Java Parser Version 1.2:  File with multiple classes and interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Java Parser Version 1.1:  File ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = true;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
String string = "Java Parser Version 1.2:  File with multiple classes and interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameter();
    }
}
statement is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameter()V
TestCase is: String string = "Op;9fFS 3-Nf";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

statement is: org.evosuite.testcase.statements.ArrayStatement@efcc479 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ "abc", "def", "ghi" };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.FormalParameter();
    }
}
statement is: byte[] byteArray = new byte[]{ "abc", "def", "ghi" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[]{ "abc", "def", "ghi" } Elements: ["abc", "def", "ghi"]
lengths: [3] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("<tlSI$^]IC#")
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(fileReader);
        javaParser.VariableInitializer();
        javaParser.ConstructorDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(fileReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
TestCase is: JavaParser javaParser = new JavaParser("<tlSI$^]IC#");

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("kU<?~6{%nR")
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ConstructorDeclaration(new ArrayList<String>() {
            {
                "Hello" = $missing$;
            }
        }, new int[]{ 1, 2 }, new double[]{ 3.4, 5.6 });
    }
}
statement is: Parser.ConstructorDeclaration(new ArrayList<String>() {
    {
        "Hello" = $missing$;
    }
}, new int[]{ 1, 2 }, new double[]{ 3.4, 5.6 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ConstructorDeclaration(new ArrayList<String>() {
    {
        "Hello" = $missing$;
    }
}, new int[]{ 1, 2 }, new double[]{ 3.4, 5.6 }) target is: Parser method is: ConstructorDeclaration(DummyClass$1,int[],double[])
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ExplicitConstructorInvocation();
        // Improved test data
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ExplicitConstructorInvocation();
        // Changing the primitive values and Strings to more descriptive examples
        int i = 5;// Changed from 8 to a more descriptive value

        double d = 3.14;// Changed from 0 to a more descriptive value

        String s = "Hello World";// Changed from "p8Z0" to a more descriptive String

        char c = 'A';// Changed from 'p' to a more descriptive character }}

    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
statement is: // Improved test data
StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EnumConstant()V
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: ExplicitConstructorInvocation()V
statement is: // Changing the primitive values and Strings to more descriptive examples
int i = 5// Changed from 8 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// Changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello World"// Changed from "p8Z0" to a more descriptive String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A'// Changed from 'p' to a more descriptive character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World"
* this is vulnerable: char _char = 'A'
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();
String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();
int _int = 5;
double _double = 3.14;
String string = "Hello World";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
        javaParser.Initializer();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
statement is: javaParser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Initializer() target is: javaParser method is: Initializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Initializer()V
TestCase is: String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).Initializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.Initializer();
        assertNotNull(javaParser);
        assertNotNull(javaParser.getAST());
        assertEquals(1, javaParser.getAST().getChildCount());
    }
}
statement is: Parser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.Initializer() target is: Parser method is: Initializer()
statement is: assertNotNull(javaParser), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotNull(javaParser) target is:  method is: assertNotNull(<unknown>)
statement is: assertNotNull(javaParser.getAST()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotNull(javaParser.getAST()) target is:  method is: assertNotNull(<unknown>)
statement is: assertEquals(1, javaParser.getAST().getChildCount()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(1, javaParser.getAST().getChildCount()) target is:  method is: assertEquals(int,<unknown>)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"-1234567890\n");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Initializer();
    }
}
statement is: StringReader stringReader = new StringReader("\"-1234567890\n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Initializer() target is: javaParser method is: Initializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Initializer()V
TestCase is: String string = "\"-1234567890\n";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String sourceCode = "class MyClass { int x; }";
        JavaParser javaParser = new JavaParser(sourceCode);
        javaParser.Type();
    }
}
statement is: // Improved test data
String sourceCode = "class MyClass { int x; }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(sourceCode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: Type()V
TestCase is: String string = "class MyClass { int x; }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).Type();

statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(((Reader) (null)), -3308, -3308);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Type();
        // Test data for Type() method:
        String typeName1 = "int";// Primitive typ }}

    }
}
statement is: CharStream javaCharStream = new JavaCharStream(((Reader) (null)), -3308, -3308), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: // Test data for Type() method:
String typeName1 = "int"// Primitive typ }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "int"
TestCase is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();
String string = "int";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kU<?~6{%nR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("class TestClass { void testMethod() { int x = 5; } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("class TestClass { void testMethod() { int x = 5; } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
TestCase is: String string = "class TestClass { void testMethod() { int x = 5; } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
TestCase is: String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpression();
        javaParser.TypeArgument();
    }
}
statement is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpression()V
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
TestCase is: String string = "Op;9fFS 3-Nf";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).TypeArgument();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("|#A-Pj1")
statement is: read()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read()
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 1016, (-804))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("|#A-Pj1");
stringReader.read();
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("|#A-Pj1");
        stringReader.read();
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, -804);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.TypeArgument();
    }
}
statement is: StringReader stringReader = new StringReader("|#A-Pj1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read()I
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, -804), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: TypeArgument()V
TestCase is: String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
((StringReader) string).read();
int _int = 1016;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).TypeArgument();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser")
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
        javaParser.WildcardBounds();
    }
}
statement is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: WildcardBounds()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).WildcardBounds();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("O")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("O");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("O"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
TestCase is: String string = "O";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" not found.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2214), 606)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
        javaParser.PrimitiveType();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
statement is: javaParser.PrimitiveType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType() target is: javaParser method is: PrimitiveType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: PrimitiveType()V
TestCase is: String string = "This is a test string.";
StringReader stringReader = new StringReader(string);
int _int = 606;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimitiveType();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int foo = 42;// Changed from a hardcoded value to a more descriptive example

        String bar = "hello world";// Changed from an empty string to a more representative example }}

    }
}
statement is: // Improved test data:
int foo = 42// Changed from a hardcoded value to a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String bar = "hello world"// Changed from an empty string to a more representative example }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: String string = "hello world"
TestCase is: int _int = 42;
String string = "hello world";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I^MdoAN%a_")
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: JavaParser javaParser = new JavaParser("I^MdoAN%a_");
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        String input = "This is a sample input";
        System.out.println("Input: " + input);
        // Improved test data
        String improvedInput = "I^MdoAN%a_";
        JavaParser javaParser = new JavaParser(improvedInput);
        javaParser.ResultType();
    }
}
statement is: String input = "This is a sample input", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: System.out.println("Input: " + input), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Input: " + input) target is: System.out method is: println(java.lang.String)
statement is: // Improved test data
String improvedInput = "I^MdoAN%a_", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(improvedInput), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ResultType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType() target is: javaParser method is: ResultType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ResultType()V
TestCase is: String string = "This is a sample input";
String string = "I^MdoAN%a_";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).ResultType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
        stringReader = new StringReader("com.example.MyClass.myMethod2");
        javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
    }
}
statement is: Parser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
statement is: stringReader = new StringReader("com.example.MyClass.myMethod2"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.Name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser = new JavaParser("         java+JavaParor < inputfile");
        javaParser.Name();
        // Expected output: "inputfile }}
    }
}
statement is: Parser = new JavaParser("         java+JavaParor < inputfile"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
statement is: // Expected output: "inputfile }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("John Doe, Jane Smith, Bob Johnson");
        javaParser.NameList();
    }
}
statement is: Parser javaParser = new JavaParser("John Doe, Jane Smith, Bob Johnson"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
TestCase is: String string = "John Doe, Jane Smith, Bob Johnson";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new FileReader("path/to/file.java"));
        javaParser.ArgumentList("add", 1, "2");
    }
}
statement is: Parser javaParser = new JavaParser(new FileReader("path/to/file.java")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList("add", 1, "2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList("add", 1, "2") target is: javaParser method is: ArgumentList(java.lang.String,int,java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression(new ClassNode("java.lang.Object"));
        javaParser.AssignmentOperator();
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression(new ClassNode("com.example.MyClass"));
        javaParser.AssignmentOperator();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(new ClassNode("java.lang.Object")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression(new ClassNode("java.lang.Object")) target is: javaParser method is: InstanceOfExpression(ClassNode)
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AssignmentOperator()V
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(new ClassNode("com.example.MyClass")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression(new ClassNode("com.example.MyClass")) target is: javaParser method is: InstanceOfExpression(ClassNode)
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: AssignmentOperator()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();
String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("kU<?~6{%nR")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String input = "The quick brown fox jumps over the lazy dog";
        String expectedOutput = "The quick brown fox jumps over the lazy dog".toUpperCase();
        JavaParser javaParser = new JavaParser(input);
        javaParser.AssignmentOperator();
        assertEquals(expectedOutput, javaParser.getOutput());
    }
}
statement is: // Improved test data
String input = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutput = "The quick brown fox jumps over the lazy dog".toUpperCase(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: "The quick brown fox jumps over the lazy dog".toUpperCase() target is: "The quick brown fox jumps over the lazy dog" method is: toUpperCase()
statement is: JavaParser javaParser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AssignmentOperator()V
statement is: assertEquals(expectedOutput, javaParser.getOutput()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, javaParser.getOutput()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: String string = "The quick brown fox jumps over the lazy dog";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).AssignmentOperator();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("j=`To")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("j=`To");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("j=10");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
    }
}
statement is: StringReader stringReader = new StringReader("j=10"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
TestCase is: String string = "j=10";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java+JavaParor < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java+JavaParor < inputfile");// Input file for the parser

        JavaCharStream javaCharStream = new JavaCharStream(stringReader);// Token stream created from the input file

        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);// Token manager that generates tokens from the token stream

        JavaParser javaParser = new JavaParser(javaParserTokenManager);// Parser that uses the token manager to parse the code

        javaParser.VariableInitializer();// Call to the method that we want to test, in this case VariableInitializer() }}

    }
}
statement is: StringReader stringReader = new StringReader("         java+JavaParor < inputfile")// Input file for the parser
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader)// Token stream created from the input file
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream)// Token manager that generates tokens from the token stream
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager)// Parser that uses the token manager to parse the code
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer()// Call to the method that we want to test, in this case VariableInitializer() }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer()// Call to the method that we want to test, in this case VariableInitializer() }}
 target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: VariableInitializer()V
TestCase is: String string = "         java+JavaParor < inputfile";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("+jp/K")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader("+jp/K");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Ajp/javaParserTest");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
    }
}
statement is: StringReader stringReader = new StringReader("Ajp/javaParserTest"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArgumentList()V
TestCase is: String string = "Ajp/javaParserTest";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("NC75E%^")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("NC75E%^");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("9842JDH");// A different sample input for the JavaParser

        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.VariableInitializer();
        StringReader stringReader2 = new StringReader("4356BTN");// Another different sample input for the JavaParser

        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.VariableInitializer();
    }
}
statement is: StringReader stringReader1 = new StringReader("9842JDH")// A different sample input for the JavaParser
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.VariableInitializer() target is: javaParser1 method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: StringReader stringReader2 = new StringReader("4356BTN")// Another different sample input for the JavaParser
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.VariableInitializer() target is: javaParser2 method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: VariableInitializer()V
TestCase is: String string = "9842JDH";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
String string = "4356BTN";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, even if it is the same class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class, even if it is the same class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "A class cannot extend more than one other class, even if it is the same class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("+}B&-U:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        // Improved test data
        StringReader stringReader = new StringReader("+}B&-U:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
statement is: // Improved test data
StringReader stringReader = new StringReader("+}B&-U:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "+}B&-U:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_X[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("_X[");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("_X["), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "_X[";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("z4;-~O")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("z4;-~O");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
        javaParser.RelationalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("z4;-~O"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
TestCase is: String string = "z4;-~O";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).RelationalExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ResultType();
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ResultType();
        javaParser.ArgumentList();
        // Improved test data
        StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");// The input string for the parser

        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();// The parsed expression

        javaParser.ResultType();// The type of the expression

        javaParser.ArgumentList();// The list of arguments in the expression }}

    }
}
statement is: StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ResultType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType() target is: javaParser method is: ResultType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ResultType()V
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArgumentList()V
statement is: // Improved test data
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m")// The input string for the parser
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression()// The parsed expression
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression()// The parsed expression
 target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: Expression()V
statement is: javaParser.ResultType()// The type of the expression
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType()// The type of the expression
 target is: javaParser method is: ResultType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: ResultType()V
statement is: javaParser.ArgumentList()// The list of arguments in the expression }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList()// The list of arguments in the expression }}
 target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: ArgumentList()V
TestCase is: String string = "9v,Z%GPib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();
String string = "9v,Z%GPib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".-0/iv]jU")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test String.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test String."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: UnaryExpression()V
TestCase is: String string = "This is a test String.";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@=@")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("@=@");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        StringReader stringReader = new StringReader("42");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        // The above code snippet tests the UnaryExpression() method of the JavaParser class with a more descriptive and representative test data set, such as an integer value instead of a primitive value. }}
    }
}
statement is: // Improved test data for the JavaParser class
StringReader stringReader = new StringReader("42"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
statement is: // The above code snippet tests the UnaryExpression() method of the JavaParser class with a more descriptive and representative test data set, such as an integer value instead of a primitive value. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "42";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("=?|k6\"y)X{Ox2WMGzP")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 88, (-1779))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: StringReader stringReader = new StringReader("=?|k6\"y)X{Ox2WMGzP");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 88, -1779);// This test data is not representative of the situation being tested as it is a hard-coded value.

        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);// This test data is not representative of the situation being tested as it is a hard-coded value.

        JavaParser javaParser = new JavaParser(javaParserTokenManager);// This test data is not representative of the situation being tested as it is a hard-coded value.

        javaParser.AndExpression();// This test data is not representative of the situation being tested as it is a hard-coded method call }}

    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 88, -1779)// This test data is not representative of the situation being tested as it is a hard-coded value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream)// This test data is not representative of the situation being tested as it is a hard-coded value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager)// This test data is not representative of the situation being tested as it is a hard-coded value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression()// This test data is not representative of the situation being tested as it is a hard-coded method call }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression()// This test data is not representative of the situation being tested as it is a hard-coded method call }}
 target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AndExpression()V
TestCase is: int _int = 88;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1 + 2 * 3");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MultiplicativeExpression();
    }
}
statement is: StringReader stringReader = new StringReader("1 + 2 * 3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MultiplicativeExpression()V
TestCase is: String string = "1 + 2 * 3";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kU<?~6{%nR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample text for testing the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample text for testing the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "This is a sample text for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(":")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: PreIncrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreIncrementExpression()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.PreIncrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        double y = 3.14;
        String name = "John Doe";
        char initial = 'A';
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char initial = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "John Doe";
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("|#A-Pj1")
statement is: PreDecrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreDecrementExpression()
test data is: JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.PreDecrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("|#A-Pj1");
        javaParser.PreDecrementExpression();
        javaParser.IncrementExpression();
        javaParser.MultiplicationExpression();
        javaParser.DivisionExpression();
        javaParser.ModuloExpression();
    }
}
statement is: Parser javaParser = new JavaParser("|#A-Pj1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreDecrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreDecrementExpression() target is: javaParser method is: PreDecrementExpression()
statement is: javaParser.IncrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IncrementExpression() target is: javaParser method is: IncrementExpression()
statement is: javaParser.MultiplicationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicationExpression() target is: javaParser method is: MultiplicationExpression()
statement is: javaParser.DivisionExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DivisionExpression() target is: javaParser method is: DivisionExpression()
statement is: javaParser.ModuloExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ModuloExpression() target is: javaParser method is: ModuloExpression()
TestCase is: String string = "|#A-Pj1";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf")
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Op;9fFS 3-Nf");
        javaParser.UnaryExpressionNotPlusMinus(9, "Hello World", 'a');
    }
}
statement is: Parser javaParser = new JavaParser("Op;9fFS 3-Nf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(9, "Hello World", 'a'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus(9, "Hello World", 'a') target is: javaParser method is: UnaryExpressionNotPlusMinus(int,java.lang.String,char)
TestCase is: String string = "Op;9fFS 3-Nf";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("|#A-Pj1")
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] words = new String[]{ "apple", "banana", "cherry" };
        char[] letters = new char[]{ 'a', 'b', 'c' };
        double[] prices = new double[]{ 1.0, 2.0, 3.0 };
        // Original test data
        int[] numbers = new int[]{ 100, 200, 300, 400, 500 };
        String[] words = new String[]{ "a", "b", "c" };
        char[] letters = new char[]{ 'x', 'y', 'z' };
        double[] prices = new double[]{ 10.0, 20.0, 30.0 };
    }
}
statement is: // Improved test data
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] words = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] letters = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] prices = new double[]{ 1.0, 2.0, 3.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Original test data
int[] numbers = new int[]{ 100, 200, 300, 400, 500 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] words = new String[]{ "a", "b", "c" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] letters = new char[]{ 'x', 'y', 'z' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] prices = new double[]{ 10.0, 20.0, 30.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf")
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a string that contains special characters like \\ and \"");
        javaParser.PostfixExpression();
    }
}
statement is: Parser javaParser = new JavaParser("This is a string that contains special characters like \\ and \""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
TestCase is: String string = "This is a string that contains special characters like \\ and \"";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        int a = 10;
        String b = "world";
        System.out.println("a: " + a);
        System.out.println("b: " + b);
    }
}
statement is: int a = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String b = "world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: System.out.println("a: " + a), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("a: " + a) target is: System.out method is: println(java.lang.String)
statement is: System.out.println("b: " + b), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("b: " + b) target is: System.out method is: println(java.lang.String)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "world"
TestCase is: int _int = 10;
String string = "world";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("YAI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Addition with integers");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
        javaParser.CastExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Addition with integers"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
statement is: javaParser.CastExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastExpression()V
TestCase is: String string = "Addition with integers";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).CastExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Example test data for a CastExpression
        String code = "int x = (int) 5;";
        JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.CastExpression(code);
    }
}
statement is: // Example test data for a CastExpression
String code = "int x = (int) 5;", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastExpression(code), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression(code) target is: javaParser method is: CastExpression(java.lang.String)
* this is vulnerable: String string = "int x = (int) 5;"
TestCase is: String string = "int x = (int) 5;";
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"Xx5/pnU")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: StringReader stringReader = new StringReader("\"Xx5/pnU");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("int x = 10;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CastExpression();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("int x = 10;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastExpression()V
TestCase is: String string = "int x = 10;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("This is a longer sentence with multiple words."));
        javaParser.PrimaryExpression();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("This is a longer sentence with multiple words.")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("*rshft")
statement is: MemberSelector()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberSelector()
test data is: JavaParser javaParser = new JavaParser("*rshft");
javaParser.MemberSelector();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("employee");
        javaParser.testSelectMembers();
    }
}
statement is: Parser javaParser = new JavaParser("employee"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.testSelectMembers(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.testSelectMembers() target is: javaParser method is: testSelectMembers()
TestCase is: String string = "employee";
JavaParser javaParser = new JavaParser(string);

statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile("[|xJHvmM", "=?|k6\"y).X{Oxw+uGP")
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: MockFile createTempFile = (MockFile)MockFile.createTempFile("[|xJHvmM", "=?|k6\"y).X{Oxw+uGP");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile createTempFile = ((MockFile) (MockFile.createTempFile("example", "file")));
        MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.PrimarySuffix();
    }
}
statement is: MockFile createTempFile = ((MockFile) (MockFile.createTempFile("example", "file"))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((MockFile) (MockFile.createTempFile("example", "file"))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: PrimarySuffix()V
TestCase is: String string = "example";
String string = "file";
MockFile createTempFile = (MockFile)MockFile.createTempFile(string, string);
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
((JavaParser) createTempFile).PrimarySuffix();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
        System.out.println("The sum of the numbers is: " + getSum(numbers));
    }

    private static int getSum(List<Integer> numbers) {
        return numbers.stream().mapToInt(( x) -> x).sum();
    }
}
statement is: return numbers.stream().mapToInt(( x) -> x).sum(), class spoon.support.reflect.code.CtReturnImpl
statement is: List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(1, 2, 3, 4, 5) target is: Arrays method is: asList(int,int,int,int,int)
statement is: System.out.println("The sum of the numbers is: " + getSum(numbers)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("The sum of the numbers is: " + getSum(numbers)) target is: System.out method is: println(char[])
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// The variable "x" is assigned the value of 5, which is not a very descriptive value for this scenario.

        int y = 10;// The variable "y" is assigned the value of 10, which is also not very descriptive.

        int z = x + y;// The variable "z" is assigned the sum of "x" and "y", which is a simple addition operation that is not particularly interesting or challenging to test.

        System.out.println(z);// Outputs 15, which is also not very descriptive or challenging to test. }}

    }
}
statement is: int x = 5// The variable "x" is assigned the value of 5, which is not a very descriptive value for this scenario.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int y = 10// The variable "y" is assigned the value of 10, which is also not very descriptive.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int z = x + y// The variable "z" is assigned the sum of "x" and "y", which is a simple addition operation that is not particularly interesting or challenging to test.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: x + y
statement is: System.out.println(z)// Outputs 15, which is also not very descriptive or challenging to test. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(z)// Outputs 15, which is also not very descriptive or challenging to test. }}
 target is: System.out method is: println(int)
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 10
TestCase is: int _int = 5;
int _int = 10;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.BooleanLiteral();
        // Changed from "p8Z0" to "P8z0" for better case sensitivity testing
        StringReader stringReader2 = new StringReader("P8z0");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.EnumConstant();
        javaParser2.BooleanLiteral();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral() target is: javaParser method is: BooleanLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BooleanLiteral()V
statement is: // Changed from "p8Z0" to "P8z0" for better case sensitivity testing
StringReader stringReader2 = new StringReader("P8z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.EnumConstant() target is: javaParser2 method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EnumConstant()V
statement is: javaParser2.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.BooleanLiteral() target is: javaParser2 method is: BooleanLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: BooleanLiteral()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();
String string = "P8z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("true");
        javaParser.BooleanLiteral();// Test case 1 - true

        javaParser = new JavaParser("false");
        javaParser.BooleanLiteral();// Test case 2 - false

        javaParser = new JavaParser("yes");
        javaParser.BooleanLiteral();// Test case 3 - yes

        javaParser = new JavaParser("no");
        javaParser.BooleanLiteral();// Test case 4 - n }}

    }
}
statement is: Parser javaParser = new JavaParser("true"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BooleanLiteral()// Test case 1 - true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral()// Test case 1 - true
 target is: javaParser method is: BooleanLiteral()
statement is: javaParser = new JavaParser("false"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.BooleanLiteral()// Test case 2 - false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral()// Test case 2 - false
 target is: javaParser method is: BooleanLiteral()
statement is: javaParser = new JavaParser("yes"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.BooleanLiteral()// Test case 3 - yes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral()// Test case 3 - yes
 target is: javaParser method is: BooleanLiteral()
statement is: javaParser = new JavaParser("no"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.BooleanLiteral()// Test case 4 - n }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral()// Test case 4 - n }}
 target is: javaParser method is: BooleanLiteral()
TestCase is: String string = "true";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: NullLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NullLiteral()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.NullLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("       Java+JavaParser < inputfile");
        javaParser.NullLiteral();
    }
}
statement is: Parser javaParser = new JavaParser("       Java+JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NullLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NullLiteral() target is: javaParser method is: NullLiteral()
TestCase is: String string = "       Java+JavaParser < inputfile";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf")
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("bqImD`.c\"#Qf");
        javaParser.Arguments();
    }
}
statement is: Parser javaParser = new JavaParser("bqImD`.c\"#Qf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Arguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Arguments() target is: javaParser method is: Arguments()
TestCase is: String string = "bqImD`.c\"#Qf";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("'>#h:xQ!")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader("'>#h:xQ!");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A long string with a variety of characters, including numbers, letters, and special characters");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArgumentList();
    }
}
statement is: StringReader stringReader = new StringReader("A long string with a variety of characters, including numbers, letters, and special characters"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArgumentList()V
TestCase is: String string = "A long string with a variety of characters, including numbers, letters, and special characters";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I^MdoAN%a_")
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: JavaParser javaParser = new JavaParser("I^MdoAN%a_");
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("I^MdoAN%a_");// This is a valid Java identifier

        javaParser.AllocationExpression();
    }
}
statement is: Parser javaParser = new JavaParser("I^MdoAN%a_")// This is a valid Java identifier
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AllocationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AllocationExpression() target is: javaParser method is: AllocationExpression()
TestCase is: String string = "I^MdoAN%a_";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null)));
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        // Create an allocation expression for a local variable of type "int" with the name "x"
        javaParser.AllocationExpression("int", "x");
        // Create an allocation expression for a field of a class named "Foo" with the name "bar"
        javaParser.AllocationExpression("Foo", "bar");
        // Create an allocation expression for a method return value of type "String"
        javaParser.AllocationExpression("String");
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create an allocation expression for a local variable of type "int" with the name "x"
javaParser.AllocationExpression("int", "x"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Create an allocation expression for a local variable of type "int" with the name "x"
javaParser.AllocationExpression("int", "x") target is: javaParser method is: AllocationExpression(java.lang.String,java.lang.String)
statement is: // Create an allocation expression for a field of a class named "Foo" with the name "bar"
javaParser.AllocationExpression("Foo", "bar"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Create an allocation expression for a field of a class named "Foo" with the name "bar"
javaParser.AllocationExpression("Foo", "bar") target is: javaParser method is: AllocationExpression(java.lang.String,java.lang.String)
statement is: // Create an allocation expression for a method return value of type "String"
javaParser.AllocationExpression("String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Create an allocation expression for a method return value of type "String"
javaParser.AllocationExpression("String") target is: javaParser method is: AllocationExpression(java.lang.String)
TestCase is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ArrayDimsAndInits();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"\\n\\r\\t\\f\\b\\0123456789\\\"\'!@#$%^&*()-=[]{}|;:,./<>?`~\\\\ \\u000A\\u000D\\u0009\\u0008\\u0007\\u001F\\u007F\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.ArrayDimsAndInits();
    }
}
statement is: StringReader stringReader = new StringReader("\"\\n\\r\\t\\f\\b\\0123456789\\\"\'!@#$%^&*()-=[]{}|;:,./<>?`~\\\\ \\u000A\\u000D\\u0009\\u0008\\u0007\\u001F\\u007F\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "\"\\n\\r\\t\\f\\b\\0123456789\\\"'!@#$%^&*()-=[]{}|;:,./<>?`~\\\\ \\u000A\\u000D\\u0009\\u0008\\u0007\\u001F\\u007F\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_TXc[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 31, 31, 2266)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ForUpdate();
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.ForUpdate();
        javaParser.ArrayDimsAndInits();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForUpdate()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ArrayDimsAndInits()V
TestCase is: int _int = 31;
int _int = 31;
int _int = 2266;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, _int, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).ForUpdate();
((JavaParser) javaCharStream).ArrayDimsAndInits();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("");
        javaParser.ArrayDimsAndInits(null, new String[]{ "", "" }, new int[]{ 1, 2 }, new double[]{ 3.0, 4.0 });
    }
}
statement is: Parser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayDimsAndInits(null, new String[]{ "", "" }, new int[]{ 1, 2 }, new double[]{ 3.0, 4.0 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits(null, new String[]{ "", "" }, new int[]{ 1, 2 }, new double[]{ 3.0, 4.0 }) target is: javaParser method is: ArrayDimsAndInits(<unknown>,java.lang.String[],int[],double[])
TestCase is: String string = "";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
TestCase is: String string = "class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_TXc[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "9v,Z%GPDib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\";\"")
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("\"This is a sample input string for testing purposes.\"");
        JavaParser javaParser = new JavaParser("\"This is a sample input string for testing purposes.\"");
        javaParser.Statement();
    }
}
statement is: SystemInUtil.addInputLine("\"This is a sample input string for testing purposes.\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("\"This is a sample input string for testing purposes.\"") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("\"This is a sample input string for testing purposes.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Statement()V
TestCase is: String string = "\"This is a sample input string for testing purposes.\"";
SystemInUtil.addInputLine(string);
String string = "\"This is a sample input string for testing purposes.\"";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(". State unchanged.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "\"Hello, World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(":")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(": Hello World");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader(": Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = ": Hello World";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.Statement();
    }
}
statement is: Parser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.Statement() target is: Parser method is: Statement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" \"o")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader(" \"o");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, world!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, world!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "\"Hello, world!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Op;9fFS 3-Nf /* Hello World! */");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.statement();
    }
}
statement is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf /* Hello World! */"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.statement() target is: javaParser method is: statement()
TestCase is: String string = "Op;9fFS 3-Nf /* Hello World! */";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("+}8B&-U:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AssertStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssertStatement()
test data is: StringReader stringReader = new StringReader("+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AssertStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        StringReader stringReader = new StringReader("{+}8B&-U:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AssertStatement();
    }
}
statement is: // Improved test data for the above code snippet
StringReader stringReader = new StringReader("{+}8B&-U:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssertStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssertStatement() target is: javaParser method is: AssertStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AssertStatement()V
TestCase is: String string = "{+}8B&-U:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: LabeledStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LabeledStatement()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.LabeledStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.LabeledStatement();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LabeledStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LabeledStatement() target is: javaParser method is: LabeledStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LabeledStatement()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("O93gF4P`W)CXM!>")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: LabeledStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LabeledStatement()
test data is: StringReader stringReader = new StringReader("O93gF4P`W)CXM!>");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.LabeledStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A more descriptive example of a StringReader");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.LabeledStatement();
    }
}
statement is: StringReader stringReader = new StringReader("A more descriptive example of a StringReader"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LabeledStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LabeledStatement() target is: javaParser method is: LabeledStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LabeledStatement()V
TestCase is: String string = "A more descriptive example of a StringReader";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Vb[&Zn*\"")
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int i = 42;
        double d = 0.1984;
        String s = "The Answer to the Ultimate Question of Life, the Universe, and Everything";
        char c = '$';
    }
}
statement is: int i = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 0.1984, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "The Answer to the Ultimate Question of Life, the Universe, and Everything", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = '$', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 0.1984
* this is vulnerable: String string = "The Answer to the Ultimate Question of Life, the Universe, and Everything"
* this is vulnerable: char _char = '$'
TestCase is: int _int = 42;
double _double = 0.1984;
String string = "The Answer to the Ultimate Question of Life, the Universe, and Everything";
char _char = '$';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "9v,Z%GPDib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot have initializers")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) throws IOException {
        StringReader stringReader = new StringReader("An interface cannot have initializers");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("An interface cannot have initializers"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "An interface cannot have initializers";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("      [  java JavaLarser inputfil`")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("      [  java JavaLarser inputfil`");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("      [  java JavaLarser inputfile`");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
        // Improved test data
        StringReader stringReader1 = new StringReader("      [  java JavaLarser inputfile.java");
        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("      [  java JavaLarser inputfile`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
statement is: // Improved test data
StringReader stringReader1 = new StringReader("      [  java JavaLarser inputfile.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.BlockStatement() target is: javaParser1 method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: BlockStatement()V
TestCase is: String string = "      [  java JavaLarser inputfile`";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();
String string = "      [  java JavaLarser inputfile.java";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".  Encountered: ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(".  Encountered: ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader(".  Encountered: "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = ".  Encountered: ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><element attribute=\"value\"/><element>text</element></root>");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><element attribute=\"value\"/><element>text</element></root>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
TestCase is: String string = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><element attribute=\"value\"/><element>text</element></root>";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("9v,Z%GPib3|%^`m")
statement is: LocalVariableDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LocalVariableDeclaration()
test data is: JavaParser javaParser = new JavaParser("9v,Z%GPib3|%^`m");
javaParser.LocalVariableDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("1234567890");// Input String containing only numbers

        javaParser.LocalVariableDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser("1234567890")// Input String containing only numbers
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
TestCase is: String string = "1234567890";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("[zM")
statement is: EmptyStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EmptyStatement()
test data is: JavaParser javaParser = new JavaParser("[zM");
javaParser.EmptyStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("hello");
        javaParser.EmptyStatement();
    }
}
statement is: Parser javaParser = new JavaParser("hello"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EmptyStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EmptyStatement() target is: javaParser method is: EmptyStatement()
TestCase is: String string = "hello";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot have initializers")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("An interface cannot have initializers");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("An interface cannot have initializers"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "An interface cannot have initializers";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_TXc[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 31, 31, 2266)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 25, 31, 2266);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
        javaParser.ForUpdate();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 25, 31, 2266), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForUpdate()V
TestCase is: int _int = 25;
int _int = 31;
int _int = 2266;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, _int, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A;class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        javaParser.ForUpdate();
        // Improved test data
        StringReader stringReader = new StringReader("B;class cannot extend more than one other class, but it can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("A;class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: // Improved test data
StringReader stringReader = new StringReader("B;class cannot extend more than one other class, but it can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: UnaryExpression()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: ForUpdate()V
TestCase is: String string = "A;class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();
String string = "B;class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.Type();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
        javaParser.Type();
        javaParser.ForUpdate();
        // Improved test data:
        StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
        javaParser.Type();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: StatementExpressionList()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: ForUpdate()V
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
String string = "abcdefghijklmnopqrstuvwxyz";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(". State unchanged.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("// Test case 1\n" + ((("int x = 5;\n" + "int y = 10;\n") + "System.out.println(x);\n") + "System.out.println(y);"));
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("// Test case 1\n" + ((("int x = 5;\n" + "int y = 10;\n") + "System.out.println(x);\n") + "System.out.println(y);")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: StatementExpression()V
TestCase is: StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<jD1TR=X;#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("kU<?~6{%nR")
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ForUpdate(1, "Hello World", 3.14);
    }
}
statement is: Parser.ForUpdate(1, "Hello World", 3.14), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ForUpdate(1, "Hello World", 3.14) target is: Parser method is: ForUpdate(int,java.lang.String,double)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kU<?~6{%nR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("n:f+xv/:Y's")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 88, 88)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.AndExpression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Type();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("n:f+xv/:Y's");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.AndExpression();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.Type();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("n:f+xv/:Y's"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
TestCase is: String string = "n:f+xv/:Y's";
StringReader stringReader = new StringReader(string);
int _int = 88;
int _int = 88;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).Type();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        javaParser.ForUpdate();
        // Replace the hard-coded integer values with more descriptive ones
        int numberOfEmployees = 10;
        int averageSalary = 50000;
        // Replace the hard-coded string value with a more representative one
        String companyName = "ABC Inc.";
        // Create a list of employee objects with more descriptive data
        List<Employee> employees = new ArrayList<>();
        for (int i = 0; i < numberOfEmployees; i++) {
            Employee employee = new Employee();
            employee.setId(i);
            employee.setName("John Doe");
            employee.setSalary(averageSalary);
            employees.add(employee);
        }
        // Create a list of forUpdate objects with more descriptive data
        List<ForUpdate> forUpdates = new ArrayList<>();
        for (int i = 0; i < numberOfEmployees; i++) {
            ForUpdate forUpdate = new ForUpdate();
            forUpdate.setId(i);
            forUpdate.setName("Jane Doe");
            forUpdate.setSalary(averageSalary + (i * 1000));
            forUpdates.add(forUpdate);
        }
    }
}
statement is: StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: // Replace the hard-coded integer values with more descriptive ones
int numberOfEmployees = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int averageSalary = 50000, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Replace the hard-coded string value with a more representative one
String companyName = "ABC Inc.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Create a list of employee objects with more descriptive data
List<Employee> employees = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: for (int i = 0; i < numberOfEmployees; i++) {
    Employee employee = new Employee();
    employee.setId(i);
    employee.setName("John Doe");
    employee.setSalary(averageSalary);
    employees.add(employee);
}, class spoon.support.reflect.code.CtForImpl
statement is: // Create a list of forUpdate objects with more descriptive data
List<ForUpdate> forUpdates = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: for (int i = 0; i < numberOfEmployees; i++) {
    ForUpdate forUpdate = new ForUpdate();
    forUpdate.setId(i);
    forUpdate.setName("Jane Doe");
    forUpdate.setSalary(averageSalary + (i * 1000));
    forUpdates.add(forUpdate);
}, class spoon.support.reflect.code.CtForImpl
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 50000
* this is vulnerable: String string = "ABC Inc."
TestCase is: String string = "9v,Z%GPDib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();
int _int = 10;
int _int = 50000;
String string = "ABC Inc.";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        String y = "hello";
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
TestCase is: int _int = 5;
String string = "hello";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.switchStatement();
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.switchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.switchStatement() target is: javaParser method is: switchStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv")
statement is: SwitchLabel()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchLabel()
test data is: JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
javaParser.SwitchLabel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("OQA#NU^&WKyBv");
        javaParser.SwitchLabel();
        // Improved test data
        javaParser = new JavaParser("Test string for switch label");
        javaParser.SwitchLabel();
    }
}
statement is: Parser javaParser = new JavaParser("OQA#NU^&WKyBv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchLabel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchLabel() target is: javaParser method is: SwitchLabel()
statement is: // Improved test data
javaParser = new JavaParser("Test string for switch label"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.SwitchLabel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchLabel() target is: javaParser method is: SwitchLabel()
TestCase is: String string = "OQA#NU^&WKyBv";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.IfStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IfStatement() target is: javaParser method is: IfStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: IfStatement()V
TestCase is: String string = "Hello World";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.IfStatement();
    }
}
statement is: Parser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.IfStatement() target is: Parser method is: IfStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf")
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.whileStatement();
        // other asserts.. }}
    }
}
statement is: Parser.whileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.whileStatement() target is: Parser method is: whileStatement()
statement is: // other asserts.. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 10;
        double y = 3.14159;
        String name = "Jane Doe";
        char gender = 'F';
        boolean isStudent = false;
    }
}
statement is: // Improved test data
int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14159, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "Jane Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'F', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isStudent = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14159
* this is vulnerable: String string = "Jane Doe"
* this is vulnerable: char _char = 'F'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 10;
double _double = 3.14159;
String string = "Jane Doe";
char _char = 'F';
boolean _boolean = false;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("n:f+xv/:Y's")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 88, 88)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0, 2)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("n:f+xv/:Y's");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.WhileStatement();
    }
}
statement is: StringReader stringReader = new StringReader("n:f+xv/:Y's"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WhileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WhileStatement() target is: javaParser method is: WhileStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: WhileStatement()V
TestCase is: String string = "n:f+xv/:Y's";
StringReader stringReader = new StringReader(string);
int _int = 88;
int _int = 88;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
int _int = 2;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, _int);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).WhileStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Test string");
        javaParser.DoStatement();
    }
}
statement is: Parser javaParser = new JavaParser("Test string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.DoStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DoStatement() target is: javaParser method is: DoStatement()
TestCase is: String string = "Test string";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 5;// A small integer value

        double y = 3.14;// A double value with a decimal point

        String name = "John Doe";// A String object with a full name

        char grade = 'A';// A character value representing a grade

        javaParser.DoStatement(x, y, name, grade);
    }
}
statement is: // Improved test data
int x = 5// A small integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// A double value with a decimal point
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe"// A String object with a full name
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char grade = 'A'// A character value representing a grade
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.DoStatement(x, y, name, grade), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DoStatement(x, y, name, grade) target is: javaParser method is: DoStatement(int,double,java.lang.String,char)
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "John Doe";
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv")
statement is: ForStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForStatement()
test data is: JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
javaParser.ForStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("John Doe");
        javaParser.ForStatement();
    }
}
statement is: Parser javaParser = new JavaParser("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForStatement() target is: javaParser method is: ForStatement()
TestCase is: String string = "John Doe";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "\"Hello, World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("example_file_descriptor.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.ForInit();
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("example_file_descriptor.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
statement is: mock(java.util.Enumeration<java.io.PushbackInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.PushbackInputStream>
statement code is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<PushbackInputStream> enumeration = ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(true, false).when(enumeration).hasMoreElements();
        doReturn(((Object) ("Hello")), null).when(enumeration).nextElement();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.ForInit();
    }
}
statement is: Enumeration<PushbackInputStream> enumeration = ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.PushbackInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 3
i 1 Parameters size() 0 Num of Method Parameters: 3
i 2 Parameters size() 0 Num of Method Parameters: 3
statement is: doReturn(true, false).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true, false).when(enumeration).hasMoreElements() target is: doReturn(true, false).when(enumeration) method is: hasMoreElements()
statement is: doReturn(((Object) ("Hello")), null).when(enumeration).nextElement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((Object) ("Hello")), null).when(enumeration).nextElement() target is: doReturn(((Object) ("Hello")), null).when(enumeration) method is: nextElement()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForInit()V
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Object object = null;
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
doReturn(object).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) object).ForInit();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("Hello World"));
        javaParser.ForUpdate();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("Hello World")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: org.evosuite.testcase.statements.FieldStatement@6537d7c2 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.io.PrintStream
statement code is: PrintStream printStream = javaParser.token_source.debugStream
statement is: org.evosuite.runtime.mock.java.io.MockPrintWriter(Ljava/io/OutputStream;Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintWriter
statement code is: MockPrintWriter mockPrintWriter = new MockPrintWriter(arg0, javaParser.lookingAhead)
statement is: dump(Ljava/io/Writer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.dump(arg0)
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
PrintStream printStream = javaParser.token_source.debugStream;
MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, javaParser.lookingAhead);
javaParser.dump(mockPrintWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        PrintStream printStream = javaParser.token_source.debugStream;
        MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, javaParser.lookingAhead);
        javaParser.dump(mockPrintWriter);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: PrintStream printStream = javaParser.token_source.debugStream, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: javaParser.token_source.debugStream is javaParser.token_source
CtField is: public java.io.PrintStream com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.debugStream PrintStream debugStream
statement is: MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, javaParser.lookingAhead), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockPrintWriter(Ljava/io/OutputStream;Z)V
statement is: javaParser.dump(mockPrintWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.dump(mockPrintWriter) target is: javaParser method is: dump(MockPrintWriter)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BreakStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BreakStatement()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BreakStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BreakStatement();
        // Improved test data
        StringReader stringReader = new StringReader("p8Z0\n // Break statement to exit the loop.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BreakStatement();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BreakStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BreakStatement() target is: javaParser method is: BreakStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BreakStatement()V
statement is: // Improved test data
StringReader stringReader = new StringReader("p8Z0\n // Break statement to exit the loop."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BreakStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BreakStatement() target is: javaParser method is: BreakStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: BreakStatement()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();
String string = "p8Z0\n // Break statement to exit the loop.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("YAI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReturnStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReturnStatement()
test data is: StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReturnStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("AYAI");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReturnStatement();
    }
}
statement is: StringReader stringReader = new StringReader("AYAI"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReturnStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReturnStatement() target is: javaParser method is: ReturnStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReturnStatement()V
TestCase is: String string = "AYAI";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("n")
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: JavaParser javaParser = new JavaParser("n");
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String str = "Hello World";
    }
}
statement is: String str = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello World"
TestCase is: String string = "Hello World";

statement is: org.evosuite.testcase.statements.ArrayStatement@1682cebd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0x1, 0x2 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ThrowStatement();
    }
}
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ 0x1, 0x2 } Elements: [0x1, 0x2]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("|#A-Pj1")
statement is: SynchronizedStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SynchronizedStatement()
test data is: JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.SynchronizedStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        JavaParser javaParser = new JavaParser(input);
        javaParser.SynchronizedStatement();
    }
}
statement is: // Improved test data for the JavaParser class
JavaParser javaParser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement() target is: javaParser method is: SynchronizedStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 0
Matched Method is: SynchronizedStatement()V
TestCase is: JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.SynchronizedStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",`5BmOV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 2, 2)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: Done()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaCharStream.Done()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SynchronizedStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SynchronizedStatement()
test data is: StringReader stringReader = new StringReader(",`5BmOV");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
javaCharStream.Done();
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SynchronizedStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 2, 2);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        javaCharStream.Done();
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.SynchronizedStatement();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 2, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.Done(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.Done() target is: javaCharStream method is: Done()
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement() target is: javaParser method is: SynchronizedStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: SynchronizedStatement()V
TestCase is: int _int = 2;
int _int = 2;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SynchronizedStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TryStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TryStatement()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TryStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TryStatement();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TryStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TryStatement() target is: javaParser method is: TryStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TryStatement()V
TestCase is: String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"\n\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TryStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TryStatement()
test data is: StringReader stringReader = new StringReader("\"\n\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.TryStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"\n This is a sample input string with multiple lines \\n including whitespace and special characters\"");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.TryStatement();
    }
}
statement is: StringReader stringReader = new StringReader("\"\n This is a sample input string with multiple lines \\n including whitespace and special characters\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TryStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TryStatement() target is: javaParser method is: TryStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: TryStatement()V
TestCase is: String string = "\"\n This is a sample input string with multiple lines \\n including whitespace and special characters\"";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).TryStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: RUNSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RUNSIGNEDSHIFT()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.RUNSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("unsignedShift");
        javaParser.RUNSIGNEDSHIFT();
    }
}
statement is: Parser javaParser = new JavaParser("unsignedShift"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RUNSIGNEDSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RUNSIGNEDSHIFT() target is: javaParser method is: RUNSIGNEDSHIFT()
TestCase is: String string = "unsignedShift";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: RSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RSIGNEDSHIFT()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.RSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.RSUB();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RSUB(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RSUB() target is: javaParser method is: RSUB()
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile")
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Use more descriptive and representative test data
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        String[] stringArray = new String[]{ "apple", "banana", "cherry", "date", "elderberry" };
        JavaParser javaParser = new JavaParser(intArray);
        javaParser.Annotation();
    }
}
statement is: // Use more descriptive and representative test data
int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry", "date", "elderberry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: JavaParser javaParser = new JavaParser(intArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Annotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation() target is: javaParser method is: Annotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 0
Matched Method is: Annotation()V
TestCase is: JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.Annotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Replace 'null' with a more descriptive example
        JavaParser javaParser = new JavaParser(new JavaParserTokenManager());
        // Replace 'Annotation' with a more descriptive example
        javaParser.SomeCustomAnnotation();
    }
}
statement is: // Replace 'null' with a more descriptive example
JavaParser javaParser = new JavaParser(new JavaParserTokenManager()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Replace 'Annotation' with a more descriptive example
javaParser.SomeCustomAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace 'Annotation' with a more descriptive example
javaParser.SomeCustomAnnotation() target is: javaParser method is: SomeCustomAnnotation()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("O")
statement is: NormalAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NormalAnnotation()
test data is: JavaParser javaParser = new JavaParser("O");
javaParser.NormalAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 12345;// Changed from primitive value to more descriptive example

        double y = 3.14;// Changed from primitive value to more descriptive example

        String z = "hello world";// Changed from String literal to more descriptive example

        char c = 'a';// Changed from primitive value to more descriptive example

        JavaParser javaParser = new JavaParser(x);
        javaParser.NormalAnnotation();
    }
}
statement is: // Improved test data
int x = 12345// Changed from primitive value to more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// Changed from primitive value to more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "hello world"// Changed from String literal to more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// Changed from primitive value to more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(x), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NormalAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NormalAnnotation() target is: javaParser method is: NormalAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: NormalAnnotation()V
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 12345;
double _double = 3.14;
String string = "hello world";
char _char = 'a';
JavaParser javaParser = new JavaParser((String) _int);
((JavaParser) _int).NormalAnnotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I^MdoAN%a_")
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: JavaParser javaParser = new JavaParser("I^MdoAN%a_");
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}
statement is: System.out.println("Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello World!") target is: System.out method is: println(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: SingleMemberAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SingleMemberAnnotation()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.SingleMemberAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int integerValue = 10;// Changed from 5 to a more descriptive value

        double doubleValue = 3.14;// Changed from 2.718 to a more illustrative value

        String stringValue = "Hello World";// Changed from "Test String" to a more descriptive value

        char charValue = 'A';// Changed from 'a' to a more illustrative value }}

    }
}
statement is: // Improved test data:
int integerValue = 10// Changed from 5 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14// Changed from 2.718 to a more illustrative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World"// Changed from "Test String" to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A'// Changed from 'a' to a more illustrative value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 10;
double _double = 3.14;
String string = "Hello World";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePairs()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePairs()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValuePairs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class can only have a single abstract modifier");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValuePairs();
    }
}
statement is: StringReader stringReader = new StringReader("A class can only have a single abstract modifier"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValuePairs(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePairs() target is: javaParser method is: MemberValuePairs()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValuePairs()V
TestCase is: String string = "A class can only have a single abstract modifier";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant("enumName", "ENUM_CONSTANT");
        javaParser.MemberValue("memberName", "MEMBER_VALUE");
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant("enumName", "ENUM_CONSTANT"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant("enumName", "ENUM_CONSTANT") target is: javaParser method is: EnumConstant(java.lang.String,java.lang.String)
statement is: javaParser.MemberValue("memberName", "MEMBER_VALUE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue("memberName", "MEMBER_VALUE") target is: javaParser method is: MemberValue(java.lang.String,java.lang.String)
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot have initializers")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A well-designed class should be easy to understand and maintain, with a clear structure and concise comments.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("A well-designed class should be easy to understand and maintain, with a clear structure and concise comments."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "A well-designed class should be easy to understand and maintain, with a clear structure and concise comments.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "8#Bp,)=HA!M@`lMRE";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        JavaParser parser = new JavaParser(input);
        parser.CompilationUnit();
        // Test data for the MemberValue method
        int intValue = 10;
        double doubleValue = 3.14;
        String stringValue = "hello world";
        char charValue = 'a';
    }
}
statement is: // Improved test data for the JavaParser class
JavaParser parser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.CompilationUnit() target is: parser method is: CompilationUnit()
statement is: // Test data for the MemberValue method
int intValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
TestCase is: JavaParser javaParser = new JavaParser("");
int _int = 10;
double _double = 3.14;
String string = "hello world";
char _char = 'a';

statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 88, 88)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(new StringReader("This is a string"), 88, 88);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.MemberValue();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(new StringReader("This is a string"), 88, 88), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: MemberValue()V
TestCase is: int _int = 88;
int _int = 88;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A1B2C3D4E5F6G7H8I9JKL");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
        Improved code;
        StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("A1B2C3D4E5F6G7H8I9JKL"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValueArrayInitializer()V
statement is: Improved code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: StringReader stringReader = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: MemberValueArrayInitializer()V
TestCase is: String string = "A1B2C3D4E5F6G7H8I9JKL";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

statement is: org.evosuite.testcase.statements.ArrayStatement@3d314483 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[11]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: byte[] byteArray = new byte[11];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[11] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lengths: [11] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: AnnotationTypeDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeDeclaration(66)
test data is: JavaParser javaParser = new JavaParser("");
javaParser.AnnotationTypeDeclaration(66);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}
statement is: System.out.println("Hello, world!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello, world!") target is: System.out method is: println(java.lang.String)
statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("C:\\Temp\\test.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
        javaParser.AnnotationTypeBody();
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("C:\\Temp\\test.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.AnnotationTypeBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody() target is: javaParser method is: AnnotationTypeBody()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#^o8Uj/SJO3")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: StringReader stringReader = new StringReader("#^o8Uj/SJO3");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeBody();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody() target is: javaParser method is: AnnotationTypeBody()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeBody()V
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant("MyEnum", "VALUE1");
        javaParser.AnnotationTypeMemberDeclaration(new AnnotationTypeMember("MyAnnotation", "@interface"));
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant("MyEnum", "VALUE1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant("MyEnum", "VALUE1") target is: javaParser method is: EnumConstant(java.lang.String,java.lang.String)
statement is: javaParser.AnnotationTypeMemberDeclaration(new AnnotationTypeMember("MyAnnotation", "@interface")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration(new AnnotationTypeMember("MyAnnotation", "@interface")) target is: javaParser method is: AnnotationTypeMemberDeclaration(AnnotationTypeMember)
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"?\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("\"?\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog.\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "\"The quick brown fox jumps over the lazy dog.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".  Encountered: ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: // Improved test data for the JavaParser class
JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        "    public void myMethod() {\n" = "        System.out.println(\"Hello, world!\");\n" + ("    }\n" + "}");
        // Original test data
        String input = "public class MyClass {\n" + ("    public void myMethod() {\n" + "        System.out.println(42);\n");
    }
}
statement is: // Improved test data
"    public void myMethod() {\n" = "        System.out.println(\"Hello, world!\");\n" + ("    }\n" + "}"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: // Original test data
String input = "public class MyClass {\n" + ("    public void myMethod() {\n" + "        System.out.println(42);\n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: "public class MyClass {\n" + ("    public void myMethod() {\n" + "        System.out.println(42);\n")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(">P`")
statement is: DefaultValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DefaultValue()
test data is: JavaParser javaParser = new JavaParser(">P`");
javaParser.DefaultValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser parser = new JavaParser(">P`");
        parser.parseDefaultValue();
    }
}
statement is: Parser parser = new JavaParser(">P`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parseDefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parseDefaultValue() target is: parser method is: parseDefaultValue()
TestCase is: String string = ">P`";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" not found.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2214), 606)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(" not found.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader(" not found."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForUpdate()V
TestCase is: String string = " not found.";
StringReader stringReader = new StringReader(string);
int _int = 606;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("|#A-Pj1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: skip(J)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long skip = stringReader.skip(9147936743096320L)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.skip(9147936743096320L);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("|#A-Pj1");
        JavaParser javaParser = new JavaParser(stringReader);
        stringReader.skip(9147936743096320L);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("|#A-Pj1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.skip(9147936743096320L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.skip(9147936743096320L) target is: stringReader method is: skip(long)
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: skip(J)J
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CompilationUnit()V
TestCase is: String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
long _long = 9147936743096320L;
((StringReader) string).skip(_long);
((JavaParser) stringReader).CompilationUnit();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("*rshft")
statement is: Modifiers()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int Modifiers = javaParser.Modifiers()
test data is: JavaParser javaParser = new JavaParser("*rshft");
javaParser.Modifiers();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Set the modifiers to "protected"
        javaParser.setModifiers("protected");
        // Set the modifiers to "private"
        javaParser.setModifiers("private");
        // Set the modifiers to "static"
        javaParser.setModifiers("static");
        // Set the modifiers to "final"
        javaParser.setModifiers("final");
    }
}
statement is: // Set the modifiers to "protected"
javaParser.setModifiers("protected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set the modifiers to "protected"
javaParser.setModifiers("protected") target is: javaParser method is: setModifiers(java.lang.String)
statement is: // Set the modifiers to "private"
javaParser.setModifiers("private"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set the modifiers to "private"
javaParser.setModifiers("private") target is: javaParser method is: setModifiers(java.lang.String)
statement is: // Set the modifiers to "static"
javaParser.setModifiers("static"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set the modifiers to "static"
javaParser.setModifiers("static") target is: javaParser method is: setModifiers(java.lang.String)
statement is: // Set the modifiers to "final"
javaParser.setModifiers("final"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set the modifiers to "final"
javaParser.setModifiers("final") target is: javaParser method is: setModifiers(java.lang.String)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(1)
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalAndExpression();
javaParser.ClassOrInterfaceDeclaration(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalAndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalAndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression() target is: javaParser method is: ConditionalAndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalAndExpression()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalAndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("+}B&-U:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(false)
test data is: StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBody(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("+}B&-U:");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("+}B&-U:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "+}B&-U:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FieldDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FieldDeclaration((-1752))
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FieldDeclaration((-1752));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FieldDeclaration("This is a test string for testing the JavaParser class.");
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FieldDeclaration("This is a test string for testing the JavaParser class."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FieldDeclaration("This is a test string for testing the JavaParser class.") target is: javaParser method is: FieldDeclaration(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FieldDeclaration(I)V
TestCase is: String string = "This is a test string for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
String string = "This is a test string for testing the JavaParser class.";
((JavaParser) stringReader).FieldDeclaration((int) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("z4;-~O")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x4;-~O");// A more descriptive and representative test case for the variable declarator

        JavaParser javaParser = new JavaParser(stringReader);// Initialize the JavaParser object

        javaParser.VariableDeclarator();// Parse the input string as a variable declaration }}

    }
}
statement is: StringReader stringReader = new StringReader("x4;-~O")// A more descriptive and representative test case for the variable declarator
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader)// Initialize the JavaParser object
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator()// Parse the input string as a variable declaration }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator()// Parse the input string as a variable declaration }}
 target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclarator()V
TestCase is: String string = "x4;-~O";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclaratorId()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclaratorId()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A student cannot enroll in more than two courses at a time");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclaratorId();
    }
}
statement is: StringReader stringReader = new StringReader("A student cannot enroll in more than two courses at a time"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclaratorId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclaratorId() target is: javaParser method is: VariableDeclaratorId()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableDeclaratorId()V
TestCase is: String string = "A student cannot enroll in more than two courses at a time";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"synchronized\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclaratorId()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclaratorId()
test data is: StringReader stringReader = new StringReader("\"synchronized\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Scanner scanner = new Scanner(new File("path/to/file.txt"));
        JavaParser javaParser = new JavaParser(scanner);
        VariableDeclaratorId variableDeclaratorId = javaParser.VariableDeclaratorId();
        assertEquals(variableDeclaratorId.getType(), "synchronized");
        assertEquals(variableDeclaratorId.getName(), "myLock");
    }
}
statement is: Scanner scanner = new Scanner(new File("path/to/file.txt")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(scanner), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: VariableDeclaratorId variableDeclaratorId = javaParser.VariableDeclaratorId(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclaratorId() target is: javaParser method is: VariableDeclaratorId()
statement is: assertEquals(variableDeclaratorId.getType(), "synchronized"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(variableDeclaratorId.getType(), "synchronized") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: assertEquals(variableDeclaratorId.getName(), "myLock"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(variableDeclaratorId.getName(), "myLock") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(81)
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MethodDeclaration(81);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.MethodDeclaration(81);
        // Improved test data
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.MethodDeclaration(81);
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.MethodDeclaration(81), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(81) target is: javaParser method is: MethodDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MethodDeclaration(I)V
statement is: // Improved test data
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: EnumConstant()V
statement is: javaParser.MethodDeclaration(81), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(81) target is: javaParser method is: MethodDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: MethodDeclaration(I)V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("IBMdoN&(a_")
statement is: MethodDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclarator()
test data is: JavaParser javaParser = new JavaParser("IBMdoN&(a_");
javaParser.MethodDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("IBMdoN&(a_");
        assertEquals("method name", "IBMdoN&(a_");
        assertTrue("is method declaration", javaParser.isMethodDeclaration());
    }
}
statement is: Parser javaParser = new JavaParser("IBMdoN&(a_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals("method name", "IBMdoN&(a_"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("method name", "IBMdoN&(a_") target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: assertTrue("is method declaration", javaParser.isMethodDeclaration()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue("is method declaration", javaParser.isMethodDeclaration()) target is:  method is: assertTrue(java.lang.String,<unknown>)
TestCase is: String string = "IBMdoN&(a_";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameters()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) throws Exception {
        StringReader stringReader = new StringReader("int a = 5;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameters();
    }
}
statement is: StringReader stringReader = new StringReader("int a = 5;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FormalParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameters() target is: javaParser method is: FormalParameters()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameters()V
TestCase is: String string = "int a = 5;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameters();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("A class cannot extend more than one other abstract class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalOrExpression();
        javaParser.Type();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("A class cannot extend more than one other abstract class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalOrExpression()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
TestCase is: String string = "A class cannot extend more than one other abstract class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalOrExpression();
((JavaParser) stringReader).Type();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ReferenceType();
        // Improved test data
        StringReader stringReader = new StringReader("A class named 'Car' cannot extend multiple classes, including 'Vehicle' and 'Automobile'");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ReferenceType();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
statement is: // Improved test data
StringReader stringReader = new StringReader("A class named 'Car' cannot extend multiple classes, including 'Vehicle' and 'Automobile'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EnumConstant()V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: ReferenceType()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();
String string = "A class named 'Car' cannot extend multiple classes, including 'Vehicle' and 'Automobile'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.ClassOrInterfaceType();
        javaParser.MethodDeclaration();
        javaParser.VariableDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
statement is: javaParser.ClassOrInterfaceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceType() target is: javaParser method is: ClassOrInterfaceType()
statement is: javaParser.MethodDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration() target is: javaParser method is: MethodDeclaration()
statement is: javaParser.VariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclaration() target is: javaParser method is: VariableDeclaration()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("XPb+h$]6T#")
statement is: TypeArguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArguments()
test data is: JavaParser javaParser = new JavaParser("XPb+h$]6T#");
javaParser.TypeArguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("a0Af^!%&");
        javaParser.TypeArguments();
        String input = "XPb+h$]6T#";
        String expectedOutput = "abcdefghijklmnopqrstuvwxyz";
    }
}
statement is: Parser javaParser = new JavaParser("a0Af^!%&"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArguments() target is: javaParser method is: TypeArguments()
statement is: String input = "XPb+h$]6T#", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutput = "abcdefghijklmnopqrstuvwxyz", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "XPb+h$]6T#"
* this is vulnerable: String string = "abcdefghijklmnopqrstuvwxyz"
TestCase is: String string = "a0Af^!%&";
JavaParser javaParser = new JavaParser(string);
String string = "XPb+h$]6T#";
String string = "abcdefghijklmnopqrstuvwxyz";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("p8Z0")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("p8Z0");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
    }
}
statement is: StringReader stringReader = new StringReader("p8Z0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
TestCase is: String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2 + 3 * 4");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("2 + 3 * 4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "2 + 3 * 4";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 1;// Primitive variable initialization

        int y = 2;// Primitive variable initialization

        boolean isGreaterThan = x > y;// Conditional expression

        String s1 = "hello";// String literal

        String s2 = "world";// String literal

        char c1 = 'a';// Char literal

        char c2 = 'b';// Char literal }}

    }
}
statement is: int x = 1// Primitive variable initialization
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int y = 2// Primitive variable initialization
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isGreaterThan = x > y// Conditional expression
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: x > y
statement is: String s1 = "hello"// String literal
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s2 = "world"// String literal
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c1 = 'a'// Char literal
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c2 = 'b'// Char literal }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1
* this is vulnerable: int _int = 2
* this is vulnerable: String string = "hello"
* this is vulnerable: String string = "world"
* this is vulnerable: char _char = 'a'
* this is vulnerable: char _char = 'b'
TestCase is: int _int = 1;
int _int = 2;
String string = "hello";
String string = "world";
char _char = 'a';
char _char = 'b';

statement is: mock(java.util.Enumeration<java.io.PushbackInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.PushbackInputStream>
statement code is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<PushbackInputStream> enumeration = ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn("inputStream1", "inputStream2").when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.ConditionalOrExpression();
    }
}
statement is: Enumeration<PushbackInputStream> enumeration = ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<PushbackInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.PushbackInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: doReturn("inputStream1", "inputStream2").when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn("inputStream1", "inputStream2").when(enumeration).hasMoreElements() target is: doReturn("inputStream1", "inputStream2").when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: ConditionalOrExpression()V
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).ConditionalOrExpression();

statement is: mock(java.util.Enumeration<java.io.PushbackInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.PushbackInputStream>
statement code is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<PushbackInputStream> enumeration = Collections.enumeration(Arrays.asList(new PushbackInputStream("Hello, world!".getBytes()), new PushbackInputStream("Goodbye, cruel world!".getBytes())));
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.ConditionalOrExpression();
    }
}
statement is: Enumeration<PushbackInputStream> enumeration = Collections.enumeration(Arrays.asList(new PushbackInputStream("Hello, world!".getBytes()), new PushbackInputStream("Goodbye, cruel world!".getBytes()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Collections.enumeration(Arrays.asList(new PushbackInputStream("Hello, world!".getBytes()), new PushbackInputStream("Goodbye, cruel world!".getBytes()))) target is: Collections method is: enumeration()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/util/Enumeration;)V
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.ConditionalAndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(1024);
        JavaParser javaParser = new JavaParser(pipedInputStream, 512);
        javaParser.ConditionalAndExpression("This is a test string", 10, 'c');
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pipedInputStream, 512), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalAndExpression("This is a test string", 10, 'c'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression("This is a test string", 10, 'c') target is: javaParser method is: ConditionalAndExpression(java.lang.String,int,char)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf")
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Op;9fFS 3-Nf");
        javaParser.InclusiveOrExpression();
        int number1 = 5;
        String string1 = "hello";
        float float1 = ((float) (3.14));
        char character1 = 'a';
    }
}
statement is: Parser javaParser = new JavaParser("Op;9fFS 3-Nf"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
statement is: int number1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string1 = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float float1 = ((float) (3.14)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char character1 = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: String string = "Op;9fFS 3-Nf";
JavaParser javaParser = new JavaParser(string);
int _int = 5;
String string = "hello";
double _double = 3.14;
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("`Kpy|pQRT^uw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("`Kpy|pQRT^uw"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
TestCase is: String string = "`Kpy|pQRT^uw";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.ExclusiveOrExpression("a", "b");
    }
}
statement is: JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression("a", "b"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression("a", "b") target is: javaParser method is: ExclusiveOrExpression(java.lang.String,java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 68, 20)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream("Example string", 68, 20);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.AndExpression();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream("Example string", 68, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: AndExpression()V
TestCase is: String string = "Example string";
int _int = 68;
int _int = 20;
JavaCharStream javaCharStream = new JavaCharStream((Reader) string, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[V#")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 1440, 64)
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4b025ea type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: javaCharStream.inBuf = 1440
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
javaCharStream.inBuf = 1440;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("[V#");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, longString, minLength);
        javaCharStream.inBuf = longString;
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.AndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("[V#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, longString, minLength), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.inBuf = longString, class spoon.support.reflect.code.CtAssignmentImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: AndExpression()V
TestCase is: String string = "[V#";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("|#A-Pj1")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EqualityExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EqualityExpression()
test data is: StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EqualityExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("|#A-Pj1");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EqualityExpression();
        // Improved test data:
        StringReader stringReader = new StringReader("|#A-Pj1");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EqualityExpression();
    }
}
statement is: StringReader stringReader = new StringReader("|#A-Pj1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EqualityExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression() target is: javaParser method is: EqualityExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EqualityExpression()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("|#A-Pj1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EqualityExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression() target is: javaParser method is: EqualityExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: EqualityExpression()V
TestCase is: String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();
String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("byte")
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: JavaParser javaParser = new JavaParser("byte");
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(42);
        javaParser.InstanceOfExpression();
    }
}
statement is: Parser javaParser = new JavaParser(42), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
TestCase is: int _int = 42;
JavaParser javaParser = new JavaParser((String) _int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for parsing a relational expression with a integer literal on the left-hand side
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.RelationalExpression("2 < 3");
    }
}
statement is: // Test data for parsing a relational expression with a integer literal on the left-hand side
JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression("2 < 3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression("2 < 3") target is: javaParser method is: RelationalExpression(java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("10 + 20 * 30");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
    }
}
statement is: StringReader stringReader = new StringReader("10 + 20 * 30"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
TestCase is: String string = "10 + 20 * 30";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\";\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\";\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
TestCase is: String string = "\";\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        javaParser.AdditiveExpression();
        String input = "5 + 2";
        String output = "7";
        String input2 = "3 - 4";
        String output2 = "-1";
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
statement is: String input = "5 + 2", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String output = "7", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String input2 = "3 - 4", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String output2 = "-1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "5 + 2"
* this is vulnerable: String string = "7"
* this is vulnerable: String string = "3 - 4"
* this is vulnerable: String string = "-1"
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
String string = "5 + 2";
String string = "7";
String string = "3 - 4";
String string = "-1";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1 + 2");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
    }
}
statement is: StringReader stringReader = new StringReader("1 + 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AdditiveExpression()V
TestCase is: String string = "1 + 2";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MultiplicativeExpression();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MultiplicativeExpression()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("1 + 2 * 3"));
        javaParser.MultiplicativeExpression();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("1 + 2 * 3")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("_TXc[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 31, 31, 2266)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParserTokenManager.getNextToken()
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParserTokenManager.getNextToken();
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParserTokenManager.getNextToken();
        javaParser.UnaryExpression();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParserTokenManager.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParserTokenManager.getNextToken() target is: javaParserTokenManager method is: getNextToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserTokenManagerindex is: 4
Matched Method is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
TestCase is: int _int = 31;
int _int = 31;
int _int = 2266;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, _int, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParserTokenManager) _int).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("kU<?~6{%nR")
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Modified test data
        int i = 123;
        double d = 3.14;
        String s = "Hello World!";
        char c = 'a';
        boolean b = true;
        Object o = new Object();
    }
}
statement is: // Modified test data
int i = 123, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Object o = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: int _int = 123
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 123;
double _double = 3.14;
String string = "Hello World!";
char _char = 'a';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        StringReader stringReader2 = new StringReader("'This is a test string with multiple words.'");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.UnaryExpression();
        StringReader stringReader3 = new StringReader("\"Hello World! This is a test string with multiple words and numbers 123.\"");
        JavaParser javaParser3 = new JavaParser(stringReader3);
        javaParser3.UnaryExpression();
        StringReader stringReader4 = new StringReader("'This is a test string with a syntax error missing a closing single quote.");
        JavaParser javaParser4 = new JavaParser(stringReader4);
        javaParser4.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
statement is: StringReader stringReader2 = new StringReader("'This is a test string with multiple words.'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.UnaryExpression() target is: javaParser2 method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: UnaryExpression()V
statement is: StringReader stringReader3 = new StringReader("\"Hello World! This is a test string with multiple words and numbers 123.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser3 = new JavaParser(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.UnaryExpression() target is: javaParser3 method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: UnaryExpression()V
statement is: StringReader stringReader4 = new StringReader("'This is a test string with a syntax error missing a closing single quote."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser4 = new JavaParser(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser4.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.UnaryExpression() target is: javaParser4 method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 14
Matched Method is: UnaryExpression()V
TestCase is: String string = "\"Hello World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with multiple words.'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "\"Hello World! This is a test string with multiple words and numbers 123.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with a syntax error missing a closing single quote.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"-\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\"-\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "\"-\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("9")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("9");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("15");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("15"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "15";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("kU<?~6{%nR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
        // Improved test data
        StringReader improvedStringReader = new StringReader("This is a sample input for testing the UnaryExpressionNotPlusMinus method in the JavaParser class");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("This is a sample input for testing the UnaryExpressionNotPlusMinus method in the JavaParser class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.UnaryExpressionNotPlusMinus() target is: improvedJavaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "This is a sample input for testing the UnaryExpressionNotPlusMinus method in the JavaParser class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\u0003TOW[cs.{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("\u0003TOW[cs.{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for the JavaParser."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "This is a test string for the JavaParser.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(")")
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: JavaParser javaParser = new JavaParser(")");
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int x = 1;// Changed from 0 to be more descriptive

        int y = 2;// Changed from 1 to be more descriptive

        String str = "hello";// Changed from an empty string to be more representative of the situation being tested

        javaParser.PrimaryExpression();// Added a comment describing what this line does and why it was added }}

    }
}
statement is: // Improved test data:
int x = 1// Changed from 0 to be more descriptive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int y = 2// Changed from 1 to be more descriptive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "hello"// Changed from an empty string to be more representative of the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.PrimaryExpression()// Added a comment describing what this line does and why it was added }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression()// Added a comment describing what this line does and why it was added }}
 target is: javaParser method is: PrimaryExpression()
* this is vulnerable: int _int = 1
* this is vulnerable: int _int = 2
* this is vulnerable: String string = "hello"
TestCase is: int _int = 1;
int _int = 2;
String string = "hello";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf")
statement is: org.evosuite.testcase.statements.ArrayStatement@a72a6be6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[7]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
char[] charArray = new char[7];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with numbers 123 and special characters $%^&*. The end.");
        char[] charArray = new char[numChars];
        stringReader.read(charArray);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with numbers 123 and special characters $%^&*. The end."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[numChars], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [numChars] Ct is: char[] charArray = new char[7] isAssignment: false Array: new char[numChars] Elements: []
lengths: [7] [numChars]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read([C)I
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "This is a test string with numbers 123 and special characters $%^&*. The end.";
StringReader stringReader = new StringReader(string);
char[] charArray = new char[7];
int read = ((Reader) string).read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.PrimaryPrefix();
        // Test data for EnumConstant() method
        String[] enumConstants = new String[]{ "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" };
        for (int i = 0; i < enumConstants.length; i++) {
            String constantName = enumConstants[i];
            javaParser.Identifier(constantName);
        }
        // Test data for PrimaryPrefix() method
        String[] prefixes = new String[]{ "class", "interface", "enum" };
        for (int i = 0; i < prefixes.length; i++) {
            String prefix = prefixes[i];
            javaParser.Identifier(prefix);
        }
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
statement is: // Test data for EnumConstant() method
String[] enumConstants = new String[]{ "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < enumConstants.length; i++) {
    String constantName = enumConstants[i];
    javaParser.Identifier(constantName);
}, class spoon.support.reflect.code.CtForImpl
statement is: // Test data for PrimaryPrefix() method
String[] prefixes = new String[]{ "class", "interface", "enum" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < prefixes.length; i++) {
    String prefix = prefixes[i];
    javaParser.Identifier(prefix);
}, class spoon.support.reflect.code.CtForImpl
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
statement is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token token = javaParser.getToken(115)
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
javaParser.getToken(115);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
        javaParser.getToken(115);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
statement is: javaParser.getToken(115), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getToken(115) target is: javaParser method is: getToken(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@3234a273 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.PrimaryPrefix();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6, 7 } Elements: [1, 2, 3, 4, 5, 6, 7]
lengths: [7] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\";\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 56, 61)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\";\"");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Literal();
    }
}
statement is: StringReader stringReader = new StringReader("\";\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: Literal()V
TestCase is: String string = "\";\"";
StringReader stringReader = new StringReader(string);
int _int = 56;
int _int = 61;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).Literal();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Zvk/~B_]Cs+m")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.Literal();
    }
}
statement is: StringReader stringReader = new StringReader("Zvk/~B_]Cs+m"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Literal()V
TestCase is: String string = "Zvk/~B_]Cs+m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Literal();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I^MdoAN%a_")
statement is: Block()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Block()
test data is: JavaParser javaParser = new JavaParser("I^MdoAN%a_");
javaParser.Block();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("I^MdoAN%a_");
        javaParser.Block();
    }
}
statement is: Parser javaParser = new JavaParser("I^MdoAN%a_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Block(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Block() target is: javaParser method is: Block()
TestCase is: String string = "I^MdoAN%a_";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/I>Z3]#o")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, 88)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader("/I>Z3]#o");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("/* My Test File */");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.StatementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("/* My Test File */"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: StatementExpression()V
TestCase is: String string = "/* My Test File */";
StringReader stringReader = new StringReader(string);
int _int = 0;
int _int = 88;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).StatementExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class cannot extend more than one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.StatementExpression();
        // Improved test data
        StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumConstant();
        javaParser.StatementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpression()V
statement is: // Improved test data
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EnumConstant()V
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: StatementExpression()V
TestCase is: String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"-\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\"-\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpression()V
TestCase is: String string = "\"-\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.StatementExpressionList();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I^MdoAN%a_")
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: JavaParser javaParser = new JavaParser("I^MdoAN%a_");
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("I^MdoAN%a_");
        javaParser.MemberValuePair(new MemberValuePair("name", "John"), new MemberValuePair("age", 30), new MemberValuePair("address", "123 Main St"));
    }
}
statement is: Parser javaParser = new JavaParser("I^MdoAN%a_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValuePair(new MemberValuePair("name", "John"), new MemberValuePair("age", 30), new MemberValuePair("address", "123 Main St")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePair(new MemberValuePair("name", "John"), new MemberValuePair("age", 30), new MemberValuePair("address", "123 Main St")) target is: javaParser method is: MemberValuePair(MemberValuePair,MemberValuePair,MemberValuePair)
TestCase is: String string = "I^MdoAN%a_";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" not found.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2214), 606)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Type();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, -2214, 606), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForUpdate()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
int _int = 606;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).Type();
((JavaParser) javaCharStream).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token token = javaParser.getToken(115)
test data is: StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getToken(115);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A class can only extend one other class");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.getToken(115);
    }
}
statement is: StringReader stringReader = new StringReader("A class can only extend one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.getToken(115), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getToken(115) target is: javaParser method is: getToken(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "A class can only extend one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
int _int = 115;
((JavaParser) stringReader).getToken(_int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("kU<?~6{%nR")
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
test data is: JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.getNextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.getNextToken();
        // Changed the input string to a more descriptive and representative one
        String inputString = "Hello World!";
        // Changed the primitive values to more illustrative examples
        int integerValue = 10;
        double doubleValue = 3.14;
        String stringValue = "This is a test string.";
        char charValue = 'A';
        // Added some test data for arrays and collections
        List<Integer> listOfIntegers = Arrays.asList(1, 2, 3, 4, 5);
        int[] arrayOfInts = new int[]{ 1, 2, 3, 4, 5 };
        // Changed the type of the next token to be a more descriptive one
        JavaTokenType tokenType = JavaTokenType.IDENTIFIER;
    }
}
statement is: Parser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.getNextToken() target is: Parser method is: getNextToken()
statement is: // Changed the input string to a more descriptive and representative one
String inputString = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Changed the primitive values to more illustrative examples
int integerValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "This is a test string.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Added some test data for arrays and collections
List<Integer> listOfIntegers = Arrays.asList(1, 2, 3, 4, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(1, 2, 3, 4, 5) target is: Arrays method is: asList(int,int,int,int,int)
statement is: int[] arrayOfInts = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Changed the type of the next token to be a more descriptive one
JavaTokenType tokenType = JavaTokenType.IDENTIFIER, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: JavaTokenType.IDENTIFIER is JavaTokenType
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "This is a test string."
* this is vulnerable: char _char = 'A'
TestCase is: String string = "Hello World!";
int _int = 10;
double _double = 3.14;
String string = "This is a test string.";
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@e122cf46 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dbaf61ea type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "A class cannot extend more than one other class"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "A class cannot extend more than one other class";
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided";
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test case for the JavaParser class, it should throw an error when an invalid input is provided" Ct is: stringArray[0] = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[1];
String string = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided";
stringArray[0] = string;
JavaParser.main(stringArray);

statement is: java.io.PipedInputStream(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream(74)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.ParseException
statement code is: ParseException generateParseException = javaParser.generateParseException()
test data is: PipedInputStream pipedInputStream = new PipedInputStream(74);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
javaParser.generateParseException();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream("A string that represents a stream of characters");
        BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
        JavaParser javaParser = new JavaParser(bufferedInputStream);
        javaParser.generateParseException();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream("A string that represents a stream of characters"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.generateParseException(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.generateParseException() target is: javaParser method is: generateParseException()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;
TestCase is: String string = "A string that represents a stream of characters";
PipedInputStream pipedInputStream = new PipedInputStream((int) string);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
((JavaParser) bufferedInputStream).generateParseException();

* test suite isTestSuite: 503
Test 0: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e");
FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX");
JavaParser javaParser = new JavaParser("e");
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 3: 
StringReader stringReader = new StringReader("4{m)C_Hta],4X%X");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 4: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(2258);
Test 5: 
JavaParser.ModifierSet.removeModifier((-77), 26);
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(591);
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(16);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(62);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(0);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-330));
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(10);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-392));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(256);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(44);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(345);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-408));
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1179));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2310));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(512);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(34);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(2910);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1256);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2040);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(32);
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(776);
Test 26: 
String[] stringArray = new String[2];
JavaParser.main(stringArray);
Test 27: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 28: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'{/\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 33: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: extend
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ClassOrInterfaceDeclaration((-3283));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser("true");
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.EnumDeclaration((-4821));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 45: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 54: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.FieldDeclaration(1329);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\\"k(L2px\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 56: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.Expression();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
javaParser.VariableInitializer();
Test 60: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
StringReader stringReader = new StringReader("!N8_wk>G'w");
javaParser.ReInit((Reader) stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'w\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 65: 
JavaParser javaParser = new JavaParser("-/9");
StringReader stringReader = new StringReader("-/9");
javaParser.ReInit((Reader) stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 68: 
JavaParser javaParser = new JavaParser("pL`'J");
try { 
  javaParser.MethodDeclaration((byte) (-113));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 70: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 73: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 80: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 81: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 83: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 85: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("|#A-Pj1");
stringReader.read();
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1016, column -804.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 88: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 90: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -2214, column 611.  Encountered: found
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 94: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 97: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("j=`To");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 100: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();
Test 101: 
StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
Test 102: 
StringReader stringReader = new StringReader("+jp/K");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 103: 
StringReader stringReader = new StringReader("NC75E%^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ResultType();
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("@=@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("=?|k6\"y)X{Ox2WMGzP");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 88, column -1779.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 123: 
StringReader stringReader = new StringReader("\"Xx5/pnU");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\\"Xx5/pnU\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 124: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 125: 
JavaParser javaParser = new JavaParser("*rshft");
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("[|xJHvmM", "=?|k6\"y).X{Oxw+uGP");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 128: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 129: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
StringReader stringReader = new StringReader("'>#h:xQ!");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\\'>\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 134: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 136: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 36.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 140: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 149: 
StringReader stringReader = new StringReader(" \"o");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"o\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 150: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();
Test 151: 
StringReader stringReader = new StringReader("+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("O93gF4P`W)CXM!>");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 154: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader("      [  java JavaLarser inputfil`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 161: 
JavaParser javaParser = new JavaParser("9v,Z%GPib3|%^`m");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
JavaParser javaParser = new JavaParser("[zM");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 171: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.AndExpression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Type();
javaParser.ForUpdate();
Test 172: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.ForUpdate();
Test 173: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 174: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 180: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 88, column 99.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 181: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 183: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 185: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 187: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 188: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
PrintStream printStream = javaParser.token_source.debugStream;
MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, false);
javaParser.dump(mockPrintWriter);
Test 189: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: YAI
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
JavaParser javaParser = new JavaParser("n");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 193: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
javaCharStream.Done();
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 195: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
StringReader stringReader = new StringReader("\"\n\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\n\" (10), after : \"\\\"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 197: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 201: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 208: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 210: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Op
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
byte[] byteArray = new byte[11];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 212: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.AnnotationTypeDeclaration(66);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
StringReader stringReader = new StringReader("#^o8Uj/SJO3");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 215: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader("\"?\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 219: 
JavaParser javaParser = new JavaParser(">P`");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 221: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.ForUpdate();
Test 222: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.skip(9147936743096320L);
javaParser.CompilationUnit();
Test 223: 
JavaParser javaParser = new JavaParser("*rshft");
javaParser.Modifiers();
Test 224: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalAndExpression();
try { 
  javaParser.ClassOrInterfaceDeclaration(1);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 225: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1752));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 227: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 228: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();
Test 229: 
StringReader stringReader = new StringReader("\"synchronized\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"synchronized\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MethodDeclaration(81);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
JavaParser javaParser = new JavaParser("IBMdoN&(a_");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 233: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
Test 236: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 237: 
JavaParser javaParser = new JavaParser("XPb+h$]6T#");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 238: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
Test 239: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 240: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 243: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 245: 
StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 246: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 247: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 248: 
StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
javaCharStream.inBuf = 1440;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 249: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 250: 
JavaParser javaParser = new JavaParser("byte");
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 251: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 252: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
Test 254: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 255: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 256: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 257: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 258: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParserTokenManager.getNextToken();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 260: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 261: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 262: 
StringReader stringReader = new StringReader("9");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 263: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 264: 
StringReader stringReader = new StringReader("\u0003TOW[cs.{");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u0003\" (3), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
JavaParser javaParser = new JavaParser(")");
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 266: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
char[] charArray = new char[7];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 267: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 268: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
javaParser.getToken(115);
Test 269: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 270: 
StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Literal();
Test 271: 
StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("/I>Z3]#o");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column 88.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 276: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 277: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 278: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();
javaParser.ForUpdate();
Test 279: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getToken(115);
Test 280: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.getNextToken();
Test 281: 
String[] stringArray = new String[1];
stringArray[0] = "A class cannot extend more than one other class";
JavaParser.main(stringArray);
Test 282: 
PipedInputStream pipedInputStream = new PipedInputStream(74);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 283: 
boolean appendStringToFile = FileSystemHandling.appendStringToFile((EvoSuiteFile) "`J/)92oiL1-xpxvX", (String) null);
String string = "test_file";
JavaParser javaParser = new JavaParser(string);
((JavaParser) appendStringToFile).MarkerAnnotation();

Test 284: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

Test 285: 
JavaParser.ModifierSet.removeModifier(10, (int) (Integer) null);

Test 286: 
JavaParser.main((String[]) null);

Test 287: 
JavaParser.main((String[]) null);

Test 288: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();
String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

Test 289: 
JavaParser javaParser = new JavaParser("com.example.test");

Test 290: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 291: 
JavaParser javaParser = new JavaParser("O");

Test 292: 
StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

Test 293: 
StringReader stringReader = new StringReader("A sample string for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).TypeDeclaration();

Test 294: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 295: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 296: 
JavaParser javaParser = new JavaParser("false");

Test 297: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 298: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");

Test 299: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 300: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 301: 
SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
((JavaParser)null).EnumConstant();

Test 302: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");

Test 303: 

Test 304: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();

Test 305: 
String string = "public class MyClass { public void myMethod() {} }";
JavaParser javaParser = new JavaParser("public class MyClass { public void myMethod() {} }");
((JavaParser)"public class MyClass { public void myMethod() {} }").TypeBound();
String string = "public class MyOtherClass { public void myOtherMethod() {} }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).TypeBound();

Test 306: 
StringReader stringReader = new StringReader("MyEnum");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

Test 307: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
JavaParser javaParser = new JavaParser(stringReader);

Test 308: 

Test 309: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File /home/user/Documents/file.txt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 310: 
StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) "This is a sample field declaration with an integer value of 1329.");

Test 311: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 312: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 313: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();

Test 314: 
SystemInUtil.addInputLine("\"Hello World\"");
JavaParser javaParser = new JavaParser("\"Hello World\"");
((JavaParser)null).VariableInitializer();

Test 315: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
((JavaParser) stringReader).ReInit((Reader) stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

Test 316: 
StringReader stringReader = new StringReader("int x = 5 * (3 + 2);");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 317: 
StringReader stringReader = new StringReader("This is a test string.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

Test 318: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1: Encountered errors during parse.");
StringReader stringReader = new StringReader("This is a test string to demonstrate the use of a StringReader object in Java");

Test 319: 
JavaParser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~");

Test 320: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile1");

Test 321: 
JavaParser javaParser = new JavaParser("pL`'J");

Test 322: 
JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MethodDeclarator();
JavaParser javaParser = new JavaParser((Reader) null);

Test 323: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(true);
String string = "Java Parser Version 1.2:  File with multiple classes and interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

Test 324: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 325: 
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");

Test 326: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 327: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();
String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 328: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).Initializer();

Test 329: 
StringReader stringReader = new StringReader("\"-1234567890\n");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

Test 330: 
JavaParser javaParser = new JavaParser("class MyClass { int x; }");
((JavaParser)"class MyClass { int x; }").Type();

Test 331: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();

Test 332: 
StringReader stringReader = new StringReader("class TestClass { void testMethod() { int x = 5; } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 333: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

Test 334: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).TypeArgument();

Test 335: 
StringReader stringReader = new StringReader("|#A-Pj1");
((StringReader)"|#A-Pj1").read();
int _int = 1016;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).TypeArgument();

Test 336: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
((JavaParser)"com.soops.CEN4010.JMCA.JParser.JavaParser").WildcardBounds();

Test 337: 
StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 338: 
StringReader stringReader = new StringReader("This is a test string.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimitiveType();

Test 339: 

Test 340: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
((JavaParser)"This is a sample input").ResultType();

Test 341: 
JavaParser javaParser = new JavaParser("John Doe, Jane Smith, Bob Johnson");

Test 342: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 343: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();
String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

Test 344: 
JavaParser javaParser = new JavaParser("The quick brown fox jumps over the lazy dog");
((JavaParser)"The quick brown fox jumps over the lazy dog").AssignmentOperator();

Test 345: 
StringReader stringReader = new StringReader("j=10");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 346: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

Test 347: 
StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

Test 348: 
StringReader stringReader = new StringReader("Ajp/javaParserTest");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 349: 
StringReader stringReader = new StringReader("9842JDH");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
String string = "4356BTN";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 350: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, even if it is the same class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
((JavaParser) stringReader).Expression();

Test 351: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 352: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).ExclusiveOrExpression();

Test 353: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).RelationalExpression();

Test 354: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();
String string = "9v,Z%GPib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();

Test 355: 
StringReader stringReader = new StringReader("This is a test String.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpression();

Test 356: 
StringReader stringReader = new StringReader("42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 357: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 88, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

Test 358: 
StringReader stringReader = new StringReader("1 + 2 * 3");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 359: 
StringReader stringReader = new StringReader("This is a sample text for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 360: 

Test 361: 
JavaParser javaParser = new JavaParser("|#A-Pj1");

Test 362: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");

Test 363: 
JavaParser javaParser = new JavaParser("This is a string that contains special characters like  and \"");

Test 364: 

Test 365: 
StringReader stringReader = new StringReader("Addition with integers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).CastExpression();

Test 366: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 367: 
StringReader stringReader = new StringReader("int x = 10;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastExpression();

Test 368: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 369: 
JavaParser javaParser = new JavaParser("employee");

Test 370: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("example", "file");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
((JavaParser) createTempFile).PrimarySuffix();

Test 371: 

Test 372: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();
String string = "P8z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();

Test 373: 
JavaParser javaParser = new JavaParser("true");

Test 374: 
JavaParser javaParser = new JavaParser("       Java+JavaParser < inputfile");

Test 375: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");

Test 376: 
StringReader stringReader = new StringReader("A long string with a variety of characters, including numbers, letters, and special characters");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 377: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 378: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 379: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

Test 380: 
StringReader stringReader = new StringReader("\"\n\r\t\f\b\n3456789\"'!@#$%^&*()-=[]{}|;:,./<>?`~\\ \n\r\t\b\u0007\u001F\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 381: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 31, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).ForUpdate();
((JavaParser) javaCharStream).ArrayDimsAndInits();

Test 382: 
JavaParser javaParser = new JavaParser((Reader) "");

Test 383: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);

Test 384: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Statement();

Test 385: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 386: 
SystemInUtil.addInputLine("\"This is a sample input string for testing purposes.\"");
JavaParser javaParser = new JavaParser("\"This is a sample input string for testing purposes.\"");
((JavaParser)null).Statement();

Test 387: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 388: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 389: 
StringReader stringReader = new StringReader(": Hello World");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 390: 
StringReader stringReader = new StringReader("\"Hello, world!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 391: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf /* Hello World! */");
JavaParser javaParser = new JavaParser(stringReader);

Test 392: 
StringReader stringReader = new StringReader("{+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();

Test 393: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 394: 
StringReader stringReader = new StringReader("A more descriptive example of a StringReader");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 395: 

Test 396: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 397: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 398: 
StringReader stringReader = new StringReader("      [  java JavaLarser inputfile`");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();
String string = "      [  java JavaLarser inputfile.java";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 399: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 400: 
StringReader stringReader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><element attribute=\"value\"/><element>text</element></root>");
JavaParser javaParser = new JavaParser(stringReader);

Test 401: 
JavaParser javaParser = new JavaParser("1234567890");

Test 402: 
JavaParser javaParser = new JavaParser("hello");

Test 403: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ForUpdate();

Test 404: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 25, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

Test 405: 
StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();
String string = "B;class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();

Test 406: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
String string = "abcdefghijklmnopqrstuvwxyz";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

Test 407: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

Test 408: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 409: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 410: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).Type();

Test 411: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();

Test 412: 

Test 413: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");

Test 414: 
StringReader stringReader = new StringReader("Hello World");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 415: 

Test 416: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).WhileStatement();

Test 417: 
JavaParser javaParser = new JavaParser("Test string");

Test 418: 

Test 419: 
JavaParser javaParser = new JavaParser("John Doe");

Test 420: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 421: 
Object object = null;
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) object).ForInit();

Test 422: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 423: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();
String string = "p8Z0\n // Break statement to exit the loop.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

Test 424: 
StringReader stringReader = new StringReader("AYAI");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 425: 

Test 426: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.SynchronizedStatement();

Test 427: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 2, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SynchronizedStatement();

Test 428: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

Test 429: 
StringReader stringReader = new StringReader("\"\n This is a sample input string with multiple lines \n including whitespace and special characters\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).TryStatement();

Test 430: 
JavaParser javaParser = new JavaParser("unsignedShift");

Test 431: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 432: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.Annotation();

Test 433: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 434: 
int _int = 12345;
JavaParser javaParser = new JavaParser((String) 12345);
((JavaParser) _int).NormalAnnotation();

Test 435: 

Test 436: 
StringReader stringReader = new StringReader("A class can only have a single abstract modifier");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

Test 437: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);

Test 438: 
StringReader stringReader = new StringReader("A well-designed class should be easy to understand and maintain, with a clear structure and concise comments.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

Test 439: 
StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 440: 
JavaParser javaParser = new JavaParser("");

Test 441: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 88, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberValue();

Test 442: 
StringReader stringReader = new StringReader("A1B2C3D4E5F6G7H8I9JKL");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

Test 443: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 444: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);

Test 445: 
StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 446: 
JavaParser javaParser = new JavaParser(">P`");

Test 447: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 448: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

Test 449: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
((StringReader)"|#A-Pj1").skip(9147936743096320L);
((JavaParser) stringReader).CompilationUnit();

Test 450: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalAndExpression();

Test 451: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);

Test 452: 
StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) "This is a test string for testing the JavaParser class.");

Test 453: 
StringReader stringReader = new StringReader("x4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 454: 
StringReader stringReader = new StringReader("A student cannot enroll in more than two courses at a time");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

Test 455: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);

Test 456: 
JavaParser javaParser = new JavaParser("IBMdoN&(a_");

Test 457: 
StringReader stringReader = new StringReader("int a = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameters();

Test 458: 
StringReader stringReader = new StringReader("A class cannot extend more than one other abstract class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalOrExpression();
((JavaParser) stringReader).Type();

Test 459: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();
String string = "A class named 'Car' cannot extend multiple classes, including 'Vehicle' and 'Automobile'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();

Test 460: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 461: 
JavaParser javaParser = new JavaParser("a0Af^!%&");

Test 462: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 463: 
StringReader stringReader = new StringReader("2 + 3 * 4");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 464: 

Test 465: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).ConditionalOrExpression();

Test 466: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");

Test 467: 
StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 468: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 469: 
int _int = 20;
JavaCharStream javaCharStream = new JavaCharStream((Reader) "Example string", 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).AndExpression();

Test 470: 
StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

Test 471: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();
String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();

Test 472: 
JavaParser javaParser = new JavaParser((String) 42);

Test 473: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 474: 
StringReader stringReader = new StringReader("10 + 20 * 30");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 475: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 476: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 477: 
StringReader stringReader = new StringReader("1 + 2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 478: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 479: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 480: 
int _int = 2266;
JavaCharStream javaCharStream = new JavaCharStream((Reader) 31, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParserTokenManager) _int).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();

Test 481: 

Test 482: 
StringReader stringReader = new StringReader("\"Hello World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with multiple words.'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "\"Hello World! This is a test string with multiple words and numbers 123.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with a syntax error missing a closing single quote.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 483: 
StringReader stringReader = new StringReader("\"-\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 484: 
StringReader stringReader = new StringReader("15");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 485: 
StringReader stringReader = new StringReader("This is a sample input for testing the UnaryExpressionNotPlusMinus method in the JavaParser class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 486: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 487: 

Test 488: 
StringReader stringReader = new StringReader("This is a test string with numbers 123 and special characters $%^&*. The end.");
char[] charArray = new char[7];
int read = ((Reader)"This is a test string with numbers 123 and special characters $%^&*. The end.").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).PrimaryPrefix();

Test 489: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).PrimaryPrefix();

Test 490: 
StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)61).Literal();

Test 491: 
StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Literal();

Test 492: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 493: 
StringReader stringReader = new StringReader("/* My Test File */");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).StatementExpression();

Test 494: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();

Test 495: 
StringReader stringReader = new StringReader("\"-\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

Test 496: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 497: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 498: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).Type();
((JavaParser) javaCharStream).ForUpdate();

Test 499: 
StringReader stringReader = new StringReader("A class can only extend one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).getToken(115);

Test 500: 

Test 501: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided";
JavaParser.main(stringArray);

Test 502: 
PipedInputStream pipedInputStream = new PipedInputStream((int) "A string that represents a stream of characters");
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
((JavaParser) bufferedInputStream).generateParseException();


* Generated after the refinement and before minimization 503 tests with total length 1527
* test suite isTestSuite: 503
Test 0: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e");
FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX");
JavaParser javaParser = new JavaParser("e");
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 3: 
StringReader stringReader = new StringReader("4{m)C_Hta],4X%X");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 4: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(2258);
Test 5: 
JavaParser.ModifierSet.removeModifier((-77), 26);
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(591);
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(16);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(62);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(0);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-330));
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(10);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-392));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(256);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(44);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(345);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-408));
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1179));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2310));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(512);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(34);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(2910);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1256);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2040);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(32);
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(776);
Test 26: 
String[] stringArray = new String[2];
JavaParser.main(stringArray);
Test 27: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 28: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'{/\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 33: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: extend
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ClassOrInterfaceDeclaration((-3283));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser("true");
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.EnumDeclaration((-4821));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 45: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 54: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.FieldDeclaration(1329);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\\"k(L2px\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 56: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.Expression();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
javaParser.VariableInitializer();
Test 60: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
StringReader stringReader = new StringReader("!N8_wk>G'w");
javaParser.ReInit((Reader) stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'w\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 65: 
JavaParser javaParser = new JavaParser("-/9");
StringReader stringReader = new StringReader("-/9");
javaParser.ReInit((Reader) stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 68: 
JavaParser javaParser = new JavaParser("pL`'J");
try { 
  javaParser.MethodDeclaration((byte) (-113));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 70: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 73: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 80: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 81: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 83: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 85: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("|#A-Pj1");
stringReader.read();
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1016, column -804.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 88: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 90: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -2214, column 611.  Encountered: found
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 94: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 97: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("j=`To");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 100: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();
Test 101: 
StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
Test 102: 
StringReader stringReader = new StringReader("+jp/K");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 103: 
StringReader stringReader = new StringReader("NC75E%^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ResultType();
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("@=@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("=?|k6\"y)X{Ox2WMGzP");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 88, column -1779.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 123: 
StringReader stringReader = new StringReader("\"Xx5/pnU");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\\"Xx5/pnU\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 124: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 125: 
JavaParser javaParser = new JavaParser("*rshft");
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("[|xJHvmM", "=?|k6\"y).X{Oxw+uGP");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 128: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 129: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
StringReader stringReader = new StringReader("'>#h:xQ!");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\\'>\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 134: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 136: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 36.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 140: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 149: 
StringReader stringReader = new StringReader(" \"o");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"o\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 150: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();
Test 151: 
StringReader stringReader = new StringReader("+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("O93gF4P`W)CXM!>");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 154: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader("      [  java JavaLarser inputfil`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 161: 
JavaParser javaParser = new JavaParser("9v,Z%GPib3|%^`m");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
JavaParser javaParser = new JavaParser("[zM");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 171: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.AndExpression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Type();
javaParser.ForUpdate();
Test 172: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.ForUpdate();
Test 173: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 174: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 180: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 88, column 99.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 181: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 183: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 185: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 187: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 188: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
PrintStream printStream = javaParser.token_source.debugStream;
MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, false);
javaParser.dump(mockPrintWriter);
Test 189: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: YAI
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
JavaParser javaParser = new JavaParser("n");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 193: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
javaCharStream.Done();
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 195: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
StringReader stringReader = new StringReader("\"\n\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\n\" (10), after : \"\\\"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 197: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 201: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 208: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 210: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Op
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
byte[] byteArray = new byte[11];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 212: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.AnnotationTypeDeclaration(66);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
StringReader stringReader = new StringReader("#^o8Uj/SJO3");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 215: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader("\"?\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 219: 
JavaParser javaParser = new JavaParser(">P`");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 221: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.ForUpdate();
Test 222: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.skip(9147936743096320L);
javaParser.CompilationUnit();
Test 223: 
JavaParser javaParser = new JavaParser("*rshft");
javaParser.Modifiers();
Test 224: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalAndExpression();
try { 
  javaParser.ClassOrInterfaceDeclaration(1);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 225: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1752));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 227: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 228: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();
Test 229: 
StringReader stringReader = new StringReader("\"synchronized\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"synchronized\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MethodDeclaration(81);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
JavaParser javaParser = new JavaParser("IBMdoN&(a_");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 233: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
Test 236: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 237: 
JavaParser javaParser = new JavaParser("XPb+h$]6T#");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 238: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
Test 239: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 240: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 243: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 245: 
StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 246: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 247: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 248: 
StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
javaCharStream.inBuf = 1440;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 249: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 250: 
JavaParser javaParser = new JavaParser("byte");
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 251: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 252: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
Test 254: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 255: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 256: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 257: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 258: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParserTokenManager.getNextToken();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 260: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 261: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 262: 
StringReader stringReader = new StringReader("9");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 263: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 264: 
StringReader stringReader = new StringReader("\u0003TOW[cs.{");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u0003\" (3), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
JavaParser javaParser = new JavaParser(")");
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 266: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
char[] charArray = new char[7];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 267: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 268: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
javaParser.getToken(115);
Test 269: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 270: 
StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Literal();
Test 271: 
StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("/I>Z3]#o");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column 88.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 276: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 277: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 278: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();
javaParser.ForUpdate();
Test 279: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getToken(115);
Test 280: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.getNextToken();
Test 281: 
String[] stringArray = new String[1];
stringArray[0] = "A class cannot extend more than one other class";
JavaParser.main(stringArray);
Test 282: 
PipedInputStream pipedInputStream = new PipedInputStream(74);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 283: 
boolean appendStringToFile = FileSystemHandling.appendStringToFile((EvoSuiteFile) "`J/)92oiL1-xpxvX", (String) null);
String string = "test_file";
JavaParser javaParser = new JavaParser(string);
((JavaParser) appendStringToFile).MarkerAnnotation();

Test 284: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).disable_tracing();

Test 285: 
JavaParser.ModifierSet.removeModifier(10, (int) (Integer) null);

Test 286: 
JavaParser.main((String[]) null);

Test 287: 
JavaParser.main((String[]) null);

Test 288: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();
String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

Test 289: 
JavaParser javaParser = new JavaParser("com.example.test");

Test 290: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 291: 
JavaParser javaParser = new JavaParser("O");

Test 292: 
StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

Test 293: 
StringReader stringReader = new StringReader("A sample string for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).TypeDeclaration();

Test 294: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 295: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 296: 
JavaParser javaParser = new JavaParser("false");

Test 297: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 298: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");

Test 299: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 300: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 301: 
SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
((JavaParser)null).EnumConstant();

Test 302: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");

Test 303: 

Test 304: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).TypeParameter();

Test 305: 
String string = "public class MyClass { public void myMethod() {} }";
JavaParser javaParser = new JavaParser("public class MyClass { public void myMethod() {} }");
((JavaParser)"public class MyClass { public void myMethod() {} }").TypeBound();
String string = "public class MyOtherClass { public void myOtherMethod() {} }";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).TypeBound();

Test 306: 
StringReader stringReader = new StringReader("MyEnum");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

Test 307: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
JavaParser javaParser = new JavaParser(stringReader);

Test 308: 

Test 309: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File /home/user/Documents/file.txt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 310: 
StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) "This is a sample field declaration with an integer value of 1329.");

Test 311: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 312: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");

Test 313: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).Statement();

Test 314: 
SystemInUtil.addInputLine("\"Hello World\"");
JavaParser javaParser = new JavaParser("\"Hello World\"");
((JavaParser)null).VariableInitializer();

Test 315: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
((JavaParser) stringReader).ReInit((Reader) stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).FormalParameter();

Test 316: 
StringReader stringReader = new StringReader("int x = 5 * (3 + 2);");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 317: 
StringReader stringReader = new StringReader("This is a test string.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

Test 318: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1: Encountered errors during parse.");
StringReader stringReader = new StringReader("This is a test string to demonstrate the use of a StringReader object in Java");

Test 319: 
JavaParser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
StringReader stringReader = new StringReader("abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;':\"<>,./?`~");

Test 320: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile1");

Test 321: 
JavaParser javaParser = new JavaParser("pL`'J");

Test 322: 
JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MethodDeclarator();
JavaParser javaParser = new JavaParser((Reader) null);

Test 323: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(true);
String string = "Java Parser Version 1.2:  File with multiple classes and interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

Test 324: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 325: 
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");

Test 326: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 327: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();
String string = "p8Z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 328: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).Initializer();

Test 329: 
StringReader stringReader = new StringReader("\"-1234567890\n");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

Test 330: 
JavaParser javaParser = new JavaParser("class MyClass { int x; }");
((JavaParser)"class MyClass { int x; }").Type();

Test 331: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();

Test 332: 
StringReader stringReader = new StringReader("class TestClass { void testMethod() { int x = 5; } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 333: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();

Test 334: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).TypeArgument();

Test 335: 
StringReader stringReader = new StringReader("|#A-Pj1");
((StringReader)"|#A-Pj1").read();
int _int = 1016;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).TypeArgument();

Test 336: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
((JavaParser)"com.soops.CEN4010.JMCA.JParser.JavaParser").WildcardBounds();

Test 337: 
StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 338: 
StringReader stringReader = new StringReader("This is a test string.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).PrimitiveType();

Test 339: 

Test 340: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
((JavaParser)"This is a sample input").ResultType();

Test 341: 
JavaParser javaParser = new JavaParser("John Doe, Jane Smith, Bob Johnson");

Test 342: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 343: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();
String string = "A class cannot extend more than one other class";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

Test 344: 
JavaParser javaParser = new JavaParser("The quick brown fox jumps over the lazy dog");
((JavaParser)"The quick brown fox jumps over the lazy dog").AssignmentOperator();

Test 345: 
StringReader stringReader = new StringReader("j=10");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 346: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

Test 347: 
StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();

Test 348: 
StringReader stringReader = new StringReader("Ajp/javaParserTest");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 349: 
StringReader stringReader = new StringReader("9842JDH");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
String string = "4356BTN";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 350: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, even if it is the same class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
((JavaParser) stringReader).Expression();

Test 351: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 352: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).ExclusiveOrExpression();

Test 353: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).RelationalExpression();

Test 354: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();
String string = "9v,Z%GPib3|%^`m";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ResultType();
((JavaParser) stringReader).ArgumentList();

Test 355: 
StringReader stringReader = new StringReader("This is a test String.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpression();

Test 356: 
StringReader stringReader = new StringReader("42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 357: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 88, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

Test 358: 
StringReader stringReader = new StringReader("1 + 2 * 3");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 359: 
StringReader stringReader = new StringReader("This is a sample text for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 360: 

Test 361: 
JavaParser javaParser = new JavaParser("|#A-Pj1");

Test 362: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");

Test 363: 
JavaParser javaParser = new JavaParser("This is a string that contains special characters like  and \"");

Test 364: 

Test 365: 
StringReader stringReader = new StringReader("Addition with integers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();
((JavaParser) stringReader).CastExpression();

Test 366: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 367: 
StringReader stringReader = new StringReader("int x = 10;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastExpression();

Test 368: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 369: 
JavaParser javaParser = new JavaParser("employee");

Test 370: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("example", "file");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
((JavaParser) createTempFile).PrimarySuffix();

Test 371: 

Test 372: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();
String string = "P8z0";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).BooleanLiteral();

Test 373: 
JavaParser javaParser = new JavaParser("true");

Test 374: 
JavaParser javaParser = new JavaParser("       Java+JavaParser < inputfile");

Test 375: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");

Test 376: 
StringReader stringReader = new StringReader("A long string with a variety of characters, including numbers, letters, and special characters");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArgumentList();

Test 377: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 378: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 379: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

Test 380: 
StringReader stringReader = new StringReader("\"\n\r\t\f\b\n3456789\"'!@#$%^&*()-=[]{}|;:,./<>?`~\\ \n\r\t\b\u0007\u001F\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 381: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 31, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).ForUpdate();
((JavaParser) javaCharStream).ArrayDimsAndInits();

Test 382: 
JavaParser javaParser = new JavaParser((Reader) "");

Test 383: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);

Test 384: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Statement();

Test 385: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 386: 
SystemInUtil.addInputLine("\"This is a sample input string for testing purposes.\"");
JavaParser javaParser = new JavaParser("\"This is a sample input string for testing purposes.\"");
((JavaParser)null).Statement();

Test 387: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 388: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 389: 
StringReader stringReader = new StringReader(": Hello World");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 390: 
StringReader stringReader = new StringReader("\"Hello, world!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 391: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf /* Hello World! */");
JavaParser javaParser = new JavaParser(stringReader);

Test 392: 
StringReader stringReader = new StringReader("{+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();

Test 393: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 394: 
StringReader stringReader = new StringReader("A more descriptive example of a StringReader");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 395: 

Test 396: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 397: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 398: 
StringReader stringReader = new StringReader("      [  java JavaLarser inputfile`");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();
String string = "      [  java JavaLarser inputfile.java";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 399: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 400: 
StringReader stringReader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><element attribute=\"value\"/><element>text</element></root>");
JavaParser javaParser = new JavaParser(stringReader);

Test 401: 
JavaParser javaParser = new JavaParser("1234567890");

Test 402: 
JavaParser javaParser = new JavaParser("hello");

Test 403: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ForUpdate();

Test 404: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 25, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

Test 405: 
StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();
String string = "B;class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();

Test 406: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
String string = "abcdefghijklmnopqrstuvwxyz";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

Test 407: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

Test 408: 
StringReader stringReader = new StringReader("class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 409: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 410: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).Type();

Test 411: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
((JavaParser) stringReader).ForUpdate();

Test 412: 

Test 413: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");

Test 414: 
StringReader stringReader = new StringReader("Hello World");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 415: 

Test 416: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).WhileStatement();

Test 417: 
JavaParser javaParser = new JavaParser("Test string");

Test 418: 

Test 419: 
JavaParser javaParser = new JavaParser("John Doe");

Test 420: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 421: 
Object object = null;
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) object).ForInit();

Test 422: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 423: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();
String string = "p8Z0\n // Break statement to exit the loop.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

Test 424: 
StringReader stringReader = new StringReader("AYAI");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 425: 

Test 426: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
javaParser.SynchronizedStatement();

Test 427: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 2, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SynchronizedStatement();

Test 428: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class, but it can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

Test 429: 
StringReader stringReader = new StringReader("\"\n This is a sample input string with multiple lines \n including whitespace and special characters\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).TryStatement();

Test 430: 
JavaParser javaParser = new JavaParser("unsignedShift");

Test 431: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 432: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
javaParser.Annotation();

Test 433: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 434: 
int _int = 12345;
JavaParser javaParser = new JavaParser((String) 12345);
((JavaParser) _int).NormalAnnotation();

Test 435: 

Test 436: 
StringReader stringReader = new StringReader("A class can only have a single abstract modifier");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

Test 437: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);

Test 438: 
StringReader stringReader = new StringReader("A well-designed class should be easy to understand and maintain, with a clear structure and concise comments.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).MemberValue();

Test 439: 
StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 440: 
JavaParser javaParser = new JavaParser("");

Test 441: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 88, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberValue();

Test 442: 
StringReader stringReader = new StringReader("A1B2C3D4E5F6G7H8I9JKL");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

Test 443: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 444: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);

Test 445: 
StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 446: 
JavaParser javaParser = new JavaParser(">P`");

Test 447: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 448: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();
((JavaParser) javaCharStream).ForUpdate();

Test 449: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
((StringReader)"|#A-Pj1").skip(9147936743096320L);
((JavaParser) stringReader).CompilationUnit();

Test 450: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalAndExpression();

Test 451: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);

Test 452: 
StringReader stringReader = new StringReader("This is a test string for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FieldDeclaration((int) "This is a test string for testing the JavaParser class.");

Test 453: 
StringReader stringReader = new StringReader("x4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclarator();

Test 454: 
StringReader stringReader = new StringReader("A student cannot enroll in more than two courses at a time");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableDeclaratorId();

Test 455: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
int _int = 81;
((JavaParser) stringReader).MethodDeclaration(_int);

Test 456: 
JavaParser javaParser = new JavaParser("IBMdoN&(a_");

Test 457: 
StringReader stringReader = new StringReader("int a = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameters();

Test 458: 
StringReader stringReader = new StringReader("A class cannot extend more than one other abstract class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalOrExpression();
((JavaParser) stringReader).Type();

Test 459: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();
String string = "A class named 'Car' cannot extend multiple classes, including 'Vehicle' and 'Automobile'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).ReferenceType();

Test 460: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 461: 
JavaParser javaParser = new JavaParser("a0Af^!%&");

Test 462: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 463: 
StringReader stringReader = new StringReader("2 + 3 * 4");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 464: 

Test 465: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).ConditionalOrExpression();

Test 466: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");

Test 467: 
StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 468: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 469: 
int _int = 20;
JavaCharStream javaCharStream = new JavaCharStream((Reader) "Example string", 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).AndExpression();

Test 470: 
StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

Test 471: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();
String string = "|#A-Pj1";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EqualityExpression();

Test 472: 
JavaParser javaParser = new JavaParser((String) 42);

Test 473: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 474: 
StringReader stringReader = new StringReader("10 + 20 * 30");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 475: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 476: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 477: 
StringReader stringReader = new StringReader("1 + 2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AdditiveExpression();

Test 478: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 479: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 480: 
int _int = 2266;
JavaCharStream javaCharStream = new JavaCharStream((Reader) 31, 31, 2266, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParserTokenManager) _int).getNextToken();
((JavaParser) javaCharStream).UnaryExpression();

Test 481: 

Test 482: 
StringReader stringReader = new StringReader("\"Hello World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with multiple words.'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "\"Hello World! This is a test string with multiple words and numbers 123.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();
String string = "'This is a test string with a syntax error missing a closing single quote.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 483: 
StringReader stringReader = new StringReader("\"-\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 484: 
StringReader stringReader = new StringReader("15");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 485: 
StringReader stringReader = new StringReader("This is a sample input for testing the UnaryExpressionNotPlusMinus method in the JavaParser class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 486: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 487: 

Test 488: 
StringReader stringReader = new StringReader("This is a test string with numbers 123 and special characters $%^&*. The end.");
char[] charArray = new char[7];
int read = ((Reader)"This is a test string with numbers 123 and special characters $%^&*. The end.").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).PrimaryPrefix();

Test 489: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).PrimaryPrefix();

Test 490: 
StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)61).Literal();

Test 491: 
StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).Literal();

Test 492: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 493: 
StringReader stringReader = new StringReader("/* My Test File */");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)88).StatementExpression();

Test 494: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();
String string = "A class cannot extend more than one other class, but it can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumConstant();
((JavaParser) stringReader).StatementExpression();

Test 495: 
StringReader stringReader = new StringReader("\"-\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

Test 496: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 497: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");

Test 498: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 606, 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).Type();
((JavaParser) javaCharStream).ForUpdate();

Test 499: 
StringReader stringReader = new StringReader("A class can only extend one other class");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).getToken(115);

Test 500: 

Test 501: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test case for the JavaParser class, it should throw an error when an invalid input is provided";
JavaParser.main(stringArray);

Test 502: 
PipedInputStream pipedInputStream = new PipedInputStream((int) "A string that represents a stream of characters");
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
((JavaParser) bufferedInputStream).generateParseException();


* Minimizing test suite
* test suite isTestSuite: 280
Test 0: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("e");
FileSystemHandling.appendStringToFile(evoSuiteFile, "`J/)92oiL1-xpxvX");
JavaParser javaParser = new JavaParser("e");
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 1: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 2: 
JavaParser javaParser = new JavaParser("-/9");
StringReader stringReader = new StringReader("-/9");
javaParser.ReInit((Reader) stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 3: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.disable_tracing();
Test 4: 
StringReader stringReader = new StringReader("4{m)C_Hta],4X%X");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.enable_tracing();
Test 5: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(2258);
Test 6: 
JavaParser.ModifierSet.removeModifier((-77), 26);
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(591);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(16);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(62);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(0);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-330));
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(10);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-392));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(256);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(44);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(345);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-408));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1179));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2310));
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(512);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(34);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(2910);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(1256);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2040);
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(32);
Test 26: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(776);
Test 27: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 28: 
String[] stringArray = new String[2];
JavaParser.main(stringArray);
Test 29: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 30: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
StringReader stringReader = new StringReader("ItVPp8t'{/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'{/\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 34: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: extend
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ClassOrInterfaceDeclaration((-3283));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser("true");
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.EnumDeclaration((-4821));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
SystemInUtil.addInputLine("`C?p2k5vD+Ow0C%p%?r");
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
// Undeclared exception!
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 45: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 54: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  File ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("v1jDlrt7\"k(L2px");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.FieldDeclaration(1329);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\\"k(L2px\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 56: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.Expression();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
javaParser.VariableInitializer();
Test 60: 
StringReader stringReader = new StringReader("NC75E%^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
StringReader stringReader = new StringReader("!N8_wk>G'w");
javaParser.ReInit((Reader) stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'w\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 65: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 67: 
JavaParser javaParser = new JavaParser("pL`'J");
try { 
  javaParser.MethodDeclaration((byte) (-113));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 69: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
byte[] byteArray = new byte[3];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 72: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("<tlSI$^]IC#");
javaParser.ReInit((Reader) stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 78: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Initializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 79: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, (-3308), (-3308));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("|#A-Pj1");
stringReader.read();
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1016, (-804));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1016, column -804.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 87: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser");
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("O");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 89: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -2214, column 611.  Encountered: found
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 93: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 96: 
StringReader stringReader = new StringReader("j=`To");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 97: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("         java+JavaParor < inputfile");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
Test 100: 
StringReader stringReader = new StringReader("+jp/K");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 101: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 102: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
StringReader stringReader = new StringReader("9v,Z%GPib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ResultType();
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 105: 
StringReader stringReader = new StringReader(".-0/iv]jU");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader("@=@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("=?|k6\"y)X{Ox2WMGzP");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, (-1779));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 88, column -1779.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 118: 
StringReader stringReader = new StringReader("\"Xx5/pnU");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\\"Xx5/pnU\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 119: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 120: 
JavaParser javaParser = new JavaParser("*rshft");
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("[|xJHvmM", "=?|k6\"y).X{Oxw+uGP");
MockFileInputStream mockFileInputStream = new MockFileInputStream(createTempFile);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 123: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 124: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
JavaParser javaParser = new JavaParser("bqImD`.c\"#Qf");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader("'>#h:xQ!");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\\'>\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 129: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 131: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ForUpdate();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 36.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 135: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
SystemInUtil.addInputLine("\";\"");
JavaParser javaParser = new JavaParser("\";\"");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
StringReader stringReader = new StringReader("_TXc[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader(":");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 145: 
StringReader stringReader = new StringReader(" \"o");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"o\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 146: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();
Test 147: 
StringReader stringReader = new StringReader("+}8B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
StringReader stringReader = new StringReader("O93gF4P`W)CXM!>");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 149: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("      [  java JavaLarser inputfil`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 7.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
JavaParser javaParser = new JavaParser("Vb[&Zn*\"");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
JavaParser javaParser = new JavaParser("9v,Z%GPib3|%^`m");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 156: 
JavaParser javaParser = new JavaParser("[zM");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("A;class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader(". State unchanged.");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("<jD1TR=X;#");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 166: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.AndExpression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Type();
javaParser.ForUpdate();
Test 167: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.ForUpdate();
Test 168: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 169: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 171: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
StringReader stringReader = new StringReader("n:f+xv/:Y's");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 2);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 88, column 99.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 176: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 177: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
JavaParser javaParser = new JavaParser("OQA#NU^&WKyBv");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 180: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("_X[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 183: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: p8Z0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("YAI");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: YAI
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 185: 
JavaParser javaParser = new JavaParser("n");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 187: 
JavaParser javaParser = new JavaParser("|#A-Pj1");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader(",`5BmOV");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2, 2);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
javaCharStream.Done();
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 189: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("\"\n\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"\\n\" (10), after : \"\\\"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
JavaParser javaParser = new JavaParser("         java+JavaParor < inputfile");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Annotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 195: 
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
javaParser.MemberValue();
Test 200: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
StringReader stringReader = new StringReader("An interface cannot have initializers");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
StringReader stringReader = new StringReader("8#Bp,)=HA!M@`lMRE");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 203: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 88, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 205: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Op
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
byte[] byteArray = new byte[11];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 207: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.AnnotationTypeDeclaration(66);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("#^o8Uj/SJO3");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 209: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 210: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
StringReader stringReader = new StringReader("\"?\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 212: 
StringReader stringReader = new StringReader(".  Encountered: ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 214: 
JavaParser javaParser = new JavaParser(">P`");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader(" not found.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-2214), 606);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();
javaParser.ForUpdate();
Test 217: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
javaParser.getNextToken();
Test 218: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
stringReader.skip(9147936743096320L);
javaParser.CompilationUnit();
Test 219: 
JavaParser javaParser = new JavaParser("*rshft");
javaParser.Modifiers();
Test 220: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalAndExpression();
try { 
  javaParser.ClassOrInterfaceDeclaration(1);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 221: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 222: 
StringReader stringReader = new StringReader("+}B&-U:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 223: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-1752));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("z4;-~O");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 225: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();
Test 226: 
StringReader stringReader = new StringReader("\"synchronized\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"synchronized\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 227: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.MethodDeclaration(81);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
JavaParser javaParser = new JavaParser("IBMdoN&(a_");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
Test 232: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 233: 
JavaParser javaParser = new JavaParser("XPb+h$]6T#");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
StringReader stringReader = new StringReader("p8Z0");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
Test 235: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 236: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 237: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 238: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 239: 
Enumeration<PushbackInputStream> enumeration = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 240: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
JavaParser javaParser = new JavaParser("Op;9fFS 3-Nf");
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
StringReader stringReader = new StringReader("`Kpy|pQRT^uw");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 243: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 244: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 68, 20);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 245: 
StringReader stringReader = new StringReader("[V#");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1440, 64);
javaCharStream.inBuf = 1440;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 246: 
StringReader stringReader = new StringReader("|#A-Pj1");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 247: 
JavaParser javaParser = new JavaParser("byte");
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 248: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 249: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 250: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
Test 251: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 252: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 254: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 255: 
StringReader stringReader = new StringReader("_TXc[{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 31, 31, 2266);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParserTokenManager.getNextToken();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 31, column 35.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 256: 
JavaParser javaParser = new JavaParser("kU<?~6{%nR");
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 257: 
StringReader stringReader = new StringReader("\";\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 258: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 259: 
StringReader stringReader = new StringReader("9");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 260: 
StringReader stringReader = new StringReader("kU<?~6{%nR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 261: 
StringReader stringReader = new StringReader("\u0003TOW[cs.{");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u0003\" (3), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 262: 
JavaParser javaParser = new JavaParser(")");
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 263: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
javaParser.getToken(115);
Test 264: 
StringReader stringReader = new StringReader("Op;9fFS 3-Nf");
char[] charArray = new char[7];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();
Test 265: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 266: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 267: 
StringReader stringReader = new StringReader("\";\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 56, 61);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Literal();
Test 268: 
StringReader stringReader = new StringReader("Zvk/~B_]Cs+m");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumConstant();
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
StringReader stringReader = new StringReader("9v,Z%GPDib3|%^`m");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: v
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 270: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 271: 
StringReader stringReader = new StringReader("/I>Z3]#o");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 0, 88);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 0, column 88.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 273: 
StringReader stringReader = new StringReader("\"-");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\\"-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 274: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
JavaParser javaParser = new JavaParser("I^MdoAN%a_");
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 276: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getToken(115);
Test 277: 
StringReader stringReader = new StringReader("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
PrintStream printStream = javaParser.token_source.debugStream;
MockPrintWriter mockPrintWriter = new MockPrintWriter(printStream, false);
javaParser.dump(mockPrintWriter);
Test 278: 
String[] stringArray = new String[1];
stringArray[0] = "A class cannot extend more than one other class";
JavaParser.main(stringArray);
Test 279: 
PipedInputStream pipedInputStream = new PipedInputStream(74);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pipedInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 7938
* Number of covered goals: 2428
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 48%
* Total number of goals: 4940
* Number of covered goals: 2356
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 9
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 134
* Number of covered goals: 131
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 28%
* Total number of goals: 7938
* Number of covered goals: 2235
* Generated 280 tests with total length 839
* Resulting test suite's coverage: 45% (average coverage for all fitness functions)
* Generating assertions
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: Class too large: com/soops/CEN4010/JMCA/JParser/JavaParser
[MASTER] 20:43:34.817 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:34.881 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:34.919 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:34.982 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.016 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.056 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.118 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.156 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.175 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.229 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.248 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.286 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.328 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.393 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.411 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.448 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.468 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.506 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.525 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.562 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 20:43:35.581 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 20:43:35.630 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
* Error while initializing target class: com/soops/CEN4010/JMCA/JParser/JavaParser
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
[MASTER] 20:43:35.744 [logback-1] WARN  SimpleMutationAssertionGenerator - Could not initialize SUT before Assertion generation
[MASTER] 20:43:36.532 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.532 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.545 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.546 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.546 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.546 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.710 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.712 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.716 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.716 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 20:43:36.718 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
* Computation finished
