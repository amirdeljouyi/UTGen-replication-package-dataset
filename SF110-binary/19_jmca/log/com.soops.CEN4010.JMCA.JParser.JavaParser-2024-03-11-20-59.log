* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JParser.JavaParser
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 6299
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:59:37.742 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:59:37.745 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:59:37.746 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:59:38.427 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JParser.JavaParser
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 20959
* Using seed 1710190764943
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 2618 / 20959
[Progress:>                             1%] [Cov:====>                              13%][Progress:>                             3%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:=====>                             17%][Progress:===>                          10%] [Cov:======>                            19%][Progress:===>                          11%] [Cov:=======>                           21%][Progress:====>                         14%] [Cov:========>                          24%][Progress:====>                         15%] [Cov:========>                          24%][Progress:====>                         16%] [Cov:=========>                         26%][Progress:====>                         16%] [Cov:=========>                         27%][Progress:=====>                        17%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:===========>                       33%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:============>                      35%][Progress:======>                       22%] [Cov:============>                      35%][Progress:=======>                      24%] [Cov:============>                      36%][Progress:=======>                      25%] [Cov:============>                      36%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:==============>                    40%][Progress:============>                 41%] [Cov:==============>                    40%][Progress:============>                 42%] [Cov:==============>                    40%][Progress:============>                 43%] [Cov:==============>                    40%][Progress:=============>                44%] [Cov:==============>                    40%][Progress:=============>                45%] [Cov:==============>                    40%][Progress:=============>                46%] [Cov:==============>                    40%][Progress:===============>              50%] [Cov:==============>                    40%][Progress:===============>              51%] [Cov:==============>                    41%][Progress:===============>              52%] [Cov:==============>                    41%][Progress:===============>              53%] [Cov:==============>                    41%][Progress:=================>            59%] [Cov:==============>                    41%][Progress:==================>           60%] [Cov:==============>                    41%][Progress:==================>           61%] [Cov:==============>                    41%][Progress:==================>           62%] [Cov:==============>                    41%][Progress:==================>           63%] [Cov:==============>                    42%][Progress:===================>          64%] [Cov:==============>                    42%][Progress:===================>          65%] [Cov:==============>                    42%][Progress:===================>          66%] [Cov:==============>                    42%][Progress:====================>         67%] [Cov:==============>                    42%][Progress:====================>         68%] [Cov:===============>                   43%][Progress:====================>         69%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:======================>       74%] [Cov:===============>                   43%][Progress:=======================>      77%] [Cov:===============>                   43%][Progress:=======================>      78%] [Cov:===============>                   43%][Progress:=======================>      79%] [Cov:===============>                   43%][Progress:========================>     80%] [Cov:===============>                   43%][Progress:========================>     81%] [Cov:===============>                   44%][Progress:=========================>    85%] [Cov:===============>                   44%][Progress:==========================>   88%] [Cov:===============>                   44%][Progress:===========================>  91%] [Cov:===============>                   44%][Progress:===========================>  92%] [Cov:===============>                   44%][Progress:===========================>  93%] [Cov:===============>                   44%][Progress:============================> 94%] [Cov:===============>                   44%][Progress:============================> 95%] [Cov:===============>                   44%][Progress:============================> 96%] [Cov:===============>                   44%][Progress:=============================>98%] [Cov:===============>                   44%][Progress:=============================>99%] [Cov:===============>                   44%][Progress:==============================100%] [Cov:===============>                   44%]
* Search finished after 206s and 64 generations, 24502 statements, best individual has fitness: 14218.0
* Generated before the refinement 299 tests with total length 916
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("?BT%")
statement is: ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit(javaParser.token_source)
test data is: JavaParser javaParser = new JavaParser("?BT%");
javaParser.ReInit(javaParser.token_source);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("1234567890abcdefghijklmnopqrstuvwxyz");
        javaParser.ReInit(javaParser.token_source);
    }
}
statement is: Parser javaParser = new JavaParser("1234567890abcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(javaParser.token_source), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(javaParser.token_source) target is: javaParser method is: ReInit()
TestCase is: String string = "1234567890abcdefghijklmnopqrstuvwxyz";
JavaParser javaParser = new JavaParser(string);

statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{")
statement is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendStringToFile = FileSystemHandling.appendStringToFile(arg0, "@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{")
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{");
FileSystemHandling.appendStringToFile(evoSuiteFile, "@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        FileSystemHandling.appendStringToFile(evoSuiteFile, "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        JavaParser javaParser = new JavaParser("This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendStringToFile(evoSuiteFile, "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendStringToFile(evoSuiteFile, "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~") target is: FileSystemHandling method is: appendStringToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendStringToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: JavaParser javaParser = new JavaParser("This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
String string = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) string, string);
String string = "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
JavaParser javaParser = new JavaParser(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@8bcf0c6d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: java.io.ByteArrayInputStream([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0, (-99), 10)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: dump(Ljava/io/Writer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.dump((Writer) null)
test data is: byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-99), 10);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
javaParser.dump((Writer) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ -99, 10 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
        JavaParser javaParser = new JavaParser(bufferedInputStream);
        javaParser.dump(((Writer) (null)));
    }
}
statement is: byte[] byteArray = new byte[]{ -99, 10 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ -99, 10 } Elements: [-99, 10]
lengths: [4] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.BufferedInputStream(Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.dump(((Writer) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.dump(((Writer) (null))) target is: javaParser method is: dump(Writer)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("V|9n,)lT'A_\".Q06KJ/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) null)
test data is: StringReader stringReader = new StringReader("V|9n,)lT'A_\".Q06KJ/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This is an example of a valid Java expression that represents a mathematical operation
        // This is an example of a valid Java expression that represents a string concatenation
        // This is an example of a valid Java expression that represents a conditional statement }}
    }
}
statement is: // This is an example of a valid Java expression that represents a mathematical operation, class spoon.support.reflect.code.CtCommentImpl
statement is: // This is an example of a valid Java expression that represents a string concatenation, class spoon.support.reflect.code.CtCommentImpl
statement is: // This is an example of a valid Java expression that represents a conditional statement }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(">>>")
statement is: disable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.disable_tracing()
test data is: JavaParser javaParser = new JavaParser(">>>");
javaParser.disable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("<<<");
        javaParser.disableTracing();
    }
}
statement is: Parser javaParser = new JavaParser("<<<"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.disableTracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.disableTracing() target is: javaParser method is: disableTracing()
TestCase is: String string = "<<<";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("(y(O:<mcr|lFfG`G")
statement is: enable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.enable_tracing()
test data is: JavaParser javaParser = new JavaParser("(y(O:<mcr|lFfG`G");
javaParser.enable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String expression = "(y(O:<mcr|lFfG`G";
    }
}
statement is: String expression = "(y(O:<mcr|lFfG`G", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "(y(O:<mcr|lFfG`G"
TestCase is: String string = "(y(O:<mcr|lFfG`G";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(16)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(16);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPublic("P");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPublic("P"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic("P") target is: javaParser_ModifierSet method is: isPublic(java.lang.String)
statement is: removeModifier(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int removeModifier = JavaParser.ModifierSet.removeModifier(58, 16)
test data is: JavaParser.ModifierSet.removeModifier(58, 16);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int value = 20;// Changed to a more descriptive value that better represents the situation being tested

        String name = "John";// Changed to a more descriptive String that better represents the situation being tested }}

    }
}
statement is: int value = 20// Changed to a more descriptive value that better represents the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John"// Changed to a more descriptive String that better represents the situation being tested }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 20
* this is vulnerable: String string = "John"
TestCase is: int _int = 20;
String string = "John";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic(33)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(33);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(81)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(81);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isProtected("protected");
        javaParser_ModifierSet.isPublic("public");
        javaParser_ModifierSet.isFinal("final");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isProtected("protected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected("protected") target is: javaParser_ModifierSet method is: isProtected(java.lang.String)
statement is: javaParser_ModifierSet.isPublic("public"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic("public") target is: javaParser_ModifierSet method is: isPublic(java.lang.String)
statement is: javaParser_ModifierSet.isFinal("final"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal("final") target is: javaParser_ModifierSet method is: isFinal(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(791)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(791);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isProtected("protected");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isProtected("protected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected("protected") target is: javaParser_ModifierSet method is: isProtected(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate(16)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(16);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(256);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(256), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(256) target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate((-1969))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1969));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(9);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(9), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(9) target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic((-3004))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-3004));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        System.out.println("The value is positive");
    }

    {
        System.out.println("The value is negative");
    }

    {
        System.out.println("The value is zero");
    }
}
statement is: System.out.println("The value is positive"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("The value is positive") target is: System.out method is: println(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic(30)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(30);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStatic("STABLE");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStatic("STABLE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic("STABLE") target is: javaParser_ModifierSet method is: isStatic(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(64)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(64);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract("ABSTRACT");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract("ABSTRACT"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract("ABSTRACT") target is: javaParser_ModifierSet method is: isAbstract(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(8)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract("yes");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract("yes"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract("yes") target is: javaParser_ModifierSet method is: isAbstract(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal((-832))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-832));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal(-832);// Testing a negative value

        javaParser_ModifierSet.isFinal(0);// Testing a zero value

        javaParser_ModifierSet.isFinal(1);// Testing a positive value

        javaParser_ModifierSet.isFinal(-1234567890);// Testing a large negative valu }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal(-832)// Testing a negative value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(-832)// Testing a negative value
 target is: javaParser_ModifierSet method is: isFinal(int)
statement is: javaParser_ModifierSet.isFinal(0)// Testing a zero value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(0)// Testing a zero value
 target is: javaParser_ModifierSet method is: isFinal(int)
statement is: javaParser_ModifierSet.isFinal(1)// Testing a positive value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(1)// Testing a positive value
 target is: javaParser_ModifierSet method is: isFinal(int)
statement is: javaParser_ModifierSet.isFinal(-1234567890)// Testing a large negative valu }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(-1234567890)// Testing a large negative valu }}
 target is: javaParser_ModifierSet method is: isFinal(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal(59)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(59);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal(true);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(true) target is: javaParser_ModifierSet method is: isFinal(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative(512)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(512);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(32768);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(32768), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(32768) target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-1831))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1831));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(90210);// This value represents a valid native modifier for a Java metho }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(90210)// This value represents a valid native modifier for a Java metho }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(90210)// This value represents a valid native modifier for a Java metho }}
 target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp(207)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(207);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp("STRICTFP");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp("STRICTFP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp("STRICTFP") target is: javaParser_ModifierSet method is: isStrictfp(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp((-1))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(true);// set to true to enable strict mod }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(true)// set to true to enable strict mod }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(true)// set to true to enable strict mod }}
 target is: javaParser_ModifierSet method is: isStrictfp(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized(55)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(55);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(true);// Changed the value of isSynchronized from 55 to true, as it makes more sense in this contex }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(true)// Changed the value of isSynchronized from 55 to true, as it makes more sense in this contex }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(true)// Changed the value of isSynchronized from 55 to true, as it makes more sense in this contex }}
 target is: javaParser_ModifierSet method is: isSynchronized(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized((-414))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-414));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(-414);
        // Changed the primitive value -414 to a more illustrative example, such as 200 }}
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(-414), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(-414) target is: javaParser_ModifierSet method is: isSynchronized(int)
statement is: // Changed the primitive value -414 to a more illustrative example, such as 200 }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(8)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        // ModifierSet for a transient field
        javaParser_ModifierSet.add(TRANSIENT);
        // Expected outcome: the field is considered transient
        boolean expectedTransient = true;
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // ModifierSet for a transient field
javaParser_ModifierSet.add(TRANSIENT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // ModifierSet for a transient field
javaParser_ModifierSet.add(TRANSIENT) target is: javaParser_ModifierSet method is: add()
statement is: // Expected outcome: the field is considered transient
boolean expectedTransient = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: boolean _boolean = true
TestCase is: boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(2342)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2342);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isTransient(true);// replaced 2342 with a boolean value to make it more illustrative of the situation being teste }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isTransient(true)// replaced 2342 with a boolean value to make it more illustrative of the situation being teste }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isTransient(true)// replaced 2342 with a boolean value to make it more illustrative of the situation being teste }}
 target is: javaParser_ModifierSet method is: isTransient(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile((byte)54)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile((byte)54);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile(false);// This value represents a non-volatile modifier, which means that the field can only be modified by one thread at a time }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile(false)// This value represents a non-volatile modifier, which means that the field can only be modified by one thread at a time }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile(false)// This value represents a non-volatile modifier, which means that the field can only be modified by one thread at a time }}
 target is: javaParser_ModifierSet method is: isVolatile(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(3672)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(3672);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile(VOLATILE);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile(VOLATILE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile(VOLATILE) target is: javaParser_ModifierSet method is: isVolatile()
statement is: org.evosuite.testcase.statements.ArrayStatement@e7ce610a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[4];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "hello", "world", "foo", "bar" };
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "hello", "world", "foo", "bar" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[]{ "hello", "world", "foo", "bar" } Elements: ["hello", "world", "foo", "bar"]
lengths: [4] []
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JavaParser.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@88b86a34 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[0];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "-a", "-b" };
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "-a", "-b" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "-a", "-b" } Elements: ["-a", "-b"]
lengths: [0] []
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JavaParser.main(stringArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 82, 82)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } int x = 5; double y = 3.14; char z = \'a\'; String s = \"This is a test\"; if (x > 0) { System.out.println(\"The value of x is positive.\"); } else { System.out.println(\"The value of x is negative.\"); } for (int i = 0; i < 10; i++) { System.out.println(i); } while (x > 0) { System.out.println(\"The value of x is positive.\"); } } }");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } int x = 5; double y = 3.14; char z = \'a\'; String s = \"This is a test\"; if (x > 0) { System.out.println(\"The value of x is positive.\"); } else { System.out.println(\"The value of x is negative.\"); } for (int i = 0; i < 10; i++) { System.out.println(i); } while (x > 0) { System.out.println(\"The value of x is positive.\"); } } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: CompilationUnit()V
TestCase is: String string = "public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } int x = 5; double y = 3.14; char z = 'a'; String s = \"This is a test\"; if (x > 0) { System.out.println(\"The value of x is positive.\"); } else { System.out.println(\"The value of x is negative.\"); } for (int i = 0; i < 10; i++) { System.out.println(i); } while (x > 0) { System.out.println(\"The value of x is positive.\"); } } }";
StringReader stringReader = new StringReader(string);
int _int = 82;
int _int = 82;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).CompilationUnit();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[")
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.example.myproject");
        // This is a fictional package name, it should be replaced with a real one in your code.
        javaParser.PackageDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser("com.example.myproject"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // This is a fictional package name, it should be replaced with a real one in your code.
javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // This is a fictional package name, it should be replaced with a real one in your code.
javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
TestCase is: String string = "com.example.myproject";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager("MyJavaProject/src");
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.PackageDeclaration();
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager("MyJavaProject/src"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PackageDeclaration()V
TestCase is: String string = "MyJavaProject/src";
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) string);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).PackageDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("#`odp TI2")
statement is: ImportDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImportDeclaration()
test data is: JavaParser javaParser = new JavaParser("#`odp TI2");
javaParser.ImportDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ImportDeclaration();
        List<String> names = new ArrayList<>();
        names.add("John");
        names.add("Jane");
        names.add("Bob");
        names.forEach(System.out::println);
    }
}
statement is: Parser.ImportDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ImportDeclaration() target is: Parser method is: ImportDeclaration()
statement is: List<String> names = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: names.add("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("John") target is: names method is: add(java.lang.String)
statement is: names.add("Jane"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("Jane") target is: names method is: add(java.lang.String)
statement is: names.add("Bob"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("Bob") target is: names method is: add(java.lang.String)
statement is: names.forEach(System.out::println), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.forEach(System.out::println) target is: names method is: forEach()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Modifiers()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int Modifiers = javaParser.Modifiers()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Modifiers();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the method "Modifiers" of class "JavaParser"
        int i = 1;// Primitive integer value replaced with a more descriptive example

        double d = 3.14;// Primitive double value replaced with a more descriptive example

        String s = "Hello World";// String value replaced with a more descriptive example

        char c = 'A';// Primitive char value replaced with a more descriptive example

        boolean b = true;// Primitive boolean value replaced with a more descriptive example

        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null)));
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Modifiers();
    }
}
statement is: // Improved test data for the method "Modifiers" of class "JavaParser"
int i = 1// Primitive integer value replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// Primitive double value replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello World"// String value replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A'// Primitive char value replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true// Primitive boolean value replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Modifiers(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Modifiers() target is: javaParser method is: Modifiers()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: Modifiers()I
* this is vulnerable: int _int = 1
* this is vulnerable: String string = "Hello World"
* this is vulnerable: char _char = 'A'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 1;
double _double = 3.14;
String string = "Hello World";
char _char = 'A';
boolean _boolean = true;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _double).Modifiers();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("++")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: StringReader stringReader = new StringReader("++");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(103)
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
javaParser.ClassOrInterfaceDeclaration(103);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor();
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaParser javaParser = new JavaParser(mockFileInputStream);
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("catch")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExtendsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExtendsList(false)
test data is: StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExtendsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("catch");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExtendsList(false);
        // Additional test data to improve coverage
        stringReader = new StringReader("throw");
        javaParser = new JavaParser(stringReader);
        javaParser.ExtendsList(true);
    }
}
statement is: StringReader stringReader = new StringReader("catch"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExtendsList(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExtendsList(false) target is: javaParser method is: ExtendsList(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExtendsList(Z)V
statement is: // Additional test data to improve coverage
stringReader = new StringReader("throw"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.ExtendsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExtendsList(true) target is: javaParser method is: ExtendsList(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExtendsList(Z)V
TestCase is: String string = "catch";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = false;
((JavaParser) stringReader).ExtendsList(_boolean);
boolean _boolean = true;
((JavaParser) stringReader).ExtendsList(_boolean);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: ImplementsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImplementsList(true)
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.ImplementsList(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] primitiveArray = new int[]{ 1, 2, 3, 4, 5 };
        String[] stringArray = new String[]{ "hello", "world", "abc" };
    }
}
statement is: // Improved test data
int[] primitiveArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "hello", "world", "abc" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration((-815))
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
javaParser.EnumDeclaration((-815));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private static final int NUM_OF_THREADS = 20;
        private static final int MAX_EXECUTION_TIME = 1000;
        private static final String INPUT_FILE = "large_input.txt";
    }
}
statement is: private static final int NUM_OF_THREADS = 20, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private static final int MAX_EXECUTION_TIME = 1000, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: private static final String INPUT_FILE = "large_input.txt", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 20
* this is vulnerable: int _int = 1000
* this is vulnerable: String string = "large_input.txt"
TestCase is: int _int = 20;
int _int = 1000;
String string = "large_input.txt";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration(1284)
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.EnumDeclaration(1284);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null)));
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.EnumDeclaration("HelloWorld");
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumDeclaration("HelloWorld"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration("HelloWorld") target is: javaParser method is: EnumDeclaration(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: EnumDeclaration(I)V
TestCase is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
String string = "HelloWorld";
javaParser.EnumDeclaration((int) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q'BR=g6")
statement is: read()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration(0)
test data is: StringReader stringReader = new StringReader("Q'BR=g6");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumDeclaration(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Q'BR=g6");
        stringReader.read();
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumDeclaration(0);
    }
}
statement is: StringReader stringReader = new StringReader("Q'BR=g6"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: stringReader.read(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read() target is: stringReader method is: read()
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read()I
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumDeclaration(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration(0) target is: javaParser method is: EnumDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: EnumDeclaration(I)V
TestCase is: String string = "Q'BR=g6";
StringReader stringReader = new StringReader(string);
int read = ((StringReader) string).read();
JavaParser javaParser = new JavaParser(stringReader);
int _int = 0;
((JavaParser) read).EnumDeclaration(_int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Q]")
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: JavaParser javaParser = new JavaParser("Q]");
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser example
        String[] enumValues = new String[]{ "APPLE", "BANANA", "ORANGE" };
        String[] methodNames = new String[]{ "foo", "bar", "baz" };
    }
}
statement is: // Improved test data for the JavaParser example
String[] enumValues = new String[]{ "APPLE", "BANANA", "ORANGE" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] methodNames = new String[]{ "foo", "bar", "baz" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: org.evosuite.testcase.statements.ArrayStatement@e75ab03b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] javaClassFile = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)) };
        FileInputStream fileInputStream = new FileInputStream("MyEnum.java");
        JavaParser javaParser = new JavaParser(fileInputStream);
        javaParser.EnumBody();
    }
}
statement is: byte[] javaClassFile = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 0xca, 0xfe, 0xba, 0xbe, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, ((byte) (0xff)) } Elements: [0xca, 0xfe, 0xba, 0xbe, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, ((byte) (0xff))]
lengths: [8] []
statement is: FileInputStream fileInputStream = new FileInputStream("MyEnum.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(fileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.EnumBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumBody() target is: javaParser method is: EnumBody()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("7Q]")
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
test data is: JavaParser javaParser = new JavaParser("7Q]");
javaParser.EnumConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("ENUM_CONSTANT");
        javaParser.EnumConstant();
    }
}
statement is: Parser javaParser = new JavaParser("ENUM_CONSTANT"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
TestCase is: String string = "ENUM_CONSTANT";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: TypeParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameters()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.TypeParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new StringReader(""));
        javaParser.TypeParameters();
    }
}
statement is: Parser javaParser = new JavaParser(new StringReader("")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameters() target is: javaParser method is: TypeParameters()
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameters()
test data is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameters();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameters() target is: javaParser method is: TypeParameters()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("teX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
statement is: SwitchLabel()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchLabel()
test data is: StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.SwitchLabel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("text");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.SwitchLabel();
    }
}
statement is: StringReader stringReader = new StringReader("text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
statement is: javaParser.SwitchLabel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchLabel() target is: javaParser method is: SwitchLabel()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SwitchLabel()V
TestCase is: String string = "text";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).SwitchLabel();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int i = 5;// This integer value is used to represent a positive number in the context of a mathematical operation.

        double d = 3.14;// This double value is used to represent a fractional number in the context of a scientific calculation.

        String s = "Hello, world!";// This string value is used to represent a text message that contains punctuation and spaces.

        char c = 'A';// This character value is used to represent an uppercase letter in the ASCII table. }}

    }
}
statement is: // Improved test data
int i = 5// This integer value is used to represent a positive number in the context of a mathematical operation.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// This double value is used to represent a fractional number in the context of a scientific calculation.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello, world!"// This string value is used to represent a text message that contains punctuation and spaces.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A'// This character value is used to represent an uppercase letter in the ASCII table. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("StringReader stringReader = new StringReader(\"Hello World\");");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: StringReader stringReader = new StringReader("StringReader stringReader = new StringReader(\"Hello World\");"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
TestCase is: String string = "StringReader stringReader = new StringReader(\"Hello World\");";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader("[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("This is a test case for the JavaParser class with more descriptive and representative data.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("This is a test case for the JavaParser class with more descriptive and representative data."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
TestCase is: String string = "This is a test case for the JavaParser class with more descriptive and representative data.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("instanceof")
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: JavaParser javaParser = new JavaParser("instanceof");
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new Type("Integer"));
        javaParser.TypeBound();
    }
}
statement is: Parser javaParser = new JavaParser(new Type("Integer")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeBound() target is: javaParser method is: TypeBound()
TestCase is: JavaParser javaParser = new JavaParser("instanceof");

statement is: org.evosuite.testcase.statements.ArrayStatement@50ff3050 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 127, -1, 0, 9, 42 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.TypeBound();
    }
}
statement is: byte[] byteArray = new byte[]{ 127, -1, 0, 9, 42 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 127, -1, 0, 9, 42 } Elements: [127, -1, 0, 9, 42]
lengths: [7] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeBound() target is: javaParser method is: TypeBound()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("teX")
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(true)
test data is: JavaParser javaParser = new JavaParser("teX");
javaParser.ClassOrInterfaceBody(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("textEditor");
        javaParser.ClassOrInterfaceBody(true);
        // Test 1: Check if the parser can handle a simple class declaration with no modifiers or annotations.
        String input = "class MyClass { }";
        assertTrue(javaParser.parse(input).isPresent());
        // Test 2: Check if the parser can handle a class declaration with multiple fields and methods.
        input = "class MyClass { int x; void myMethod() {} float y; }";
        assertTrue(javaParser.parse(input).isPresent());
        // Test 3: Check if the parser can handle a class declaration with modifiers and annotations.
        input = "@MyAnnotation public abstract class MyClass { }";
        assertTrue(javaParser.parse(input).isPresent());
        // Test 4: Check if the parser can handle a class declaration with generics.
        input = "class MyClass<T> { }";
        assertTrue(javaParser.parse(input).isPresent());
        // Test 5: Check if the parser can handle a class declaration with multiple inheritance.
        input = "class MyClass extends ParentClass implements MyInterface { }";
        assertTrue(javaParser.parse(input).isPresent());
        // Test 6: Check if the parser can handle a class declaration with a constructor.
        input = "class MyClass { public MyClass() {} }";
        assertTrue(javaParser.parse(input).isPresent());
    }
}
statement is: Parser javaParser = new JavaParser("textEditor"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceBody(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBody(true) target is: javaParser method is: ClassOrInterfaceBody(boolean)
statement is: // Test 1: Check if the parser can handle a simple class declaration with no modifiers or annotations.
String input = "class MyClass { }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: // Test 2: Check if the parser can handle a class declaration with multiple fields and methods.
input = "class MyClass { int x; void myMethod() {} float y; }", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: // Test 3: Check if the parser can handle a class declaration with modifiers and annotations.
input = "@MyAnnotation public abstract class MyClass { }", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: // Test 4: Check if the parser can handle a class declaration with generics.
input = "class MyClass<T> { }", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: // Test 5: Check if the parser can handle a class declaration with multiple inheritance.
input = "class MyClass extends ParentClass implements MyInterface { }", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: // Test 6: Check if the parser can handle a class declaration with a constructor.
input = "class MyClass { public MyClass() {} }", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(javaParser.parse(input).isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(javaParser.parse(input).isPresent()) target is:  method is: assertTrue(<unknown>)
* this is vulnerable: String string = "class MyClass { }"
TestCase is: String string = "textEditor";
JavaParser javaParser = new JavaParser(string);
String string = "class MyClass { }";

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
        javaParser.VariableDeclarator();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: VariableDeclarator()V
TestCase is: String string = "Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).VariableDeclarator();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ClassOrInterfaceBodyDeclaration(true);
        // Improved test data:
        StringReader improvedStringReader = new StringReader("This is a more descriptive and representative test string for the JavaParser, including special characters and numbers.");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for the JavaParser."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceBodyDeclaration(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(true) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Improved test data:
StringReader improvedStringReader = new StringReader("This is a more descriptive and representative test string for the JavaParser, including special characters and numbers."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "This is a test string for the JavaParser.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = true;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
String string = "This is a more descriptive and representative test string for the JavaParser, including special characters and numbers.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("O5;K;M8yek+fg")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("O5;K;M8yek+fg");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("O5;K;M8yek+fg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "O5;K;M8yek+fg";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[i@PJ!d[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("[i@PJ!d[");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("ValidJavaIdentifier");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("ValidJavaIdentifier"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "ValidJavaIdentifier";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;")
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Hello");
    }
}
statement is: SystemInUtil.addInputLine("Hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Hello") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
TestCase is: String string = "Hello";
SystemInUtil.addInputLine(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine(".  Encounterd: ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(".  Encounterd: ")
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: SystemInUtil.addInputLine(".  Encounterd: ");
JavaParser javaParser = new JavaParser(".  Encounterd: ");
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        System.out.println("Hello, World!");
        int x = 5;
        double y = 3.14;
        String z = "This is a test string";
        char c = 'a';
    }
}
statement is: System.out.println("Hello, World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello, World!") target is: System.out method is: println(java.lang.String)
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "This is a test string";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < /home/user/Documents/inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < /home/user/Documents/inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "         java JavaParser < /home/user/Documents/inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("E!54ca")
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: JavaParser javaParser = new JavaParser("E!54ca");
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("int x = 54;");
        String expectedType = "int";
        String expectedName = "x";
        String expectedValue = "54";
        String actualType = javaParser.getVariableDeclarator().getType();
        String actualName = javaParser.getVariableDeclarator().getName();
        String actualValue = javaParser.getVariableDeclarator().getValue();
        assertEquals(expectedType, actualType);
        assertEquals(expectedName, actualName);
        assertEquals(expectedValue, actualValue);
    }
}
statement is: Parser javaParser = new JavaParser("int x = 54;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedType = "int", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedName = "x", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedValue = "54", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualType = javaParser.getVariableDeclarator().getType(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getVariableDeclarator().getType() target is: javaParser.getVariableDeclarator() method is: getType()
statement is: String actualName = javaParser.getVariableDeclarator().getName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getVariableDeclarator().getName() target is: javaParser.getVariableDeclarator() method is: getName()
statement is: String actualValue = javaParser.getVariableDeclarator().getValue(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getVariableDeclarator().getValue() target is: javaParser.getVariableDeclarator() method is: getValue()
statement is: assertEquals(expectedType, actualType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedType, actualType) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: assertEquals(expectedName, actualName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedName, actualName) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: assertEquals(expectedValue, actualValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedValue, actualValue) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "int"
* this is vulnerable: String string = "x"
* this is vulnerable: String string = "54"
TestCase is: String string = "int x = 54;";
JavaParser javaParser = new JavaParser(string);
String string = "int";
String string = "x";
String string = "54";

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.ForInit();
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890");
        javaParser.ForInit();
        javaParser.VariableInitializer();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ForInit()V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: VariableInitializer()V
TestCase is: String string = "Error: Ignoring invalid lexical state : 1234567890";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : 1234567890";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).ForInit();
((JavaParser) _void).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"This is a test string for testing the JavaParser class.\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("\"This is a test string for testing the JavaParser class.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "\"This is a test string for testing the JavaParser class.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("instanceof")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("An instance of a class is created by using the new keyword and specifying the name of the class in parentheses.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("An instance of a class is created by using the new keyword and specifying the name of the class in parentheses."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "An instance of a class is created by using the new keyword and specifying the name of the class in parentheses.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
test data is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.getNextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.getNextToken();
    }
}
statement is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getNextToken() target is: javaParser method is: getNextToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "6kwncF_ACE<t'-";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).getNextToken();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello, World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello, World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "\"Hello, World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Q]");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.WildcardBounds();
        // Improved test data
        StringReader stringReader2 = new StringReader("Hello world!");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.VariableInitializer();
        javaParser2.WildcardBounds();
        int[] array1 = new int[]{ 1, 2, 3 };
        int[] array2 = new int[]{ 4, 5, 6 };
        JavaParser javaParser3 = new JavaParser(array1);
        javaParser3.VariableInitializer();
        javaParser3.WildcardBounds();
        String str1 = "Hello";
        String str2 = "world!";
        JavaParser javaParser4 = new JavaParser(str1, str2);
        javaParser4.VariableInitializer();
        javaParser4.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("Q]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
statement is: // Improved test data
StringReader stringReader2 = new StringReader("Hello world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.VariableInitializer() target is: javaParser2 method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: VariableInitializer()V
statement is: javaParser2.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.WildcardBounds() target is: javaParser2 method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: WildcardBounds()V
statement is: int[] array1 = new int[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] array2 = new int[]{ 4, 5, 6 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: JavaParser javaParser3 = new JavaParser(array1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.VariableInitializer() target is: javaParser3 method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: VariableInitializer()V
statement is: javaParser3.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.WildcardBounds() target is: javaParser3 method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: WildcardBounds()V
statement is: String str1 = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str2 = "world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser4 = new JavaParser(str1, str2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser4.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.VariableInitializer() target is: javaParser4 method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: VariableInitializer()V
statement is: javaParser4.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.WildcardBounds() target is: javaParser4 method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: WildcardBounds()V
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "world!"
TestCase is: String string = "Q]";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
String string = "Hello world!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
String string = "Hello";
String string = "world!";
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[*FhH1tX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World! This is a sample string with special characters: \t\n\r");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World! This is a sample string with special characters: \t\n\r"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "Hello, World! This is a sample string with special characters: \t\n\r";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?BT ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("?BT ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "int x = 5;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 42;
        double y = 3.14;
        String z = "Hello, world!";
        char c = 'A';
        boolean b = true;
    }
}
statement is: int x = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-3525), (-3525))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("[");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3525), (-3525));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, -3525, -3525);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.VariableInitializer();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, -3525, -3525), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{")
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ArrayInitializer();
    }
}
statement is: Parser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ArrayInitializer() target is: Parser method is: ArrayInitializer()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("implrements")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(70)
test data is: StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MethodDeclaration(70);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("implements");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MethodDeclaration();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("implements"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration() target is: javaParser method is: MethodDeclaration()
TestCase is: String string = "implements";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 113, (-413))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(21)
test data is: StringReader stringReader = new StringReader("\"==");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MethodDeclaration(21);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"This is a test string containing special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, -413);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.MethodDeclaration(21);
    }
}
statement is: StringReader stringReader = new StringReader("\"This is a test string containing special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, -413), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclaration(21), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(21) target is: javaParser method is: MethodDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: MethodDeclaration(I)V
TestCase is: String string = "\"This is a test string containing special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
StringReader stringReader = new StringReader(string);
int _int = 113;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
int _int = 21;
((JavaParser) javaCharStream).MethodDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("r7@")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("r7@gmail.com");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConstructorDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("r7@gmail.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConstructorDeclaration()V
TestCase is: String string = "r7@gmail.com";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConstructorDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("4}8>xsT")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("4}8>xsT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
        javaParser.FormalParameter();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameter();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("An interface cannot implement other interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: FormalParameter()V
TestCase is: String string = "An interface cannot implement other interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private int age;

    private String name;

    public  FormalParameter(int age, String name) {
        this.age = 30;
        this.name = "Jane Doe";
    }
}
statement is: this.age = 30, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.name = "Jane Doe", class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Q");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
        javaParser.ConstructorDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("Q"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConstructorDeclaration()V
TestCase is: String string = "Q";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();
((JavaParser) stringReader).ConstructorDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("MemberSelectow")
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: JavaParser javaParser = new JavaParser("MemberSelectow");
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        String name = "John Doe";
        int age = 30;
        double height = 180.0;
        char gender = 'M';
        boolean isMember = true;
        // print the details of the member
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Height: " + height);
        System.out.println("Gender: " + gender);
        System.out.println("Is member: " + isMember);
    }
}
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 180.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isMember = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // print the details of the member
System.out.println("Name: " + name), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // print the details of the member
System.out.println("Name: " + name) target is: System.out method is: println(java.lang.String)
statement is: System.out.println("Age: " + age), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Age: " + age) target is: System.out method is: println(java.lang.String)
statement is: System.out.println("Height: " + height), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Height: " + height) target is: System.out method is: println(java.lang.String)
statement is: System.out.println("Gender: " + gender), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Gender: " + gender) target is: System.out method is: println(java.lang.String)
statement is: System.out.println("Is member: " + isMember), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Is member: " + isMember) target is: System.out method is: println(java.lang.String)
* this is vulnerable: String string = "John Doe"
* this is vulnerable: int _int = 30
* this is vulnerable: double _double = 180.0
* this is vulnerable: char _char = 'M'
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "John Doe";
int _int = 30;
double _double = 180.0;
char _char = 'M';
boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$1";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("5R5NOx'%5';")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("5R5NOx'%5';");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("5R5NOx'%5';"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "5R5NOx'%5';";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Yes");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("Yes"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "Yes";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 3073)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
int _int = 3073;
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MultiplicativeExpression();
        javaParser.Initializer();
    }
}
statement is: StringReader stringReader = new StringReader("1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MultiplicativeExpression()V
statement is: javaParser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Initializer() target is: javaParser method is: Initializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Initializer()V
TestCase is: String string = "1234";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();
((JavaParser) stringReader).Initializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(">>}>")
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: JavaParser javaParser = new JavaParser(">>}>");
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.Initializer();
    }
}
statement is: Parser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.Initializer() target is: Parser method is: Initializer()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("9N8;I1C2|#&\"FZ?/")
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: JavaParser javaParser = new JavaParser("9N8;I1C2|#&\"FZ?/");
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String inputString = "Hello World!";
        int inputInt = 42;
        double inputDouble = 3.14;
        char inputChar = 'A';
        boolean inputBoolean = true;
    }
}
statement is: String inputString = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int inputInt = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double inputDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char inputChar = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean inputBoolean = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'A'
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "Hello World!";
int _int = 42;
double _double = 3.14;
char _char = 'A';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FieldDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FieldDeclaration((-3393))
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FieldDeclaration((-3393));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.FieldDeclaration("A descriptive field name", 3393);
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FieldDeclaration("A descriptive field name", 3393), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FieldDeclaration("A descriptive field name", 3393) target is: javaParser method is: FieldDeclaration(java.lang.String,int)
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
        javaParser.VariableDeclarator();
        javaParser.ReferenceType();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: VariableDeclarator()V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ReferenceType()V
TestCase is: String string = "Error: Ignoring invalid lexical state : ";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : ";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).VariableDeclarator();
((JavaParser) _void).ReferenceType();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-")
statement is: TypeArguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArguments()
test data is: JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
javaParser.TypeArguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a string with some random characters and numbers 1234567890");
        javaParser.TypeArguments();
    }
}
statement is: Parser javaParser = new JavaParser("This is a string with some random characters and numbers 1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArguments() target is: javaParser method is: TypeArguments()
TestCase is: String string = "This is a string with some random characters and numbers 1234567890";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[")
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("a simple string");
        javaParser.TypeArgument();
    }
}
statement is: Parser javaParser = new JavaParser("a simple string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
TestCase is: String string = "a simple string";
JavaParser javaParser = new JavaParser(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("bQ")
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("?BT%");
        JavaParser javaParser = new JavaParser("bQ");
        javaParser.TypeArgument();
    }
}
statement is: SystemInUtil.addInputLine("?BT%"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("?BT%") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("bQ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: TypeArgument()V
TestCase is: String string = "?BT%";
SystemInUtil.addInputLine(string);
String string = "bQ";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).TypeArgument();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaParserTokenManager(null));
        int a = 10;
        double b = 3.5;
        String c = "Goodbye";
        char d = 'B';
        javaParser.TypeArgument();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaParserTokenManager(null)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int a = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double b = 3.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String c = "Goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char d = 'B', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.5
* this is vulnerable: String string = "Goodbye"
* this is vulnerable: char _char = 'B'
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
int _int = 10;
double _double = 3.5;
String string = "Goodbye";
char _char = 'B';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
TestCase is: String string = "A";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"zra;")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("\"zra;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"Hello World!\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("\"Hello World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
TestCase is: String string = "\"Hello World!\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Pk/Hha'c")
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: JavaParser javaParser = new JavaParser("Pk/Hha'c");
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int age = 30;
        String name = "John Doe";
        char gender = 'M';
        double height = 180.0;
        String address = "123 Main St.";
    }
}
statement is: // Improved test data
int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 180.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String address = "123 Main St.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 30
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'M'
* this is vulnerable: double _double = 180.0
* this is vulnerable: String string = "123 Main St."
TestCase is: int _int = 30;
String string = "John Doe";
char _char = 'M';
double _double = 180.0;
String string = "123 Main St.";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Y");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ResultType();
    }
}
statement is: StringReader stringReader = new StringReader("Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ResultType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType() target is: javaParser method is: ResultType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ResultType()V
TestCase is: String string = "Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(140)
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MethodDeclaration(140);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.MethodDeclaration(140);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.MethodDeclaration(140), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(140) target is: javaParser method is: MethodDeclaration(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int myInt = 42;
        double myDouble = 3.14;
        String myString = "Hello, world!";
        char myChar = 'A';
    }
}
statement is: int myInt = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String myString = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char myChar = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null)));
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: org.evosuite.testcase.statements.ArrayStatement@9f2a539c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4 };// A Byte array containing a list of numbers from 1 to 4

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);// A Byte Array Input Stream to read the bytes from the byte array

        JavaParser javaParser = new JavaParser(byteArrayInputStream);// A JavaParser object to parse the input stream

        javaParser.NameList();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4 }// A Byte array containing a list of numbers from 1 to 4
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 1, 2, 3, 4 } Elements: [1, 2, 3, 4]
lengths: [4] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray)// A Byte Array Input Stream to read the bytes from the byte array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream)// A JavaParser object to parse the input stream
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;")
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("10 + 5");
        javaParser.Expression();
    }
}
statement is: Parser javaParser = new JavaParser("10 + 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
TestCase is: String string = "10 + 5";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// This is a primitive value that represents a number

        String s = "hello";// This is a String object that represents a sequence of characters

        char c = 'a';// This is a primitive value that represents a character

        boolean b = false;// This is a boolean value that represents true or false

        double d = 3.14;// This is a double value that represents a fractional number }}

    }
}
statement is: int x = 5// This is a primitive value that represents a number
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "hello"// This is a String object that represents a sequence of characters
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// This is a primitive value that represents a character
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = false// This is a boolean value that represents true or false
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// This is a double value that represents a fractional number }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = false
* this is vulnerable: double _double = 3.14
TestCase is: int _int = 5;
String string = "hello";
char _char = 'a';
boolean _boolean = false;
double _double = 3.14;

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("8'3&xbutR#EZyV^")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("TypeParameters")
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
        JavaParser javaParser = new JavaParser("TypeParameters");
        javaParser.Expression();
    }
}
statement is: SystemInUtil.addInputLine("8'3&xbutR#EZyV^"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("8'3&xbutR#EZyV^") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("TypeParameters"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Expression()V
TestCase is: String string = "8'3&xbutR#EZyV^";
SystemInUtil.addInputLine(string);
String string = "TypeParameters";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Expression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("]~ w{m;SC#|iw=#")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: JavaParser javaParser = new JavaParser("]~ w{m;SC#|iw=#");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.AssignmentOperator();
    }
}
statement is: Parser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.AssignmentOperator() target is: Parser method is: AssignmentOperator()
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("?BT%")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("?BT%");
        JavaParser javaParser = new JavaParser("?BT%");
        javaParser.AssignmentOperator();
        // Improved test data:
        String input = "?BT%";
        int expectedResult = 3;// The value of the assignment operator in the given input string is 3 }}

    }
}
statement is: SystemInUtil.addInputLine("?BT%"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("?BT%") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("?BT%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AssignmentOperator()V
statement is: // Improved test data:
String input = "?BT%", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedResult = 3// The value of the assignment operator in the given input string is 3 }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "?BT%"
* this is vulnerable: int _int = 3
TestCase is: String string = "?BT%";
SystemInUtil.addInputLine(string);
String string = "?BT%";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).AssignmentOperator();
String string = "?BT%";
int _int = 3;

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine(":(HT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(":(HT%")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: SystemInUtil.addInputLine(":(HT%");
JavaParser javaParser = new JavaParser(":(HT%");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int a = 5;
        double b = 3.14;
        String c = "Hello, world!";
        char d = 'a';
    }
}
statement is: int a = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double b = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String c = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char d = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("|zGA0{_}PAGT")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: StringReader stringReader = new StringReader("|zGA0{_}PAGT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x = 10; y = 20; z = x + y;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AssignmentOperator();
    }
}
statement is: StringReader stringReader = new StringReader("x = 10; y = 20; z = x + y;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AssignmentOperator()V
TestCase is: String string = "x = 10; y = 20; z = x + y;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("R9qU^:N[d^")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("R9qU^:N[d^");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("R9qU^:N[d^"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "R9qU^:N[d^";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-4525), 64)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-4525), 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, -4525, 64);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.MemberValue("m&1t%q6],R3Ufn\"VPt");// Added the argument to make the test more descriptive }}

    }
}
statement is: StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, -4525, 64), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue("m&1t%q6],R3Ufn\"VPt")// Added the argument to make the test more descriptive }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue("m&1t%q6],R3Ufn\"VPt")// Added the argument to make the test more descriptive }}
 target is: javaParser method is: MemberValue(java.lang.String)
TestCase is: String string = "m&1t%q6],R3Ufn\"VPt";
StringReader stringReader = new StringReader(string);
int _int = 64;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: org.evosuite.testcase.statements.ArrayStatement@84fa35f0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f729a7af type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)98
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c353e32 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)60
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: byte[] byteArray = new byte[2];
byteArray[0] = (byte)98;
byteArray[1] = (byte)60;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] inputBytes = new byte[]{ 97, 58 };// a :

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(inputBytes);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ArgumentList();
    }
}
statement is: byte[] inputBytes = new byte[]{ 97, 58 }// a :
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ 97, 58 } Elements: [97, 58]
lengths: [2] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(inputBytes), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("ZeOrA*C|4n1F35}")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("ZeOrA*C|4n1F35}");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.token_source.getNextToken()
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source.getNextToken();
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("100");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.token_source.getNextToken();
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("100"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.token_source.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.token_source.getNextToken() target is: javaParser.token_source method is: getNextToken()
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "100";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("catch")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("A class cannot extend more than one other class")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("An interface cannot have initializers")
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: SystemInUtil.addInputLine("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("An interface cannot have initializers");
javaParser.TypeArgument();
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        class can {
            only extend;

            one other;

            class An {
                interface cannot {
                    have initializers;
                }
            }
        }
    }
}
statement is: class can {
    only extend;

    one other;

    class An {
        interface cannot {
            have initializers;
        }
    }
}, class spoon.support.reflect.declaration.CtClassImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(")l**3N6)wvgY-F)")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader(")l**3N6)wvgY-F)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2+2");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("2+2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "2+2";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).ExclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("[*FhH1tX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("aFhH1t\tX");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("aFhH1t\tX"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "aFhH1t\tX";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader1 = new StringReader("ABC");
        JavaParser javaParser1 = new JavaParser(stringReader1);
        javaParser1.NameList();
        javaParser1.RelationalExpression();
        StringReader stringReader2 = new StringReader("XYZ");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.NameList();
        javaParser2.RelationalExpression();
    }
}
statement is: StringReader stringReader1 = new StringReader("ABC"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser1.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.NameList() target is: javaParser1 method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
statement is: javaParser1.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.RelationalExpression() target is: javaParser1 method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
statement is: StringReader stringReader2 = new StringReader("XYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.NameList() target is: javaParser2 method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: NameList()V
statement is: javaParser2.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.RelationalExpression() target is: javaParser2 method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: RelationalExpression()V
TestCase is: String string = "ABC";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();
String string = "XYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalOrExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "int x = 5;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 3073)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Modifiers()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int Modifiers = javaParser.Modifiers()
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Modifiers();
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        JavaParser javaParser = new JavaParser("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
        javaParser.Modifiers();
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Modifiers(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Modifiers() target is: javaParser method is: Modifiers()
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: UnaryExpression()V
TestCase is: String string = "com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
int _int = 3073;
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
String string = "com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess";
JavaParser javaParser = new JavaParser((JavaParserTokenManager) string);
((JavaParser) _int).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 82, (-728))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("a b c d e f g h i j k l m n o p q r s t u v w x y z");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, -728);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("a b c d e f g h i j k l m n o p q r s t u v w x y z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, -728), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
TestCase is: String string = "a b c d e f g h i j k l m n o p q r s t u v w x y z";
StringReader stringReader = new StringReader(string);
int _int = 82;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.InclusiveOrExpression();
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
        JavaParser javaParser = new JavaParser(stringReader);
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.InclusiveOrExpression();
        javaParser.AndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AndExpression()V
TestCase is: String string = "6kwncF_ACE<t'-";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("!Z5")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("!Z5");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression();
        // Improved test data:
        Integer integer = 10;
        Double doubleValue = 10.234;
        String stringValue = "hello world";
        Character charValue = 'a';
        // Improved test data:
        int intValue = 10;
        double doubleValue = 10.234;
        String stringValue = "hello world";
        char charValue = 'a';
    }
}
statement is: StringReader stringReader = new StringReader("!Z5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
statement is: // Improved test data:
Integer integer = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Double doubleValue = 10.234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Character charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Improved test data:
int intValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 10.234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 10.234
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 10.234
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
TestCase is: String string = "!Z5";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();
int _int = 10;
double _double = 10.234;
String string = "hello world";
char _char = 'a';
int _int = 10;
double _double = 10.234;
String string = "hello world";
char _char = 'a';

statement is: org.evosuite.testcase.statements.ArrayStatement@e4cb2a3f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f57d19de type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)126
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: byte[] byteArray = new byte[2];
byteArray[0] = (byte)126;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This test uses a ByteArrayInputStream to provide input for the JavaParser
        byte[] byteArray = new byte[]{ ((byte) (126)), ((byte) (10)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
        JavaParser javaParser = new JavaParser(bufferedInputStream);
        javaParser.ArgumentList();
    }
}
statement is: // This test uses a ByteArrayInputStream to provide input for the JavaParser
byte[] byteArray = new byte[]{ ((byte) (126)), ((byte) (10)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ ((byte) (126)), ((byte) (10)) } Elements: [((byte) (126)), ((byte) (10))]
lengths: [2] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.BufferedInputStream(Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("?BT%")
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("?BT%");
        JavaParser javaParser = new JavaParser("90");
        javaParser.ShiftExpression();
    }
}
statement is: SystemInUtil.addInputLine("?BT%"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("?BT%") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("90"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ShiftExpression()V
TestCase is: String string = "?BT%";
SystemInUtil.addInputLine(string);
String string = "90";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).ShiftExpression();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("+")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("O")
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("+");
        JavaParser javaParser = new JavaParser("O");
        javaParser.RelationalExpression();
    }
}
statement is: SystemInUtil.addInputLine("+"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("+") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("O"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: RelationalExpression()V
TestCase is: String string = "+";
SystemInUtil.addInputLine(string);
String string = "O";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).RelationalExpression();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("S-U3:c[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("EmptyStatement")
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.Name();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("aD0S`Z4's21sleM{")
statement is: PreIncrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreIncrementExpression()
test data is: JavaParser javaParser = new JavaParser("aD0S`Z4's21sleM{");
javaParser.PreIncrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        javaParser.PreIncrementExpression();
    }
}
statement is: Parser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreIncrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreIncrementExpression() target is: javaParser method is: PreIncrementExpression()
TestCase is: String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: PreIncrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreIncrementExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.PreIncrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        int x = 5;
        double y = 3.14;
        String str = "Hello, World!";
        char c = 'a';
        boolean b = true;
    }
}
statement is: // Improved test data for the JavaParser class
int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'a';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PreDecrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreDecrementExpression()
test data is: StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(input);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PreDecrementExpression();
    }
}
statement is: StringReader stringReader = new StringReader(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreDecrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreDecrementExpression() target is: javaParser method is: PreDecrementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: PreDecrementExpression()V
TestCase is: StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PreDecrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreDecrementExpression()
test data is: StringReader stringReader = new StringReader("]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("hello world");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PreDecrementExpression();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("hello world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreDecrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreDecrementExpression() target is: javaParser method is: PreDecrementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PreDecrementExpression()V
TestCase is: String string = "hello world";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\"implements\"")
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: JavaParser javaParser = new JavaParser("\"implements\"");
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        JavaParser javaParser = new JavaParser("~x");
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: JavaParser javaParser = new JavaParser("~x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "~x";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("catch")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: mock(java.util.Enumeration<java.io.BufferedInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.BufferedInputStream>
statement code is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(false, false).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.CastLookahead();
    }
}
statement is: Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.BufferedInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: doReturn(false, false).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false, false).when(enumeration).hasMoreElements() target is: doReturn(false, false).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: CastLookahead()V
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).CastLookahead();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 12345");
        javaParser.NameList();
        javaParser.CastLookahead();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 12345"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: NameList()V
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: CastLookahead()V
TestCase is: String string = "Error: Ignoring invalid lexical state : ";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : 12345";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).NameList();
((JavaParser) _void).CastLookahead();

statement is: org.evosuite.testcase.statements.ArrayStatement@1c36cdc7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0, 64)
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 10, 20, 30 };// Improved test data: Added more descriptive values that represent the situation being tested

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64);
        PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
        JavaParser javaParser = new JavaParser(pushbackInputStream);
        javaParser.CastLookahead();
    }
}
statement is: byte[] byteArray = new byte[]{ 10, 20, 30 }// Improved test data: Added more descriptive values that represent the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ 10, 20, 30 } Elements: [10, 20, 30]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pushbackInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: CastLookahead()V
TestCase Could not be added: CastLookahead()V
TestCase is: int _int = 64;
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) _int, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("R9qU^:N[d^")
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: JavaParser javaParser = new JavaParser("R9qU^:N[d^");
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(25.7);
        javaParser.PostfixExpression();
    }
}
statement is: Parser javaParser = new JavaParser(25.7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
TestCase is: double _double = 25.7;
JavaParser javaParser = new JavaParser((String) _double);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.CompilationUnit(input);
    }
}
statement is: Parser.CompilationUnit(input), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.CompilationUnit(input) target is: Parser method is: CompilationUnit()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.example.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
        javaParser.CastExpression();
    }
}
statement is: StringReader stringReader = new StringReader("com.example.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
statement is: javaParser.CastExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastExpression()V
TestCase is: String string = "com.example.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).CastExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 101, 53, 1243)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0, 0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberSelector()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberSelector()
test data is: StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberSelector();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.MemberSelector();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberSelector(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberSelector() target is: javaParser method is: MemberSelector()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: MemberSelector()V
TestCase is: int _int = 101;
int _int = 53;
int _int = 1243;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, _int, 1243);
int _int = 0;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, _int);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberSelector();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new StringReader("This is a test string"));
        javaParser.PrimaryPrefix();
    }
}
statement is: Parser javaParser = new JavaParser(new StringReader("This is a test string")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("aD0S`Z4's21sleM{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        // Improved test data
        StringReader improvedStringReader = new StringReader("aD0S`Z4's21sleM{");
        JavaCharStream improvedJavaCharStream = new JavaCharStream(improvedStringReader);
        JavaParserTokenManager improvedJavaParserTokenManager = new JavaParserTokenManager(improvedJavaCharStream);
        JavaParser improvedJavaParser = new JavaParser(improvedJavaParserTokenManager);
        javaParser.StatementExpression();
        improvedJavaParser.StatementExpression();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("aD0S`Z4's21sleM{"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream improvedJavaCharStream = new JavaCharStream(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager improvedJavaParserTokenManager = new JavaParserTokenManager(improvedJavaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedJavaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: StatementExpression()V
statement is: improvedJavaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.StatementExpression() target is: improvedJavaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: StatementExpression()V
TestCase is: String string = "aD0S`Z4's21sleM{";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).StatementExpression();
((JavaParser) javaParserTokenManager).StatementExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A cla_k cann6t extend more than one other class")
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: JavaParser javaParser = new JavaParser("A cla_k cann6t extend more than one other class");
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("A cat cannot extend more than one other class");
        javaParser.PrimarySuffix();
    }
}
statement is: Parser javaParser = new JavaParser("A cat cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
TestCase is: String string = "A cat cannot extend more than one other class";
JavaParser javaParser = new JavaParser(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("S-U3:c[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("EmptyStatement")
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("S-U3:c[");
        JavaParser javaParser = new JavaParser("EmptyStatement");
        javaParser.MemberValue();
        javaParser.PrimarySuffix();
    }
}
statement is: SystemInUtil.addInputLine("S-U3:c["), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("S-U3:c[") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("EmptyStatement"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: MemberValue()V
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: PrimarySuffix()V
TestCase is: String string = "S-U3:c[";
SystemInUtil.addInputLine(string);
String string = "EmptyStatement";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).MemberValue();
((JavaParser) _void).PrimarySuffix();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("S<")
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: JavaParser javaParser = new JavaParser("S<");
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("string");
        javaParser.Literal();
    }
}
statement is: Parser javaParser = new JavaParser("string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
TestCase is: String string = "string";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("<DIGIT>")
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: JavaParser javaParser = new JavaParser("<DIGIT>");
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("true");
        javaParser.BooleanLiteral();
    }
}
statement is: Parser javaParser = new JavaParser("true"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral() target is: javaParser method is: BooleanLiteral()
TestCase is: String string = "true";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("catch")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NullLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NullLiteral()
test data is: StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NullLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Identifier("fox");
        javaParser.NullLiteral();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Identifier("fox"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Identifier("fox") target is: javaParser method is: Identifier(java.lang.String)
statement is: javaParser.NullLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NullLiteral() target is: javaParser method is: NullLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NullLiteral()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\"goto\"")
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: JavaParser javaParser = new JavaParser("\"goto\"");
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("\"goto\"");
        javaParser.Arguments();
        // Improved test data
        String[] args = new String[]{ "-f", "file1.txt", "-t", "3", "-d" };
        javaParser.parse(args);
    }
}
statement is: Parser javaParser = new JavaParser("\"goto\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Arguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Arguments() target is: javaParser method is: Arguments()
statement is: // Improved test data
String[] args = new String[]{ "-f", "file1.txt", "-t", "3", "-d" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: javaParser.parse(args), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse(args) target is: javaParser method is: parse(java.lang.String[])
TestCase is: String string = "\"goto\"";
JavaParser javaParser = new JavaParser(string);

statement is: org.evosuite.testcase.statements.ArrayStatement@d020f89 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.Arguments();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9]
lengths: [9] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.Arguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Arguments() target is: javaParser method is: Arguments()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.evosuite.testcase.statements.ArrayStatement@bf0196fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9a1a39ce type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)98
statement is: org.evosuite.testcase.statements.AssignmentStatement@cf288eb9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[1] = (byte)98
statement is: org.evosuite.testcase.statements.AssignmentStatement@53c5ff61 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[2] = (byte)44
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: byte[] byteArray = new byte[3];
byteArray[0] = (byte)98;
byteArray[1] = (byte)98;
byteArray[2] = (byte)44;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[3];
        byteArray[0] = ((byte) ('a'));
        byteArray[1] = ((byte) ('B'));
        byteArray[2] = ((byte) ('.'));
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ArgumentList();
    }
}
statement is: byte[] byteArray = new byte[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: byte[] byteArray = new byte[3] isAssignment: false Array: new byte[3] Elements: []
lengths: [3] [3]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) ('a')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('a')) Ct is: byteArray[0] = ((byte) ('a'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[1] = ((byte) ('B')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('B')) Ct is: byteArray[1] = ((byte) ('B'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: byteArray[2] = ((byte) ('.')), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) ('.')) Ct is: byteArray[2] = ((byte) ('.'))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList() target is: javaParser method is: ArgumentList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 5, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: ArgumentList()V
TestCase is: byte[] byteArray = new byte[3];
char _char = 'a';
byteArray[0] = (byte) _char;
char _char = 'B';
byteArray[1] = (byte) _char;
char _char = '.';
byteArray[2] = (byte) _char;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
((JavaParser) _char).ArgumentList();

statement is: String string = ".  Encountered: " type is: class org.evosuite.testcase.statements.StringPrimitiveStatement return type class java.lang.String
statement code is: String string = ".  Encountered: "
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: String string = ".  Encountered: ";
JavaParser javaParser = new JavaParser(string);
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String string = "Encountered: java.lang.NullPointerException";
        JavaParser javaParser = new JavaParser(string);
        javaParser.AllocationExpression();
    }
}
statement is: String string = "Encountered: java.lang.NullPointerException", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(string), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AllocationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AllocationExpression() target is: javaParser method is: AllocationExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AllocationExpression()V
TestCase is: String string = "Encountered: java.lang.NullPointerException";
JavaParser javaParser = new JavaParser(string);
javaParser.AllocationExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        javaParser.AllocationExpression();
        // Improved test data
        javaParser.AllocationExpression("new Integer(42)", "new Double(3.14)", "new String(\"Hello, world!\")");
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AllocationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AllocationExpression() target is: javaParser method is: AllocationExpression()
statement is: // Improved test data
javaParser.AllocationExpression("new Integer(42)", "new Double(3.14)", "new String(\"Hello, world!\")"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
javaParser.AllocationExpression("new Integer(42)", "new Double(3.14)", "new String(\"Hello, world!\")") target is: javaParser method is: AllocationExpression(java.lang.String,java.lang.String,java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("-=")
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: JavaParser javaParser = new JavaParser("-=");
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("['Hello', 'World']");
        javaParser.ArrayDimsAndInits();
    }
}
statement is: Parser javaParser = new JavaParser("['Hello', 'World']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
TestCase is: String string = "['Hello', 'World']";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Yes");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.ArrayDimsAndInits();
    }
}
statement is: StringReader stringReader = new StringReader("Yes"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "Yes";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        String name = "John";
        char grade = 'A';
        double score = 90.5;
        boolean isPassing = true;
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char grade = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double score = 90.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isPassing = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "John"
* this is vulnerable: char _char = 'A'
* this is vulnerable: double _double = 90.5
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
String string = "John";
char _char = 'A';
double _double = 90.5;
boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @The
        provided code;
        is a;
        Java program;
        parses a;
        using the;
        @The
        test data;
        used in;
    }
}
statement is: @The
provided code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: is a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Java program, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: parses a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: using the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @The
test data, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: used in, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ")
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
        JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
        javaParser.Statement();
        String testString = "This is a test string";
        int testInt = 42;
        double testDouble = 3.14;
        char testChar = 'a';
        boolean testBoolean = true;
    }
}
statement is: SystemInUtil.addInputLine("Error: gnoring invalid lexical state : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Statement()V
statement is: String testString = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int testInt = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double testDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char testChar = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean testBoolean = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "Error: gnoring invalid lexical state : ";
SystemInUtil.addInputLine(string);
String string = "Error: gnoring invalid lexical state : ";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Statement();
String string = "This is a test string";
int _int = 42;
double _double = 3.14;
char _char = 'a';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test sentence.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BlockStatement()V
TestCase is: String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("2W@|Y")
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("2W@|Y");
        JavaParser javaParser = new JavaParser("2W@|Y");
        javaParser.BlockStatement();
    }
}
statement is: SystemInUtil.addInputLine("2W@|Y"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("2W@|Y") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("2W@|Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: BlockStatement()V
TestCase is: String string = "2W@|Y";
SystemInUtil.addInputLine(string);
String string = "2W@|Y";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).BlockStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 2108, 86)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: Statement()V
TestCase is: String string = ";_2kbAUttJW r>:Dg";
StringReader stringReader = new StringReader(string);
int _int = 2108;
int _int = 86;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 86)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1024, 86);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1024, 86), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: Statement()V
TestCase is: String string = "public class TestClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
int _int = 1024;
int _int = 86;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AssertStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssertStatement()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AssertStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Yes");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.assertStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Yes"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.assertStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.assertStatement() target is: javaParser method is: assertStatement()
TestCase is: String string = "Yes";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("S-U3:c[")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("EmptyStatement")
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("S-U3:c[");
        JavaParser javaParser = new JavaParser("EmptyStatement");
        javaParser.MemberValue();
        javaParser.BlockStatement();
        // Improved test data
        SystemInUtil.addInputLine("S-U3:c[1234567890, true]");// Primitive values

        JavaParser javaParser = new JavaParser("EmptyStatement");
        javaParser.MemberValue(1234567890);// Member value with a primitive argument

        javaParser.BlockStatement(true);// Block statement with a boolean argument }}

    }
}
statement is: SystemInUtil.addInputLine("S-U3:c["), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("S-U3:c[") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("EmptyStatement"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: MemberValue()V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: BlockStatement()V
statement is: // Improved test data
SystemInUtil.addInputLine("S-U3:c[1234567890, true]")// Primitive values
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
SystemInUtil.addInputLine("S-U3:c[1234567890, true]")// Primitive values
 target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("EmptyStatement"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(1234567890)// Member value with a primitive argument
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue(1234567890)// Member value with a primitive argument
 target is: javaParser method is: MemberValue(int)
statement is: javaParser.BlockStatement(true)// Block statement with a boolean argument }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement(true)// Block statement with a boolean argument }}
 target is: javaParser method is: BlockStatement(boolean)
TestCase is: String string = "S-U3:c[";
SystemInUtil.addInputLine(string);
String string = "EmptyStatement";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).MemberValue();
((JavaParser) _void).BlockStatement();
String string = "S-U3:c[1234567890, true]";
SystemInUtil.addInputLine(string);
String string = "EmptyStatement";
JavaParser javaParser = new JavaParser(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("2W@|Y")
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("?BT%");
        JavaParser javaParser = new JavaParser("2W@|Y");
        javaParser.BlockStatement();
    }
}
statement is: SystemInUtil.addInputLine("?BT%"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("?BT%") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("2W@|Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: BlockStatement()V
TestCase is: String string = "?BT%";
SystemInUtil.addInputLine(string);
String string = "2W@|Y";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).BlockStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("");
        javaParser.BlockStatement();
        // Add test data that is more representative of the situation being tested
        int x = 5;// Replace with a more descriptive value

        String str = "hello";// Replace with a more descriptive strin }}

    }
}
statement is: Parser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
statement is: // Add test data that is more representative of the situation being tested
int x = 5// Replace with a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "hello"// Replace with a more descriptive strin }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
TestCase is: String string = "";
JavaParser javaParser = new JavaParser(string);
int _int = 5;
String string = "hello";

statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: JavaCharStream javaCharStream = new JavaCharStream((Reader) null);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream("This is a sample string.");
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.BlockStatement();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream("This is a sample string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: BlockStatement()V
TestCase is: String string = "This is a sample string.";
JavaCharStream javaCharStream = new JavaCharStream((Reader) string);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).BlockStatement();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("J\"`I'Vx")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: SystemInUtil.addInputLine("J\"`I'Vx");
JavaParser javaParser = new JavaParser((String) null);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.BlockStatement();
        SystemInUtil.addInputLine("private String myField;");
        javaParser.ClassBodyDeclaration();
        SystemInUtil.addInputLine("public void myMethod() {}");
        javaParser.BlockStatement();
    }
}
statement is: Parser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.BlockStatement() target is: Parser method is: BlockStatement()
statement is: SystemInUtil.addInputLine("private String myField;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("private String myField;") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: javaParser.ClassBodyDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassBodyDeclaration() target is: javaParser method is: ClassBodyDeclaration()
statement is: SystemInUtil.addInputLine("public void myMethod() {}"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("public void myMethod() {}") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
TestCase is: String string = "private String myField;";
SystemInUtil.addInputLine(string);
String string = "public void myMethod() {}";
SystemInUtil.addInputLine(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("_^yq|D&")
statement is: LocalVariableDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LocalVariableDeclaration()
test data is: JavaParser javaParser = new JavaParser("_^yq|D&");
javaParser.LocalVariableDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        JavaParser javaParser = new JavaParser("My String Value");
        javaParser.LocalVariableDeclaration();
    }
}
statement is: // Improved test data:
JavaParser javaParser = new JavaParser("My String Value"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: LocalVariableDeclaration()V
TestCase is: String string = "My String Value";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).LocalVariableDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+")
statement is: EmptyStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EmptyStatement()
test data is: JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");
javaParser.EmptyStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("bCLQ/hfhF-Y(+");
        javaParser.EmptyStatement();
        // Improved test data
        String input = "Hello World!";
        int i = 10;
        double d = 3.14;
        char c = 'a';
    }
}
statement is: Parser javaParser = new JavaParser("bCLQ/hfhF-Y(+"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EmptyStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EmptyStatement() target is: javaParser method is: EmptyStatement()
statement is: // Improved test data
String input = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int i = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: String string = "bCLQ/hfhF-Y(+";
JavaParser javaParser = new JavaParser(string);
String string = "Hello World!";
int _int = 10;
double _double = 3.14;
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"implements\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"implements\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("\"implements\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "\"implements\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A class cannot extend more than one other class")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Multiple extends clauses are not allowed for classes in this context");
        javaParser.StatementExpressionList();
    }
}
statement is: Parser javaParser = new JavaParser("Multiple extends clauses are not allowed for classes in this context"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
TestCase is: String string = "Multiple extends clauses are not allowed for classes in this context";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("!Z5")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "Hello, World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample string that will be used to test the JavaParser library.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample string that will be used to test the JavaParser library."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "This is a sample string that will be used to test the JavaParser library.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("{`QR7C@8e9S6J$7RQ")
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: JavaParser javaParser = new JavaParser("{`QR7C@8e9S6J$7RQ");
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.StatementExpression();
    }
}
statement is: Parser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.StatementExpression() target is: Parser method is: StatementExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Z")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@6225706c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: javaParser.token = null
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("Z");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token = null;
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input string.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.token = "hello";
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.token = "hello", class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "This is a sample input string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("A?eJBmQ;?ENiX?HAw:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: StringReader stringReader = new StringReader("A?eJBmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.SwitchStatement();
        // Improved test data:
        StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.SwitchStatement();
    }
}
statement is: StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SwitchStatement()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: SwitchStatement()V
TestCase is: String string = "A?eJxMkHsWo9BmQ;?ENiX?HAw:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();
String string = "A?eJxMkHsWo9BmQ;?ENiX?HAw:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager("This is a sample string", 12345);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.SwitchStatement();
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager("This is a sample string", 12345), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: SwitchStatement()V
TestCase is: String string = "This is a sample string";
int _int = 12345;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) string, _int);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).SwitchStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchLabel()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchLabel()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.SwitchLabel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        // Arrange
        int a = 5;
        int b = 10;
        String str = "Hello, World!";
        // Act
        int result = a + b;
        // Assert
        assertEquals(15, result);
    }
}
statement is: // Arrange
int a = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int b = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Act
int result = a + b, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: a + b
statement is: // Assert
assertEquals(15, result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals(15, result) target is:  method is: assertEquals(int,int)
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Hello, World!"
TestCase is: int _int = 5;
int _int = 10;
String string = "Hello, World!";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("_`0orp TI2")
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: JavaParser javaParser = new JavaParser("_`0orp TI2");
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("123456789");
        javaParser.IfStatement();
    }
}
statement is: Parser javaParser = new JavaParser("123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IfStatement() target is: javaParser method is: IfStatement()
TestCase is: String string = "123456789";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null)));
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
    }
}
statement is: ParserTokenManager javaParserTokenManager = new JavaParserTokenManager(((JavaCharStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the "while" statement
        int condition = 5;// Changed from 10 to be more descriptive and representative of the situation being tested

        String message = "Hello, world!";// Changed from "" to be more descriptive and representative of the situation being tested }}

    }
}
statement is: // Improved test data for the "while" statement
int condition = 5// Changed from 10 to be more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String message = "Hello, world!"// Changed from "" to be more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello, world!"
TestCase is: int _int = 5;
String string = "Hello, world!";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-")
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a test string that will be used to demonstrate the use of while statement in Java.");
        javaParser.WhileStatement();
    }
}
statement is: Parser javaParser = new JavaParser("This is a test string that will be used to demonstrate the use of while statement in Java."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WhileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WhileStatement() target is: javaParser method is: WhileStatement()
TestCase is: String string = "This is a test string that will be used to demonstrate the use of while statement in Java.";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\":\"")
statement is: org.evosuite.testcase.statements.ArrayStatement@f326a2e7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[1]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: skip(J)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long skip = stringReader.skip(1)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: StringReader stringReader = new StringReader("\":\"");
char[] charArray = new char[1];
stringReader.read(charArray);
stringReader.skip(1);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string. This is another test string.");
        char[] charArray = new char[]{ 'a', 'b', 'c' };
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WhileStatement();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string. This is another test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[]{ 'a', 'b', 'c' } Elements: ['a', 'b', 'c']
lengths: [1] []
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WhileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WhileStatement() target is: javaParser method is: WhileStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WhileStatement()V
TestCase Could not be added: WhileStatement()V
TestCase is: String string = "This is a test string. This is another test string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("&=")
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: JavaParser javaParser = new JavaParser("&=");
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        String[] operators = new String[]{ "+", "-", "*", "/" };
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        for (String operator : operators) {
            for (int number : numbers) {
                int result = javaParser.evaluate((number + " ") + operator);
                System.out.println((((("Result of " + number) + " ") + operator) + " is: ") + result);
            }
        }
    }
}
statement is: // Improved test data for the above code snippet
String[] operators = new String[]{ "+", "-", "*", "/" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (String operator : operators) {
    for (int number : numbers) {
        int result = javaParser.evaluate((number + " ") + operator);
        System.out.println((((("Result of " + number) + " ") + operator) + " is: ") + result);
    }
}, class spoon.support.reflect.code.CtForEachImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: ForStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForStatement()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.ForStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int age = 25;// Changed from "10" to be more descriptive and representative of the situation being tested.

        String name = "John";// Changed from "" to be more descriptive and representative of the situation being tested.

        javaParser.ForStatement(age, name);
    }
}
statement is: // Improved test data:
int age = 25// Changed from "10" to be more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John"// Changed from "" to be more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.ForStatement(age, name), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForStatement(age, name) target is: javaParser method is: ForStatement(int,java.lang.String)
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "John"
TestCase is: int _int = 25;
String string = "John";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 58, (byte)36)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("Y");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, (byte)36);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, ((byte) (36)));
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, ((byte) (36))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: UnaryExpression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: ForInit()V
TestCase is: String string = "A";
StringReader stringReader = new StringReader(string);
int _int = 58;
int _int = 36;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).UnaryExpression();
((JavaParser) _int).ForInit();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("u.hEI")
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("u.hEI");
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("This is a sample input for testing");
        JavaParser javaParser = new JavaParser("This is a string with special characters");
        javaParser.ForInit();
    }
}
statement is: SystemInUtil.addInputLine("This is a sample input for testing"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("This is a sample input for testing") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("This is a string with special characters"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ForInit()V
TestCase is: String string = "This is a sample input for testing";
SystemInUtil.addInputLine(string);
String string = "This is a string with special characters";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).ForInit();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("g")
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{")
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: SystemInUtil.addInputLine("g");
SystemInUtil.addInputLine("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.UnaryExpression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("hello");
        SystemInUtil.addInputLine("goodbye");
        JavaParser javaParser = new JavaParser("goodbye");
        javaParser.UnaryExpression();
        javaParser.ForInit();
    }
}
statement is: SystemInUtil.addInputLine("hello"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("hello") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: SystemInUtil.addInputLine("goodbye"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("goodbye") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("goodbye"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: UnaryExpression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: ForInit()V
TestCase is: String string = "hello";
SystemInUtil.addInputLine(string);
String string = "goodbye";
SystemInUtil.addInputLine(string);
String string = "goodbye";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).UnaryExpression();
((JavaParser) string).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<CoD|{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This test data is improved by using more descriptive and representative values for the primitive variables and strings.
        StringReader stringReader = new StringReader("<CoD|{");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: // This test data is improved by using more descriptive and representative values for the primitive variables and strings.
StringReader stringReader = new StringReader("<CoD|{"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "<CoD|{";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("d#\u0005O&-}1hL$e]>b")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\"throw\"")
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: SystemInUtil.addInputLine("d#\u0005O&-}1hL$e]>b");
JavaParser javaParser = new JavaParser("\"throw\"");
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("\"throw\"");
        javaParser.ForUpdate();
    }
}
statement is: Parser javaParser = new JavaParser("\"throw\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
TestCase is: String string = "\"throw\"";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("`V=")
statement is: BreakStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BreakStatement()
test data is: JavaParser javaParser = new JavaParser("`V=");
javaParser.BreakStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;
        String y = "hello";
        double z = 3.14;
        char c = 'a';
        boolean b = true;
    }
}
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double z = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
String string = "hello";
double _double = 3.14;
char _char = 'a';
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ContinueStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ContinueStatement()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ContinueStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ContinueStatement();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ContinueStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ContinueStatement() target is: javaParser method is: ContinueStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ContinueStatement()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ContinueStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReturnStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReturnStatement()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReturnStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReturnStatement();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReturnStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReturnStatement() target is: javaParser method is: ReturnStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReturnStatement()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ReturnStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReturnStatement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ReturnStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int numEmployees = 15;
        String departmentName = "Marketing";
        double averageSalary = 60000.0;
    }
}
statement is: // Improved test data
int numEmployees = 15, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String departmentName = "Marketing", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double averageSalary = 60000.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 15
* this is vulnerable: String string = "Marketing"
* this is vulnerable: double _double = 60000.0
TestCase is: int _int = 15;
String string = "Marketing";
double _double = 60000.0;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("#`odp TI2")
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: JavaParser javaParser = new JavaParser("#`odp TI2");
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 4;// Primitive value

        String s = "hello";// String value

        boolean b = true;// Boolean value

        char c = 'a';// Character value

        double d = 3.14;// Double value }}

    }
}
statement is: int x = 4// Primitive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "hello"// String value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true// Boolean value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// Character value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14// Double value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "hello"
* this is vulnerable: boolean _boolean = true
* this is vulnerable: char _char = 'a'
* this is vulnerable: double _double = 3.14
TestCase is: int _int = 4;
String string = "hello";
boolean _boolean = true;
char _char = 'a';
double _double = 3.14;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("This is a test string with an invalid character"));
        javaParser.ThrowStatement();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("This is a test string with an invalid character")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: org.evosuite.testcase.statements.ArrayStatement@ac41e398 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 127, 128, 129, 130, 131 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ThrowStatement();
    }
}
statement is: byte[] byteArray = new byte[]{ 127, 128, 129, 130, 131 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 127, 128, 129, 130, 131 } Elements: [127, 128, 129, 130, 131]
lengths: [8] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("teX")
statement is: SynchronizedStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SynchronizedStatement()
test data is: JavaParser javaParser = new JavaParser("teX");
javaParser.SynchronizedStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("text");
        javaParser.SynchronizedStatement();
    }
}
statement is: Parser javaParser = new JavaParser("text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement() target is: javaParser method is: SynchronizedStatement()
TestCase is: String string = "text";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: TryStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TryStatement()
test data is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.TryStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
        javaParser.TryStatement(new TryStatement(new Block(), Collections.singletonList(new CatchClause(new NameExpr("e"), new Block())), null));
    }
}
statement is: Parser javaParser = new JavaParser("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TryStatement(new TryStatement(new Block(), Collections.singletonList(new CatchClause(new NameExpr("e"), new Block())), null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TryStatement(new TryStatement(new Block(), Collections.singletonList(new CatchClause(new NameExpr("e"), new Block())), null)) target is: javaParser method is: TryStatement(TryStatement)
TestCase is: String string = "Error: Ignoring invalid lexical state : ";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: RUNSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RUNSIGNEDSHIFT()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.RUNSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Test string");
        javaParser.RUNsignedSHIFT();
    }
}
statement is: Parser javaParser = new JavaParser("Test string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RUNsignedSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RUNsignedSHIFT() target is: javaParser method is: RUNsignedSHIFT()
TestCase is: String string = "Test string";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RSIGNEDSHIFT()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Y");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RSIGNEDSHIFT();
        // Improved test data
        StringReader improvedStringReader = new StringReader("10000000000000000000");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.RSIGNEDSHIFT();
    }
}
statement is: StringReader stringReader = new StringReader("Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RSIGNEDSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RSIGNEDSHIFT() target is: javaParser method is: RSIGNEDSHIFT()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RSIGNEDSHIFT()V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("10000000000000000000"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.RSIGNEDSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.RSIGNEDSHIFT() target is: improvedJavaParser method is: RSIGNEDSHIFT()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: RSIGNEDSHIFT()V
TestCase is: String string = "Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();
String string = "10000000000000000000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[")
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("helloworld");
        javaParser.annotation();
    }
}
statement is: Parser javaParser = new JavaParser("helloworld"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.annotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.annotation() target is: javaParser method is: annotation()
TestCase is: String string = "helloworld";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpression();
        javaParser.Annotation();
    }
}
statement is: StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpression()V
statement is: javaParser.Annotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation() target is: javaParser method is: Annotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Annotation()V
TestCase is: String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).Annotation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 82, 82)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"This is a sample string for testing\"");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("\"This is a sample string for testing\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: MemberValue()V
TestCase is: String string = "\"This is a sample string for testing\"";
StringReader stringReader = new StringReader(string);
int _int = 82;
int _int = 82;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).MemberValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ")
statement is: NormalAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NormalAnnotation()
test data is: JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");
javaParser.NormalAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("I3Nd>XFxfAqJ");
        javaParser.NormalAnnotation('a', 'z');
    }
}
statement is: Parser javaParser = new JavaParser("I3Nd>XFxfAqJ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NormalAnnotation('a', 'z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NormalAnnotation('a', 'z') target is: javaParser method is: NormalAnnotation(char,char)
TestCase is: String string = "I3Nd>XFxfAqJ";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: SingleMemberAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SingleMemberAnnotation()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.SingleMemberAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 5;
        double y = 3.14;
        String s = "Hello, World!";
        char c = 'a';
    }
}
statement is: // Improved test data
int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'a';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: MemberValuePairs()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePairs()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.MemberValuePairs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        int a = 5;
        double b = 10.5;
        String str = "Hello, World!";
        char c = 'A';
        System.out.println(a);
        System.out.println(b);
        System.out.println(str);
        System.out.println(c);
    }
}
statement is: int a = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double b = 10.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: System.out.println(a), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(a) target is: System.out method is: println(int)
statement is: System.out.println(b), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(b) target is: System.out method is: println(double)
statement is: System.out.println(str), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(str) target is: System.out method is: println(java.lang.String)
statement is: System.out.println(c), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(c) target is: System.out method is: println(char)
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 10.5
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 5;
double _double = 10.5;
String string = "Hello, World!";
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@48128c7a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 120, 97, 116, 107, 32, 104, 111, 115, 116 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.MemberValuePair();
    }
}
statement is: byte[] byteArray = new byte[]{ 120, 97, 116, 107, 32, 104, 111, 115, 116 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ 120, 97, 116, 107, 32, 104, 111, 115, 116 } Elements: [120, 97, 116, 107, 32, 104, 111, 115, 116]
lengths: [5] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.MemberValuePair(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePair() target is: javaParser method is: MemberValuePair()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"hello world\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("\"hello world\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "\"hello world\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"<=\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        StringReader stringReader2 = new StringReader("\"+\"");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.MemberValue();
        StringReader stringReader3 = new StringReader("\"-\"");
        JavaParser javaParser3 = new JavaParser(stringReader3);
        javaParser3.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("\"<=\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: StringReader stringReader2 = new StringReader("\"+\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.MemberValue() target is: javaParser2 method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: MemberValue()V
statement is: StringReader stringReader3 = new StringReader("\"-\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser3 = new JavaParser(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.MemberValue() target is: javaParser3 method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: MemberValue()V
TestCase is: String string = "\"<=\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"+\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"-\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("42");
        JavaParser javaParser = new JavaParser("Hello, world!");
        javaParser.StatementExpressionList();
        javaParser.MemberValue();
    }
}
statement is: SystemInUtil.addInputLine("42"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("42") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Hello, world!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: StatementExpressionList()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: MemberValue()V
TestCase is: String string = "42";
SystemInUtil.addInputLine(string);
String string = "Hello, world!";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).StatementExpressionList();
((JavaParser) _void).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int x = 5;// Changed to a more descriptive value

        double y = 3.14;// Changed to a more descriptive value

        String str = "hello";// Changed to a more descriptive string

        char ch = 'a';// Changed to a more descriptive character

        // Parser initialization:
        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.MemberValue();
    }
}
statement is: // Improved test data:
int x = 5// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "hello"// Changed to a more descriptive string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char ch = 'a'// Changed to a more descriptive character
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Parser initialization:
JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: MemberValue()V
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "hello";
char _char = 'a';
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser) _int).MemberValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("p72vWj3ae(u")
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: JavaParser javaParser = new JavaParser("p72vWj3ae(u");
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("1234567890");
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: Parser javaParser = new JavaParser("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
TestCase is: String string = "1234567890";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        double[] doubleArray = new double[]{ 1.0, 2.0, 3.0 };
        char[] charArray = new char[]{ 'a', 'b', 'c' };
    }
}
statement is: // Improved test data
int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubleArray = new double[]{ 1.0, 2.0, 3.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"ati#e?")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: StringReader stringReader = new StringReader("\"ati#e?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"This is a test input for the JavaParser class\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValueArrayInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("\"This is a test input for the JavaParser class\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValueArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValueArrayInitializer() target is: javaParser method is: MemberValueArrayInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValueArrayInitializer()V
TestCase is: String string = "\"This is a test input for the JavaParser class\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("r7@")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("r7@");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeBody();
    }
}
statement is: StringReader stringReader = new StringReader("r7@"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody() target is: javaParser method is: AnnotationTypeBody()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeBody()V
TestCase is: String string = "r7@";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Test data for testing the parser");
        javaParser.AnnotationTypeBody(1234567890, "Test data for testing the parser");
    }
}
statement is: Parser javaParser = new JavaParser("Test data for testing the parser"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeBody(1234567890, "Test data for testing the parser"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody(1234567890, "Test data for testing the parser") target is: javaParser method is: AnnotationTypeBody(int,java.lang.String)
TestCase is: String string = "Test data for testing the parser";
JavaParser javaParser = new JavaParser((Reader) string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Expression();
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 123456789");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 123456789");
        javaParser.Expression();
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 123456789") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Expression()V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "Error: Ignoring invalid lexical state : 123456789";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : 123456789";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Expression();
((JavaParser) _void).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("instanceof")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("8'3&xbutR#EZyV^")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("8'3&xbutR#EZyV^"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "8'3&xbutR#EZyV^";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 100, (-413))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"==\"");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, -413);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("\"==\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, -413), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 5
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "\"==\"";
StringReader stringReader = new StringReader(string);
int _int = 100;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(")")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader(")");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("@interface MyAnnotation { void myMethod() {} }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("@interface MyAnnotation { void myMethod() {} }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "@interface MyAnnotation { void myMethod() {} }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2W@|Y");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
    }
}
statement is: StringReader stringReader = new StringReader("2W@|Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "2W@|Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private List<String> names = new ArrayList<>();

    public  TestData() {
        names.add("John");
        names.add("Jane");
        names.add("Bob");
    }

    public List<String> getNames() {
        return names;
    }
}
statement is: names.add("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("John") target is: names method is: add(java.lang.String)
statement is: names.add("Jane"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("Jane") target is: names method is: add(java.lang.String)
statement is: names.add("Bob"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: names.add("Bob") target is: names method is: add(java.lang.String)
statement is: return names, class spoon.support.reflect.code.CtReturnImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: DefaultValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DefaultValue()
test data is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.DefaultValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        JavaParser javaParser = new JavaParser("Lexical error detected in input stream.");
        javaParser.DefaultValue();
    }
}
statement is: // Improved test data for the JavaParser class
JavaParser javaParser = new JavaParser("Lexical error detected in input stream."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.DefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DefaultValue() target is: javaParser method is: DefaultValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: DefaultValue()V
TestCase is: String string = "Lexical error detected in input stream.";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).DefaultValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
test data is: StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getNextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("// Dfdjuh:3u!xl!?");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.getNextToken();
    }
}
statement is: StringReader stringReader = new StringReader("// Dfdjuh:3u!xl!?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getNextToken() target is: javaParser method is: getNextToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "// Dfdjuh:3u!xl!?";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).getNextToken();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("-.MZ#Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: ReInit(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((InputStream) arg0)
test data is: StringReader stringReader = new StringReader("-.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("-1234567890.MZ#Y");
        JavaParser javaParser = new JavaParser(stringReader);
        PipedInputStream pipedInputStream = new PipedInputStream();
        javaParser.ReInit(((InputStream) (pipedInputStream)));
    }
}
statement is: StringReader stringReader = new StringReader("-1234567890.MZ#Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((InputStream) (pipedInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((InputStream) (pipedInputStream))) target is: javaParser method is: ReInit(InputStream)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReInit(Ljava/io/InputStream;)V
TestCase is: String string = "-1234567890.MZ#Y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
((JavaParser) stringReader).ReInit((InputStream) pipedInputStream);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("[Q8f>Y")
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: JavaParser javaParser = new JavaParser("[Q8f>Y");
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.CompilationUnit();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A class cannot extend more than one other class")
statement is: VariableDeclaratorId()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclaratorId()
test data is: JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
javaParser.VariableDeclaratorId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        int x = 10;// a large number to test overflow behavior

        double y = -3.14;// a negative value to test subtraction

        String z = "Hello, World!";// a string with a non-empty value to test concatenation }}

    }
}
statement is: int x = 10// a large number to test overflow behavior
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = -3.14// a negative value to test subtraction
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -3.14
statement is: String z = "Hello, World!"// a string with a non-empty value to test concatenation }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Hello, World!"
TestCase is: int _int = 10;
String string = "Hello, World!";

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration(1558)
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
javaParser.MethodDeclaration(1558);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : InvalidState");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : InvalidState");
        javaParser.NameList();
        javaParser.MethodDeclaration(1558);
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : InvalidState"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : InvalidState") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : InvalidState"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: NameList()V
statement is: javaParser.MethodDeclaration(1558), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration(1558) target is: javaParser method is: MethodDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: MethodDeclaration(I)V
TestCase is: String string = "Error: Ignoring invalid lexical state : InvalidState";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : InvalidState";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).NameList();
int _int = 1558;
((JavaParser) _void).MethodDeclaration(_int);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameters()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.FormalParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream("Test Data for the PipedInputStream class");
        JavaParser javaParser = new JavaParser(pipedInputStream);
        javaParser.FormalParameters(new String[]{ "firstName", "lastName" });
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream("Test Data for the PipedInputStream class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.FormalParameters(new String[]{ "firstName", "lastName" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameters(new String[]{ "firstName", "lastName" }) target is: javaParser method is: FormalParameters(java.lang.String[])
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234");
        JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234");
        javaParser.Type();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Type()V
TestCase is: String string = "Error: Ignoring invalid lexical state : 1234";
SystemInUtil.addInputLine(string);
String string = "Error: Ignoring invalid lexical state : 1234";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Type();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] myArray = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        String[] myStrings = new String[]{ "hello", "world", "abc", "def", "ghi" };
        double[] myDoubles = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 };
    }
}
statement is: int[] myArray = new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] myStrings = new String[]{ "hello", "world", "abc", "def", "ghi" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] myDoubles = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"Ef")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("\"Ef");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"java.util.List<String>\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
    }
}
statement is: StringReader stringReader = new StringReader("\"java.util.List<String>\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
TestCase is: String string = "\"java.util.List<String>\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Test input for parsing a valid Java program");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ResultType();
    }
}
statement is: StringReader stringReader = new StringReader("Test input for parsing a valid Java program"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ResultType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ResultType() target is: javaParser method is: ResultType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ResultType()V
TestCase is: String string = "Test input for parsing a valid Java program";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"volatile\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
test data is: StringReader stringReader = new StringReader("\"volatile\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog, which is part of the larger group of animals that are known for their intelligence. The fox is also known for its cunning and adaptability, and has been observed using various techniques to outsmart its prey.\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Name();
    }
}
statement is: StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog, which is part of the larger group of animals that are known for their intelligence. The fox is also known for its cunning and adaptability, and has been observed using various techniques to outsmart its prey.\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Name()V
TestCase is: String string = "\"The quick brown fox jumps over the lazy dog, which is part of the larger group of animals that are known for their intelligence. The fox is also known for its cunning and adaptability, and has been observed using various techniques to outsmart its prey.\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Name();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        int x = 5;// Changed to a more descriptive value

        double y = 3.14;// Changed to a more descriptive value

        String z = "Hello, world!";// Changed to a more descriptive String

        JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.ConditionalExpression(x, y, z);
    }
}
statement is: // Improved test data for the JavaParser class
int x = 5// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "Hello, world!"// Changed to a more descriptive String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(x, y, z), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression(x, y, z) target is: javaParser method is: ConditionalExpression(int,double,java.lang.String)
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, world!";
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("10 > 5 && !((7 < 9 || (3 == 3 && 4 > 2)) && 6 == 6)");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("10 > 5 && !((7 < 9 || (3 == 3 && 4 > 2)) && 6 == 6)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
TestCase is: String string = "10 > 5 && !((7 < 9 || (3 == 3 && 4 > 2)) && 6 == 6)";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

statement is: org.evosuite.testcase.statements.ArrayStatement@88ac3889 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ConditionalExpression();
    }
}
statement is: // Improved test data for the JavaParser class
byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9]
lengths: [9] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("E])A")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: StringReader stringReader = new StringReader("E])A");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("pR+U?d\"V_roX")
statement is: org.evosuite.testcase.statements.ArrayStatement@d0cce5a4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[6]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("pR+U?d\"V_roX");
        char[] charArray = new char[6];
        stringReader.read(charArray);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("pR+U?d\"V_roX"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: char[] charArray = new char[6] isAssignment: false Array: new char[6] Elements: []
lengths: [6] [6]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read([C)I
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: ConditionalOrExpression()V
TestCase is: String string = "pR+U?d\"V_roX";
StringReader stringReader = new StringReader(string);
char[] charArray = new char[6];
int read = ((Reader) string).read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).ConditionalOrExpression();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("-1XR[")
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-1XR[");
javaParser.ConditionalAndExpression();
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
        JavaParser javaParser = new JavaParser("-123XR[");
        javaParser.ConditionalAndExpression();
        javaParser.PrimaryPrefix();
    }
}
statement is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("-123XR["), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalAndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression() target is: javaParser method is: ConditionalAndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ConditionalAndExpression()V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "Error: Ignoring invalid lexical state : ";
SystemInUtil.addInputLine(string);
String string = "-123XR[";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).ConditionalAndExpression();
((JavaParser) _void).PrimaryPrefix();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("vm_.Y<-okQv!'&CE")
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
test data is: JavaParser javaParser = new JavaParser("vm_.Y<-okQv!'&CE");
javaParser.ConditionalAndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a sample input string for testing");
        javaParser.ConditionalAndExpression();
    }
}
statement is: Parser javaParser = new JavaParser("This is a sample input string for testing"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalAndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression() target is: javaParser method is: ConditionalAndExpression()
TestCase is: String string = "This is a sample input string for testing";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?BT%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Happy New Year!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Happy New Year!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
TestCase is: String string = "Happy New Year!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int a = 5;// Primitive value representing a positive integer

        int b = -3;// Primitive value representing a negative integer

        String str1 = "hello";// String literal representing a sequence of characters

        String str2 = "world";// String literal representing another sequence of characters }}

    }
}
statement is: int a = 5// Primitive value representing a positive integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int b = -3// Primitive value representing a negative integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -3
statement is: String str1 = "hello"// String literal representing a sequence of characters
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str2 = "world"// String literal representing another sequence of characters }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "hello"
* this is vulnerable: String string = "world"
TestCase is: int _int = 5;
String string = "hello";
String string = "world";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int a = 5;
        String str = "Hello, World!";
        char c = 'A';
        double d = 3.14;
        boolean b = true;
    }
}
statement is: int a = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'A'
* this is vulnerable: double _double = 3.14
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
String string = "Hello, World!";
char _char = 'A';
double _double = 3.14;
boolean _boolean = true;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("catch")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BeginToken()C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char BeginToken = javaCharStream.BeginToken()
statement is: EqualityExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EqualityExpression()
test data is: StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaCharStream.BeginToken();
javaParser.EqualityExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("catch");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaCharStream.BeginToken();
        javaParser.EqualityExpression();
    }
}
statement is: StringReader stringReader = new StringReader("catch"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaCharStream.BeginToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaCharStream.BeginToken() target is: javaCharStream method is: BeginToken()
source statement: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaCharStreamindex is: 2
Matched Method is: BeginToken()C
statement is: javaParser.EqualityExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression() target is: javaParser method is: EqualityExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: EqualityExpression()V
TestCase is: String string = "catch";
StringReader stringReader = new StringReader(string);
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaCharStream) stringReader).BeginToken();
((JavaParser) javaParserTokenManager).EqualityExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: EqualityExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EqualityExpression()
test data is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
javaParser.EqualityExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.EqualityExpression();
        // Modified test data
        StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : InvalidCharacter");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.EqualityExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
statement is: javaParser.EqualityExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression() target is: javaParser method is: EqualityExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EqualityExpression()V
statement is: // Modified test data
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : InvalidCharacter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: ReferenceType()V
statement is: javaParser.EqualityExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression() target is: javaParser method is: EqualityExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: EqualityExpression()V
TestCase is: String string = "Error: Ignoring invalid lexical state : ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();
String string = "Error: Ignoring invalid lexical state : InvalidCharacter";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 10;
        double y = 3.14159;
        String z = "Welcome to the world of Java!";
        char c = 'A';
    }
}
statement is: int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14159, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "Welcome to the world of Java!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14159
* this is vulnerable: String string = "Welcome to the world of Java!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 10;
double _double = 3.14159;
String string = "Welcome to the world of Java!";
char _char = 'A';

statement is: org.evosuite.testcase.statements.ArrayStatement@851c6b58 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[9]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[9];
        for (int i = 0; i < 9; i++) {
            byteArray[i] = ((byte) (i));
        }
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.InstanceOfExpression();
    }
}
statement is: byte[] byteArray = new byte[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: byte[] byteArray = new byte[9] isAssignment: false Array: new byte[9] Elements: []
lengths: [9] [9]
Their type are: class [B byte[]
statement is: for (int i = 0; i < 9; i++) {
    byteArray[i] = ((byte) (i));
}, class spoon.support.reflect.code.CtForImpl
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
TestCase is: byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.InstanceOfExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        Expression expression = javaParser.RelationalExpression();
        assertEquals(expression.getType(), RELATIONAL_EXPRESSION);
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Expression expression = javaParser.RelationalExpression(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
statement is: assertEquals(expression.getType(), RELATIONAL_EXPRESSION), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expression.getType(), RELATIONAL_EXPRESSION) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Zd+Au{rL}FE;")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1+2*3-4/5");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
    }
}
statement is: StringReader stringReader = new StringReader("1+2*3-4/5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
TestCase is: String string = "1+2*3-4/5";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

statement is: org.evosuite.testcase.statements.ArrayStatement@27e68263 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[16]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.DataInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.DataInputStream
statement code is: DataInputStream dataInputStream = new DataInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: byte[] byteArray = new byte[16];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream);
BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };// Changed from a zero-length array to an example of a non-empty byte array.

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream);
        JavaParser javaParser = new JavaParser(bufferedInputStream);
        javaParser.ShiftExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }// Changed from a zero-length array to an example of a non-empty byte array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[16] isAssignment: false Array: new byte[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } Elements: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
lengths: [16] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.DataInputStream(Ljava/io/InputStream;)V
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.BufferedInputStream(Ljava/io/InputStream;)V
statement is: JavaParser javaParser = new JavaParser(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces")
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
        JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
        javaParser.AdditiveExpression();
        // expected output: ParseException }}
    }
}
statement is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AdditiveExpression()V
statement is: // expected output: ParseException }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "CE+|cY\"MohOmhjM->z";
SystemInUtil.addInputLine(string);
String string = "An interface cannot implement other interfaces";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).AdditiveExpression();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        javaParser.AdditiveExpression();
    }
}
statement is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AdditiveExpression()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
SystemInUtil.addInputLine(string);
String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).AdditiveExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("4 + 6 / 2"));
        int result = javaParser.AdditiveExpression();
        assertEquals(8, result);
        JavaParser javaParser = new JavaParser(new JavaLexer("\"hello\" + \"world\""));
        String result = javaParser.AdditiveExpression();
        assertEquals("helloworld", result);
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("4 + 6 / 2")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int result = javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
statement is: assertEquals(8, result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(8, result) target is:  method is: assertEquals(int,int)
statement is: JavaParser javaParser = new JavaParser(new JavaLexer("\"hello\" + \"world\"")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String result = javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AdditiveExpression()V
statement is: assertEquals("helloworld", result), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("helloworld", result) target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AdditiveExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 3073)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpressionNotPlusMinus();
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpressionNotPlusMinus();
        javaParser.MultiplicativeExpression();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: UnaryExpressionNotPlusMinus()V
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: MultiplicativeExpression()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
StringReader stringReader = new StringReader(string);
int _int = 3073;
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).UnaryExpressionNotPlusMinus();
((JavaParser) _int).MultiplicativeExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Zd+Au{rL}FE;")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
        javaParser.MultiplicativeExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 86)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("John Doe");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: UnaryExpression()V
TestCase is: String string = "John Doe";
StringReader stringReader = new StringReader(string);
int _int = 3073;
int _int = 86;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 3073)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.VariableInitializer();
        javaParser.UnaryExpression();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: VariableInitializer()V
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: UnaryExpression()V
TestCase is: int _int = 3073;
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();
((JavaParser) javaParserTokenManager).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("instanceof")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        "    public static void main(String[] args) {\n" = "        int x = 5;\n" + (((("        double y = 3.14;\n" + "        String z = \"hello world\";\n") + "        char c = \'a\';\n") + "    }\n") + "}");
        javaParser.UnaryExpression(javaCode);
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: "    public static void main(String[] args) {\n" = "        int x = 5;\n" + (((("        double y = 3.14;\n" + "        String z = \"hello world\";\n") + "        char c = \'a\';\n") + "    }\n") + "}"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.UnaryExpression(javaCode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression(javaCode) target is: javaParser method is: UnaryExpression()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("u.hEI")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 128, 8, 8)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("u.hEI");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: UnaryExpression()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
int _int = 128;
int _int = 8;
int _int = 8;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, _int, _int, _int);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).UnaryExpression();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.StatementExpressionList();
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("2019-12-31 23:59:59");
        JavaParser javaParser = new JavaParser("2019-12-31 23:59:59");
        javaParser.StatementExpressionList();
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: SystemInUtil.addInputLine("2019-12-31 23:59:59"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("2019-12-31 23:59:59") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("2019-12-31 23:59:59"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: StatementExpressionList()V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "2019-12-31 23:59:59";
SystemInUtil.addInputLine(string);
String string = "2019-12-31 23:59:59";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).StatementExpressionList();
((JavaParser) _void).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"==\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("\"==\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "\"==\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41")
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("2W@|Y");// Improved: This input line is more descriptive and representative of the situation being tested. It includes a valid string that can be used to test the UnaryExpressionNotPlusMinus method.

        JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");// Improved: This input line is also more descriptive and representative of the situation being tested. It includes a valid string that can be used to test the UnaryExpressionNotPlusMinus method.

        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: SystemInUtil.addInputLine("2W@|Y")// Improved: This input line is more descriptive and representative of the situation being tested. It includes a valid string that can be used to test the UnaryExpressionNotPlusMinus method.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("2W@|Y")// Improved: This input line is more descriptive and representative of the situation being tested. It includes a valid string that can be used to test the UnaryExpressionNotPlusMinus method.
 target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41")// Improved: This input line is also more descriptive and representative of the situation being tested. It includes a valid string that can be used to test the UnaryExpressionNotPlusMinus method.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "2W@|Y";
SystemInUtil.addInputLine(string);
String string = "uz+N?8f3k,>Yh41";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("ejs\">Y32JW")
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/Reader;II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, 3073, 3073)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("ejs\">Y32JW");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CharStream javaCharStream = new JavaCharStream(stringReader, 100, 100);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: CharStream javaCharStream = new JavaCharStream(stringReader, 100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: int _int = 100;
int _int = 100;
JavaCharStream javaCharStream = new JavaCharStream((Reader) _int, _int, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpressionNotPlusMinus();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("uz+cNo8Hf3k,>Yh41")
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("uz+cNo8Hf3k,>Yh41");
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
        JavaParser javaParser = new JavaParser("int x = 5; int y = 10; z = x + y;");
        javaParser.PostfixExpression();
    }
}
statement is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("int x = 5; int y = 10; z = x + y;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: PostfixExpression()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess";
SystemInUtil.addInputLine(string);
String string = "int x = 5; int y = 10; z = x + y;";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).PostfixExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("\"==\"")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("\"==\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
        // Improved test data:
        StringReader stringReader = new StringReader("\"abcdefg\"");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("\"==\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("\"abcdefg\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: PrimaryExpression()V
TestCase is: String string = "\"==\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "\"abcdefg\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("}|To<x2>Sbg>)l)r{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("}|To<x2>Sbg>)l)r{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
        // Test data for more complex primary expressions
        stringReader = new StringReader("'Hello, World!'");
        javaParser.PrimaryExpression();
        stringReader = new StringReader("1234567890");
        javaParser.PrimaryExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
statement is: // Test data for more complex primary expressions
stringReader = new StringReader("'Hello, World!'"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
statement is: stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("!prements")
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: JavaParser javaParser = new JavaParser("!prements");
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("!prements");
        javaParser.PrimaryPrefix();
    }
}
statement is: Parser javaParser = new JavaParser("!prements"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
TestCase is: String string = "!prements";
JavaParser javaParser = new JavaParser(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("2W@|Y")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(".  Encountered: ")
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("2W@|Y");
        JavaParser javaParser = new JavaParser(".  Encountered: ");
        javaParser.PrimaryPrefix();
    }
}
statement is: SystemInUtil.addInputLine("2W@|Y"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("2W@|Y") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser(".  Encountered: "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "2W@|Y";
SystemInUtil.addInputLine(string);
String string = ".  Encountered: ";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).PrimaryPrefix();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ")
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        JavaParser javaParser = new JavaParser("public class MyClass { private int myField; }");
        // Act
        javaParser.PrimaryPrefix();
        // Assert
        Assert.assertEquals(1, 1);
    }
}
statement is: // Arrange
JavaParser javaParser = new JavaParser("public class MyClass { private int myField; }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Act
javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Act
javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: PrimaryPrefix()V
statement is: // Assert
Assert.assertEquals(1, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
Assert.assertEquals(1, 1) target is: Assert method is: assertEquals(int,int)
TestCase is: String string = "public class MyClass { private int myField; }";
JavaParser javaParser = new JavaParser(string);
javaParser.PrimaryPrefix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Q]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1")
statement is: LabeledStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LabeledStatement()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
javaParser.LabeledStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 987654321;
        String s = "Goodbye World";
        char c = 'z';
        double d = -3.14;
        float f = ((float) (d));
        boolean b = false;
    }
}
statement is: int x = 987654321, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Goodbye World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = -3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -3.14
statement is: float f = ((float) (d)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtVariableReadImpl
IT HAS NOT BEEN SUPPORTED YET: ((float) (d))
statement is: boolean b = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 987654321
* this is vulnerable: String string = "Goodbye World"
* this is vulnerable: char _char = 'z'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 987654321;
String string = "Goodbye World";
char _char = 'z';
boolean _boolean = false;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Block()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Block()
test data is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Block();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("<!DOCTYPE html><html><head><title>Test Title</title></head><body><h1>Hello, world!</h1></body></html>");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Block();
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("<!DOCTYPE html><html><head><title>Test Title</title></head><body><h1>Hello, world!</h1></body></html>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Block(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Block() target is: javaParser method is: Block()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Block()V
TestCase is: String string = "<!DOCTYPE html><html><head><title>Test Title</title></head><body><h1>Hello, world!</h1></body></html>";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : 42");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : 42"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpression()V
TestCase is: String string = "Error: Ignoring invalid lexical state : 42";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int primitiveValue1 = 42;
        double primitiveValue2 = 3.14159;
        String stringValue1 = "The answer to life, the universe, and everything.";
        char charValue1 = 'Z';
    }
}
statement is: // Improved test data
int primitiveValue1 = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveValue2 = 3.14159, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue1 = "The answer to life, the universe, and everything.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue1 = 'Z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14159
* this is vulnerable: String string = "The answer to life, the universe, and everything."
* this is vulnerable: char _char = 'Z'
TestCase is: int _int = 42;
double _double = 3.14159;
String string = "The answer to life, the universe, and everything.";
char _char = 'Z';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[")
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser("This is a string.");
        javaParser.MarkerAnnotation();
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser("This is a string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: MarkerAnnotation()V
TestCase is: String string = "This is a string.";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).MarkerAnnotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A class cannot extend more than one other class")
statement is: AnnotationTypeDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeDeclaration(63)
test data is: JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
javaParser.AnnotationTypeDeclaration(63);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("A class cannot extend more than one other class");
        javaParser.AnnotationTypeDeclaration(63);
        // Changed the primitive value from 63 to 90, which is a more representative value for an annotation type declaration with 25 fields.
        javaParser.AnnotationTypeDeclaration(90);
    }
}
statement is: Parser javaParser = new JavaParser("A class cannot extend more than one other class"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeDeclaration(63), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeDeclaration(63) target is: javaParser method is: AnnotationTypeDeclaration(int)
statement is: // Changed the primitive value from 63 to 90, which is a more representative value for an annotation type declaration with 25 fields.
javaParser.AnnotationTypeDeclaration(90), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the primitive value from 63 to 90, which is a more representative value for an annotation type declaration with 25 fields.
javaParser.AnnotationTypeDeclaration(90) target is: javaParser method is: AnnotationTypeDeclaration(int)
TestCase is: String string = "A class cannot extend more than one other class";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("teX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
statement is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token token = javaParser.getToken(108)
test data is: StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.getToken(108);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("text");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.getToken(108);
    }
}
statement is: StringReader stringReader = new StringReader("text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
statement is: javaParser.getToken(108), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getToken(108) target is: javaParser method is: getToken(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;
TestCase is: String string = "text";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
int _int = 108;
((JavaParser) stringReader).getToken(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("TO{\"M-#-(G\"^>]")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("TO{\"M-#-(G\"^>]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        // Improved test data
        StringReader improvedStringReader = new StringReader("TO{\"A-#-(B\"^>]");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.TypeArgument();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("TO{\"A-#-(B\"^>]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.TypeArgument() target is: improvedJavaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
TestCase is: String string = "TO{\"A-#-(B\"^>]";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("implrements")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("implements");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValuePair();
    }
}
statement is: StringReader stringReader = new StringReader("implements"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValuePair(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePair() target is: javaParser method is: MemberValuePair()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValuePair()V
TestCase is: String string = "implements";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePair();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces")
statement is: MethodDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclarator()
test data is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
javaParser.MethodDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
        JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
        javaParser.MethodDeclarator();
    }
}
statement is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclarator() target is: javaParser method is: MethodDeclarator()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: MethodDeclarator()V
TestCase is: String string = "CE+|cY\"MohOmhjM->z";
SystemInUtil.addInputLine(string);
String string = "An interface cannot implement other interfaces";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).MethodDeclarator();

statement is: org.evosuite.testcase.statements.ArrayStatement@46b86192 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@64ec8082 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Error: Ignoring invalid lexical state : "
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : ";
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Error: Ignoring invalid lexical state : 123456789";
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Error: Ignoring invalid lexical state : 123456789", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Error: Ignoring invalid lexical state : 123456789" Ct is: stringArray[0] = "Error: Ignoring invalid lexical state : 123456789"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[1];
String string = "Error: Ignoring invalid lexical state : 123456789";
stringArray[0] = string;
JavaParser.main(stringArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.ParseException
statement code is: ParseException generateParseException = javaParser.generateParseException()
test data is: StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.generateParseException();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("+58%\"k\'\"=1o:IIx 8");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.generateParseException();
        // Improved test data
        StringReader improvedStringReader = new StringReader("+58%\"k\'\"=1o:IIx 8");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.generateParseException();
    }
}
statement is: StringReader stringReader = new StringReader("+58%\"k\'\"=1o:IIx 8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.generateParseException(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.generateParseException() target is: javaParser method is: generateParseException()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("+58%\"k\'\"=1o:IIx 8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.generateParseException(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.generateParseException() target is: improvedJavaParser method is: generateParseException()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;
TestCase is: String string = "+58%\"k'\"=1o:IIx 8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();
String string = "+58%\"k'\"=1o:IIx 8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();

* test suite isTestSuite: 530
Test 0: 
JavaParser javaParser = new JavaParser("?BT%");
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{");
FileSystemHandling.appendStringToFile(evoSuiteFile, "@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
Test 2: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-99), 10);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.dump((Writer) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
StringReader stringReader = new StringReader("V|9n,)lT'A_\".Q06KJ/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) null);
Test 4: 
JavaParser javaParser = new JavaParser(">>>");
javaParser.disable_tracing();
Test 5: 
JavaParser javaParser = new JavaParser("(y(O:<mcr|lFfG`G");
javaParser.enable_tracing();
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(16);
Test 7: 
JavaParser.ModifierSet.removeModifier(58, 16);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(33);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(81);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(791);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(16);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1969));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-3004));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(30);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(64);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-832));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(59);
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(512);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1831));
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(207);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-1));
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(55);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-414));
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(8);
Test 26: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2342);
Test 27: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile((byte)54);
Test 28: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(3672);
Test 29: 
String[] stringArray = new String[4];
JavaParser.main(stringArray);
Test 30: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 31: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 34: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Modifiers();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
StringReader stringReader = new StringReader("++");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ++
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceDeclaration(103);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.EnumDeclaration((-815));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(1284);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
StringReader stringReader = new StringReader("Q'BR=g6");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(0);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"R\" (82), after : \"\\'B\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 43: 
JavaParser javaParser = new JavaParser("Q]");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 45: 
JavaParser javaParser = new JavaParser("7Q]");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 50: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("[");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 52: 
JavaParser javaParser = new JavaParser("instanceof");
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 53: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 54: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("[i@PJ!d[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
SystemInUtil.addInputLine(".  Encounterd: ");
JavaParser javaParser = new JavaParser(".  Encounterd: ");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
JavaParser javaParser = new JavaParser("E!54ca");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.ForInit();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.getNextToken();
Test 67: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 68: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("?BT ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 73: 
StringReader stringReader = new StringReader("[");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3525), (-3525));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line -3525, column -3525.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 74: 
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(70);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("\"==");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MethodDeclaration(21);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 113, column -410.  Encountered: <EOF> after : \"\\\"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 77: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("4}8>xsT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
JavaParser javaParser = new JavaParser("MemberSelectow");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 5
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
JavaParser javaParser = new JavaParser(">>}>");
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
JavaParser javaParser = new JavaParser("9N8;I1C2|#&\"FZ?/");
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-3393));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
javaParser.TypeArgument();
Test 95: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 96: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 97: 
StringReader stringReader = new StringReader("\"zra;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"zra;\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("Pk/Hha'c");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ResultType();
Test 100: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(140);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ResultType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 102: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 104: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 105: 
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 107: 
SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"&\" (38), after : \"\\'3\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 108: 
JavaParser javaParser = new JavaParser("]~ w{m;SC#|iw=#");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
SystemInUtil.addInputLine(":(HT%");
JavaParser javaParser = new JavaParser(":(HT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("|zGA0{_}PAGT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-4525), 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();
Test 114: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)98;
byteArray[1] = (byte)60;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
Test 116: 
StringReader stringReader = new StringReader("ZeOrA*C|4n1F35}");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();
Test 117: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source.getNextToken();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
SystemInUtil.addInputLine("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("An interface cannot have initializers");
javaParser.TypeArgument();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader(")l**3N6)wvgY-F)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Modifiers();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3076.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column -728.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.InclusiveOrExpression();
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 129: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)126;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 130: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.Name();
javaParser.MemberValue();
Test 133: 
JavaParser javaParser = new JavaParser("aD0S`Z4's21sleM{");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 135: 
StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
StringReader stringReader = new StringReader("]");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("\"implements\"");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 142: 
JavaParser javaParser = new JavaParser("R9qU^:N[d^");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 101, column 52.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 147: 
StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 148: 
JavaParser javaParser = new JavaParser("A cla_k cann6t extend more than one other class");
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
JavaParser javaParser = new JavaParser("S<");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
JavaParser javaParser = new JavaParser("<DIGIT>");
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
JavaParser javaParser = new JavaParser("\"goto\"");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 155: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 156: 
byte[] byteArray = new byte[3];
byteArray[0] = (byte)98;
byteArray[1] = (byte)98;
byteArray[2] = (byte)44;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.AllocationExpression();
Test 158: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 159: 
JavaParser javaParser = new JavaParser("-=");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 162: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: W
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Statement();
Test 167: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 171: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 173: 
SystemInUtil.addInputLine("J\"`I'Vx");
JavaParser javaParser = new JavaParser((String) null);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"`I\\'Vx\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 174: 
JavaParser javaParser = new JavaParser("_^yq|D&");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 177: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 180: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
JavaParser javaParser = new JavaParser("{`QR7C@8e9S6J$7RQ");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
StringReader stringReader = new StringReader("Z");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token = null;
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
StringReader stringReader = new StringReader("A?eJBmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 185: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 186: 
JavaParser javaParser = new JavaParser("_`0orp TI2");
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 187: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 188: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 189: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("\":\"");
char[] charArray = new char[1];
stringReader.read(charArray);
stringReader.skip(1);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
JavaParser javaParser = new JavaParser("&=");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
StringReader stringReader = new StringReader("Y");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, (byte)36);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 58, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("u.hEI");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
SystemInUtil.addInputLine("g");
SystemInUtil.addInputLine("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 2, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
SystemInUtil.addInputLine("d#\u0005O&-}1hL$e]>b");
JavaParser javaParser = new JavaParser("\"throw\"");
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 198: 
JavaParser javaParser = new JavaParser("`V=");
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 205: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 210: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 212: 
JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 216: 
StringReader stringReader = new StringReader("y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 218: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
Test 219: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 221: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 222: 
JavaParser javaParser = new JavaParser("p72vWj3ae(u");
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 223: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("\"ati#e?");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"ati#e?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 225: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 227: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Expression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 100, column -413.  Encountered: \"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader(")");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 233: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 234: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 236: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getNextToken();
Test 237: 
StringReader stringReader = new StringReader("-.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 238: 
JavaParser javaParser = new JavaParser("[Q8f>Y");
javaParser.CompilationUnit();
Test 239: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 240: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.MethodDeclaration(1558);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Type();
Test 243: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
StringReader stringReader = new StringReader("\"Ef");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"Ef\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 245: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 246: 
StringReader stringReader = new StringReader("\"volatile\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"volatile\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 247: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 248: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 249: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 250: 
StringReader stringReader = new StringReader("E])A");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
Test 251: 
StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"V_roX\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 252: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-1XR[");
javaParser.ConditionalAndExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
JavaParser javaParser = new JavaParser("vm_.Y<-okQv!'&CE");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 254: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 255: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 256: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 257: 
StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaCharStream.BeginToken();
javaParser.EqualityExpression();
Test 258: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 260: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 261: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 262: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 263: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 264: 
byte[] byteArray = new byte[16];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream);
BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 266: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
javaParser.AdditiveExpression();
Test 267: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 268: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpressionNotPlusMinus();
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 270: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 271: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 275: 
StringReader stringReader = new StringReader("u.hEI");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 128, column 10.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 276: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.StatementExpressionList();
javaParser.UnaryExpressionNotPlusMinus();
Test 277: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 278: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.UnaryExpressionNotPlusMinus();
Test 279: 
StringReader stringReader = new StringReader("ejs\">Y32JW");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 3073, column 3083.  Encountered: <EOF> after : \"\\\">Y32JW\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 280: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("uz+cNo8Hf3k,>Yh41");
javaParser.PostfixExpression();
Test 281: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 282: 
StringReader stringReader = new StringReader("}|To<x2>Sbg>)l)r{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 283: 
JavaParser javaParser = new JavaParser("!prements");
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 284: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.PrimaryPrefix();
Test 285: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.PrimaryPrefix();
Test 286: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 287: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 288: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 289: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
Test 290: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 291: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 292: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.AnnotationTypeDeclaration(63);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 293: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.getToken(108);
Test 294: 
StringReader stringReader = new StringReader("TO{\"M-#-(G\"^>]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
Test 295: 
StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 296: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 297: 
String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : ";
JavaParser.main(stringArray);
Test 298: 
StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 299: 
JavaParser javaParser = new JavaParser("1234567890abcdefghijklmnopqrstuvwxyz");

Test 300: 
FileSystemHandling.appendStringToFile((EvoSuiteFile) "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~", (String) null);
String string = "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
JavaParser javaParser = new JavaParser(string);

Test 301: 
JavaParser javaParser = new JavaParser("<<<");

Test 302: 

Test 303: 

Test 304: 

Test 305: 
JavaParser.main((String[]) null);

Test 306: 
JavaParser.main((String[]) null);

Test 307: 
StringReader stringReader = new StringReader("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } int x = 5; double y = 3.14; char z = 'a'; String s = \"This is a test\"; if (x > 0) { System.out.println(\"The value of x is positive.\"); } else { System.out.println(\"The value of x is negative.\"); } for (int i = 0; i < 10; i++) { System.out.println(i); } while (x > 0) { System.out.println(\"The value of x is positive.\"); } } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)82).CompilationUnit();

Test 308: 
JavaParser javaParser = new JavaParser("com.example.myproject");

Test 309: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) "MyJavaProject/src");
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).PackageDeclaration();

Test 310: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3.14).Modifiers();

Test 311: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

Test 312: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(false);
boolean _boolean = true;
((JavaParser) stringReader).ExtendsList(_boolean);

Test 313: 

Test 314: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.EnumDeclaration((int) "HelloWorld");

Test 315: 
StringReader stringReader = new StringReader("Q'BR=g6");
int read = ((StringReader)"Q'BR=g6").read();
JavaParser javaParser = new JavaParser(stringReader);
int _int = 0;
((JavaParser) read).EnumDeclaration(_int);

Test 316: 
JavaParser javaParser = new JavaParser("ENUM_CONSTANT");

Test 317: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 318: 
StringReader stringReader = new StringReader("text");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).SwitchLabel();

Test 319: 

Test 320: 
StringReader stringReader = new StringReader("StringReader stringReader = new StringReader(\"Hello World\");");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 321: 
StringReader stringReader = new StringReader("This is a test case for the JavaParser class with more descriptive and representative data.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 322: 
JavaParser javaParser = new JavaParser("instanceof");

Test 323: 
JavaParser javaParser = new JavaParser("textEditor");

Test 324: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
((JavaParser)null).VariableDeclarator();

Test 325: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(true);
String string = "This is a more descriptive and representative test string for the JavaParser, including special characters and numbers.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

Test 326: 
StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);

Test 327: 
StringReader stringReader = new StringReader("ValidJavaIdentifier");
JavaParser javaParser = new JavaParser(stringReader);

Test 328: 
SystemInUtil.addInputLine("Hello");

Test 329: 

Test 330: 
StringReader stringReader = new StringReader("         java JavaParser < /home/user/Documents/inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 331: 
JavaParser javaParser = new JavaParser("int x = 54;");

Test 332: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890");
((JavaParser)null).ForInit();
((JavaParser) _void).VariableInitializer();

Test 333: 
StringReader stringReader = new StringReader("\"This is a test string for testing the JavaParser class.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 334: 
StringReader stringReader = new StringReader("An instance of a class is created by using the new keyword and specifying the name of the class in parentheses.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 335: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).getNextToken();

Test 336: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 337: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
String string = "Hello world!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();

Test 338: 
StringReader stringReader = new StringReader("Hello, World! This is a sample string with special characters: \t\n\r");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 339: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 340: 

Test 341: 
StringReader stringReader = new StringReader("implements");
JavaParser javaParser = new JavaParser(stringReader);

Test 342: 
StringReader stringReader = new StringReader("\"This is a test string containing special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MethodDeclaration(21);

Test 343: 
StringReader stringReader = new StringReader("r7@gmail.com");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConstructorDeclaration();

Test 344: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 345: 
StringReader stringReader = new StringReader("Q");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();
((JavaParser) stringReader).ConstructorDeclaration();

Test 346: 

Test 347: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");

Test 348: 
StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 349: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 350: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3073).ExplicitConstructorInvocation();

Test 351: 
StringReader stringReader = new StringReader("1234");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();
((JavaParser) stringReader).Initializer();

Test 352: 

Test 353: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);

Test 354: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
((JavaParser)null).VariableDeclarator();
((JavaParser) _void).ReferenceType();

Test 355: 
JavaParser javaParser = new JavaParser("This is a string with some random characters and numbers 1234567890");

Test 356: 
JavaParser javaParser = new JavaParser("a simple string");

Test 357: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
((JavaParser)null).TypeArgument();

Test 358: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 359: 
StringReader stringReader = new StringReader("A");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 360: 
StringReader stringReader = new StringReader("\"Hello World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 361: 

Test 362: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

Test 363: 

Test 364: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 365: 
JavaParser javaParser = new JavaParser("10 + 5");

Test 366: 

Test 367: 
SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
((JavaParser)null).Expression();

Test 368: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
((JavaParser)null).AssignmentOperator();

Test 369: 

Test 370: 
StringReader stringReader = new StringReader("x = 10; y = 20; z = x + y;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

Test 371: 
StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 372: 
StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 64, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 373: 
StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 374: 
StringReader stringReader = new StringReader("100");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 375: 
StringReader stringReader = new StringReader("2+2");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).ExclusiveOrExpression();

Test 376: 
StringReader stringReader = new StringReader("aFhH1t\tX");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 377: 
StringReader stringReader = new StringReader("ABC");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();
String string = "XYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();

Test 378: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 379: 
StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
((JavaParser) _int).UnaryExpression();

Test 380: 
StringReader stringReader = new StringReader("a b c d e f g h i j k l m n o p q r s t u v w x y z");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();

Test 381: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

Test 382: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 383: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("90");
((JavaParser)null).ShiftExpression();

Test 384: 
SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
((JavaParser)null).RelationalExpression();

Test 385: 
JavaParser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");

Test 386: 

Test 387: 
StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

Test 388: 
StringReader stringReader = new StringReader("hello world");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

Test 389: 
JavaParser javaParser = new JavaParser("~x");
((JavaParser)"~x").UnaryExpressionNotPlusMinus();

Test 390: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).CastLookahead();

Test 391: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 12345");
((JavaParser)null).NameList();
((JavaParser) _void).CastLookahead();

Test 392: 
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) 64, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);

Test 393: 
JavaParser javaParser = new JavaParser((String) 25.7);

Test 394: 
StringReader stringReader = new StringReader("com.example.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).CastExpression();

Test 395: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 101, 53, 1243, 1243);
int _int = 0;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, _int);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberSelector();

Test 396: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 397: 
StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).StatementExpression();
((JavaParser) javaParserTokenManager).StatementExpression();

Test 398: 
JavaParser javaParser = new JavaParser("A cat cannot extend more than one other class");

Test 399: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
((JavaParser)null).MemberValue();
((JavaParser) _void).PrimarySuffix();

Test 400: 
JavaParser javaParser = new JavaParser("string");

Test 401: 
JavaParser javaParser = new JavaParser("true");

Test 402: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

Test 403: 
JavaParser javaParser = new JavaParser("\"goto\"");

Test 404: 
byte[] byteArray = new byte[3];
byteArray[0] = (byte) 'a';
byteArray[1] = (byte) 'B';
byteArray[2] = (byte) '.';
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
((JavaParser)'.').ArgumentList();

Test 405: 
JavaParser javaParser = new JavaParser("Encountered: java.lang.NullPointerException");
javaParser.AllocationExpression();

Test 406: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 407: 
JavaParser javaParser = new JavaParser("['Hello', 'World']");

Test 408: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 409: 

Test 410: 
SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
((JavaParser)null).Statement();

Test 411: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 412: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
((JavaParser)null).BlockStatement();

Test 413: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).Statement();

Test 414: 
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1024, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).Statement();

Test 415: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);

Test 416: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
((JavaParser)null).MemberValue();
((JavaParser) _void).BlockStatement();
String string = "S-U3:c[1234567890, true]";
SystemInUtil.addInputLine(string);
String string = "EmptyStatement";
JavaParser javaParser = new JavaParser(string);

Test 417: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
((JavaParser)null).BlockStatement();

Test 418: 
JavaParser javaParser = new JavaParser("");

Test 419: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) "This is a sample string.");
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).BlockStatement();

Test 420: 
SystemInUtil.addInputLine("private String myField;");
SystemInUtil.addInputLine("public void myMethod() {}");

Test 421: 
JavaParser javaParser = new JavaParser("My String Value");
((JavaParser)"My String Value").LocalVariableDeclaration();

Test 422: 
JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");

Test 423: 
StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 424: 
JavaParser javaParser = new JavaParser("Multiple extends clauses are not allowed for classes in this context");

Test 425: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 426: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 427: 
StringReader stringReader = new StringReader("This is a sample string that will be used to test the JavaParser library.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 428: 
StringReader stringReader = new StringReader("This is a sample input string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 429: 
StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();
String string = "A?eJxMkHsWo9BmQ;?ENiX?HAw:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 430: 
int _int = 12345;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) "This is a sample string", 12345);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).SwitchStatement();

Test 431: 

Test 432: 
JavaParser javaParser = new JavaParser("123456789");

Test 433: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 434: 

Test 435: 
JavaParser javaParser = new JavaParser("This is a test string that will be used to demonstrate the use of while statement in Java.");

Test 436: 
StringReader stringReader = new StringReader("This is a test string. This is another test string.");
JavaParser javaParser = new JavaParser(stringReader);

Test 437: 

Test 438: 
StringReader stringReader = new StringReader("A");
int _int = 36;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, 36);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)36).UnaryExpression();
((JavaParser) _int).ForInit();

Test 439: 
SystemInUtil.addInputLine("This is a sample input for testing");
JavaParser javaParser = new JavaParser("This is a string with special characters");
((JavaParser)null).ForInit();

Test 440: 
SystemInUtil.addInputLine("hello");
String string = "goodbye";
SystemInUtil.addInputLine("goodbye");
JavaParser javaParser = new JavaParser("goodbye");
((JavaParser)"goodbye").UnaryExpression();
((JavaParser) string).ForInit();

Test 441: 
StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 442: 
JavaParser javaParser = new JavaParser("\"throw\"");

Test 443: 

Test 444: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ContinueStatement();

Test 445: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 446: 

Test 447: 

Test 448: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 449: 
JavaParser javaParser = new JavaParser("text");

Test 450: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");

Test 451: 
JavaParser javaParser = new JavaParser("Test string");

Test 452: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();
String string = "10000000000000000000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();

Test 453: 
JavaParser javaParser = new JavaParser("helloworld");

Test 454: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).Annotation();

Test 455: 
StringReader stringReader = new StringReader("\"This is a sample string for testing\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)82).MemberValue();

Test 456: 
JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");

Test 457: 

Test 458: 

Test 459: 
StringReader stringReader = new StringReader("\"hello world\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

Test 460: 
StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

Test 461: 
StringReader stringReader = new StringReader("\"<=\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"+\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"-\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 462: 
SystemInUtil.addInputLine("42");
JavaParser javaParser = new JavaParser("Hello, world!");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).MemberValue();

Test 463: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 464: 
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser)5).MemberValue();

Test 465: 
JavaParser javaParser = new JavaParser("1234567890");

Test 466: 
StringReader stringReader = new StringReader("\"This is a test input for the JavaParser class\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

Test 467: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 468: 
JavaParser javaParser = new JavaParser((Reader) "Test data for testing the parser");

Test 469: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 123456789");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 123456789");
((JavaParser)null).Expression();
((JavaParser) _void).AnnotationTypeMemberDeclaration();

Test 470: 
StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 471: 
StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).AnnotationTypeMemberDeclaration();

Test 472: 
StringReader stringReader = new StringReader("@interface MyAnnotation { void myMethod() {} }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 473: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);

Test 474: 
JavaParser javaParser = new JavaParser("Lexical error detected in input stream.");
((JavaParser)"Lexical error detected in input stream.").DefaultValue();

Test 475: 
StringReader stringReader = new StringReader("// Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).getNextToken();

Test 476: 
StringReader stringReader = new StringReader("-1234567890.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
((JavaParser) stringReader).ReInit((InputStream) pipedInputStream);

Test 477: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 478: 

Test 479: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : InvalidState");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : InvalidState");
((JavaParser)null).NameList();
int _int = 1558;
((JavaParser) _void).MethodDeclaration(_int);

Test 480: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234");
((JavaParser)null).Type();

Test 481: 
StringReader stringReader = new StringReader("\"java.util.List<String>\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 482: 
StringReader stringReader = new StringReader("Test input for parsing a valid Java program");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

Test 483: 
StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog, which is part of the larger group of animals that are known for their intelligence. The fox is also known for its cunning and adaptability, and has been observed using various techniques to outsmart its prey.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Name();

Test 484: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 485: 
StringReader stringReader = new StringReader("10 > 5 && !((7 < 9 || (3 == 3 && 4 > 2)) && 6 == 6)");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 486: 
StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
int read = ((Reader)"pR+U?d\"V_roX").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).ConditionalOrExpression();

Test 487: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-123XR[");
((JavaParser)null).ConditionalAndExpression();
((JavaParser) _void).PrimaryPrefix();

Test 488: 
JavaParser javaParser = new JavaParser("This is a sample input string for testing");

Test 489: 
StringReader stringReader = new StringReader("Happy New Year!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 490: 

Test 491: 

Test 492: 
StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaCharStream) stringReader).BeginToken();
((JavaParser) javaParserTokenManager).EqualityExpression();

Test 493: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();
String string = "Error: Ignoring invalid lexical state : InvalidCharacter";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();

Test 494: 

Test 495: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.InstanceOfExpression();

Test 496: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 497: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 498: 
StringReader stringReader = new StringReader("1+2*3-4/5");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 499: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
((JavaParser)null).AdditiveExpression();

Test 500: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
((JavaParser)null).AdditiveExpression();

Test 501: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AdditiveExpression();

Test 502: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3073).UnaryExpressionNotPlusMinus();
((JavaParser) _int).MultiplicativeExpression();

Test 503: 
StringReader stringReader = new StringReader("John Doe");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).UnaryExpression();

Test 504: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 3073, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();
((JavaParser) javaParserTokenManager).UnaryExpression();

Test 505: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 506: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 507: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)8).UnaryExpression();

Test 508: 
SystemInUtil.addInputLine("2019-12-31 23:59:59");
JavaParser javaParser = new JavaParser("2019-12-31 23:59:59");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).UnaryExpressionNotPlusMinus();

Test 509: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 510: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
((JavaParser)null).UnaryExpressionNotPlusMinus();

Test 511: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 100, 100, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpressionNotPlusMinus();

Test 512: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("int x = 5; int y = 10; z = x + y;");
((JavaParser)null).PostfixExpression();

Test 513: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "\"abcdefg\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 514: 
JavaParser javaParser = new JavaParser("!prements");

Test 515: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
((JavaParser)null).PrimaryPrefix();

Test 516: 
JavaParser javaParser = new JavaParser("public class MyClass { private int myField; }");
javaParser.PrimaryPrefix();

Test 517: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 518: 

Test 519: 
StringReader stringReader = new StringReader("<!DOCTYPE html><html><head><title>Test Title</title></head><body><h1>Hello, world!</h1></body></html>");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

Test 520: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : 42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

Test 521: 

Test 522: 
JavaParser javaParser = new JavaParser("This is a string.");
((JavaParser)"This is a string.").MarkerAnnotation();

Test 523: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");

Test 524: 
StringReader stringReader = new StringReader("text");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
int _int = 108;
((JavaParser) stringReader).getToken(_int);

Test 525: 
StringReader stringReader = new StringReader("TO{\"A-#-(B\"^>]");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 526: 
StringReader stringReader = new StringReader("implements");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePair();

Test 527: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
((JavaParser)null).MethodDeclarator();

Test 528: 
String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : 123456789";
JavaParser.main(stringArray);

Test 529: 
StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();
String string = "+58%\"k'\"=1o:IIx 8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();


* Generated after the refinement and before minimization 530 tests with total length 1555
* test suite isTestSuite: 530
Test 0: 
JavaParser javaParser = new JavaParser("?BT%");
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{");
FileSystemHandling.appendStringToFile(evoSuiteFile, "@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
Test 2: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-99), 10);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.dump((Writer) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 3: 
StringReader stringReader = new StringReader("V|9n,)lT'A_\".Q06KJ/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) null);
Test 4: 
JavaParser javaParser = new JavaParser(">>>");
javaParser.disable_tracing();
Test 5: 
JavaParser javaParser = new JavaParser("(y(O:<mcr|lFfG`G");
javaParser.enable_tracing();
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(16);
Test 7: 
JavaParser.ModifierSet.removeModifier(58, 16);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(33);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(81);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(791);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(16);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1969));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-3004));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(30);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(64);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-832));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(59);
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(512);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1831));
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(207);
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-1));
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(55);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-414));
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(8);
Test 26: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2342);
Test 27: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile((byte)54);
Test 28: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(3672);
Test 29: 
String[] stringArray = new String[4];
JavaParser.main(stringArray);
Test 30: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 31: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 34: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Modifiers();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
StringReader stringReader = new StringReader("++");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ++
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 37: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceDeclaration(103);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.EnumDeclaration((-815));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(1284);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
StringReader stringReader = new StringReader("Q'BR=g6");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(0);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"R\" (82), after : \"\\'B\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 43: 
JavaParser javaParser = new JavaParser("Q]");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 45: 
JavaParser javaParser = new JavaParser("7Q]");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 48: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 50: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader("[");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 52: 
JavaParser javaParser = new JavaParser("instanceof");
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 53: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 54: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("[i@PJ!d[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
SystemInUtil.addInputLine(".  Encounterd: ");
JavaParser javaParser = new JavaParser(".  Encounterd: ");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
JavaParser javaParser = new JavaParser("E!54ca");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.ForInit();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.getNextToken();
Test 67: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 68: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("?BT ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 73: 
StringReader stringReader = new StringReader("[");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3525), (-3525));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line -3525, column -3525.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 74: 
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(70);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("\"==");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MethodDeclaration(21);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 113, column -410.  Encountered: <EOF> after : \"\\\"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 77: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("4}8>xsT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 81: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
JavaParser javaParser = new JavaParser("MemberSelectow");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 5
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
JavaParser javaParser = new JavaParser(">>}>");
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
JavaParser javaParser = new JavaParser("9N8;I1C2|#&\"FZ?/");
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-3393));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
javaParser.TypeArgument();
Test 95: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 96: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 97: 
StringReader stringReader = new StringReader("\"zra;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"zra;\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("Pk/Hha'c");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ResultType();
Test 100: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration(140);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ResultType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 102: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 104: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 105: 
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 107: 
SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"&\" (38), after : \"\\'3\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 108: 
JavaParser javaParser = new JavaParser("]~ w{m;SC#|iw=#");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
SystemInUtil.addInputLine(":(HT%");
JavaParser javaParser = new JavaParser(":(HT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("|zGA0{_}PAGT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-4525), 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();
Test 114: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)98;
byteArray[1] = (byte)60;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
Test 116: 
StringReader stringReader = new StringReader("ZeOrA*C|4n1F35}");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();
Test 117: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source.getNextToken();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
SystemInUtil.addInputLine("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("An interface cannot have initializers");
javaParser.TypeArgument();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader(")l**3N6)wvgY-F)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Modifiers();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3076.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column -728.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.InclusiveOrExpression();
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 129: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)126;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 130: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.Name();
javaParser.MemberValue();
Test 133: 
JavaParser javaParser = new JavaParser("aD0S`Z4's21sleM{");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 135: 
StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
StringReader stringReader = new StringReader("]");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("\"implements\"");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 142: 
JavaParser javaParser = new JavaParser("R9qU^:N[d^");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 101, column 52.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 147: 
StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 148: 
JavaParser javaParser = new JavaParser("A cla_k cann6t extend more than one other class");
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
JavaParser javaParser = new JavaParser("S<");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
JavaParser javaParser = new JavaParser("<DIGIT>");
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
JavaParser javaParser = new JavaParser("\"goto\"");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 155: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 156: 
byte[] byteArray = new byte[3];
byteArray[0] = (byte)98;
byteArray[1] = (byte)98;
byteArray[2] = (byte)44;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.AllocationExpression();
Test 158: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 159: 
JavaParser javaParser = new JavaParser("-=");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 162: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: W
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Statement();
Test 167: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 171: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 173: 
SystemInUtil.addInputLine("J\"`I'Vx");
JavaParser javaParser = new JavaParser((String) null);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"`I\\'Vx\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 174: 
JavaParser javaParser = new JavaParser("_^yq|D&");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 176: 
StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 177: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 180: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
JavaParser javaParser = new JavaParser("{`QR7C@8e9S6J$7RQ");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
StringReader stringReader = new StringReader("Z");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token = null;
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
StringReader stringReader = new StringReader("A?eJBmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 185: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 186: 
JavaParser javaParser = new JavaParser("_`0orp TI2");
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 187: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 188: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 189: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("\":\"");
char[] charArray = new char[1];
stringReader.read(charArray);
stringReader.skip(1);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
JavaParser javaParser = new JavaParser("&=");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
StringReader stringReader = new StringReader("Y");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, (byte)36);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 58, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("u.hEI");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
SystemInUtil.addInputLine("g");
SystemInUtil.addInputLine("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 2, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
SystemInUtil.addInputLine("d#\u0005O&-}1hL$e]>b");
JavaParser javaParser = new JavaParser("\"throw\"");
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 198: 
JavaParser javaParser = new JavaParser("`V=");
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 203: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 204: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 205: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 210: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 212: 
JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 216: 
StringReader stringReader = new StringReader("y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 218: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
Test 219: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 221: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 222: 
JavaParser javaParser = new JavaParser("p72vWj3ae(u");
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 223: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("\"ati#e?");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"ati#e?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 225: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 227: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Expression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 100, column -413.  Encountered: \"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader(")");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 233: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 234: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 236: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getNextToken();
Test 237: 
StringReader stringReader = new StringReader("-.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 238: 
JavaParser javaParser = new JavaParser("[Q8f>Y");
javaParser.CompilationUnit();
Test 239: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 240: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.MethodDeclaration(1558);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Type();
Test 243: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
StringReader stringReader = new StringReader("\"Ef");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"Ef\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 245: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 246: 
StringReader stringReader = new StringReader("\"volatile\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"volatile\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 247: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 248: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 249: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 250: 
StringReader stringReader = new StringReader("E])A");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
Test 251: 
StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"V_roX\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 252: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-1XR[");
javaParser.ConditionalAndExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
JavaParser javaParser = new JavaParser("vm_.Y<-okQv!'&CE");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 254: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 255: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 256: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 257: 
StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaCharStream.BeginToken();
javaParser.EqualityExpression();
Test 258: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 260: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 261: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 262: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 263: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 264: 
byte[] byteArray = new byte[16];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream);
BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 266: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
javaParser.AdditiveExpression();
Test 267: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 268: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpressionNotPlusMinus();
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 270: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 271: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 275: 
StringReader stringReader = new StringReader("u.hEI");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 128, column 10.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 276: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.StatementExpressionList();
javaParser.UnaryExpressionNotPlusMinus();
Test 277: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 278: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.UnaryExpressionNotPlusMinus();
Test 279: 
StringReader stringReader = new StringReader("ejs\">Y32JW");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 3073, column 3083.  Encountered: <EOF> after : \"\\\">Y32JW\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 280: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("uz+cNo8Hf3k,>Yh41");
javaParser.PostfixExpression();
Test 281: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 282: 
StringReader stringReader = new StringReader("}|To<x2>Sbg>)l)r{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 283: 
JavaParser javaParser = new JavaParser("!prements");
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 284: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.PrimaryPrefix();
Test 285: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.PrimaryPrefix();
Test 286: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 287: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 288: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 289: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
Test 290: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 291: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 292: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.AnnotationTypeDeclaration(63);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 293: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.getToken(108);
Test 294: 
StringReader stringReader = new StringReader("TO{\"M-#-(G\"^>]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
Test 295: 
StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 296: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 297: 
String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : ";
JavaParser.main(stringArray);
Test 298: 
StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 299: 
JavaParser javaParser = new JavaParser("1234567890abcdefghijklmnopqrstuvwxyz");

Test 300: 
FileSystemHandling.appendStringToFile((EvoSuiteFile) "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~", (String) null);
String string = "This is a test string that includes special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
JavaParser javaParser = new JavaParser(string);

Test 301: 
JavaParser javaParser = new JavaParser("<<<");

Test 302: 

Test 303: 

Test 304: 

Test 305: 
JavaParser.main((String[]) null);

Test 306: 
JavaParser.main((String[]) null);

Test 307: 
StringReader stringReader = new StringReader("public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } int x = 5; double y = 3.14; char z = 'a'; String s = \"This is a test\"; if (x > 0) { System.out.println(\"The value of x is positive.\"); } else { System.out.println(\"The value of x is negative.\"); } for (int i = 0; i < 10; i++) { System.out.println(i); } while (x > 0) { System.out.println(\"The value of x is positive.\"); } } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)82).CompilationUnit();

Test 308: 
JavaParser javaParser = new JavaParser("com.example.myproject");

Test 309: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) "MyJavaProject/src");
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).PackageDeclaration();

Test 310: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3.14).Modifiers();

Test 311: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);

Test 312: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(false);
boolean _boolean = true;
((JavaParser) stringReader).ExtendsList(_boolean);

Test 313: 

Test 314: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.EnumDeclaration((int) "HelloWorld");

Test 315: 
StringReader stringReader = new StringReader("Q'BR=g6");
int read = ((StringReader)"Q'BR=g6").read();
JavaParser javaParser = new JavaParser(stringReader);
int _int = 0;
((JavaParser) read).EnumDeclaration(_int);

Test 316: 
JavaParser javaParser = new JavaParser("ENUM_CONSTANT");

Test 317: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 318: 
StringReader stringReader = new StringReader("text");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).SwitchLabel();

Test 319: 

Test 320: 
StringReader stringReader = new StringReader("StringReader stringReader = new StringReader(\"Hello World\");");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 321: 
StringReader stringReader = new StringReader("This is a test case for the JavaParser class with more descriptive and representative data.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 322: 
JavaParser javaParser = new JavaParser("instanceof");

Test 323: 
JavaParser javaParser = new JavaParser("textEditor");

Test 324: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
((JavaParser)null).VariableDeclarator();

Test 325: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(true);
String string = "This is a more descriptive and representative test string for the JavaParser, including special characters and numbers.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

Test 326: 
StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);

Test 327: 
StringReader stringReader = new StringReader("ValidJavaIdentifier");
JavaParser javaParser = new JavaParser(stringReader);

Test 328: 
SystemInUtil.addInputLine("Hello");

Test 329: 

Test 330: 
StringReader stringReader = new StringReader("         java JavaParser < /home/user/Documents/inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 331: 
JavaParser javaParser = new JavaParser("int x = 54;");

Test 332: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234567890");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234567890");
((JavaParser)null).ForInit();
((JavaParser) _void).VariableInitializer();

Test 333: 
StringReader stringReader = new StringReader("\"This is a test string for testing the JavaParser class.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 334: 
StringReader stringReader = new StringReader("An instance of a class is created by using the new keyword and specifying the name of the class in parentheses.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 335: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).getNextToken();

Test 336: 
StringReader stringReader = new StringReader("\"Hello, World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 337: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
String string = "Hello world!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).WildcardBounds();

Test 338: 
StringReader stringReader = new StringReader("Hello, World! This is a sample string with special characters: \t\n\r");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 339: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 340: 

Test 341: 
StringReader stringReader = new StringReader("implements");
JavaParser javaParser = new JavaParser(stringReader);

Test 342: 
StringReader stringReader = new StringReader("\"This is a test string containing special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MethodDeclaration(21);

Test 343: 
StringReader stringReader = new StringReader("r7@gmail.com");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConstructorDeclaration();

Test 344: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).FormalParameter();

Test 345: 
StringReader stringReader = new StringReader("Q");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();
((JavaParser) stringReader).ConstructorDeclaration();

Test 346: 

Test 347: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");

Test 348: 
StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 349: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 350: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3073).ExplicitConstructorInvocation();

Test 351: 
StringReader stringReader = new StringReader("1234");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();
((JavaParser) stringReader).Initializer();

Test 352: 

Test 353: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);

Test 354: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
((JavaParser)null).VariableDeclarator();
((JavaParser) _void).ReferenceType();

Test 355: 
JavaParser javaParser = new JavaParser("This is a string with some random characters and numbers 1234567890");

Test 356: 
JavaParser javaParser = new JavaParser("a simple string");

Test 357: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
((JavaParser)null).TypeArgument();

Test 358: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 359: 
StringReader stringReader = new StringReader("A");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 360: 
StringReader stringReader = new StringReader("\"Hello World!\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 361: 

Test 362: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

Test 363: 

Test 364: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 365: 
JavaParser javaParser = new JavaParser("10 + 5");

Test 366: 

Test 367: 
SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
((JavaParser)null).Expression();

Test 368: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
((JavaParser)null).AssignmentOperator();

Test 369: 

Test 370: 
StringReader stringReader = new StringReader("x = 10; y = 20; z = x + y;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssignmentOperator();

Test 371: 
StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 372: 
StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 64, 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 373: 
StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 374: 
StringReader stringReader = new StringReader("100");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 375: 
StringReader stringReader = new StringReader("2+2");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).ExclusiveOrExpression();

Test 376: 
StringReader stringReader = new StringReader("aFhH1t\tX");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 377: 
StringReader stringReader = new StringReader("ABC");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();
String string = "XYZ";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();
((JavaParser) stringReader).RelationalExpression();

Test 378: 
StringReader stringReader = new StringReader("int x = 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 379: 
StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
((JavaParser) _int).UnaryExpression();

Test 380: 
StringReader stringReader = new StringReader("a b c d e f g h i j k l m n o p q r s t u v w x y z");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).UnaryExpression();

Test 381: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AndExpression();

Test 382: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 383: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("90");
((JavaParser)null).ShiftExpression();

Test 384: 
SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
((JavaParser)null).RelationalExpression();

Test 385: 
JavaParser javaParser = new JavaParser("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");

Test 386: 

Test 387: 
StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreDecrementExpression();

Test 388: 
StringReader stringReader = new StringReader("hello world");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreDecrementExpression();

Test 389: 
JavaParser javaParser = new JavaParser("~x");
((JavaParser)"~x").UnaryExpressionNotPlusMinus();

Test 390: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).CastLookahead();

Test 391: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 12345");
((JavaParser)null).NameList();
((JavaParser) _void).CastLookahead();

Test 392: 
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) 64, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);

Test 393: 
JavaParser javaParser = new JavaParser((String) 25.7);

Test 394: 
StringReader stringReader = new StringReader("com.example.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).CastExpression();

Test 395: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 101, 53, 1243, 1243);
int _int = 0;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, _int);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).MemberSelector();

Test 396: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 397: 
StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).StatementExpression();
((JavaParser) javaParserTokenManager).StatementExpression();

Test 398: 
JavaParser javaParser = new JavaParser("A cat cannot extend more than one other class");

Test 399: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
((JavaParser)null).MemberValue();
((JavaParser) _void).PrimarySuffix();

Test 400: 
JavaParser javaParser = new JavaParser("string");

Test 401: 
JavaParser javaParser = new JavaParser("true");

Test 402: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NullLiteral();

Test 403: 
JavaParser javaParser = new JavaParser("\"goto\"");

Test 404: 
byte[] byteArray = new byte[3];
byteArray[0] = (byte) 'a';
byteArray[1] = (byte) 'B';
byteArray[2] = (byte) '.';
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
((JavaParser)'.').ArgumentList();

Test 405: 
JavaParser javaParser = new JavaParser("Encountered: java.lang.NullPointerException");
javaParser.AllocationExpression();

Test 406: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 407: 
JavaParser javaParser = new JavaParser("['Hello', 'World']");

Test 408: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 409: 

Test 410: 
SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
((JavaParser)null).Statement();

Test 411: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BlockStatement();

Test 412: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
((JavaParser)null).BlockStatement();

Test 413: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).Statement();

Test 414: 
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 1024, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).Statement();

Test 415: 
StringReader stringReader = new StringReader("Yes");
JavaParser javaParser = new JavaParser(stringReader);

Test 416: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
((JavaParser)null).MemberValue();
((JavaParser) _void).BlockStatement();
String string = "S-U3:c[1234567890, true]";
SystemInUtil.addInputLine(string);
String string = "EmptyStatement";
JavaParser javaParser = new JavaParser(string);

Test 417: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
((JavaParser)null).BlockStatement();

Test 418: 
JavaParser javaParser = new JavaParser("");

Test 419: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) "This is a sample string.");
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).BlockStatement();

Test 420: 
SystemInUtil.addInputLine("private String myField;");
SystemInUtil.addInputLine("public void myMethod() {}");

Test 421: 
JavaParser javaParser = new JavaParser("My String Value");
((JavaParser)"My String Value").LocalVariableDeclaration();

Test 422: 
JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");

Test 423: 
StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 424: 
JavaParser javaParser = new JavaParser("Multiple extends clauses are not allowed for classes in this context");

Test 425: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 426: 
StringReader stringReader = new StringReader("Hello, World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 427: 
StringReader stringReader = new StringReader("This is a sample string that will be used to test the JavaParser library.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 428: 
StringReader stringReader = new StringReader("This is a sample input string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 429: 
StringReader stringReader = new StringReader("A?eJxMkHsWo9BmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();
String string = "A?eJxMkHsWo9BmQ;?ENiX?HAw:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchStatement();

Test 430: 
int _int = 12345;
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) "This is a sample string", 12345);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) _int).SwitchStatement();

Test 431: 

Test 432: 
JavaParser javaParser = new JavaParser("123456789");

Test 433: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 434: 

Test 435: 
JavaParser javaParser = new JavaParser("This is a test string that will be used to demonstrate the use of while statement in Java.");

Test 436: 
StringReader stringReader = new StringReader("This is a test string. This is another test string.");
JavaParser javaParser = new JavaParser(stringReader);

Test 437: 

Test 438: 
StringReader stringReader = new StringReader("A");
int _int = 36;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 58, 36);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)36).UnaryExpression();
((JavaParser) _int).ForInit();

Test 439: 
SystemInUtil.addInputLine("This is a sample input for testing");
JavaParser javaParser = new JavaParser("This is a string with special characters");
((JavaParser)null).ForInit();

Test 440: 
SystemInUtil.addInputLine("hello");
String string = "goodbye";
SystemInUtil.addInputLine("goodbye");
JavaParser javaParser = new JavaParser("goodbye");
((JavaParser)"goodbye").UnaryExpression();
((JavaParser) string).ForInit();

Test 441: 
StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 442: 
JavaParser javaParser = new JavaParser("\"throw\"");

Test 443: 

Test 444: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ContinueStatement();

Test 445: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 446: 

Test 447: 

Test 448: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 449: 
JavaParser javaParser = new JavaParser("text");

Test 450: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");

Test 451: 
JavaParser javaParser = new JavaParser("Test string");

Test 452: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();
String string = "10000000000000000000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RSIGNEDSHIFT();

Test 453: 
JavaParser javaParser = new JavaParser("helloworld");

Test 454: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();
((JavaParser) stringReader).Annotation();

Test 455: 
StringReader stringReader = new StringReader("\"This is a sample string for testing\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)82).MemberValue();

Test 456: 
JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");

Test 457: 

Test 458: 

Test 459: 
StringReader stringReader = new StringReader("\"hello world\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

Test 460: 
StringReader stringReader = new StringReader("This is a test string with some special characters like !@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).MemberValue();

Test 461: 
StringReader stringReader = new StringReader("\"<=\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"+\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
String string = "\"-\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 462: 
SystemInUtil.addInputLine("42");
JavaParser javaParser = new JavaParser("Hello, world!");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).MemberValue();

Test 463: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();

Test 464: 
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser)5).MemberValue();

Test 465: 
JavaParser javaParser = new JavaParser("1234567890");

Test 466: 
StringReader stringReader = new StringReader("\"This is a test input for the JavaParser class\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValueArrayInitializer();

Test 467: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeBody();

Test 468: 
JavaParser javaParser = new JavaParser((Reader) "Test data for testing the parser");

Test 469: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 123456789");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 123456789");
((JavaParser)null).Expression();
((JavaParser) _void).AnnotationTypeMemberDeclaration();

Test 470: 
StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 471: 
StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaCharStream).AnnotationTypeMemberDeclaration();

Test 472: 
StringReader stringReader = new StringReader("@interface MyAnnotation { void myMethod() {} }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 473: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);

Test 474: 
JavaParser javaParser = new JavaParser("Lexical error detected in input stream.");
((JavaParser)"Lexical error detected in input stream.").DefaultValue();

Test 475: 
StringReader stringReader = new StringReader("// Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).getNextToken();

Test 476: 
StringReader stringReader = new StringReader("-1234567890.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
((JavaParser) stringReader).ReInit((InputStream) pipedInputStream);

Test 477: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 478: 

Test 479: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : InvalidState");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : InvalidState");
((JavaParser)null).NameList();
int _int = 1558;
((JavaParser) _void).MethodDeclaration(_int);

Test 480: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : 1234");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : 1234");
((JavaParser)null).Type();

Test 481: 
StringReader stringReader = new StringReader("\"java.util.List<String>\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 482: 
StringReader stringReader = new StringReader("Test input for parsing a valid Java program");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ResultType();

Test 483: 
StringReader stringReader = new StringReader("\"The quick brown fox jumps over the lazy dog, which is part of the larger group of animals that are known for their intelligence. The fox is also known for its cunning and adaptability, and has been observed using various techniques to outsmart its prey.\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Name();

Test 484: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 485: 
StringReader stringReader = new StringReader("10 > 5 && !((7 < 9 || (3 == 3 && 4 > 2)) && 6 == 6)");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 486: 
StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
int read = ((Reader)"pR+U?d\"V_roX").read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) read).ConditionalOrExpression();

Test 487: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-123XR[");
((JavaParser)null).ConditionalAndExpression();
((JavaParser) _void).PrimaryPrefix();

Test 488: 
JavaParser javaParser = new JavaParser("This is a sample input string for testing");

Test 489: 
StringReader stringReader = new StringReader("Happy New Year!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 490: 

Test 491: 

Test 492: 
StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaCharStream) stringReader).BeginToken();
((JavaParser) javaParserTokenManager).EqualityExpression();

Test 493: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();
String string = "Error: Ignoring invalid lexical state : InvalidCharacter";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).EqualityExpression();

Test 494: 

Test 495: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.InstanceOfExpression();

Test 496: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 497: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 498: 
StringReader stringReader = new StringReader("1+2*3-4/5");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 499: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
((JavaParser)null).AdditiveExpression();

Test 500: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
((JavaParser)null).AdditiveExpression();

Test 501: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AdditiveExpression();

Test 502: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
int _int = 3073;
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)3073).UnaryExpressionNotPlusMinus();
((JavaParser) _int).MultiplicativeExpression();

Test 503: 
StringReader stringReader = new StringReader("John Doe");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)86).UnaryExpression();

Test 504: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 3073, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).VariableInitializer();
((JavaParser) javaParserTokenManager).UnaryExpression();

Test 505: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 506: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 507: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser)8).UnaryExpression();

Test 508: 
SystemInUtil.addInputLine("2019-12-31 23:59:59");
JavaParser javaParser = new JavaParser("2019-12-31 23:59:59");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).UnaryExpressionNotPlusMinus();

Test 509: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 510: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
((JavaParser)null).UnaryExpressionNotPlusMinus();

Test 511: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) 100, 100, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
((JavaParser) javaParserTokenManager).UnaryExpressionNotPlusMinus();

Test 512: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("int x = 5; int y = 10; z = x + y;");
((JavaParser)null).PostfixExpression();

Test 513: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();
String string = "\"abcdefg\"";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 514: 
JavaParser javaParser = new JavaParser("!prements");

Test 515: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
((JavaParser)null).PrimaryPrefix();

Test 516: 
JavaParser javaParser = new JavaParser("public class MyClass { private int myField; }");
javaParser.PrimaryPrefix();

Test 517: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 518: 

Test 519: 
StringReader stringReader = new StringReader("<!DOCTYPE html><html><head><title>Test Title</title></head><body><h1>Hello, world!</h1></body></html>");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Block();

Test 520: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : 42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpression();

Test 521: 

Test 522: 
JavaParser javaParser = new JavaParser("This is a string.");
((JavaParser)"This is a string.").MarkerAnnotation();

Test 523: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");

Test 524: 
StringReader stringReader = new StringReader("text");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
int _int = 108;
((JavaParser) stringReader).getToken(_int);

Test 525: 
StringReader stringReader = new StringReader("TO{\"A-#-(B\"^>]");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 526: 
StringReader stringReader = new StringReader("implements");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePair();

Test 527: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
((JavaParser)null).MethodDeclarator();

Test 528: 
String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : 123456789";
JavaParser.main(stringArray);

Test 529: 
StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();
String string = "+58%\"k'\"=1o:IIx 8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).generateParseException();


* Minimizing test suite
* test suite isTestSuite: 295
Test 0: 
JavaParser javaParser = new JavaParser("?BT%");
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("@03W*A)3Fr:;(do{");
FileSystemHandling.appendStringToFile(evoSuiteFile, "@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
Test 2: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (-99), 10);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.dump((Writer) null);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 0 >= 0
   //
   verifyException("java.util.Vector", e);
}

Test 4: 
StringReader stringReader = new StringReader("V|9n,)lT'A_\".Q06KJ/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) null);
Test 5: 
JavaParser javaParser = new JavaParser(">>>");
javaParser.disable_tracing();
Test 6: 
JavaParser javaParser = new JavaParser("(y(O:<mcr|lFfG`G");
javaParser.enable_tracing();
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(16);
Test 8: 
JavaParser.ModifierSet.removeModifier(58, 16);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic(33);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(81);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(791);
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate(16);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1969));
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic((-3004));
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(30);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(64);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(8);
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal((-832));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(59);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative(512);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-1831));
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(207);
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-1));
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized(55);
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-414));
Test 26: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(8);
Test 27: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2342);
Test 28: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile((byte)54);
Test 29: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(3672);
Test 30: 
String[] stringArray = new String[0];
JavaParser.main(stringArray);
Test 31: 
String[] stringArray = new String[4];
JavaParser.main(stringArray);
Test 32: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 33: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Modifiers();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
StringReader stringReader = new StringReader("++");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ++
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaParser javaParser = new JavaParser(mockFileInputStream);
try { 
  javaParser.ClassOrInterfaceDeclaration(103);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 39: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.ImplementsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.EnumDeclaration((-815));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(1284);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
StringReader stringReader = new StringReader("Q'BR=g6");
stringReader.read();
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.EnumDeclaration(0);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"R\" (82), after : \"\\'B\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 44: 
JavaParser javaParser = new JavaParser("Q]");
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 46: 
JavaParser javaParser = new JavaParser("7Q]");
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 51: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 52: 
StringReader stringReader = new StringReader("[");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 53: 
JavaParser javaParser = new JavaParser("instanceof");
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 55: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("O5;K;M8yek+fg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
StringReader stringReader = new StringReader("[i@PJ!d[");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 61: 
SystemInUtil.addInputLine(".  Encounterd: ");
JavaParser javaParser = new JavaParser(".  Encounterd: ");
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 26.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
JavaParser javaParser = new JavaParser("E!54ca");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.ForInit();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 66: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.getNextToken();
Test 68: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 69: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
StringReader stringReader = new StringReader("?BT ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: /
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
StringReader stringReader = new StringReader("[");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-3525), (-3525));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line -3525, column -3525.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 75: 
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader("\"==");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 113, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.MethodDeclaration(21);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 113, column -410.  Encountered: <EOF> after : \"\\\"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 77: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
StringReader stringReader = new StringReader("4}8>xsT");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 79: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 80: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 82: 
StringReader stringReader = new StringReader("5R5NOx'%5';");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 5
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 83: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
JavaParser javaParser = new JavaParser(">>}>");
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 87: 
JavaParser javaParser = new JavaParser("9N8;I1C2|#&\"FZ?/");
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FieldDeclaration((-3393));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.VariableDeclarator();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("bQ");
javaParser.TypeArgument();
Test 93: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 94: 
StringReader stringReader = new StringReader("\"Ef");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\\"Ef\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 95: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
StringReader stringReader = new StringReader("\"zra;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"zra;\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 97: 
JavaParser javaParser = new JavaParser("Pk/Hha'c");
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ResultType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 99: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 100: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 101: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 102: 
byte[] byteArray = new byte[4];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.NameList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 103: 
JavaParser javaParser = new JavaParser("Zd+Au{rL}FE;");
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 105: 
SystemInUtil.addInputLine("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser("TypeParameters");
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"&\" (38), after : \"\\'3\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 106: 
JavaParser javaParser = new JavaParser("]~ w{m;SC#|iw=#");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
SystemInUtil.addInputLine(":(HT%");
JavaParser javaParser = new JavaParser(":(HT%");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("|zGA0{_}PAGT");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("R9qU^:N[d^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("m&1t%q6],R3Ufn\"VPt");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, (-4525), 64);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValue();
Test 112: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)98;
byteArray[1] = (byte)60;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("cm.soops.CEN4010.JM>A.JParser.JavaParser$LooaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
Test 114: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 115: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
StringReader stringReader = new StringReader("ZeOrA*C|4n1F35}");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ExclusiveOrExpression();
Test 117: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source.getNextToken();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
SystemInUtil.addInputLine("A class cannot extend more than one other class");
JavaParser javaParser = new JavaParser("An interface cannot have initializers");
javaParser.TypeArgument();
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: class
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader(")l**3N6)wvgY-F)");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("[*FhH1tX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader("com.soops.CEN4010.MCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Modifiers();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3076.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, (-728));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column -728.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.InclusiveOrExpression();
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 129: 
byte[] byteArray = new byte[2];
byteArray[0] = (byte)126;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 130: 
StringReader stringReader = new StringReader("?BT%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
SystemInUtil.addInputLine("+");
JavaParser javaParser = new JavaParser("O");
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.Name();
javaParser.MemberValue();
Test 133: 
JavaParser javaParser = new JavaParser("aD0S`Z4's21sleM{");
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 135: 
StringReader stringReader = new StringReader("6Ok@S9@^!ET:w/:CmiM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
StringReader stringReader = new StringReader("]");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 137: 
JavaParser javaParser = new JavaParser("\"implements\"");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 64);
PushbackInputStream pushbackInputStream = new PushbackInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(pushbackInputStream);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 142: 
JavaParser javaParser = new JavaParser("R9qU^:N[d^");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 58.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader("");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 101, 53, 1243);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 101, column 52.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 147: 
JavaParser javaParser = new JavaParser("A cla_k cann6t extend more than one other class");
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
JavaParser javaParser = new JavaParser("S<");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
JavaParser javaParser = new JavaParser("<DIGIT>");
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("catch");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: catch
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
JavaParser javaParser = new JavaParser("\"goto\"");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 153: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArgumentList();
Test 154: 
byte[] byteArray = new byte[3];
byteArray[0] = (byte)98;
byteArray[1] = (byte)98;
byteArray[2] = (byte)44;
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
JavaParser javaParser = new JavaParser("Encountered: java.lang.NullPointerException");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 157: 
JavaParser javaParser = new JavaParser("-=");
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 160: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 161: 
SystemInUtil.addInputLine("Error: gnoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: gnoring invalid lexical state : ");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 16.  Encountered: invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: W
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 2108, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Statement();
Test 165: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
SystemInUtil.addInputLine("S-U3:c[");
JavaParser javaParser = new JavaParser("EmptyStatement");
javaParser.MemberValue();
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
SystemInUtil.addInputLine("?BT%");
JavaParser javaParser = new JavaParser("2W@|Y");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
JavaCharStream javaCharStream = new JavaCharStream((Reader) null);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 171: 
SystemInUtil.addInputLine("J\"`I'Vx");
JavaParser javaParser = new JavaParser((String) null);
// Undeclared exception!
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"`I\\'Vx\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 172: 
JavaParser javaParser = new JavaParser("_^yq|D&");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
JavaParser javaParser = new JavaParser("bCLQ/hfhF-Y(+");
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
JavaParser javaParser = new JavaParser("{`QR7C@8e9S6J$7RQ");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
StringReader stringReader = new StringReader("\"implements\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 176: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 178: 
StringReader stringReader = new StringReader("!Z5");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 179: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 180: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 181: 
SystemInUtil.addInputLine("d#\u0005O&-}1hL$e]>b");
JavaParser javaParser = new JavaParser("\"throw\"");
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 182: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 183: 
StringReader stringReader = new StringReader("A?eJBmQ;?ENiX?HAw:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: A
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 185: 
JavaParser javaParser = new JavaParser("_`0orp TI2");
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.IfStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 187: 
JavaParser javaParser = new JavaParser("6kwncF_ACE<t'-");
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 189: 
StringReader stringReader = new StringReader("\":\"");
char[] charArray = new char[1];
stringReader.read(charArray);
stringReader.skip(1);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
JavaParser javaParser = new JavaParser("&=");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 191: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
SystemInUtil.addInputLine("g");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
SystemInUtil.addInputLine(",*C#4[-_^e3O{(g| oa");
JavaParser javaParser = new JavaParser("u.hEI");
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
SystemInUtil.addInputLine("g");
SystemInUtil.addInputLine("@03W*A)3Fr:;(do{");
JavaParser javaParser = new JavaParser("@03W*A)3Fr:;(do{");
javaParser.UnaryExpression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 2, column 1.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
StringReader stringReader = new StringReader("<CoD|{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 196: 
StringReader stringReader = new StringReader("Z");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token = null;
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 197: 
JavaParser javaParser = new JavaParser("`V=");
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 200: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser("#`odp TI2");
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 203: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 204: 
JavaParser javaParser = new JavaParser("teX");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 206: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Y
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 210: 
StringReader stringReader = new StringReader("@03W*A)3Fr:;(do{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 82, 82);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 82, column 83.  Encountered: 03
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
JavaParser javaParser = new JavaParser("I3Nd>XFxfAqJ");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 212: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 215: 
StringReader stringReader = new StringReader("6kwncF_ACE<t'-");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 216: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
Test 217: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
StringReader stringReader = new StringReader(";_2kbAUttJW r>:Dg");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 219: 
StringReader stringReader = new StringReader("y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.MemberValue();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 221: 
JavaParser javaParser = new JavaParser("p72vWj3ae(u");
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 222: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 223: 
StringReader stringReader = new StringReader("\"ati#e?");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"ati#e?\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 224: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 225: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Expression();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 227: 
StringReader stringReader = new StringReader("instanceof");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: instanceof
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("8'3&xbutR#EZyV^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 8
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("\"==\"");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 100, (-413));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 100, column -413.  Encountered: \"==\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader(")");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 233: 
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("/Dfdjuh:3u!xl!?");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.getNextToken();
Test 236: 
StringReader stringReader = new StringReader("-.MZ#Y");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 237: 
JavaParser javaParser = new JavaParser("[Q8f>Y");
javaParser.CompilationUnit();
Test 238: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 239: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.NameList();
try { 
  javaParser.MethodDeclaration(1558);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 240: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.Type();
Test 241: 
SystemInUtil.addInputLine("Q]");
JavaParser javaParser = new JavaParser("");
javaParser.StatementExpressionList();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 243: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
StringReader stringReader = new StringReader("Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ResultType();
Test 245: 
StringReader stringReader = new StringReader("\"volatile\"");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: \"volatile\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 246: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 247: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 248: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 249: 
StringReader stringReader = new StringReader("E])A");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalOrExpression();
Test 250: 
StringReader stringReader = new StringReader("pR+U?d\"V_roX");
char[] charArray = new char[6];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"V_roX\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 251: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("-1XR[");
javaParser.ConditionalAndExpression();
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 252: 
JavaParser javaParser = new JavaParser("vm_.Y<-okQv!'&CE");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null, 0);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 254: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 255: 
StringReader stringReader = new StringReader("catch");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaCharStream.BeginToken();
javaParser.EqualityExpression();
Test 256: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 257: 
byte[] byteArray = new byte[9];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 258: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 259: 
StringReader stringReader = new StringReader("2W@|Y");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 260: 
JavaParser javaParser = new JavaParser("?BT%");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 261: 
byte[] byteArray = new byte[16];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream);
BufferedInputStream bufferedInputStream = new BufferedInputStream(dataInputStream);
JavaParser javaParser = new JavaParser(bufferedInputStream);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 262: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: |
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 263: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
javaParser.AdditiveExpression();
Test 264: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 265: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 266: 
StringReader stringReader = new StringReader("Zd+Au{rL}FE;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
// Undeclared exception!
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 267: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.UnaryExpressionNotPlusMinus();
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 268: 
StringReader stringReader = new StringReader("?B\"\"H~.r;Ir|v");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 86);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 86.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 3073, column 3130.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 270: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 271: 
StringReader stringReader = new StringReader("u.hEI");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 128, 8, 8);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 128, column 10.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 272: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.StatementExpressionList();
javaParser.UnaryExpressionNotPlusMinus();
Test 273: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 274: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser("uz+N?8f3k,>Yh41");
javaParser.UnaryExpressionNotPlusMinus();
Test 275: 
StringReader stringReader = new StringReader("ejs\">Y32JW");
JavaCharStream javaCharStream = new JavaCharStream(stringReader, 3073, 3073);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 3073, column 3083.  Encountered: <EOF> after : \"\\\">Y32JW\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 276: 
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
JavaParser javaParser = new JavaParser("uz+cNo8Hf3k,>Yh41");
javaParser.PostfixExpression();
Test 277: 
StringReader stringReader = new StringReader("\"==\"");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 278: 
StringReader stringReader = new StringReader("}|To<x2>Sbg>)l)r{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 279: 
JavaParser javaParser = new JavaParser("!prements");
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 280: 
SystemInUtil.addInputLine("2W@|Y");
JavaParser javaParser = new JavaParser(".  Encountered: ");
javaParser.PrimaryPrefix();
Test 281: 
SystemInUtil.addInputLine("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser("Error: Ignoring invalid lexical state : ");
javaParser.PrimaryPrefix();
Test 282: 
StringReader stringReader = new StringReader("Q]");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 283: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$1");
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 284: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 285: 
StringReader stringReader = new StringReader("Error: Ignoring invalid lexical state : ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpression();
Test 286: 
StringReader stringReader = new StringReader("aD0S`Z4's21sleM{");
JavaCharStream javaCharStream = new JavaCharStream(stringReader);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 287: 
JavaParser javaParser = new JavaParser(",h21OcZ!a:{pH[");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 288: 
StringReader stringReader = new StringReader("implrements");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 11.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 289: 
JavaParser javaParser = new JavaParser("A class cannot extend more than one other class");
try { 
  javaParser.AnnotationTypeDeclaration(63);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 290: 
StringReader stringReader = new StringReader("teX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.getToken(108);
Test 291: 
StringReader stringReader = new StringReader("r7@");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 292: 
SystemInUtil.addInputLine("CE+|cY\"MohOmhjM->z");
JavaParser javaParser = new JavaParser("An interface cannot implement other interfaces");
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: +
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 293: 
String[] stringArray = new String[1];
stringArray[0] = "Error: Ignoring invalid lexical state : ";
JavaParser.main(stringArray);
Test 294: 
StringReader stringReader = new StringReader("+58%\"k'\"=1o:IIx 8");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 29%
* Total number of goals: 7938
* Number of covered goals: 2323
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 45%
* Total number of goals: 4940
* Number of covered goals: 2237
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 9
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 134
* Number of covered goals: 133
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 28%
* Total number of goals: 7938
* Number of covered goals: 2203
* Generated 295 tests with total length 901
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: Class too large: com/soops/CEN4010/JMCA/JParser/JavaParser
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.324 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:32:37.345 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.353 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:32:37.366 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:237)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 23 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:241)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 20 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.380 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:460)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 22 common frames omitted
[MASTER] 22:32:37.398 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.404 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:32:37.417 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.423 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.434 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.440 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.452 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.458 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.470 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.475 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.487 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.493 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.506 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.512 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.525 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.531 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.545 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.551 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.564 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.570 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.584 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:32:37.591 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:32:37.605 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:538)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:221)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
* Error while initializing target class: com/soops/CEN4010/JMCA/JParser/JavaParser
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
[MASTER] 22:32:37.656 [logback-1] WARN  SimpleMutationAssertionGenerator - Could not initialize SUT before Assertion generation
[MASTER] 22:32:38.078 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.080 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.081 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.081 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:32:38.081 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
* Computation finished
