* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JParser.JavaParser
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 15869
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:31:33.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:31:33.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:31:33.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:31:33.924 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JParser.JavaParser
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 20959
* Using seed 1709245889665
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 2618 / 20959
[Progress:>                             1%] [Cov:===>                               11%][Progress:>                             3%] [Cov:====>                              14%][Progress:=>                            4%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:======>                            18%][Progress:=>                            6%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:=======>                           21%][Progress:====>                         14%] [Cov:========>                          23%][Progress:====>                         15%] [Cov:========>                          25%][Progress:====>                         16%] [Cov:=========>                         26%][Progress:=====>                        18%] [Cov:=========>                         26%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:==========>                        29%][Progress:========>                     29%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:==========>                        30%][Progress:=========>                    32%] [Cov:==========>                        31%][Progress:==========>                   34%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:============>                      35%][Progress:=============>                44%] [Cov:============>                      35%][Progress:=============>                45%] [Cov:============>                      35%][Progress:==============>               47%] [Cov:============>                      36%][Progress:==============>               48%] [Cov:============>                      36%][Progress:===============>              50%] [Cov:============>                      36%][Progress:===============>              51%] [Cov:============>                      36%][Progress:===============>              52%] [Cov:============>                      36%][Progress:================>             54%] [Cov:============>                      37%][Progress:================>             55%] [Cov:============>                      37%][Progress:=================>            57%] [Cov:==============>                    40%][Progress:=================>            58%] [Cov:==============>                    40%][Progress:=================>            59%] [Cov:==============>                    40%][Progress:==================>           60%] [Cov:==============>                    41%][Progress:==================>           61%] [Cov:==============>                    41%][Progress:==================>           62%] [Cov:==============>                    41%][Progress:==================>           63%] [Cov:==============>                    41%][Progress:=====================>        70%] [Cov:==============>                    42%][Progress:======================>       76%] [Cov:==============>                    42%][Progress:=======================>      78%] [Cov:==============>                    42%][Progress:=========================>    85%] [Cov:==============>                    42%][Progress:=========================>    86%] [Cov:===============>                   43%][Progress:==========================>   88%] [Cov:===============>                   43%][Progress:==========================>   89%] [Cov:===============>                   43%][Progress:===========================>  91%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:============================> 94%] [Cov:===============>                   43%][Progress:==============================100%] [Cov:===============>                   43%]
* Search finished after 104s and 46 generations, 15701 statements, best individual has fitness: 13585.0
* Generated before the refinement 285 tests with total length 860
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit(javaParser.token_source)
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ReInit(javaParser.token_source);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReInit(javaParser.token_source), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(javaParser.token_source) target is: javaParser method is: ReInit()
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1") type is: class org.evosuite.testcase.statements.environment.FileNamePrimitiveStatement return type class org.evosuite.runtime.testdata.EvoSuiteFile
statement code is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1")
statement is: appendLineToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean appendLineToFile = FileSystemHandling.appendLineToFile(arg0, "ShiftExpression")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
test data is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1");
FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression");
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1");
        FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression");
        JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
    }
}
statement is: EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression") target is: FileSystemHandling method is: appendLineToFile(EvoSuiteFile,java.lang.String)
Matched Method is: appendLineToFile(Lorg/evosuite/runtime/testdata/EvoSuiteFile;Ljava/lang/String;)Z
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "ShiftExpression";
String string = null;
FileSystemHandling.appendLineToFile((EvoSuiteFile) string, string);
String string = "x(sirCQ`7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReInit(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((Reader) arg0)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) stringReader);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: 'JavaParser' or 'JavaParser'");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReInit(((Reader) (stringReader)));
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: 'JavaParser' or 'JavaParser'"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((Reader) (stringReader))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((Reader) (stringReader))) target is: javaParser method is: ReInit(Reader)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReInit(Ljava/io/Reader;)V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of: 'JavaParser' or 'JavaParser'";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReInit((Reader) stringReader);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: disable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.disable_tracing()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.disable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream("Hello World");
        JavaParser javaParser = new JavaParser(pipedInputStream);
        javaParser.disable_tracing();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream("Hello World"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.disable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.disable_tracing() target is: javaParser method is: disable_tracing()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("zs!Sw")
statement is: enable_tracing()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.enable_tracing()
test data is: JavaParser javaParser = new JavaParser("zs!Sw");
javaParser.enable_tracing();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser("This is a sample input string for testing purposes.");
        javaParser.enable_tracing();
    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser("This is a sample input string for testing purposes."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.enable_tracing(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.enable_tracing() target is: javaParser method is: enable_tracing()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: enable_tracing()V
TestCase is: String string = "This is a sample input string for testing purposes.";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).enable_tracing();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic((byte)0)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPublic(((byte) (2)));
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPublic(((byte) (2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic(((byte) (2))) target is: javaParser_ModifierSet method is: isPublic(byte)
statement is: removeModifier(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int removeModifier = JavaParser.ModifierSet.removeModifier(12, 12)
test data is: JavaParser.ModifierSet.removeModifier(12, 12);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ModifierSet.removeModifier(12, "Awesome Test");
    }
}
statement is: ModifierSet.removeModifier(12, "Awesome Test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ModifierSet.removeModifier(12, "Awesome Test") target is: ModifierSet method is: removeModifier(int,java.lang.String)
Matched Method is: removeModifier(II)I
TestCase is: int _int = 12;
String string = "Awesome Test";
JavaParser.ModifierSet.removeModifier(_int, (int) string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPublic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean public = javaParser_ModifierSet.isPublic((byte)99)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)99);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(49)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(49);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isProtected("protected");
        javaParser_ModifierSet.isFinal("final");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isProtected("protected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isProtected("protected") target is: javaParser_ModifierSet method is: isProtected(java.lang.String)
statement is: javaParser_ModifierSet.isFinal("final"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal("final") target is: javaParser_ModifierSet method is: isFinal(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isProtected(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean protected = javaParser_ModifierSet.isProtected(82)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(82);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet modifiers = new JavaParser.ModifierSet();
        assertTrue(modifiers.isProtected(PROTECTED));
        assertFalse(modifiers.isProtected(PUBLIC));
    }
}
statement is: Parser.ModifierSet modifiers = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(modifiers.isProtected(PROTECTED)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(modifiers.isProtected(PROTECTED)) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(modifiers.isProtected(PUBLIC)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(modifiers.isProtected(PUBLIC)) target is:  method is: assertFalse(<unknown>)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate((-1605))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1605));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(2);// Changed from -1605 to 2 to make the test data more descriptive and representative of the situation being tested }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(2)// Changed from -1605 to 2 to make the test data more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(2)// Changed from -1605 to 2 to make the test data more descriptive and representative of the situation being tested }}
 target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isPrivate(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean private = javaParser_ModifierSet.isPrivate((-1604))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1604));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPrivate(2);// Changed from -1604 to 2 to make the test data more descriptive and representative of the situation being tested }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPrivate(2)// Changed from -1604 to 2 to make the test data more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPrivate(2)// Changed from -1604 to 2 to make the test data more descriptive and representative of the situation being tested }}
 target is: javaParser_ModifierSet method is: isPrivate(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic(3010)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(3010);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isPublic(3010);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isPublic(3010), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isPublic(3010) target is: javaParser_ModifierSet method is: isPublic(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStatic(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean static = javaParser_ModifierSet.isStatic(2393)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(2393);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStatic("TestString");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStatic("TestString"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStatic("TestString") target is: javaParser_ModifierSet method is: isStatic(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isAbstract(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = javaParser_ModifierSet.isAbstract(1877)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(1877);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isAbstract("ABSTRACT");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isAbstract("ABSTRACT"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isAbstract("ABSTRACT") target is: javaParser_ModifierSet method is: isAbstract(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal(27)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(27);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal(27);
        // Changed from 27 to 45, which is a more descriptive and representative value for the modifier set
        JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal(45);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal(27), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(27) target is: javaParser_ModifierSet method is: isFinal(int)
statement is: // Changed from 27 to 45, which is a more descriptive and representative value for the modifier set
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal(45), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal(45) target is: javaParser_ModifierSet method is: isFinal(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isFinal(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean final = javaParser_ModifierSet.isFinal(37)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(37);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isFinal("Awesome");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isFinal("Awesome"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isFinal("Awesome") target is: javaParser_ModifierSet method is: isFinal(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-210))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-210));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(true);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(true) target is: javaParser_ModifierSet method is: isNative(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isNative(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean native = javaParser_ModifierSet.isNative((-2601))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2601));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isNative(1);// Changed the value to 1 to make it more descriptive and representative of the situation being tested }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isNative(1)// Changed the value to 1 to make it more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isNative(1)// Changed the value to 1 to make it more descriptive and representative of the situation being tested }}
 target is: javaParser_ModifierSet method is: isNative(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp(71)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(71);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(Double.POSITIVE_INFINITY);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(Double.POSITIVE_INFINITY), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(Double.POSITIVE_INFINITY) target is: javaParser_ModifierSet method is: isStrictfp(double)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isStrictfp(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean strictfp = javaParser_ModifierSet.isStrictfp((-3621))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-3621));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isStrictfp(true);// Set to true because strictfp is a modifier that requires the use of the 'strictfp' keyword when declaring methods or variables }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isStrictfp(true)// Set to true because strictfp is a modifier that requires the use of the 'strictfp' keyword when declaring methods or variables }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isStrictfp(true)// Set to true because strictfp is a modifier that requires the use of the 'strictfp' keyword when declaring methods or variables }}
 target is: javaParser_ModifierSet method is: isStrictfp(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized((-210))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-210));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(true);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(true) target is: javaParser_ModifierSet method is: isSynchronized(boolean)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isSynchronized(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean synchronized = javaParser_ModifierSet.isSynchronized((-3465))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-3465));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isSynchronized(1);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isSynchronized(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isSynchronized(1) target is: javaParser_ModifierSet method is: isSynchronized(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient(2101)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2101);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isTransient("TRANSIENT");
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isTransient("TRANSIENT"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isTransient("TRANSIENT") target is: javaParser_ModifierSet method is: isTransient(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isTransient(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean transient = javaParser_ModifierSet.isTransient((-1))
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isTransient(10);
    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isTransient(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isTransient(10) target is: javaParser_ModifierSet method is: isTransient(int)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet
statement code is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet()
statement is: isVolatile(I)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean volatile = javaParser_ModifierSet.isVolatile(94)
test data is: JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(94);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
        javaParser_ModifierSet.isVolatile(94);// Changed from a primitive value to a more descriptive String, "VOLATILE }}

    }
}
statement is: Parser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser_ModifierSet.isVolatile(94)// Changed from a primitive value to a more descriptive String, "VOLATILE }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser_ModifierSet.isVolatile(94)// Changed from a primitive value to a more descriptive String, "VOLATILE }}
 target is: javaParser_ModifierSet method is: isVolatile(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@617489d0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[12]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[12];
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Hello", "World", "Java", "Parser" };
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[]{ "Hello", "World", "Java", "Parser" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[12] isAssignment: false Array: new String[]{ "Hello", "World", "Java", "Parser" } Elements: ["Hello", "World", "Java", "Parser"]
lengths: [12] []
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String[] stringArray = null;
JavaParser.main(stringArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!@#$%^&*()_+-=[]{}|;\':\"\\,./<>?\t\n\r\f\b\u0000");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!@#$%^&*()_+-=[]{}|;\':\"\\,./<>?\t\n\r\f\b\u0000"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CompilationUnit()V
TestCase is: String string = "PIV!@#$%^&*()_+-=[]{}|;':\"\\,./<>?\t\n\r\f\b\u0000";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).CompilationUnit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!#$@%.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!#$@%.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CompilationUnit()V
TestCase is: String string = "PIV!#$@%.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("\"strictfp\"")
statement is: CompilationUnit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CompilationUnit()
test data is: JavaParser javaParser = new JavaParser("\"strictfp\"");
javaParser.CompilationUnit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("\"strictfp\"");
        javaParser.CompilationUnit();
        // Test data for the "strictfp" keyword
        String strictfpKeyword = "\"strictfp\"";
        int lineNumber = 10;
        int columnNumber = 5;
        String filePath = "/path/to/file.java";
        // Test data for a compilation unit with the "strictfp" keyword
        CompilationUnit compilationUnit = new CompilationUnit(strictfpKeyword, lineNumber, columnNumber, filePath);
        compilationUnit.setPackageDeclaration(new PackageDeclaration("com.example"));
        compilationUnit.addClassDeclaration(new ClassDeclaration("MyClass", "class", null, new ArrayList<>()));
        // Test data for a compilation unit without the "strictfp" keyword
        CompilationUnit noStrictfpCompilationUnit = new CompilationUnit();
        noStrictfpCompilationUnit.setPackageDeclaration(new PackageDeclaration("com.example"));
    }
}
statement is: Parser javaParser = new JavaParser("\"strictfp\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: // Test data for the "strictfp" keyword
String strictfpKeyword = "\"strictfp\"", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int lineNumber = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int columnNumber = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String filePath = "/path/to/file.java", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Test data for a compilation unit with the "strictfp" keyword
CompilationUnit compilationUnit = new CompilationUnit(strictfpKeyword, lineNumber, columnNumber, filePath), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: compilationUnit.setPackageDeclaration(new PackageDeclaration("com.example")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilationUnit.setPackageDeclaration(new PackageDeclaration("com.example")) target is: compilationUnit method is: setPackageDeclaration(PackageDeclaration)
statement is: compilationUnit.addClassDeclaration(new ClassDeclaration("MyClass", "class", null, new ArrayList<>())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilationUnit.addClassDeclaration(new ClassDeclaration("MyClass", "class", null, new ArrayList<>())) target is: compilationUnit method is: addClassDeclaration(ClassDeclaration)
statement is: // Test data for a compilation unit without the "strictfp" keyword
CompilationUnit noStrictfpCompilationUnit = new CompilationUnit(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: noStrictfpCompilationUnit.setPackageDeclaration(new PackageDeclaration("com.example")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: noStrictfpCompilationUnit.setPackageDeclaration(new PackageDeclaration("com.example")) target is: noStrictfpCompilationUnit method is: setPackageDeclaration(PackageDeclaration)
* this is vulnerable: String string = "\"strictfp\""
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "/path/to/file.java"
TestCase is: String string = "\"strictfp\"";
JavaParser javaParser = new JavaParser(string);
String string = "\"strictfp\"";
int _int = 10;
int _int = 5;
String string = "/path/to/file.java";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PackageDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PackageDeclaration()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PackageDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PackageDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PackageDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PackageDeclaration() target is: javaParser method is: PackageDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PackageDeclaration()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PackageDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("r%!Mv&&Ahm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ImportDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImportDeclaration()
test data is: StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ImportDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("r%!Mv&&Ahm");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ImportDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("r%!Mv&&Ahm"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ImportDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ImportDeclaration() target is: javaParser method is: ImportDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ImportDeclaration()V
TestCase is: String string = "r%!Mv&&Ahm";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ImportDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ImportDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImportDeclaration()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ImportDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 35;
        String y = "everyone";
    }
}
statement is: int x = 35, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "everyone", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 35
* this is vulnerable: String string = "everyone"
TestCase is: int _int = 35;
String string = "everyone";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",U++Bm8g")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Modifiers()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int Modifiers = javaParser.Modifiers()
test data is: StringReader stringReader = new StringReader(",U++Bm8g");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Modifiers();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Modifiers();
    }
}
statement is: StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Modifiers(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Modifiers() target is: javaParser method is: Modifiers()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Modifiers()I
TestCase is: String string = "public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Modifiers();

statement is: mock(java.util.Enumeration<java.io.BufferedInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.BufferedInputStream>
statement code is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeDeclaration()
test data is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.TypeDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(true, true).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = new JavaParser(sequenceInputStream);
        javaParser.TypeDeclaration();
    }
}
statement is: Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.BufferedInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: doReturn(true, true).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true, true).when(enumeration).hasMoreElements() target is: doReturn(true, true).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(sequenceInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeDeclaration() target is: javaParser method is: TypeDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 2, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: TypeDeclaration()V
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).TypeDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(100)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.ClassOrInterfaceDeclaration(100);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ClassOrInterfaceDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceDeclaration(2075)
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ClassOrInterfaceDeclaration(2075);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(null);
    }
}
statement is: Parser javaParser = new JavaParser(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("usj$nV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExtendsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExtendsList(true)
test data is: StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExtendsList(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("usj$nV");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExtendsList(true);
    }
}
statement is: StringReader stringReader = new StringReader("usj$nV"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExtendsList(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExtendsList(true) target is: javaParser method is: ExtendsList(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExtendsList(Z)V
TestCase is: String string = "usj$nV";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = true;
((JavaParser) stringReader).ExtendsList(_boolean);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ExtendsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExtendsList(false)
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ExtendsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ExtendsList("java.util.ArrayList");
    }
}
statement is: Parser.ExtendsList("java.util.ArrayList"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ExtendsList("java.util.ArrayList") target is: Parser method is: ExtendsList(java.lang.String)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("0v](UxZ/dYebOU\"3/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ImplementsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImplementsList(false)
test data is: StringReader stringReader = new StringReader("0v](UxZ/dYebOU\"3/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ImplementsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ImplementsList(false);
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ImplementsList(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ImplementsList(false) target is: javaParser method is: ImplementsList(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ImplementsList(Z)V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
boolean _boolean = false;
((JavaParser) stringReader).ImplementsList(_boolean);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ImplementsList(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ImplementsList(false)
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ImplementsList(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        int x = 10;
        double y = Math.PI;
        String z = "Testing Java";
    }
}
statement is: int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = Math.PI, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Math.PI is Math
statement is: String z = "Testing Java", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Testing Java"
TestCase is: int _int = 10;
String string = "Testing Java";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumDeclaration(4357)
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumDeclaration(4357);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumDeclaration("lineNumber");
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumDeclaration("lineNumber"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumDeclaration("lineNumber") target is: javaParser method is: EnumDeclaration(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumDeclaration(I)V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
String string = "lineNumber";
((JavaParser) stringReader).EnumDeclaration((int) string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 3;// Changed from 1 to a more descriptive value

        double y = 4.5;// Changed from 2.0 to a more representative value

        String z = "Hello";// Changed from "" to a more descriptive string

        char c = 'a';// Changed from 'b' to a more representative character }}

    }
}
statement is: // Improved test data
int x = 3// Changed from 1 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 4.5// Changed from 2.0 to a more representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "Hello"// Changed from "" to a more descriptive string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// Changed from 'b' to a more representative character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 3
* this is vulnerable: double _double = 4.5
* this is vulnerable: String string = "Hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 3;
double _double = 4.5;
String string = "Hello";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EnumBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumBody()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EnumBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class Test { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EnumBody();
    }
}
statement is: StringReader stringReader = new StringReader("class Test { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumBody(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumBody() target is: javaParser method is: EnumBody()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumBody()V
TestCase is: String string = "class Test { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumBody();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameters()
test data is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("An interface can implement multiple interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameters();
    }
}
statement is: StringReader stringReader = new StringReader("An interface can implement multiple interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameters() target is: javaParser method is: TypeParameters()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameters()V
TestCase is: String string = "An interface can implement multiple interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.ReferenceType();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
TestCase is: String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).ReferenceType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.CompilationUnit();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: org.evosuite.testcase.statements.ArrayStatement@c306c15e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[5]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[5];
        stringReader.read(charArray);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: char[] charArray = new char[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: char[] charArray = new char[5] isAssignment: false Array: new char[5] Elements: []
lengths: [5] [5]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 3, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: TypeParameter()V
TestCase Could not be added: TypeParameter()V
TestCase is: char[] charArray = new char[5];
JavaParser javaParser = new JavaParser((Reader) charArray);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 10;// The variable 'x' is bound to the integer value 10, which represents a positive integer.

        double y = 20.5;// The variable 'y' is bound to the double value 20.5, which represents a non-integer decimal value.

        String str = "This is a string";// The variable 'str' is bound to the String value "This is a string", which represents a string literal.

        char c = 'a';// The variable 'c' is bound to the character 'a', which represents a single ASCII character. }}

    }
}
statement is: // Improved test data
int x = 10// The variable 'x' is bound to the integer value 10, which represents a positive integer.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 20.5// The variable 'y' is bound to the double value 20.5, which represents a non-integer decimal value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "This is a string"// The variable 'str' is bound to the String value "This is a string", which represents a string literal.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// The variable 'c' is bound to the character 'a', which represents a single ASCII character. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 20.5
* this is vulnerable: String string = "This is a string"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 10;
double _double = 20.5;
String string = "This is a string";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("V01oImNMaj:%")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeBound()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeBound()
test data is: StringReader stringReader = new StringReader("V01oImNMaj:%");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeBound();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("V01oImNMaj:This is a sample string.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeBound();
    }
}
statement is: StringReader stringReader = new StringReader("V01oImNMaj:This is a sample string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeBound(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeBound() target is: javaParser method is: TypeBound()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeBound()V
TestCase is: String string = "V01oImNMaj:This is a sample string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(true)
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBody(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StringReader stringReader = new StringReader("{()-\"myClassName");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: // Improved test data
StringReader stringReader = new StringReader("{()-\"myClassName"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "{()-\"myClassName";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";r3dkG1(sM")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@27413b3b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: javaParser.token_source = null
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(true)
test data is: StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source = null;
javaParser.ClassOrInterfaceBody(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(";r3dkG1(sM");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.token_source = null;
    }
}
statement is: StringReader stringReader = new StringReader(";r3dkG1(sM"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.token_source = null, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: String string = ";r3dkG1(sM";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: org.evosuite.testcase.statements.ArrayStatement@9dcebe9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (byte)66, 3523, (byte) (-128))
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBody(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBody(false)
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, (byte)66, 3523, (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ClassOrInterfaceBody(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, ((byte) (66)), 3523, ((byte) (-128)));
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
    }
}
statement is: byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ 0, 1, 2, 3, 4 } Elements: [0, 1, 2, 3, 4]
lengths: [5] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, ((byte) (66)), 3523, ((byte) (-128))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 66;
int _int = 3523;
JavaCharStream javaCharStream = new JavaCharStream((InputStream) _int, _int, 3523, (int) (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("42");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("42"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "42";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.EnumConstant();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.EnumConstant();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Java Parser Version 1.1: Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.ClassOrInterfaceBodyDeclaration(true);
        // Improved test data
        StringReader improvedStringReader = new StringReader("public class TestClass { }");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.ReferenceType();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
statement is: javaParser.ClassOrInterfaceBodyDeclaration(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(true) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("public class TestClass { }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.ReferenceType() target is: improvedJavaParser method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
TestCase is: String string = "public class TestClass { }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@13062215 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[2]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[2];
stringReader.read(charArray);
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        char[] charArray = new char[2];
        stringReader.read(charArray);
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: char[] charArray = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[2] Elements: []
lengths: [2] [2]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
TestCase is: char[] charArray = new char[2];

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(true)
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ClassOrInterfaceBodyDeclaration(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        javaParser.ClassOrInterfaceBodyDeclaration(true);
        String input = "class MyClass { int x; }";
        CompilationUnit cu = javaParser.parse(input, "MyClass.java");
        assertEquals("MyClass", cu.getTypes().get(0).getNameAsString());
        assertEquals("int", cu.getTypes().get(0).getFields().get(0).getType().asPrimitiveType().toString());
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceBodyDeclaration(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(true) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
statement is: String input = "class MyClass { int x; }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: CompilationUnit cu = javaParser.parse(input, "MyClass.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse(input, "MyClass.java") target is: javaParser method is: parse(java.lang.String,java.lang.String)
statement is: assertEquals("MyClass", cu.getTypes().get(0).getNameAsString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("MyClass", cu.getTypes().get(0).getNameAsString()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("int", cu.getTypes().get(0).getFields().get(0).getType().asPrimitiveType().toString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("int", cu.getTypes().get(0).getFields().get(0).getType().asPrimitiveType().toString()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "class MyClass { int x; }"
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
String string = "class MyClass { int x; }";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Invalid escape character at line ")
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: JavaParser javaParser = new JavaParser("Invalid escape character at line ");
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 10;
        double y = 20.5;
        String z = "A descriptive string for testing purposes";
    }
}
statement is: // Improved test data
int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 20.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "A descriptive string for testing purposes", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 20.5
* this is vulnerable: String string = "A descriptive string for testing purposes"
TestCase is: int _int = 10;
double _double = 20.5;
String string = "A descriptive string for testing purposes";

statement is: org.evosuite.testcase.statements.ArrayStatement@5850d3e8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.VariableDeclarator();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.VariableDeclarator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclarator() target is: javaParser method is: VariableDeclarator()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("interface")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("interface");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("interface"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "interface";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: mock(java.util.Enumeration<java.io.BufferedInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.BufferedInputStream>
statement code is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0, (-857), (-857), 32)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, (-857), (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        List<Integer> integers = Arrays.asList();
        doReturn(integers).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, -857, -857, 32);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
        assertNull(javaParser.VariableInitializer());
    }
}
statement is: Enumeration<BufferedInputStream> enumeration = ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<BufferedInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.BufferedInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: List<Integer> integers = Arrays.asList(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList() target is: Arrays method is: asList()
statement is: doReturn(integers).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(integers).when(enumeration).hasMoreElements() target is: doReturn(integers).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, -857, -857, 32), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertNull(javaParser.VariableInitializer()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNull(javaParser.VariableInitializer()) target is:  method is: assertNull(<unknown>)
TestCase is: boolean _boolean = null;
boolean _boolean = null;
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean, _boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 32;
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, _int, (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.VariableInitializer();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(",")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(",");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader(","), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = ",";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        javaParser.VariableInitializer("myString");
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer("myString"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer("myString") target is: javaParser method is: VariableInitializer(java.lang.String)
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string that will be used to parse the Java code.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string that will be used to parse the Java code."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
TestCase is: String string = "This is a test string that will be used to parse the Java code.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclaration((-1583))
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MethodDeclaration((-1583));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MethodDeclaration("myMethodName");
    }
}
statement is: StringReader stringReader = new StringReader("PIV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MethodDeclaration("myMethodName"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MethodDeclaration("myMethodName") target is: javaParser method is: MethodDeclaration(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MethodDeclaration(I)V
TestCase is: String string = "PIV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
String string = "myMethodName";
((JavaParser) stringReader).MethodDeclaration((int) string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameter();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
statement is: org.evosuite.testcase.statements.ArrayStatement@72eb3522 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameter()
test data is: byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.FormalParameter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        byte[] byteArray = new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.FormalParameter();
    }
}
statement is: // Improved test data
byte[] byteArray = new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ ((byte) (0xab)), ((byte) (0xcd)) } Elements: [((byte) (0xab)), ((byte) (0xcd))]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.FormalParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameter() target is: javaParser method is: FormalParameter()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: ConstructorDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConstructorDeclaration()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.ConstructorDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int number1 = 5;
        double number2 = 3.14;
        String string1 = "hello";
        char char1 = 'a';
        JavaParser javaParser = new JavaParser(string1);
        javaParser.ConstructorDeclaration();
    }
}
statement is: // Improved test data
int number1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double number2 = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string1 = "hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char char1 = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(string1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConstructorDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConstructorDeclaration() target is: javaParser method is: ConstructorDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: ConstructorDeclaration()V
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "hello";
char _char = 'a';
JavaParser javaParser = new JavaParser(string);
((JavaParser) _int).ConstructorDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExplicitConstructorInvocation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExplicitConstructorInvocation()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExplicitConstructorInvocation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample string that contains a constructor invocation.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExplicitConstructorInvocation();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample string that contains a constructor invocation."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExplicitConstructorInvocation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExplicitConstructorInvocation() target is: javaParser method is: ExplicitConstructorInvocation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExplicitConstructorInvocation()V
TestCase is: String string = "This is a sample string that contains a constructor invocation.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x; double y; String s; int[] a; Integer[] b;");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
    }
}
statement is: StringReader stringReader = new StringReader("int x; double y; String s; int[] a; Integer[] b;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
TestCase is: String string = "int x; double y; String s; int[] a; Integer[] b;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for testing the JavaParser.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for testing the JavaParser."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
TestCase is: String string = "This is a sample input for testing the JavaParser.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:")
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 23;
        String str = "Goodbye, World!";
        char c = 'Z';
        double d = 0.546;
        float f = -1.23F;
        boolean b = false;
    }
}
statement is: int x = 23, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "Goodbye, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'Z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 0.546, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float f = -1.23F, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -1.23F
statement is: boolean b = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 23
* this is vulnerable: String string = "Goodbye, World!"
* this is vulnerable: char _char = 'Z'
* this is vulnerable: double _double = 0.546
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 23;
String string = "Goodbye, World!";
char _char = 'Z';
double _double = 0.546;
boolean _boolean = false;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new FileReader("path/to/file.txt"));
        javaParser.ReferenceType();
    }
}
statement is: Parser javaParser = new JavaParser(new FileReader("path/to/file.txt")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.ReferenceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.ReferenceType();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// primitive value

        String y = "Hello, World!";// String value

        char z = 'a';// char value

        double a = Math.PI;// double value

        float b = ((float) (Math.E));// float value

        boolean c = false;// boolean value }}

    }
}
statement is: int x = 5// primitive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "Hello, World!"// String value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char z = 'a'// char value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double a = Math.PI// double value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Math.PI is Math
statement is: float b = ((float) (Math.E))// float value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ((float) (Math.E)) is Math
statement is: boolean c = false// boolean value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 5;
String string = "Hello, World!";
char _char = 'a';
boolean _boolean = false;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("yInKTcd~/[GF!#Jl}=")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("yInKTcd~/[GF!#Jl}=");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.TypeArgument();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("`p@Evlb'P$D0t")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
test data is: StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
    }
}
statement is: StringReader stringReader = new StringReader("`p@Evlb'P$D0t"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
TestCase is: String string = "`p@Evlb'P$D0t";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((Reader) (null)));
        String wildcardBoundsErrorMessage = "Wildcard bounds are not well-formed.";
        javaParser.WildcardBounds(wildcardBoundsErrorMessage);
    }
}
statement is: Parser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String wildcardBoundsErrorMessage = "Wildcard bounds are not well-formed.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.WildcardBounds(wildcardBoundsErrorMessage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds(wildcardBoundsErrorMessage) target is: javaParser method is: WildcardBounds(java.lang.String)
* this is vulnerable: String string = "Wildcard bounds are not well-formed."
TestCase is: JavaParser javaParser = new JavaParser((Reader) null);
String string = "Wildcard bounds are not well-formed.";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("^")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WildcardBounds()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WildcardBounds()
test data is: StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WildcardBounds();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("^");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WildcardBounds();
    }
}
statement is: StringReader stringReader = new StringReader("^"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WildcardBounds(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WildcardBounds() target is: javaParser method is: WildcardBounds()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WildcardBounds()V
TestCase is: String string = "^";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: variable_initializer | primitive_type");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.PrimitiveType();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: variable_initializer | primitive_type"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.PrimitiveType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType() target is: javaParser method is: PrimitiveType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimitiveType()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of: variable_initializer | primitive_type";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).PrimitiveType();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimitiveType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimitiveType()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimitiveType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimitiveType();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimitiveType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimitiveType() target is: javaParser method is: PrimitiveType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimitiveType()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimitiveType();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("PostfixExpression")
statement is: ResultType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ResultType()
test data is: JavaParser javaParser = new JavaParser("PostfixExpression");
javaParser.ResultType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 23;
        double y = 10.56789;
        String str = "abcdefghijklmnopqrstuvwxyz";
        char c = 'Z';
        boolean b = false;
    }
}
statement is: int x = 23, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 10.56789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str = "abcdefghijklmnopqrstuvwxyz", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'Z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 23
* this is vulnerable: double _double = 10.56789
* this is vulnerable: String string = "abcdefghijklmnopqrstuvwxyz"
* this is vulnerable: char _char = 'Z'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 23;
double _double = 10.56789;
String string = "abcdefghijklmnopqrstuvwxyz";
char _char = 'Z';
boolean _boolean = false;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for JavaParser
        JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        javaParser.Expression();
        // Changed the primitive values and Strings to more illustrative examples
        int x = 42;// changed from 0 to a more descriptive value

        double y = 3.14;// changed from 0 to a more descriptive value

        String name = "John Doe";// changed from an empty string to a more descriptive value

        char initial = 'A';// changed from 'a' to a more descriptive value }}

    }
}
statement is: // Improved test data for JavaParser
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: Expression()V
statement is: // Changed the primitive values and Strings to more illustrative examples
int x = 42// changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14// changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe"// changed from an empty string to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char initial = 'A'// changed from 'a' to a more descriptive value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'A'
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
JavaParser javaParser = new JavaParser(string);
String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
SystemInUtil.addInputLine(string);
((JavaParser) string).Expression();
int _int = 42;
double _double = 3.14;
String string = "John Doe";
char _char = 'A';

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("0#W")
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
test data is: JavaParser javaParser = new JavaParser("0#W");
javaParser.Name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java 14");
        javaParser.Name();
    }
}
statement is: Parser javaParser = new JavaParser("Java 14"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
TestCase is: String string = "Java 14";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("John:Smith,Jane:Doe");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
    }
}
statement is: StringReader stringReader = new StringReader("John:Smith,Jane:Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
TestCase is: String string = "John:Smith,Jane:Doe";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: NameList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NameList()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Testing123");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.NameList();
    }
}
statement is: StringReader stringReader = new StringReader("Testing123"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NameList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NameList() target is: javaParser method is: NameList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: NameList()V
TestCase is: String string = "Testing123";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        int primitiveInt = 5;// changed to a more descriptive value

        double primitiveDouble = 3.14;// changed to a more descriptive value

        String stringValue = "hello";// changed to a more descriptive value

        char charValue = 'a';// changed to a more descriptive value }}

    }
}
statement is: // Improved test data for the above code snippet
int primitiveInt = 5// changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveDouble = 3.14// changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello"// changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a'// changed to a more descriptive value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "hello";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~7?c?F>#8zS`")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x + y");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("x + y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "x + y";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("0#W")
statement is: AssignmentOperator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssignmentOperator()
test data is: JavaParser javaParser = new JavaParser("0#W");
javaParser.AssignmentOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("0#W");
        javaParser.AssignmentOperator();
        // Improved test data
        String input = "123456789";
        int result = javaParser.parse(input);
        assertEquals(result, 123456789);
    }
}
statement is: Parser javaParser = new JavaParser("0#W"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssignmentOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssignmentOperator() target is: javaParser method is: AssignmentOperator()
statement is: // Improved test data
String input = "123456789", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int result = javaParser.parse(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse(input) target is: javaParser method is: parse(java.lang.String)
statement is: assertEquals(result, 123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result, 123456789) target is:  method is: assertEquals(int,int)
* this is vulnerable: String string = "123456789"
TestCase is: String string = "0#W";
JavaParser javaParser = new JavaParser(string);
String string = "123456789";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("q^AdX@OV#;")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("q^AdX@OV#;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Replace the primitive values with more descriptive ones
        int age = 30;
        double height = 180.5;
        String name = "John Doe";
        char gender = 'M';
    }
}
statement is: // Replace the primitive values with more descriptive ones
int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 180.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 30
* this is vulnerable: double _double = 180.5
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'M'
TestCase is: int _int = 30;
double _double = 180.5;
String string = "John Doe";
char _char = 'M';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("tS(S9>T8")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("tS(S9>T8");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.expression();
        // the test data has been improved by changing the primitive values and strings to more illustrative examples. }}
    }
}
statement is: StringReader stringReader = new StringReader("tS(S9>T8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.expression() target is: javaParser method is: expression()
statement is: // the test data has been improved by changing the primitive values and strings to more illustrative examples. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "tS(S9>T8";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        Improved : StringReader = $missing$;
        stringReader = new StringReader("a1B_c4D-e7F/g0H8I9J");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: Improved : StringReader = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: stringReader = new StringReader("a1B_c4D-e7F/g0H8I9J"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: Expression()V
TestCase is: String string = "t3n1NxMxG7>K56*D";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("r%!Mv&&Ahm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for parsing.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for parsing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
TestCase is: String string = "This is a test string for parsing.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("interface")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        StringReader stringReader = new StringReader("interface");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("interface"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "interface";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ForInit();
        javaParser.AndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AndExpression()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).AndExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("\"class\"")
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        SystemInUtil.addInputLine("\"class\"");
        javaParser.Expression();
    }
}
statement is: Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SystemInUtil.addInputLine("\"class\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("\"class\"") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
JavaParser javaParser = new JavaParser(string);
String string = "\"class\"";
SystemInUtil.addInputLine(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}wF[N")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("B}wF[N");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.AdditiveExpression();
        javaParser.Expression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.AdditiveExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AdditiveExpression() target is: javaParser method is: AdditiveExpression()
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(";r3dkG1(sM")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2+2");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("2+2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "2+2";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!1234567890:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!1234567890:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "PIV!1234567890:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Dh=GbFhX9x")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("Dh=GbFhX9x");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test sentence.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test sentence."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "This is a test sentence.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
TestCase is: String string = "<?xml version='1.0' encoding='UTF-8' ?>";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A complex sentence with multiple words.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Type();
        javaParser.ForUpdate();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("A complex sentence with multiple words."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
TestCase is: String string = "A complex sentence with multiple words.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = "b!-4w,c*,_AUa \"*";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String input = "x && y || z && (a != b)";
        JavaParser javaParser = new JavaParser(input);
        javaParser.AndExpression();
    }
}
statement is: // Improved test data
String input = "x && y || z && (a != b)", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: AndExpression()V
TestCase is: String string = "x && y || z && (a != b)";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).AndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("&|K3J_d&W, N")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PreIncrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreIncrementExpression()
test data is: StringReader stringReader = new StringReader("&|K3J_d&W, N");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PreIncrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x += 5;");// input: a string containing a valid Java expression

        JavaParser javaParser = new JavaParser(stringReader);// parser: an instance of the JavaParser class

        javaParser.PreIncrementExpression();// output: the parsed expression, represented as a tree of nodes }}

    }
}
statement is: StringReader stringReader = new StringReader("x += 5;")// input: a string containing a valid Java expression
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader)// parser: an instance of the JavaParser class
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreIncrementExpression()// output: the parsed expression, represented as a tree of nodes }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreIncrementExpression()// output: the parsed expression, represented as a tree of nodes }}
 target is: javaParser method is: PreIncrementExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PreIncrementExpression()V
TestCase is: String string = "x += 5;";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreIncrementExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: PreDecrementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PreDecrementExpression()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.PreDecrementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("TestString");
        javaParser.PreDecrementExpression();
    }
}
statement is: Parser javaParser = new JavaParser("TestString"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PreDecrementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PreDecrementExpression() target is: javaParser method is: PreDecrementExpression()
TestCase is: String string = "TestString";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        int integerValue = 123;// Changed from 0 to a more descriptive value

        double doubleValue = 3.14;// Changed from 0 to a more descriptive value

        String stringValue = "hello";// Changed from an empty string to a more descriptive value

        char charValue = 'a';// Changed from '\u0000' (null character) to a more descriptive value

        JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: // Improved test data for the JavaParser class
int integerValue = 123// Changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14// Changed from 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello"// Changed from an empty string to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a'// Changed from '\u0000' (null character) to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: UnaryExpressionNotPlusMinus()V
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 123;
double _double = 3.14;
String string = "hello";
char _char = 'a';
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
((JavaParser) _int).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("interface")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("0#W")
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: JavaParser javaParser = new JavaParser("0#W");
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("0x12345678");
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: Parser javaParser = new JavaParser("0x12345678"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
TestCase is: String string = "0x12345678";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".3JWIsJ'")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
test data is: StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Literal();
javaParser.ConditionalAndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Literal();
        javaParser.ConditionalAndExpression();
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Literal()V
statement is: javaParser.ConditionalAndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalAndExpression() target is: javaParser method is: ConditionalAndExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalAndExpression()V
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();
((JavaParser) stringReader).ConditionalAndExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J0*v2<")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("J0*v2<");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.CastLookahead();
    }
}
statement is: StringReader stringReader = new StringReader("J0*v2<"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastLookahead()V
TestCase is: String string = "J0*v2<";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("J0*v2<")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("}")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastLookahead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastLookahead()
test data is: StringReader stringReader = new StringReader("}");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CastLookahead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.CastLookahead();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.CastLookahead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastLookahead() target is: javaParser method is: CastLookahead()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Generate a random string that matches the expected format of a cast expression
        String input = "int x = (int) y;";
        FileReader fileReader = new FileReader(input);
        JavaParser javaParser = new JavaParser(fileReader);
        CastExpression castExpression = javaParser.CastExpression();
        // Check that the type of the expression is correct
        assertEquals("int", castExpression.getType());
        // Check that the cast expression is nested correctly
        assertTrue(castExpression.isNested());
    }
}
statement is: // Generate a random string that matches the expected format of a cast expression
String input = "int x = (int) y;", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: FileReader fileReader = new FileReader(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(fileReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CastExpression castExpression = javaParser.CastExpression(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: CastExpression()V
statement is: // Check that the type of the expression is correct
assertEquals("int", castExpression.getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check that the type of the expression is correct
assertEquals("int", castExpression.getType()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: // Check that the cast expression is nested correctly
assertTrue(castExpression.isNested()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check that the cast expression is nested correctly
assertTrue(castExpression.isNested()) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "int x = (int) y;";
JavaParser javaParser = new JavaParser((Reader) string);
javaParser.CastExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: CastExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.CastExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.CastExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.VariableInitializer();
        javaParser.CastExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: javaParser.CastExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CastExpression() target is: javaParser method is: CastExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: CastExpression()V
TestCase is: String string = "Java Parser Version 1.1: Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).CastExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("PIV!.+k:")
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: JavaParser javaParser = new JavaParser("PIV!.+k:");
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int integerValue = 123456789;
        double doubleValue = 1.2345678901234567E8;
        String stringValue = "Hello, World!";
        char charValue = 'a';
        boolean booleanValue = true;
    }
}
statement is: // Improved test data
int integerValue = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 1.2345678901234567E8, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean booleanValue = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123456789
* this is vulnerable: double _double = 1.2345678901234567E8
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 123456789;
double _double = 1.2345678901234567E8;
String string = "Hello, World!";
char _char = 'a';
boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser class
        // Primitive values
        int myInt = 42;
        double myDouble = 3.14159;
        boolean myBoolean = false;
        // String literals
        String myString = "The answer to life, the universe, and everything is 42.";
        String anotherString = "This is a test string with a more descriptive value.";
        // Characters
        char myChar = 'a';
        char anotherChar = 'Z';
    }
}
statement is: // Improved test data for the JavaParser class
// Primitive values
int myInt = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDouble = 3.14159, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean myBoolean = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // String literals
String myString = "The answer to life, the universe, and everything is 42.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String anotherString = "This is a test string with a more descriptive value.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Characters
char myChar = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char anotherChar = 'Z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14159
* this is vulnerable: boolean _boolean = false
* this is vulnerable: String string = "The answer to life, the universe, and everything is 42."
* this is vulnerable: String string = "This is a test string with a more descriptive value."
* this is vulnerable: char _char = 'a'
* this is vulnerable: char _char = 'Z'
TestCase is: int _int = 42;
double _double = 3.14159;
boolean _boolean = false;
String string = "The answer to life, the universe, and everything is 42.";
String string = "This is a test string with a more descriptive value.";
char _char = 'a';
char _char = 'Z';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimarySuffix();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimarySuffix()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("P[IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("P[IV!.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("P[IV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
TestCase is: String string = "P[IV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimarySuffix();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimarySuffix()V
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int x = 5;// Changed from a primitive value of 1 to a more descriptive value of 5

        String y = "Hello";// Changed from an empty string to a more descriptive string value of "Hello"

        JavaParser javaParser = new JavaParser(((Reader) (null)));
        javaParser.PrimarySuffix();
    }
}
statement is: // Improved test data
int x = 5// Changed from a primitive value of 1 to a more descriptive value of 5
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String y = "Hello"// Changed from an empty string to a more descriptive string value of "Hello"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(((Reader) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimarySuffix()V
* this is vulnerable: String string = "Hello"
TestCase is: int _int = 5;
String string = "Hello";
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser) _int).PrimarySuffix();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// Changed to a more descriptive value

        String s = "Hello";// Changed to a more descriptive String }}

    }
}
statement is: int x = 5// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "Hello"// Changed to a more descriptive String }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "Hello"
TestCase is: int _int = 5;
String string = "Hello";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("`vuHW6j`O`D-9bd-4vQ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Literal()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Literal()
test data is: StringReader stringReader = new StringReader("`vuHW6j`O`D-9bd-4vQ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A sample input string for testing the JavaParser with a more descriptive and representative data.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Literal();
    }
}
statement is: StringReader stringReader = new StringReader("A sample input string for testing the JavaParser with a more descriptive and representative data."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Literal() target is: javaParser method is: Literal()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Literal()V
TestCase is: String string = "A sample input string for testing the JavaParser with a more descriptive and representative data.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww}")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww}");
javaParser.StatementExpressionList();
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww{");
        javaParser.StatementExpressionList();
        javaParser.BooleanLiteral();
    }
}
statement is: SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww{"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: StatementExpressionList()V
statement is: javaParser.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral() target is: javaParser method is: BooleanLiteral()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: BooleanLiteral()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
SystemInUtil.addInputLine(string);
String string = "IQIg]RdSz05`Hww{";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).StatementExpressionList();
((JavaParser) _void).BooleanLiteral();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: BooleanLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BooleanLiteral()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.BooleanLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("false");
        javaParser.BooleanLiteral();
    }
}
statement is: Parser javaParser = new JavaParser("false"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BooleanLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BooleanLiteral() target is: javaParser method is: BooleanLiteral()
TestCase is: String string = "false";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("K|>?q-")
statement is: NullLiteral()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NullLiteral()
test data is: JavaParser javaParser = new JavaParser("K|>?q-");
javaParser.NullLiteral();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(null);
        javaParser.NullLiteral();
    }
}
statement is: Parser javaParser = new JavaParser(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.NullLiteral(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.NullLiteral() target is: javaParser method is: NullLiteral()
TestCase is: JavaParser javaParser = new JavaParser("K|>?q-");

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        System.out.println("Hello, World! " + args[0]);
    }
}
statement is: System.out.println("Hello, World! " + args[0]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello, World! " + args[0]) target is: System.out method is: println(java.lang.String)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:")
statement is: ArgumentList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArgumentList()
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.ArgumentList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
        javaParser.ArgumentList(new String[]{ "-v", "--version" }, new String[]{ "-h", "--help" }, new String[]{ "-f", "--file" });
    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArgumentList(new String[]{ "-v", "--version" }, new String[]{ "-h", "--help" }, new String[]{ "-f", "--file" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArgumentList(new String[]{ "-v", "--version" }, new String[]{ "-h", "--help" }, new String[]{ "-f", "--file" }) target is: javaParser method is: ArgumentList(java.lang.String[],java.lang.String[],java.lang.String[])
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("`")
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: JavaParser javaParser = new JavaParser("`");
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 5;// Primitive value for a variable named "x"

        String name = "John";// String value for a variable named "name"

        char c = 'A';// Char value for a variable named "c"

        boolean isHappy = true;// Boolean value for a variable named "isHappy"

        double salary = 5000.0;// Double value for a variable named "salary"

        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };// Array of integers for a variable named "numbers" }}

    }
}
statement is: int x = 5// Primitive value for a variable named "x"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John"// String value for a variable named "name"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'A'// Char value for a variable named "c"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isHappy = true// Boolean value for a variable named "isHappy"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double salary = 5000.0// Double value for a variable named "salary"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int[] numbers = new int[]{ 1, 2, 3, 4, 5 }// Array of integers for a variable named "numbers" }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "John"
* this is vulnerable: char _char = 'A'
* this is vulnerable: boolean _boolean = true
* this is vulnerable: double _double = 5000.0
TestCase is: int _int = 5;
String string = "John";
char _char = 'A';
boolean _boolean = true;
double _double = 5000.0;

statement is: org.evosuite.testcase.statements.ArrayStatement@802422f1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0, 4096)
statement is: java.io.DataInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.DataInputStream
statement code is: DataInputStream dataInputStream = new DataInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AllocationExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AllocationExpression()
test data is: byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
javaParser.AllocationExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2 };// This is an example of a small byte array that can be used to test the JavaParser.AllocationExpression() method.

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096);
        DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
        JavaParser javaParser = new JavaParser(dataInputStream);
        javaParser.AllocationExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2 }// This is an example of a small byte array that can be used to test the JavaParser.AllocationExpression() method.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ 1, 2 } Elements: [1, 2]
lengths: [2] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataInputStream dataInputStream = new DataInputStream(bufferedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(dataInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AllocationExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AllocationExpression() target is: javaParser method is: AllocationExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V callee: VariableReference: Statement 4, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: AllocationExpression()V
TestCase Could not be added: AllocationExpression()V
TestCase is: int _int = 4096;
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) _int, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("~IV!.+k:");// Test data for a JavaParser object

        JavaParser javaParser = new JavaParser(stringReader);// Creates a JavaParser object with a StringReader object as its input source

        javaParser.ArrayDimsAndInits();// Calls the ArrayDimsAndInits method on the JavaParser object }}

    }
}
statement is: StringReader stringReader = new StringReader("~IV!.+k:")// Test data for a JavaParser object
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader)// Creates a JavaParser object with a StringReader object as its input source
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayDimsAndInits()// Calls the ArrayDimsAndInits method on the JavaParser object }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits()// Calls the ArrayDimsAndInits method on the JavaParser object }}
 target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "~IV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ArrayDimsAndInits()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayDimsAndInits()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ArrayDimsAndInits();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ArrayDimsAndInits();
        // Improved test data
        StringReader stringReader = new StringReader("Java Parser Version 1.2:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ArrayDimsAndInits();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ArrayDimsAndInits()V
statement is: // Improved test data
StringReader stringReader = new StringReader("Java Parser Version 1.2:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: Expression()V
statement is: javaParser.ArrayDimsAndInits(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayDimsAndInits() target is: javaParser method is: ArrayDimsAndInits()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: ArrayDimsAndInits()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();
String string = "Java Parser Version 1.2:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet above
        StringReader stringReader = new StringReader("SampleCode.java");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: // Improved test data for the code snippet above
StringReader stringReader = new StringReader("SampleCode.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "SampleCode.java";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.BlockStatement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.BlockStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BlockStatement() target is: javaParser method is: BlockStatement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("P[IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.TypeArgument();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.TypeArgument();
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: TypeArgument()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
TestCase is: String string = "PIV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id pretium ligula.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id pretium ligula."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "PIV!Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id pretium ligula.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Type();
        javaParser.ForUpdate();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.Statement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("PIV!.+k:")
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: JavaParser javaParser = new JavaParser("PIV!.+k:");
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("PIV!1234567890-k");
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser("PIV!1234567890-k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
TestCase is: String string = "PIV!1234567890-k";
JavaParser javaParser = new JavaParser(string);

statement is: addInputLine(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: SystemInUtil.addInputLine("X\"vM%Hc")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: SystemInUtil.addInputLine("X\"vM%Hc");
JavaParser javaParser = new JavaParser("");
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        SystemInUtil.addInputLine("Hello World!");
        JavaParser javaParser = new JavaParser("");
        javaParser.Statement();
    }
}
statement is: // Improved test data
SystemInUtil.addInputLine("Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
SystemInUtil.addInputLine("Hello World!") target is: SystemInUtil method is: addInputLine(java.lang.String)
Matched Method is: addInputLine(Ljava/lang/String;)V
statement is: JavaParser javaParser = new JavaParser(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: Statement()V
TestCase is: String string = "Hello World!";
SystemInUtil.addInputLine(string);
String string = "";
JavaParser javaParser = new JavaParser(string);
((JavaParser) _void).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AssertStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AssertStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AssertStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AssertStatement();
        // Improved test data
        StringReader improvedStringReader = new StringReader("Java Parser Version 2.0:  Usage is one of the following:");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.AssertStatement();
        // Improved test data with more descriptive values
        int numOfArguments = 3;
        String[] argumentStrings = new String[]{ "-help", "-version", "-debug" };
        for (int i = 0; i < numOfArguments; i++) {
            StringReader improvedStringReader = new StringReader(String.format("Java Parser Version 2.1:  Usage is one of the following: %s, %s, %s", argumentStrings[0], argumentStrings[1], argumentStrings[2]));
            JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
            improvedJavaParser.AssertStatement();
        }
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AssertStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AssertStatement() target is: javaParser method is: AssertStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AssertStatement()V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("Java Parser Version 2.0:  Usage is one of the following:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.AssertStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.AssertStatement() target is: improvedJavaParser method is: AssertStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: AssertStatement()V
statement is: // Improved test data with more descriptive values
int numOfArguments = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] argumentStrings = new String[]{ "-help", "-version", "-debug" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < numOfArguments; i++) {
    StringReader improvedStringReader = new StringReader(String.format("Java Parser Version 2.1:  Usage is one of the following: %s, %s, %s", argumentStrings[0], argumentStrings[1], argumentStrings[2]));
    JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
    improvedJavaParser.AssertStatement();
}, class spoon.support.reflect.code.CtForImpl
* this is vulnerable: int _int = 3
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();
String string = "Java Parser Version 2.0:  Usage is one of the following:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();
int _int = 3;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("r%!Mv&&Ahm")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: LabeledStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LabeledStatement()
test data is: StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.LabeledStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input string for testing the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.LabeledStatement();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input string for testing the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.LabeledStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LabeledStatement() target is: javaParser method is: LabeledStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LabeledStatement()V
TestCase is: String string = "This is a sample input string for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("d_KE{?c:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: Block()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Block()
test data is: StringReader stringReader = new StringReader("d_KE{?c:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
javaParser.Block();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.Block();
        // Improved test data
        StringReader stringReader2 = new StringReader("public class MyClass { public static void main(String[] args) { int x = 10; double y = 3.14159; String z = \"Hello, world!\"; char c = \'A\'; } }");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.ReferenceType();
        javaParser2.Block();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
statement is: javaParser.Block(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Block() target is: javaParser method is: Block()
statement is: // Improved test data
StringReader stringReader2 = new StringReader("public class MyClass { public static void main(String[] args) { int x = 10; double y = 3.14159; String z = \"Hello, world!\"; char c = \'A\'; } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.ReferenceType() target is: javaParser2 method is: ReferenceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReferenceType()V
statement is: javaParser2.Block(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.Block() target is: javaParser2 method is: Block()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Block()V
TestCase is: String string = "public class MyClass { public static void main(String[] args) { int x = 10; double y = 3.14159; String z = \"Hello, world!\"; char c = 'A'; } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).Block();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: BlockStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BlockStatement()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.BlockStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the JavaParser example
        "    public static void main(String[] args) {\n" = "        // Process command line arguments\n" + (((((((((((("        if (args.length == 0) {\n" + "            System.out.println(\"No arguments provided.\");\n") + "        } else {\n") + "            for (String arg : args) {\n") + "                if (arg.startsWith(\"-\")) {\n") + "                    // Handle option\n") + "                } else {\n") + "                    // Handle non-option argument\n") + "                }\n") + "            }\n") + "        }\n") + "    }\n") + "}");
        JavaParser javaParser = new JavaParser(code);
        javaParser.CompilationUnit();
    }
}
statement is: // Improved test data for the JavaParser example
"    public static void main(String[] args) {\n" = "        // Process command line arguments\n" + (((((((((((("        if (args.length == 0) {\n" + "            System.out.println(\"No arguments provided.\");\n") + "        } else {\n") + "            for (String arg : args) {\n") + "                if (arg.startsWith(\"-\")) {\n") + "                    // Handle option\n") + "                } else {\n") + "                    // Handle non-option argument\n") + "                }\n") + "            }\n") + "        }\n") + "    }\n") + "}"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JavaParser javaParser = new JavaParser(code), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
TestCase is: JavaParser javaParser = new JavaParser((String) null);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: LocalVariableDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LocalVariableDeclaration()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.LocalVariableDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Example 1: Testing the method with a primitive integer parameter
        int x = 5;
        javaParser.method(x);
        // Example 2: Testing the method with a primitive double parameter
        double y = 3.14;
        javaParser.method(y);
        // Example 3: Testing the method with a String parameter
        String str = "Hello, World!";
        javaParser.method(str);
        // Example 4: Testing the method with a char parameter
        char c = 'a';
        javaParser.method(c);
    }
}
statement is: // Example 1: Testing the method with a primitive integer parameter
int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.method(x), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.method(x) target is: javaParser method is: method(int)
statement is: // Example 2: Testing the method with a primitive double parameter
double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.method(y), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.method(y) target is: javaParser method is: method(double)
statement is: // Example 3: Testing the method with a String parameter
String str = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.method(str), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.method(str) target is: javaParser method is: method(java.lang.String)
statement is: // Example 4: Testing the method with a char parameter
char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.method(c), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.method(c) target is: javaParser method is: method(char)
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: EmptyStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EmptyStatement()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.EmptyStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for parsing.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.EmptyStatement();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for parsing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EmptyStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EmptyStatement() target is: javaParser method is: EmptyStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EmptyStatement()V
TestCase is: String string = "This is a test string for parsing.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("interface")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("protected")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) throws IOException {
        StringReader stringReader = new StringReader("protected");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("protected"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "protected";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("20");
        JavaParser javaParser = new JavaParser();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("20"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
TestCase is: String string = "20";
StringReader stringReader = new StringReader(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.Expression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.parse(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.parse(stringReader), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse(stringReader) target is: javaParser method is: parse(StringReader)
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.StatementExpressionList();
        // Improved test data:
        StringReader stringReader = new StringReader("Hello, World! This is a sample input for testing the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.StatementExpressionList();
    }
}
statement is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("Hello, World! This is a sample input for testing the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: Expression()V
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 7
Matched Method is: StatementExpressionList()V
TestCase is: String string = "qF3l@7yAnplk_6yC8C";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();
String string = "Hello, World! This is a sample input for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "b!-jw,c*,_AUa \"*";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~8;nTr&s[{")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("~8;nTr&s[{");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\n" + ((((((((((((((((("// Primitive types\n" + "int i = 5;\n") + "double d = 3.14;\n") + "char c = \'a\';\n") + "\n") + "// Strings\n") + "String s = \"hello\";\n") + "String s2 = \"goodbye\";\n") + "\n") + "// Arrays\n") + "int[] intArray = {1, 2, 3};\n") + "double[] doubleArray = {4.5, 6.7, 8.9};\n") + "\n") + "// Objects\n") + "MyClass mc = new MyClass();\n") + "mc.setValue(10);\n") + "OtherClass oc = new OtherClass();\n") + "oc.setName(\"John\");\n"));
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        javaParser.Type();
        javaParser.ForUpdate();
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.StatementExpressionList();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\n" + ((((((((((((((((("// Primitive types\n" + "int i = 5;\n") + "double d = 3.14;\n") + "char c = \'a\';\n") + "\n") + "// Strings\n") + "String s = \"hello\";\n") + "String s2 = \"goodbye\";\n") + "\n") + "// Arrays\n") + "int[] intArray = {1, 2, 3};\n") + "double[] doubleArray = {4.5, 6.7, 8.9};\n") + "\n") + "// Objects\n") + "MyClass mc = new MyClass();\n") + "mc.setValue(10);\n") + "OtherClass oc = new OtherClass();\n") + "oc.setName(\"John\");\n")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: TypeArgument()V
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: Type()V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: ForUpdate()V
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
TestCase is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("60*v2<")
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: JavaParser javaParser = new JavaParser("60*v2<");
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        The code;
        you need;
        refine is;
        the[CODE] = $missing$;
        and[CODE] = $missing$;
    }
}
statement is: The code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: you need, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: refine is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the[CODE] = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: and[CODE] = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
        javaParser.InstanceOfExpression();
    }
}
statement is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).InstanceOfExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("vBGn?er*")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        StringReader stringReader = new StringReader("vBGn?er*");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: // Improved test data for the given code snippet
StringReader stringReader = new StringReader("vBGn?er*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "vBGn?er*";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PBJ'-wC}90q{v")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: StatementExpressionList()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpressionList()
test data is: StringReader stringReader = new StringReader("PBJ'-wC}90q{v");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.StatementExpressionList();
        // Improved test data
        StringReader stringReader2 = new StringReader("public class MyClass { ... }");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.StatementExpressionList();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpressionList() target is: javaParser method is: StatementExpressionList()
statement is: // Improved test data
StringReader stringReader2 = new StringReader("public class MyClass { ... }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.StatementExpressionList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.StatementExpressionList() target is: javaParser2 method is: StatementExpressionList()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: StatementExpressionList()V
TestCase is: String string = "public class MyClass { ... }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("PIV!.+k:")
statement is: SwitchStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchStatement()
test data is: JavaParser javaParser = new JavaParser("PIV!.+k:");
javaParser.SwitchStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("PIV!.+k:");
        // Improve the test data by changing the primitive values and Strings to more illustrative examples
        javaParser.setString("ABC!");
        javaParser.setBoolean(true);
        javaParser.setInteger(123456789);
        javaParser.setDouble(1.2345678912345679E8);
        javaParser.setCharacter('a');
        // Run the test method to execute the improved test data
        javaParser.SwitchStatement();
    }
}
statement is: Parser javaParser = new JavaParser("PIV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
javaParser.setString("ABC!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
javaParser.setString("ABC!") target is: javaParser method is: setString(java.lang.String)
statement is: javaParser.setBoolean(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.setBoolean(true) target is: javaParser method is: setBoolean(boolean)
statement is: javaParser.setInteger(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.setInteger(123456789) target is: javaParser method is: setInteger(int)
statement is: javaParser.setDouble(1.2345678912345679E8), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.setDouble(1.2345678912345679E8) target is: javaParser method is: setDouble(double)
statement is: javaParser.setCharacter('a'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.setCharacter('a') target is: javaParser method is: setCharacter(char)
statement is: // Run the test method to execute the improved test data
javaParser.SwitchStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Run the test method to execute the improved test data
javaParser.SwitchStatement() target is: javaParser method is: SwitchStatement()
TestCase is: String string = "PIV!.+k:";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SwitchLabel()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SwitchLabel()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SwitchLabel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.SwitchLabel();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SwitchLabel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SwitchLabel() target is: javaParser method is: SwitchLabel()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SwitchLabel()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchLabel();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: IfStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.IfStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.IfStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.IfStatement();
        // Improved test data
        StringReader improvedStringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: If (condition) { statements; } else if (condition) { statements; } else { statements; }");
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.IfStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.IfStatement() target is: javaParser method is: IfStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: IfStatement()V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: If (condition) { statements; } else if (condition) { statements; } else { statements; }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.IfStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.IfStatement() target is: improvedJavaParser method is: IfStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: IfStatement()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();
String string = "Java Parser Version 1.1:  Usage is one of: If (condition) { statements; } else if (condition) { statements; } else { statements; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("I love to read books.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.WhileStatement();
    }
}
statement is: StringReader stringReader = new StringReader("I love to read books."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.WhileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WhileStatement() target is: javaParser method is: WhileStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: WhileStatement()V
TestCase is: String string = "I love to read books.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WhileStatement();

statement is: org.evosuite.testcase.statements.ArrayStatement@628b1847 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: WhileStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.WhileStatement()
test data is: byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.WhileStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4, 5 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.WhileStatement();
    }
}
statement is: byte[] byteArray = new byte[]{ 0, 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ 0, 1, 2, 3, 4, 5 } Elements: [0, 1, 2, 3, 4, 5]
lengths: [6] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.WhileStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.WhileStatement() target is: javaParser method is: WhileStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("=N*S}#P!e[HW")
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: JavaParser javaParser = new JavaParser("=N*S}#P!e[HW");
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.DoStatement();
        // Improved test data
        String expectedResult = "Hello World";
        String actualResult = javaParser.parse("print('Hello World')");
        assertEquals(expectedResult, actualResult);
        // More descriptive and representative test data
        String[] inputStrings = new String[]{ "=N*S}#P!e[HW", "=N*S}#P!e[HW" };
        String[] expectedResults = new String[]{ "Hello World", "Goodbye World" };
        for (int i = 0; i < inputStrings.length; i++) {
            String actualResult = javaParser.parse(inputStrings[i]);
            assertEquals(expectedResults[i], actualResult);
        }
    }
}
statement is: Parser.DoStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.DoStatement() target is: Parser method is: DoStatement()
statement is: // Improved test data
String expectedResult = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualResult = javaParser.parse("print('Hello World')"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.parse("print('Hello World')") target is: javaParser method is: parse(java.lang.String)
statement is: assertEquals(expectedResult, actualResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, actualResult) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: // More descriptive and representative test data
String[] inputStrings = new String[]{ "=N*S}#P!e[HW", "=N*S}#P!e[HW" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] expectedResults = new String[]{ "Hello World", "Goodbye World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < inputStrings.length; i++) {
    String actualResult = javaParser.parse(inputStrings[i]);
    assertEquals(expectedResults[i], actualResult);
}, class spoon.support.reflect.code.CtForImpl
* this is vulnerable: String string = "Hello World"
TestCase is: String string = "Hello World";

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.doStatement();
    }
}
statement is: Parser.doStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.doStatement() target is: Parser method is: doStatement()
statement is: org.evosuite.testcase.statements.ArrayStatement@7f080b9f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: DoStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DoStatement()
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.DoStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xcafe)), ((byte) (0x13)), ((byte) (0x37)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.DoStatement();
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xcafe)), ((byte) (0x13)), ((byte) (0x37)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xcafe)), ((byte) (0x13)), ((byte) (0x37)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0xcafe)), ((byte) (0x13)), ((byte) (0x37))]
lengths: [5] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.DoStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DoStatement() target is: javaParser method is: DoStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ForStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForStatement()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ForStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        int a = 12;
        int b = 8;
        System.out.println("Hello, world!");
        if (a > b) {
            System.out.println("a is greater than b");
        } else {
            System.out.println("a is less than or equal to b");
        }
    }
}
statement is: int a = 12, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int b = 8, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: System.out.println("Hello, world!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Hello, world!") target is: System.out method is: println(java.lang.String)
statement is: if (a > b) {
    System.out.println("a is greater than b");
} else {
    System.out.println("a is less than or equal to b");
}, class spoon.support.reflect.code.CtIfImpl
* this is vulnerable: int _int = 12
* this is vulnerable: int _int = 8
TestCase is: int _int = 12;
int _int = 8;

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: <br>-u,--username=USERNAME       the username to use for authentication<br>-p,--password=PASSWORD       the password to use for authentication<br>--help                           display this help message and exit");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: <br>-u,--username=USERNAME       the username to use for authentication<br>-p,--password=PASSWORD       the password to use for authentication<br>--help                           display this help message and exit"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForStatement() target is: javaParser method is: ForStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForStatement()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of: <br>-u,--username=USERNAME       the username to use for authentication<br>-p,--password=PASSWORD       the password to use for authentication<br>--help                           display this help message and exit";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ForInit();
        // Improved test data
        Integer integerValue = 123;// Replace with a more descriptive value, e.g., 456789

        Double doubleValue = 3.14;// Replace with a more descriptive value, e.g., 2.71828

        String stringValue = "Hello, World!";// Replace with a more descriptive value, e.g., "Goodbye, World!"

        Character characterValue = 'A';// Replace with a more descriptive value, e.g., 'a'

        // Use the improved test data in the parser
        javaParser.Expression(integerValue);
        javaParser.ForInit(doubleValue);
        javaParser.StringLiteral(stringValue);
        javaParser.CharacterLiteral(characterValue);
    }
}
statement is: StringReader stringReader = new StringReader("An interface cannot implement other interfaces"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
statement is: // Improved test data
Integer integerValue = 123// Replace with a more descriptive value, e.g., 456789
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Double doubleValue = 3.14// Replace with a more descriptive value, e.g., 2.71828
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, World!"// Replace with a more descriptive value, e.g., "Goodbye, World!"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Character characterValue = 'A'// Replace with a more descriptive value, e.g., 'a'
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use the improved test data in the parser
javaParser.Expression(integerValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use the improved test data in the parser
javaParser.Expression(integerValue) target is: javaParser method is: Expression(java.lang.Integer)
statement is: javaParser.ForInit(doubleValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit(doubleValue) target is: javaParser method is: ForInit(java.lang.Double)
statement is: javaParser.StringLiteral(stringValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StringLiteral(stringValue) target is: javaParser method is: StringLiteral(java.lang.String)
statement is: javaParser.CharacterLiteral(characterValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CharacterLiteral(characterValue) target is: javaParser method is: CharacterLiteral(java.lang.Character)
* this is vulnerable: int _int = 123
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'A'
TestCase is: String string = "An interface cannot implement other interfaces";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();
int _int = 123;
double _double = 3.14;
String string = "Hello, World!";
char _char = 'A';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(javaParser.token_source)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        JavaParser javaParser = new JavaParser(javaParser.token_source);
        javaParser.Expression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(javaParser.token_source), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: ForInit()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890ABCDEF");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("1234567890ABCDEF"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "1234567890ABCDEF";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "qF3l@7yAnplk_6yC8C";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~7?c?F>#8zS`")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "This is a test string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String z = " = ";");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
        // Improved test data:
        StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String z = " = ";");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String z = " = ";"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: ForInit()V
statement is: // Improved test data:
StringReader stringReader = new StringReader("int x = 5; double y = 3.14; String z = " = ";"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 4
Matched Method is: ForInit()V
TestCase is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("#o[fYsqYgJ&89#C|=C")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForInit()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForInit()
test data is: StringReader stringReader = new StringReader("#o[fYsqYgJ&89#C|=C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string with some numbers 123 and some characters $%^&*().");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForInit();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string with some numbers 123 and some characters $%^&*()."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForInit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForInit() target is: javaParser method is: ForInit()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForInit()V
TestCase is: String string = "This is a test string with some numbers 123 and some characters $%^&*().";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("0#W")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
test data is: StringReader stringReader = new StringReader("0#W");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("10#W");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
    }
}
statement is: StringReader stringReader = new StringReader("10#W"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
TestCase is: String string = "10#W";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("6")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: BreakStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.BreakStatement()
test data is: StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.BreakStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("12");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.BreakStatement();
    }
}
statement is: StringReader stringReader = new StringReader("12"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.BreakStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.BreakStatement() target is: javaParser method is: BreakStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: BreakStatement()V
TestCase is: String string = "12";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("")
statement is: ContinueStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ContinueStatement()
test data is: JavaParser javaParser = new JavaParser("");
javaParser.ContinueStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("continue;");
        javaParser.continueStatement();
    }
}
statement is: Parser javaParser = new JavaParser("continue;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.continueStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.continueStatement() target is: javaParser method is: continueStatement()
TestCase is: String string = "continue;";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReturnStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReturnStatement()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReturnStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ReturnStatement();
        StringReader stringReader2 = new StringReader("if (x > 0) { return x; } else { return -x; }");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.ReturnStatement();
        StringReader stringReader3 = new StringReader("while (true) { return 42; }");
        JavaParser javaParser3 = new JavaParser(stringReader3);
        javaParser3.ReturnStatement();
    }
}
statement is: StringReader stringReader = new StringReader(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReturnStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReturnStatement() target is: javaParser method is: ReturnStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ReturnStatement()V
statement is: StringReader stringReader2 = new StringReader("if (x > 0) { return x; } else { return -x; }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.ReturnStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.ReturnStatement() target is: javaParser2 method is: ReturnStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: ReturnStatement()V
statement is: StringReader stringReader3 = new StringReader("while (true) { return 42; }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser3 = new JavaParser(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.ReturnStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.ReturnStatement() target is: javaParser3 method is: ReturnStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: ReturnStatement()V
TestCase is: String string = "";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "if (x > 0) { return x; } else { return -x; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "while (true) { return 42; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ThrowStatement();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ThrowStatement()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

statement is: mock(java.util.Enumeration<java.io.BufferedInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.BufferedInputStream>
statement code is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ThrowStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ThrowStatement()
test data is: Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
javaParser.ThrowStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<BufferedInputStream> enumeration = Collections.enumeration(Arrays.asList(new BufferedInputStream("input1.txt"), new BufferedInputStream("input2.txt")));
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        JavaParser javaParser = mock(JavaParser.class);
        doReturn(true).when(javaParser).hasMoreTokens();
        doReturn(EOF).when(javaParser).nextToken();
        javaParser.ThrowStatement();
    }
}
statement is: Enumeration<BufferedInputStream> enumeration = Collections.enumeration(Arrays.asList(new BufferedInputStream("input1.txt"), new BufferedInputStream("input2.txt"))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Collections.enumeration(Arrays.asList(new BufferedInputStream("input1.txt"), new BufferedInputStream("input2.txt"))) target is: Collections method is: enumeration()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/util/Enumeration;)V
statement is: JavaParser javaParser = mock(JavaParser.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(JavaParser.class) target is:  method is: mock(java.lang.Class)
target name is: Enumeration argument is: JavaParser.class
statement is: doReturn(true).when(javaParser).hasMoreTokens(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(javaParser).hasMoreTokens() target is: doReturn(true).when(javaParser) method is: hasMoreTokens()
statement is: doReturn(EOF).when(javaParser).nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(EOF).when(javaParser).nextToken() target is: doReturn(EOF).when(javaParser) method is: nextToken()
statement is: javaParser.ThrowStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ThrowStatement() target is: javaParser method is: ThrowStatement()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: SynchronizedStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SynchronizedStatement()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.SynchronizedStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/");
        javaParser.SynchronizedStatement();// Test case 1: Invalid syntax

        JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/);");
        javaParser.SynchronizedStatement();// Test case 2: Valid syntax with unbalanced parentheses

        JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/");
        javaParser.SynchronizedStatement(true);// Test case 3: Valid syntax with balanced parentheses and invalid characte }}

    }
}
statement is: Parser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement()// Test case 1: Invalid syntax
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement()// Test case 1: Invalid syntax
 target is: javaParser method is: SynchronizedStatement()
statement is: JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/);"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement()// Test case 2: Valid syntax with unbalanced parentheses
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement()// Test case 2: Valid syntax with unbalanced parentheses
 target is: javaParser method is: SynchronizedStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 3
Matched Method is: SynchronizedStatement()V
statement is: JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SynchronizedStatement(true)// Test case 3: Valid syntax with balanced parentheses and invalid characte }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SynchronizedStatement(true)// Test case 3: Valid syntax with balanced parentheses and invalid characte }}
 target is: javaParser method is: SynchronizedStatement(boolean)
TestCase is: String string = "x(sirCQ'7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);
String string = "x(sirCQ'7'*%eZ(#1/);";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).SynchronizedStatement();
String string = "x(sirCQ'7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TryStatement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TryStatement()
test data is: StringReader stringReader = new StringReader("         java JavaParser inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TryStatement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser inputfile.txt");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TryStatement();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser inputfile.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TryStatement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TryStatement() target is: javaParser method is: TryStatement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TryStatement()V
TestCase is: String string = "         java JavaParser inputfile.txt";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RUNSIGNEDSHIFT()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RUNSIGNEDSHIFT()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RUNSIGNEDSHIFT();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n" + (("// This is a comment\n" + "int x = 5;\n") + "x <<= 2;"));
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RUNSIGNEDSHIFT();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n" + (("// This is a comment\n" + "int x = 5;\n") + "x <<= 2;")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RUNSIGNEDSHIFT(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RUNSIGNEDSHIFT() target is: javaParser method is: RUNSIGNEDSHIFT()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: RUNSIGNEDSHIFT()V
TestCase is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RUNSIGNEDSHIFT();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.MemberValue();
    }
}
statement is: StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
TestCase is: String string = "qF3l@7yAnplk_6yC8C";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        javaParser.Annotation(PUBLIC);
        javaParser.Annotation(PRIVATE);
        javaParser.Annotation(PROTECTED);
        javaParser.Annotation(ABSTRACT);
        javaParser.Annotation(FINAL);
        javaParser.Annotation(STATIC);
        javaParser.Annotation(TRANSIENT);
        javaParser.Annotation(VOLATILE);
        javaParser.Annotation(SYNCHRONIZED);
        javaParser.Annotation(NATIVE);
        javaParser.Annotation(STRICTFP);
    }
}
statement is: Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Annotation(PUBLIC), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(PUBLIC) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(PRIVATE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(PRIVATE) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(PROTECTED), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(PROTECTED) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(ABSTRACT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(ABSTRACT) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(FINAL), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(FINAL) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(STATIC), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(STATIC) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(TRANSIENT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(TRANSIENT) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(VOLATILE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(VOLATILE) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(SYNCHRONIZED), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(SYNCHRONIZED) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(NATIVE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(NATIVE) target is: javaParser method is: Annotation()
statement is: javaParser.Annotation(STRICTFP), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation(STRICTFP) target is: javaParser method is: Annotation()
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("cT v.oF#-l[|K0Mb3")
statement is: NormalAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NormalAnnotation()
test data is: JavaParser javaParser = new JavaParser("cT v.oF#-l[|K0Mb3");
javaParser.NormalAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("This is a string.");
        javaParser.normalAnnotation();
    }
}
statement is: Parser javaParser = new JavaParser("This is a string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.normalAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.normalAnnotation() target is: javaParser method is: normalAnnotation()
TestCase is: String string = "This is a string.";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: NormalAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.NormalAnnotation()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.NormalAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello World");// Primitive values and Strings can be improved by using more descriptive examples, such as "Hello World" for a String value }}

    }
}
statement is: Parser javaParser = new JavaParser("Hello World")// Primitive values and Strings can be improved by using more descriptive examples, such as "Hello World" for a String value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Hello World";
JavaParser javaParser = new JavaParser((JavaParserTokenManager) string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(null);
        javaParser.MarkerAnnotation();
    }
}
statement is: Parser javaParser = new JavaParser(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".3JWIsJ'")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SingleMemberAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SingleMemberAnnotation()
test data is: StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SingleMemberAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("123456789");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.SingleMemberAnnotation();
    }
}
statement is: StringReader stringReader = new StringReader("123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SingleMemberAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SingleMemberAnnotation() target is: javaParser method is: SingleMemberAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SingleMemberAnnotation()V
TestCase is: String string = "123456789";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("`")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: SingleMemberAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.SingleMemberAnnotation()
test data is: StringReader stringReader = new StringReader("`");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.SingleMemberAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("@MyAnnotation(value = \"Hello World!\")");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.SingleMemberAnnotation();
    }
}
statement is: StringReader stringReader = new StringReader("@MyAnnotation(value = \"Hello World!\")"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.SingleMemberAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.SingleMemberAnnotation() target is: javaParser method is: SingleMemberAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: SingleMemberAnnotation()V
TestCase is: String string = "@MyAnnotation(value = \"Hello World!\")";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("zs!Sw")
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
test data is: JavaParser javaParser = new JavaParser("zs!Sw");
javaParser.MemberValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String input = "Hello, World!";
        int x = 5;
        double y = 3.14;
        char c = 'a';
        boolean b = true;
    }
}
statement is: String input = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int x = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "Hello, World!";
int _int = 5;
double _double = 3.14;
char _char = 'a';
boolean _boolean = true;

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((String) null)
statement is: MemberValueArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValueArrayInitializer()
test data is: JavaParser javaParser = new JavaParser((String) null);
javaParser.MemberValueArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("path/to/valid/java/file.java");
        javaParser.CompilationUnit();
    }
}
statement is: Parser javaParser = new JavaParser("path/to/valid/java/file.java"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.CompilationUnit(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
TestCase is: String string = "path/to/valid/java/file.java";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Invalid escape character at line ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeDeclaration(0)
test data is: StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeDeclaration(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Invalid escape character at line 42");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeDeclaration(0);
    }
}
statement is: StringReader stringReader = new StringReader("Invalid escape character at line 42"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeDeclaration(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeDeclaration(0) target is: javaParser method is: AnnotationTypeDeclaration(int)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeDeclaration(I)V
TestCase is: String string = "Invalid escape character at line 42";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
int _int = 0;
((JavaParser) stringReader).AnnotationTypeDeclaration(_int);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: AnnotationTypeDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeDeclaration(799)
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.AnnotationTypeDeclaration(799);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream();
        JavaParser javaParser = new JavaParser(pipedInputStream);
        javaParser.AnnotationTypeBody(new AnnotationTypeDeclaration("MyAnnotation", true, Arrays.asList(new SingleMemberAnnotation("MyOtherAnnotation", "value"))));
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeBody(new AnnotationTypeDeclaration("MyAnnotation", true, Arrays.asList(new SingleMemberAnnotation("MyOtherAnnotation", "value")))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeBody(new AnnotationTypeDeclaration("MyAnnotation", true, Arrays.asList(new SingleMemberAnnotation("MyOtherAnnotation", "value")))) target is: javaParser method is: AnnotationTypeBody(AnnotationTypeDeclaration)
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: AnnotationTypeBody()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeBody()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.AnnotationTypeBody();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int age = 25;
        String name = "John";
        double height = 180.0;
        char gender = 'M';
    }
}
statement is: int age = 25, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 180.0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char gender = 'M', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "John"
* this is vulnerable: double _double = 180.0
* this is vulnerable: char _char = 'M'
TestCase is: int _int = 25;
String string = "John";
double _double = 180.0;
char _char = 'M';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader input = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser parser = new JavaParser(input);
        parser.VariableInitializer();
        parser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader input = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser parser = new JavaParser(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.VariableInitializer() target is: parser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: parser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.AnnotationTypeMemberDeclaration() target is: parser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("V&]&!4?`VCt7")
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Arrange
        String inputCode = "public class MyClass {\n" + ((("  public static void main(String[] args) {\n" + "    System.out.println(\"Hello, world!\");\n") + "  }\n") + "}");
        JavaParser javaParser = new JavaParser(inputCode);
        // Act
        CompilationUnit cu = javaParser.CompilationUnit();
        // Assert
        assertEquals("MyClass", cu.getClassName());
        assertEquals("main", cu.getMainMethod().getName());
        assertEquals("String[]", cu.getMainMethod().getParameters().toString());
    }
}
statement is: // Improved test data
// Arrange
String inputCode = "public class MyClass {\n" + ((("  public static void main(String[] args) {\n" + "    System.out.println(\"Hello, world!\");\n") + "  }\n") + "}"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: "public class MyClass {\n" + ((("  public static void main(String[] args) {\n" + "    System.out.println(\"Hello, world!\");\n") + "  }\n") + "}")
statement is: JavaParser javaParser = new JavaParser(inputCode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Act
CompilationUnit cu = javaParser.CompilationUnit(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.CompilationUnit() target is: javaParser method is: CompilationUnit()
statement is: // Assert
assertEquals("MyClass", cu.getClassName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals("MyClass", cu.getClassName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("main", cu.getMainMethod().getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("main", cu.getMainMethod().getName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("String[]", cu.getMainMethod().getParameters().toString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("String[]", cu.getMainMethod().getParameters().toString()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ReferenceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReferenceType()
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ReferenceType();
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ReferenceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReferenceType() target is: javaParser method is: ReferenceType()
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(".Qv!&&&)hBg7}>Wdj-")
statement is: DefaultValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.DefaultValue()
test data is: JavaParser javaParser = new JavaParser(".Qv!&&&)hBg7}>Wdj-");
javaParser.DefaultValue();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("A string that represents a valid Java source code");
        javaParser.DefaultValue();
    }
}
statement is: Parser javaParser = new JavaParser("A string that represents a valid Java source code"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.DefaultValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.DefaultValue() target is: javaParser method is: DefaultValue()
TestCase is: String string = "A string that represents a valid Java source code";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AnnotationTypeMemberDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AnnotationTypeMemberDeclaration()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AnnotationTypeMemberDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("myIdentifier");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.AnnotationTypeMemberDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("myIdentifier"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.AnnotationTypeMemberDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AnnotationTypeMemberDeclaration() target is: javaParser method is: AnnotationTypeMemberDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: AnnotationTypeMemberDeclaration()V
TestCase is: String string = "myIdentifier";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@7ba26d6c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[10]
statement is: read([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = stringReader.read(arg0)
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
stringReader.read(charArray);
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("A valid Java code");
        JavaParser javaParser = new JavaParser(stringReader);
        char[] charArray = new char[10];
        stringReader.read(charArray);
    }
}
statement is: StringReader stringReader = new StringReader("A valid Java code"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[10] Elements: []
lengths: [10] [10]
Their type are: class [C char[]
statement is: stringReader.read(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringReader.read(charArray) target is: stringReader method is: read(char[])
source statement: java.io.StringReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type java.io.StringReaderindex is: 1
Matched Method is: read([C)I
TestCase is: String string = "A valid Java code";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
((Reader) string).read(charArray);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(" not found.")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
test data is: StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.Expression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader(" not found.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.Expression();
    }
}
statement is: StringReader stringReader = new StringReader(" not found."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
TestCase is: String string = " not found.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).Expression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("         java JavaParser < inputfile")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeParameter()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeParameter()
statement is: ClassOrInterfaceBodyDeclaration(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceBodyDeclaration(false)
test data is: StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
javaParser.ClassOrInterfaceBodyDeclaration(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.ClassOrInterfaceBodyDeclaration(false);
        // Improved test data:
        StringReader stringReader = new StringReader("         java JavaParser < inputfile");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.ClassOrInterfaceBodyDeclaration(false);
        // Input file example:
        FileInputStream inputStream = new FileInputStream("input.txt");
        StringReader stringReader = new StringReader(inputStream);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
        javaParser.ClassOrInterfaceBodyDeclaration(false);
        // Input file example:
        FileInputStream inputStream = new FileInputStream("input.txt");
        StringReader stringReader = new StringReader(inputStream);
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeParameter();
    }
}
statement is: StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeParameter()V
statement is: javaParser.ClassOrInterfaceBodyDeclaration(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(false) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Improved test data:
StringReader stringReader = new StringReader("         java JavaParser < inputfile"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: TypeParameter()V
statement is: javaParser.ClassOrInterfaceBodyDeclaration(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(false) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 8
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Input file example:
FileInputStream inputStream = new FileInputStream("input.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader(inputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 13
Matched Method is: TypeParameter()V
statement is: javaParser.ClassOrInterfaceBodyDeclaration(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceBodyDeclaration(false) target is: javaParser method is: ClassOrInterfaceBodyDeclaration(boolean)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 13
Matched Method is: ClassOrInterfaceBodyDeclaration(Z)V
statement is: // Input file example:
FileInputStream inputStream = new FileInputStream("input.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader(inputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeParameter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeParameter() target is: javaParser method is: TypeParameter()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 18
Matched Method is: TypeParameter()V
TestCase is: String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((Reader) null)
statement is: getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token nextToken = javaParser.getNextToken()
test data is: JavaParser javaParser = new JavaParser((Reader) null);
javaParser.getNextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.getNextToken();
    }
}
statement is: Parser.getNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.getNextToken() target is: Parser method is: getNextToken()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("zs!Sw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: ReInit(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ReInit((InputStream) arg0)
test data is: StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        PipedInputStream pipedInputStream = new PipedInputStream();
        javaParser.ReInit(((InputStream) (pipedInputStream)));
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ReInit(((InputStream) (pipedInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ReInit(((InputStream) (pipedInputStream))) target is: javaParser method is: ReInit(InputStream)
TestCase is: PipedInputStream pipedInputStream = new PipedInputStream();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("zs!Sw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: EnumConstant()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EnumConstant()
test data is: StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.EnumConstant();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("ThisIsAString");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.EnumConstant();
    }
}
statement is: StringReader stringReader = new StringReader("ThisIsAString"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: javaParser.EnumConstant(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EnumConstant() target is: javaParser method is: EnumConstant()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: EnumConstant()V
TestCase is: String string = "ThisIsAString";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).EnumConstant();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A1eXB")
statement is: FieldDeclaration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FieldDeclaration((byte) (-15))
test data is: JavaParser javaParser = new JavaParser("A1eXB");
javaParser.FieldDeclaration((byte) (-15));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        JavaParser javaParser = new JavaParser("A1eXB");
        javaParser.FieldDeclaration(((byte) (20)));// byte is a primitive type that represents an 8-bit signed two's complement integer. In this case, the value of 20 is within the range of -128 to 127. }}

    }
}
statement is: // Improved test data
JavaParser javaParser = new JavaParser("A1eXB"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.FieldDeclaration(((byte) (20)))// byte is a primitive type that represents an 8-bit signed two's complement integer. In this case, the value of 20 is within the range of -128 to 127. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FieldDeclaration(((byte) (20)))// byte is a primitive type that represents an 8-bit signed two's complement integer. In this case, the value of 20 is within the range of -128 to 127. }}
 target is: javaParser method is: FieldDeclaration(byte)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: FieldDeclaration(I)V
TestCase is: String string = "A1eXB";
JavaParser javaParser = new JavaParser(string);
int _int = 20;
((JavaParser) string).FieldDeclaration(_int);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclarator()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: VariableDeclaratorId()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableDeclaratorId()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclaratorId();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.VariableDeclaratorId();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.VariableDeclaratorId(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableDeclaratorId() target is: javaParser method is: VariableDeclaratorId()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: VariableInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.VariableInitializer()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.VariableInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.VariableInitializer();
        // Improved test data
        StringReader improvedStringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n" + (("int age = 25; // Age of the user\n" + "String name = \"John Doe\"; // Name of the user\n") + "boolean isAdmin = false; // Is the user an administrator"));
        JavaParser improvedJavaParser = new JavaParser(improvedStringReader);
        improvedJavaParser.ForUpdate();
        improvedJavaParser.VariableInitializer();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ForUpdate()V
statement is: javaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.VariableInitializer() target is: javaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: VariableInitializer()V
statement is: // Improved test data
StringReader improvedStringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n" + (("int age = 25; // Age of the user\n" + "String name = \"John Doe\"; // Name of the user\n") + "boolean isAdmin = false; // Is the user an administrator")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser improvedJavaParser = new JavaParser(improvedStringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: improvedJavaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.ForUpdate() target is: improvedJavaParser method is: ForUpdate()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: ForUpdate()V
statement is: improvedJavaParser.VariableInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: improvedJavaParser.VariableInitializer() target is: improvedJavaParser method is: VariableInitializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: VariableInitializer()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: ArrayInitializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ArrayInitializer()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.ArrayInitializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello, World!");
        javaParser.ArrayInitializer();
    }
}
statement is: Parser javaParser = new JavaParser("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ArrayInitializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ArrayInitializer() target is: javaParser method is: ArrayInitializer()
TestCase is: String string = "Hello, World!";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MethodDeclarator()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MethodDeclarator()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MethodDeclarator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("B}w} F[Ne")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: FormalParameters()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.FormalParameters()
test data is: StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.FormalParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.FormalParameters();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.FormalParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.FormalParameters() target is: javaParser method is: FormalParameters()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("OR")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Initializer()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Initializer()
test data is: StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Initializer();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Initializer();
    }
}
statement is: StringReader stringReader = new StringReader("class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Initializer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Initializer() target is: javaParser method is: Initializer()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Initializer()V
TestCase is: String string = "class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("z!Sw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
test data is: StringReader stringReader = new StringReader("z!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.Type();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.Type();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Invalid escape character at line ")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Invalid escape character at line 12");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ClassOrInterfaceType();
        // Assert that an exception is thrown when the invalid escape character is encountered
        try {
            javaParser.ClassOrInterfaceType();
        } catch (ParseException e) {
            assertEquals("Invalid escape character at line 12", e.getMessage());
        }
    }
}
statement is: StringReader stringReader = new StringReader("Invalid escape character at line 12"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ClassOrInterfaceType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ClassOrInterfaceType() target is: javaParser method is: ClassOrInterfaceType()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ClassOrInterfaceType()V
statement is: // Assert that an exception is thrown when the invalid escape character is encountered
try {
    javaParser.ClassOrInterfaceType();
} catch (ParseException e) {
    assertEquals("Invalid escape character at line 12", e.getMessage());
}, class spoon.support.reflect.code.CtTryImpl
TestCase is: String string = "Invalid escape character at line 12";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceType();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: ClassOrInterfaceType()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ClassOrInterfaceType()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.ClassOrInterfaceType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        assertTrue(modifiers.contains("public"));
        assertTrue(modifiers.contains("abstract"));
        assertTrue(modifiers.contains("static"));
        assertTrue(modifiers.contains("final"));
    }
}
statement is: Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(modifiers.contains("public")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(modifiers.contains("public")) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(modifiers.contains("abstract")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(modifiers.contains("abstract")) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(modifiers.contains("static")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(modifiers.contains("static")) target is:  method is: assertTrue(<unknown>)
statement is: assertTrue(modifiers.contains("final")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(modifiers.contains("final")) target is:  method is: assertTrue(<unknown>)
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
JavaParser javaParser = new JavaParser(string);

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: TypeArguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArguments()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.TypeArguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.TypeArguments();
    }
}
statement is: Parser.TypeArguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.TypeArguments() target is: Parser method is: TypeArguments()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Name()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Name()
test data is: StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.Name();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.Name(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Name() target is: javaParser method is: Name()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for JavaParser conditional expression
        int a = 5;
        int b = 10;
        String c = "Hello";
        String d = "World";
        boolean e = true;
        JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        javaParser.ConditionalExpression(a, b, c, d, e);
    }
}
statement is: // Improved test data for JavaParser conditional expression
int a = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int b = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String c = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String d = "World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean e = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ConditionalExpression(a, b, c, d, e), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression(a, b, c, d, e) target is: javaParser method is: ConditionalExpression(int,int,java.lang.String,java.lang.String,boolean)
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 5;
int _int = 10;
String string = "Hello";
String string = "World";
boolean _boolean = true;
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Type()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Type()
statement is: ConditionalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalExpression()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.ConditionalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Type();
        javaParser.ConditionalExpression();
        // Test a more complex type
        stringReader = new StringReader("HashMap<String, Integer> map;");
        javaParser = new JavaParser(stringReader);
        javaParser.Type();
        // Test a conditional expression with multiple operators
        stringReader = new StringReader("if (a == b && c != d) return true;");
        javaParser = new JavaParser(stringReader);
        javaParser.ConditionalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("PIV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
statement is: // Test a more complex type
stringReader = new StringReader("HashMap<String, Integer> map;"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Type(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Type() target is: javaParser method is: Type()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Type()V
statement is: // Test a conditional expression with multiple operators
stringReader = new StringReader("if (a == b && c != d) return true;"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.ConditionalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalExpression() target is: javaParser method is: ConditionalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ConditionalExpression()V
TestCase is: String string = "PIV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();

statement is: org.evosuite.testcase.statements.ArrayStatement@1cd1ffae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3 };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ConditionalOrExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ 1, 2, 3 } Elements: [1, 2, 3]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
statement is: org.evosuite.testcase.statements.ArrayStatement@f54f5c0a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ConditionalOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalOrExpression()
test data is: byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.ConditionalOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xff)), ((byte) (0xaa)), ((byte) (0x55)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.ConditionalOrExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xff)), ((byte) (0xaa)), ((byte) (0x55)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ ((byte) (0xff)), ((byte) (0xaa)), ((byte) (0x55)) } Elements: [((byte) (0xff)), ((byte) (0xaa)), ((byte) (0x55))]
lengths: [0] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.ConditionalOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ConditionalOrExpression() target is: javaParser method is: ConditionalOrExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(".r]_tCHa5(h[I=#t;gX")
statement is: ConditionalAndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ConditionalAndExpression()
test data is: JavaParser javaParser = new JavaParser(".r]_tCHa5(h[I=#t;gX");
javaParser.ConditionalAndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ConditionalAndExpression();
    }
}
statement is: Parser.ConditionalAndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ConditionalAndExpression() target is: Parser method is: ConditionalAndExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV!.+k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InclusiveOrExpression();
        // Check whether the parsed expression matches the expected pattern
        assertTrue(javaParser.getInclusiveOrExpression().isPresent());
        assertEquals("PIV", javaParser.getInclusiveOrExpression().get().getName());
        assertEquals("+", javaParser.getInclusiveOrExpression().get().getOperator());
        assertEquals("k", javaParser.getInclusiveOrExpression().get().getRightOperand());
    }
}
statement is: StringReader stringReader = new StringReader("PIV!.+k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InclusiveOrExpression() target is: javaParser method is: InclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InclusiveOrExpression()V
statement is: // Check whether the parsed expression matches the expected pattern
assertTrue(javaParser.getInclusiveOrExpression().isPresent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check whether the parsed expression matches the expected pattern
assertTrue(javaParser.getInclusiveOrExpression().isPresent()) target is:  method is: assertTrue(<unknown>)
statement is: assertEquals("PIV", javaParser.getInclusiveOrExpression().get().getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("PIV", javaParser.getInclusiveOrExpression().get().getName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("+", javaParser.getInclusiveOrExpression().get().getOperator()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("+", javaParser.getInclusiveOrExpression().get().getOperator()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("k", javaParser.getInclusiveOrExpression().get().getRightOperand()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("k", javaParser.getInclusiveOrExpression().get().getRightOperand()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: String string = "PIV!.+k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("usj$nV")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a sample input for the JavaParser class.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ExclusiveOrExpression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a sample input for the JavaParser class."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ExclusiveOrExpression() target is: javaParser method is: ExclusiveOrExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ExclusiveOrExpression()V
TestCase is: String string = "This is a sample input for the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("eGD{i>~;9zO8]K`hv")
statement is: ExclusiveOrExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ExclusiveOrExpression()
test data is: JavaParser javaParser = new JavaParser("eGD{i>~;9zO8]K`hv");
javaParser.ExclusiveOrExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser.ExclusiveOrExpression();
        // Improved test data
        String input = "2 + 3 * 4";// Input expression

        int expectedResult = 10;// Expected result

        assertEquals(expectedResult, javaParser.evaluate(input));
    }
}
statement is: Parser.ExclusiveOrExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Parser.ExclusiveOrExpression() target is: Parser method is: ExclusiveOrExpression()
statement is: // Improved test data
String input = "2 + 3 * 4"// Input expression
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedResult = 10// Expected result
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedResult, javaParser.evaluate(input)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, javaParser.evaluate(input)) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: String string = "2 + 3 * 4"
* this is vulnerable: int _int = 10
TestCase is: String string = "2 + 3 * 4";
int _int = 10;

statement is: org.evosuite.testcase.statements.ArrayStatement@6ecac626 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: AndExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AndExpression()
test data is: byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.AndExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0x13)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.AndExpression();
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0x13)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0x13)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)), ((byte) (0x13))]
lengths: [5] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.AndExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.AndExpression() target is: javaParser method is: AndExpression()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("U9V\"E7")
statement is: EqualityExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.EqualityExpression()
test data is: JavaParser javaParser = new JavaParser("U9V\"E7");
javaParser.EqualityExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("U9V\"E7");
        javaParser.EqualityExpression(new BigDecimal("1000"), ">=");
    }
}
statement is: Parser javaParser = new JavaParser("U9V\"E7"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.EqualityExpression(new BigDecimal("1000"), ">="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.EqualityExpression(new BigDecimal("1000"), ">=") target is: javaParser method is: EqualityExpression(BigDecimal,java.lang.String)
TestCase is: String string = "U9V\"E7";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: InstanceOfExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.InstanceOfExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The JavaParser class is used to parse Java code and extract information about its components.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.InstanceOfExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The JavaParser class is used to parse Java code and extract information about its components."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.InstanceOfExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.InstanceOfExpression() target is: javaParser method is: InstanceOfExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: InstanceOfExpression()V
TestCase is: String string = "The JavaParser class is used to parse Java code and extract information about its components.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\t* \'java\' [options] <main class> [args...]\n\t* \'java\' [options] -jar <jarfile> [args...]\nOptions:\n\t-classpath <directories and zip/jar files>\n\t\tA : separated list of directories, JAR archives, and ZIP archives to search for class files.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\t* \'java\' [options] <main class> [args...]\n\t* \'java\' [options] -jar <jarfile> [args...]\nOptions:\n\t-classpath <directories and zip/jar files>\n\t\tA : separated list of directories, JAR archives, and ZIP archives to search for class files."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:\n\t* 'java' [options] <main class> [args...]\n\t* 'java' [options] -jar <jarfile> [args...]\nOptions:\n\t-classpath <directories and zip/jar files>\n\t\tA : separated list of directories, JAR archives, and ZIP archives to search for class files.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(new JavaLexer("Hello, World!"));
        javaParser.RelationalExpression();
    }
}
statement is: Parser javaParser = new JavaParser(new JavaLexer("Hello, World!")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: RelationalExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.RelationalExpression()
test data is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.RelationalExpression();
    }
}
statement is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.RelationalExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.RelationalExpression() target is: javaParser method is: RelationalExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: RelationalExpression()V
TestCase is: String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("1 + 2 * 3 - 4 / 5");
        javaParser.ShiftExpression();
    }
}
statement is: Parser javaParser = new JavaParser("1 + 2 * 3 - 4 / 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
TestCase is: String string = "1 + 2 * 3 - 4 / 5";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("'4DGR_D")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ShiftExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ShiftExpression()
test data is: StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("'4DGR_D");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.ShiftExpression();
    }
}
statement is: StringReader stringReader = new StringReader("'4DGR_D"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.ShiftExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ShiftExpression() target is: javaParser method is: ShiftExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: ShiftExpression()V
TestCase is: String string = "'4DGR_D";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A1eXB")
statement is: AdditiveExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.AdditiveExpression()
test data is: JavaParser javaParser = new JavaParser("A1eXB");
javaParser.AdditiveExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int num1 = 5;// a positive integer value

        int num2 = -10;// a negative integer value

        double double1 = 3.14;// a floating-point number

        String str1 = "Hello";// a string value

        char ch1 = 'a';// a character value }}

    }
}
statement is: int num1 = 5// a positive integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int num2 = -10// a negative integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -10
statement is: double double1 = 3.14// a floating-point number
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str1 = "Hello"// a string value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char ch1 = 'a'// a character value }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 5;
double _double = 3.14;
String string = "Hello";
char _char = 'a';

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("zs!Sw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("1234567890");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MultiplicativeExpression();
    }
}
statement is: StringReader stringReader = new StringReader("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MultiplicativeExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MultiplicativeExpression() target is: javaParser method is: MultiplicativeExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MultiplicativeExpression()V
TestCase is: String string = "1234567890";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("A1eXB")
statement is: MultiplicativeExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MultiplicativeExpression()
test data is: JavaParser javaParser = new JavaParser("A1eXB");
javaParser.MultiplicativeExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("10 + 2");
        assertEquals(12, javaParser.MultiplicativeExpression());
    }
}
statement is: Parser javaParser = new JavaParser("10 + 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(12, javaParser.MultiplicativeExpression()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(12, javaParser.MultiplicativeExpression()) target is:  method is: assertEquals(int,<unknown>)
TestCase is: String string = "10 + 2";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("2 + 3 * 4");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("2 + 3 * 4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "2 + 3 * 4";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("m8Gj2n\"G0l")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("m8Gj2n\"G0l");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression() target is: javaParser method is: UnaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpression()V
TestCase is: String string = "This is a test string.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null)
statement is: UnaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpression()
test data is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
javaParser.UnaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(((JavaParserTokenManager) (null)));
        String input1 = "x = 5;";
        javaParser.UnaryExpression(input1);
    }
}
statement is: Parser javaParser = new JavaParser(((JavaParserTokenManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String input1 = "x = 5;", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: javaParser.UnaryExpression(input1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpression(input1) target is: javaParser method is: UnaryExpression(java.lang.String)
* this is vulnerable: String string = "x = 5;"
TestCase is: JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
String string = "x = 5;";

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: UnaryExpressionNotPlusMinus()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.UnaryExpressionNotPlusMinus()
test data is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.UnaryExpressionNotPlusMinus();
        // Replace the hardcoded test data with more descriptive and representative values
        StringReader stringReader2 = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.UnaryExpressionNotPlusMinus();
        // Replace the hardcoded test data with more descriptive and representative values
        StringReader stringReader3 = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser3 = new JavaParser(stringReader3);
        javaParser3.UnaryExpressionNotPlusMinus();
        // Replace the hardcoded test data with more descriptive and representative values
        StringReader stringReader4 = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser4 = new JavaParser(stringReader4);
        javaParser4.UnaryExpressionNotPlusMinus();
    }
}
statement is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.UnaryExpressionNotPlusMinus() target is: javaParser method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: UnaryExpressionNotPlusMinus()V
statement is: // Replace the hardcoded test data with more descriptive and representative values
StringReader stringReader2 = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.UnaryExpressionNotPlusMinus() target is: javaParser2 method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 6
Matched Method is: UnaryExpressionNotPlusMinus()V
statement is: // Replace the hardcoded test data with more descriptive and representative values
StringReader stringReader3 = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser3 = new JavaParser(stringReader3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser3.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser3.UnaryExpressionNotPlusMinus() target is: javaParser3 method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 10
Matched Method is: UnaryExpressionNotPlusMinus()V
statement is: // Replace the hardcoded test data with more descriptive and representative values
StringReader stringReader4 = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser4 = new JavaParser(stringReader4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser4.UnaryExpressionNotPlusMinus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser4.UnaryExpressionNotPlusMinus() target is: javaParser4 method is: UnaryExpressionNotPlusMinus()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 14
Matched Method is: UnaryExpressionNotPlusMinus()V
TestCase is: String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PostfixExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PostfixExpression()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PostfixExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PostfixExpression()
test data is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PostfixExpression();
    }
}
statement is: StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PostfixExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PostfixExpression() target is: javaParser method is: PostfixExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PostfixExpression()V
TestCase is: String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("PIV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: PrimaryExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryExpression()
test data is: StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.PrimaryExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("PIV! +k:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.PrimaryExpression();
    }
}
statement is: StringReader stringReader = new StringReader("PIV! +k:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.PrimaryExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryExpression() target is: javaParser method is: PrimaryExpression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryExpression()V
TestCase is: String string = "PIV! +k:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).PrimaryExpression();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: ForUpdate()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.ForUpdate()
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.ForUpdate();
        javaParser.PrimaryPrefix();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.ForUpdate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.ForUpdate() target is: javaParser method is: ForUpdate()
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("hL'`\"p1NLz])x")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimaryPrefix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimaryPrefix()
test data is: StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryPrefix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("hL\'`\"p1NLz])x");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.PrimaryPrefix();
    }
}
statement is: StringReader stringReader = new StringReader("hL\'`\"p1NLz])x"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.PrimaryPrefix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimaryPrefix() target is: javaParser method is: PrimaryPrefix()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: PrimaryPrefix()V
TestCase is: String string = "hL'`\"p1NLz])x";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

statement is: org.evosuite.testcase.statements.ArrayStatement@95858bba type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: PrimarySuffix()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.PrimarySuffix()
test data is: byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
javaParser.PrimarySuffix();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        JavaParser javaParser = new JavaParser(byteArrayInputStream);
        javaParser.PrimarySuffix();
    }
}
statement is: // Improved test data
byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe))]
lengths: [8] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: JavaParser javaParser = new JavaParser(byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V
statement is: javaParser.PrimarySuffix(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.PrimarySuffix() target is: javaParser method is: PrimarySuffix()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet")
statement is: Arguments()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Arguments()
test data is: JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Arguments();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
        javaParser.Arguments();
    }
}
statement is: Parser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Arguments(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Arguments() target is: javaParser method is: Arguments()
TestCase is: String string = "com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser1 = new JavaParser(stringReader1);
        javaParser1.Statement();
        StringReader stringReader2 = new StringReader("{ (!)- \"XYZ7");
        JavaParser javaParser2 = new JavaParser(stringReader2);
        javaParser2.Statement();
    }
}
statement is: Parser javaParser1 = new JavaParser(stringReader1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser1.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser1.Statement() target is: javaParser1 method is: Statement()
statement is: StringReader stringReader2 = new StringReader("{ (!)- \"XYZ7"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser2 = new JavaParser(stringReader2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser2.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser2.Statement() target is: javaParser2 method is: Statement()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Statement()V
TestCase is: String string = "{ (!)- \"XYZ7";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("~IV!.+k:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Expression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Expression()
statement is: LocalVariableDeclaration()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.LocalVariableDeclaration()
test data is: StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.LocalVariableDeclaration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello, world! This is a sample input for testing.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.LocalVariableDeclaration();
        stringReader = new StringReader("This is a string with multiple words and special characters like !@#$%^&*().");
        javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.LocalVariableDeclaration();
        stringReader = new StringReader("1234567890 This is a string with only numbers.");
        javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.LocalVariableDeclaration();
        stringReader = new StringReader("This is a string with a mix of uppercase and lowercase letters.");
        javaParser = new JavaParser(stringReader);
        javaParser.Expression();
        javaParser.LocalVariableDeclaration();
    }
}
statement is: StringReader stringReader = new StringReader("Hello, world! This is a sample input for testing."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LocalVariableDeclaration()V
statement is: stringReader = new StringReader("This is a string with multiple words and special characters like !@#$%^&*()."), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LocalVariableDeclaration()V
statement is: stringReader = new StringReader("1234567890 This is a string with only numbers."), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LocalVariableDeclaration()V
statement is: stringReader = new StringReader("This is a string with a mix of uppercase and lowercase letters."), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.Expression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Expression() target is: javaParser method is: Expression()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Expression()V
statement is: javaParser.LocalVariableDeclaration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.LocalVariableDeclaration() target is: javaParser method is: LocalVariableDeclaration()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: LocalVariableDeclaration()V
TestCase is: String string = "Hello, world! This is a sample input for testing.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("+8Z#x8F~Ry_lb")
statement is: StatementExpression()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.StatementExpression()
test data is: JavaParser javaParser = new JavaParser("+8Z#x8F~Ry_lb");
javaParser.StatementExpression();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Hello World!");
        javaParser.StatementExpression();
    }
}
statement is: Parser javaParser = new JavaParser("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.StatementExpression(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.StatementExpression() target is: javaParser method is: StatementExpression()
TestCase is: String string = "Hello World!";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("zs!Sw")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValue()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValue()
statement is: Annotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Annotation()
test data is: StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
javaParser.Annotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Hello World!");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValue();
        javaParser.Annotation();
    }
}
statement is: StringReader stringReader = new StringReader("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValue(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValue() target is: javaParser method is: MemberValue()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValue()V
statement is: javaParser.Annotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Annotation() target is: javaParser method is: Annotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: Annotation()V
TestCase is: String string = "Hello World!";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).Annotation();

statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/")
statement is: MarkerAnnotation()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MarkerAnnotation()
test data is: JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
javaParser.MarkerAnnotation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // A more descriptive variable name
        String inputString = "x(sirCQ`7'*%eZ(#1/";
        JavaParser javaParser = new JavaParser(inputString);
        javaParser.MarkerAnnotation();
    }
}
statement is: // A more descriptive variable name
String inputString = "x(sirCQ`7'*%eZ(#1/", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser javaParser = new JavaParser(inputString), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MarkerAnnotation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MarkerAnnotation() target is: javaParser method is: MarkerAnnotation()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 1
Matched Method is: MarkerAnnotation()V
TestCase is: String string = "x(sirCQ`7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);
((JavaParser) string).MarkerAnnotation();

statement is: java.io.FileDescriptor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.FileDescriptor
statement code is: FileDescriptor fileDescriptor = new FileDescriptor()
statement is: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileInputStream
statement code is: MockFileInputStream mockFileInputStream = new MockFileInputStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaCharStream
statement code is: JavaCharStream javaCharStream = new JavaCharStream(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager
statement code is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(arg0)
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePair()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePair()
test data is: FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
javaParser.MemberValuePair();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FileDescriptor fileDescriptor = new FileDescriptor("C:\\path\\to\\file.txt");
        MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
        JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
        JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
        JavaParser javaParser = new JavaParser(javaParserTokenManager);
    }
}
statement is: FileDescriptor fileDescriptor = new FileDescriptor("C:\\path\\to\\file.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.evosuite.runtime.mock.java.io.MockFileInputStream(Ljava/io/FileDescriptor;)V
statement is: JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaCharStream(Ljava/io/InputStream;)V
statement is: JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V
statement is: JavaParser javaParser = new JavaParser(javaParserTokenManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:")
statement is: getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.Token
statement code is: Token token = javaParser.getToken(125)
test data is: JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.getToken(125);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser("Java Parser Version 1.2:  Usage is one of:");
        javaParser.getToken(125);
    }
}
statement is: Parser javaParser = new JavaParser("Java Parser Version 1.2:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.getToken(125), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.getToken(125) target is: javaParser method is: getToken(int)
TestCase is: String string = "Java Parser Version 1.2:  Usage is one of:";
JavaParser javaParser = new JavaParser(string);

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberSelector()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberSelector()
test data is: StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberSelector();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberSelector();
    }
}
statement is: StringReader stringReader = new StringReader("This is a test string for the JavaParser."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberSelector(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberSelector() target is: javaParser method is: MemberSelector()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberSelector()V
TestCase is: String string = "This is a test string for the JavaParser.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberSelector();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: MemberValuePairs()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.MemberValuePairs()
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValuePairs();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.MemberValuePairs();
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.MemberValuePairs(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.MemberValuePairs() target is: javaParser method is: MemberValuePairs()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: MemberValuePairs()V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("{(Pj!)-\"SXW4")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: Statement()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.Statement()
test data is: StringReader stringReader = new StringReader("{(Pj!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Statement();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Parser javaParser = new JavaParser(stringReader);
        javaParser.Statement();
    }
}
statement is: Parser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V
statement is: javaParser.Statement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.Statement() target is: javaParser method is: Statement()
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:")
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: TypeArgument()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.TypeArgument()
statement is: org.evosuite.runtime.mock.java.io.MockPrintWriter(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintWriter
statement code is: MockPrintWriter mockPrintWriter = new MockPrintWriter("^=")
statement is: dump(Ljava/io/Writer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: javaParser.dump(arg0)
test data is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
MockPrintWriter mockPrintWriter = new MockPrintWriter("^=");
javaParser.dump(mockPrintWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
        JavaParser javaParser = new JavaParser(stringReader);
        javaParser.TypeArgument();
        MockPrintWriter mockPrintWriter = new MockPrintWriter("^=");
        javaParser.dump(mockPrintWriter);
    }
}
statement is: StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JavaParser javaParser = new JavaParser(stringReader), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.TypeArgument(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.TypeArgument() target is: javaParser method is: TypeArgument()
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: TypeArgument()V
statement is: MockPrintWriter mockPrintWriter = new MockPrintWriter("^="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: javaParser.dump(mockPrintWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.dump(mockPrintWriter) target is: javaParser method is: dump(MockPrintWriter)
source statement: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/Reader;)V callee: VariableReference: Statement 1, type com.soops.CEN4010.JMCA.JParser.JavaParserindex is: 2
Matched Method is: dump(Ljava/io/Writer;)V
TestCase is: String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
String string = "^=";
MockPrintWriter mockPrintWriter = new MockPrintWriter(string);
((JavaParser) stringReader).dump(mockPrintWriter);

statement is: org.evosuite.testcase.statements.ArrayStatement@3f738c47 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ca35a64e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "}O@c/"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JavaParser.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "}O@c/";
JavaParser.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World!";
        JavaParser.main(stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JavaParser.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JavaParser.main(stringArray) target is: JavaParser method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[1];
String string = "Hello World!";
stringArray[0] = string;
JavaParser.main(stringArray);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: com.soops.CEN4010.JMCA.JParser.JavaParser(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JParser.JavaParser
statement code is: JavaParser javaParser = new JavaParser(arg0)
statement is: generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.soops.CEN4010.JMCA.JParser.ParseException
statement code is: ParseException generateParseException = javaParser.generateParseException()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.generateParseException();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        pipedInputStream = PipedInputStream("This is a sample input string for testing");
        javaParser = JavaParser(pipedInputStream);
        javaParser.generateParseException();
    }
}
statement is: pipedInputStream = PipedInputStream("This is a sample input string for testing"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser = JavaParser(pipedInputStream), class spoon.support.reflect.code.CtAssignmentImpl
statement is: javaParser.generateParseException(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: javaParser.generateParseException() target is: javaParser method is: generateParseException()
* test suite isTestSuite: 498
Test 0: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1");
FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression");
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
Test 2: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) stringReader);
Test 3: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.disable_tracing();
Test 4: 
JavaParser javaParser = new JavaParser("zs!Sw");
javaParser.enable_tracing();
Test 5: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)0);
Test 6: 
JavaParser.ModifierSet.removeModifier(12, 12);
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)99);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(49);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(82);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1605));
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1604));
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(3010);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(2393);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(1877);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(27);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(37);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-210));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2601));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(71);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-3621));
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-210));
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-3465));
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2101);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient((-1));
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(94);
Test 26: 
String[] stringArray = new String[12];
JavaParser.main(stringArray);
Test 27: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 28: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: PIV
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
JavaParser javaParser = new JavaParser("\"strictfp\"");
javaParser.CompilationUnit();
Test 30: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
StringReader stringReader = new StringReader(",U++Bm8g");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Modifiers();
Test 34: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ClassOrInterfaceDeclaration(100);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceDeclaration(2075);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: usj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
StringReader stringReader = new StringReader("0v](UxZ/dYebOU\"3/");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 41: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration(4357);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: An
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"SXW4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 48: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
StringReader stringReader = new StringReader("V01oImNMaj:%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: V01oImNMaj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source = null;
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, (byte)66, 3523, (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 66, column 3523.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 53: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[2];
stringReader.read(charArray);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
JavaParser javaParser = new JavaParser("Invalid escape character at line ");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 63: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 64: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, (-857), (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -857, column -858.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 71: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 72: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration((-1583));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 75: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 79: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 80: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
JavaParser javaParser = new JavaParser(javaParser.token_source);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 83: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 84: 
StringReader stringReader = new StringReader("yInKTcd~/[GF!#Jl}=");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 86: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 87: 
StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
JavaParser javaParser = new JavaParser("PostfixExpression");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Expression();
Test 92: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
Test 94: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 96: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 97: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
StringReader stringReader = new StringReader("q^AdX@OV#;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 99: 
StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 100: 
StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
Test 101: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 102: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();
javaParser.AndExpression();
Test 104: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");
javaParser.Expression();
Test 105: 
StringReader stringReader = new StringReader("B}wF[N");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("Dh=GbFhX9x");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.Expression();
Test 112: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("&|K3J_d&W, N");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: &
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 116: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Literal();
// Undeclared exception!
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 119: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: J0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("}");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 122: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 126: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimarySuffix();
Test 129: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 130: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 131: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
StringReader stringReader = new StringReader("`vuHW6j`O`D-9bd-4vQ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 133: 
SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww}");
javaParser.StatementExpressionList();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParser javaParser = new JavaParser("K|>?q-");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 137: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
JavaParser javaParser = new JavaParser("`");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 140: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 38.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
SystemInUtil.addInputLine("X\"vM%Hc");
JavaParser javaParser = new JavaParser("");
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"vM%Hc\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 151: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("d_KE{?c:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: protected
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 160: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 161: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("~8;nTr&s[{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
JavaParser javaParser = new JavaParser("60*v2<");
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 53.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 170: 
StringReader stringReader = new StringReader("PBJ'-wC}90q{v");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"w\" (119), after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 171: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 176: 
JavaParser javaParser = new JavaParser("=N*S}#P!e[HW");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 178: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 179: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 180: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 183: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 185: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 187: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 189: 
StringReader stringReader = new StringReader("#o[fYsqYgJ&89#C|=C");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
StringReader stringReader = new StringReader("0#W");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 196: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("         java JavaParser inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 10.  Encountered: java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: 7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser("cT v.oF#-l[|K0Mb3");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 203: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 204: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .3
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 206: 
JavaParser javaParser = new JavaParser("zs!Sw");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration(0);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeDeclaration(799);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 210: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 212: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
JavaParser javaParser = new JavaParser(".Qv!&&&)hBg7}>Wdj-");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
stringReader.read(charArray);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.Expression();
Test 219: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.getNextToken();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 221: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 222: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 223: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.FieldDeclaration((byte) (-15));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 225: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.VariableInitializer();
Test 227: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: OR
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader("z!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceType();
Test 233: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
Test 236: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
Test 237: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 238: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 239: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 240: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
JavaParser javaParser = new JavaParser(".r]_tCHa5(h[I=#t;gX");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 243: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 244: 
JavaParser javaParser = new JavaParser("eGD{i>~;9zO8]K`hv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 245: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 246: 
JavaParser javaParser = new JavaParser("U9V\"E7");
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 247: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 248: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 249: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 250: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 251: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 252: 
StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"D\" (68), after : \"\\'4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 253: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 254: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 255: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 256: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 257: 
StringReader stringReader = new StringReader("m8Gj2n\"G0l");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\\"G0l\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 258: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 260: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 261: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 262: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 263: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 264: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 266: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 267: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.PrimaryPrefix();
Test 268: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"\\\"\" (34), after : \"\\'`\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 270: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 271: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
JavaParser javaParser = new JavaParser("+8Z#x8F~Ry_lb");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 276: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 277: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 278: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.getToken(125);
Test 279: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 280: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 281: 
StringReader stringReader = new StringReader("{(Pj!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 282: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
MockPrintWriter mockPrintWriter = new MockPrintWriter("^=");
javaParser.dump(mockPrintWriter);
Test 283: 
String[] stringArray = new String[1];
stringArray[0] = "}O@c/";
JavaParser.main(stringArray);
Test 284: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 285: 
FileSystemHandling.appendLineToFile((EvoSuiteFile) "ShiftExpression", (String) null);
String string = "x(sirCQ`7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

Test 286: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: 'JavaParser' or 'JavaParser'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReInit((Reader) stringReader);

Test 287: 
JavaParser javaParser = new JavaParser("This is a sample input string for testing purposes.");
((JavaParser)"This is a sample input string for testing purposes.").enable_tracing();

Test 288: 
JavaParser.ModifierSet.removeModifier(12, (int) "Awesome Test");

Test 289: 
JavaParser.main((String[]) null);

Test 290: 
StringReader stringReader = new StringReader("PIV!@#$%^&*()_+-=[]{}|;':\",./<>?\t\n\r\f\b\u0000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).CompilationUnit();

Test 291: 
StringReader stringReader = new StringReader("PIV!#$@%.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

Test 292: 
JavaParser javaParser = new JavaParser("\"strictfp\"");

Test 293: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PackageDeclaration();

Test 294: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ImportDeclaration();

Test 295: 

Test 296: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Modifiers();

Test 297: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).TypeDeclaration();

Test 298: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 299: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(true);

Test 300: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ImplementsList(false);

Test 301: 

Test 302: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumDeclaration((int) "lineNumber");

Test 303: 

Test 304: 
StringReader stringReader = new StringReader("class Test { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumBody();

Test 305: 
StringReader stringReader = new StringReader("An interface can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

Test 306: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).ReferenceType();

Test 307: 
char[] charArray = new char[5];
JavaParser javaParser = new JavaParser((Reader) charArray);

Test 308: 

Test 309: 
StringReader stringReader = new StringReader("V01oImNMaj:This is a sample string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

Test 310: 
StringReader stringReader = new StringReader("{()-\"myClassName");
JavaParser javaParser = new JavaParser(stringReader);

Test 311: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);

Test 312: 
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 66, 3523, 3523, (int) (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 313: 
StringReader stringReader = new StringReader("42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 314: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
JavaParser javaParser = new JavaParser(stringReader);

Test 315: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);

Test 316: 
StringReader stringReader = new StringReader("public class TestClass { }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 317: 
char[] charArray = new char[2];

Test 318: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 319: 

Test 320: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 321: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 32;
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, _int, (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 322: 
StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 323: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 324: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 325: 
StringReader stringReader = new StringReader("This is a test string that will be used to parse the Java code.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 326: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MethodDeclaration((int) "myMethodName");

Test 327: 
JavaParser javaParser = new JavaParser("hello");
((JavaParser)5).ConstructorDeclaration();

Test 328: 
StringReader stringReader = new StringReader("This is a sample string that contains a constructor invocation.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 329: 
StringReader stringReader = new StringReader("int x; double y; String s; int[] a; Integer[] b;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 330: 
StringReader stringReader = new StringReader("This is a sample input for testing the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 331: 

Test 332: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 333: 

Test 334: 
StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 335: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 336: 
StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 337: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: variable_initializer | primitive_type");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).PrimitiveType();

Test 338: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimitiveType();

Test 339: 

Test 340: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
((JavaParser)"com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet").Expression();

Test 341: 
JavaParser javaParser = new JavaParser("Java 14");

Test 342: 
StringReader stringReader = new StringReader("John:Smith,Jane:Doe");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

Test 343: 
StringReader stringReader = new StringReader("Testing123");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

Test 344: 

Test 345: 
StringReader stringReader = new StringReader("x + y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 346: 
JavaParser javaParser = new JavaParser("0#W");

Test 347: 

Test 348: 
StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);

Test 349: 
StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 350: 
StringReader stringReader = new StringReader("This is a test string for parsing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 351: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 352: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).AndExpression();

Test 353: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");

Test 354: 
StringReader stringReader = new StringReader("2+2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 355: 
StringReader stringReader = new StringReader("PIV!1234567890:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

Test 356: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

Test 357: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 358: 
StringReader stringReader = new StringReader("A complex sentence with multiple words.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 359: 
StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

Test 360: 
JavaParser javaParser = new JavaParser("x && y || z && (a != b)");
((JavaParser)"x && y || z && (a != b)").AndExpression();

Test 361: 
StringReader stringReader = new StringReader("x += 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreIncrementExpression();

Test 362: 
JavaParser javaParser = new JavaParser("TestString");

Test 363: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
((JavaParser)123).UnaryExpressionNotPlusMinus();

Test 364: 
JavaParser javaParser = new JavaParser("0x12345678");

Test 365: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();
((JavaParser) stringReader).ConditionalAndExpression();

Test 366: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

Test 367: 
JavaParser javaParser = new JavaParser((Reader) "int x = (int) y;");
javaParser.CastExpression();

Test 368: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).CastExpression();

Test 369: 

Test 370: 

Test 371: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

Test 372: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 373: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

Test 374: 
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser)5).PrimarySuffix();

Test 375: 

Test 376: 
StringReader stringReader = new StringReader("A sample input string for testing the JavaParser with a more descriptive and representative data.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();

Test 377: 
SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww{");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).BooleanLiteral();

Test 378: 
JavaParser javaParser = new JavaParser("false");

Test 379: 
JavaParser javaParser = new JavaParser("K|>?q-");

Test 380: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");

Test 381: 

Test 382: 
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) 4096, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);

Test 383: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

Test 384: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();
String string = "Java Parser Version 1.2:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 385: 
StringReader stringReader = new StringReader("SampleCode.java");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 386: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 387: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

Test 388: 
StringReader stringReader = new StringReader("PIV!Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id pretium ligula.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

Test 389: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 390: 
JavaParser javaParser = new JavaParser("PIV!1234567890-k");

Test 391: 
SystemInUtil.addInputLine("Hello World!");
JavaParser javaParser = new JavaParser("");
((JavaParser)null).Statement();

Test 392: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();
String string = "Java Parser Version 2.0:  Usage is one of the following:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();

Test 393: 
StringReader stringReader = new StringReader("This is a sample input string for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 394: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { int x = 10; double y = 3.14159; String z = \"Hello, world!\"; char c = 'A'; } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).Block();

Test 395: 
JavaParser javaParser = new JavaParser((String) null);

Test 396: 

Test 397: 
StringReader stringReader = new StringReader("This is a test string for parsing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

Test 398: 
StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 399: 
StringReader stringReader = new StringReader("20");

Test 400: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 401: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);

Test 402: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();
String string = "Hello, World! This is a sample input for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();

Test 403: 
StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

Test 404: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 405: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).InstanceOfExpression();

Test 406: 
StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 407: 
StringReader stringReader = new StringReader("public class MyClass { ... }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 408: 
JavaParser javaParser = new JavaParser("PIV!.+k:");

Test 409: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchLabel();

Test 410: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();
String string = "Java Parser Version 1.1:  Usage is one of: If (condition) { statements; } else if (condition) { statements; } else { statements; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 411: 
StringReader stringReader = new StringReader("I love to read books.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WhileStatement();

Test 412: 

Test 413: 

Test 414: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: <br>-u,--username=USERNAME       the username to use for authentication<br>-p,--password=PASSWORD       the password to use for authentication<br>--help                           display this help message and exit");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForStatement();

Test 415: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 416: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 417: 
StringReader stringReader = new StringReader("1234567890ABCDEF");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 418: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 419: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 420: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 421: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

Test 422: 
StringReader stringReader = new StringReader("This is a test string with some numbers 123 and some characters $%^&*().");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 423: 
StringReader stringReader = new StringReader("10#W");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 424: 
StringReader stringReader = new StringReader("12");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

Test 425: 
JavaParser javaParser = new JavaParser("continue;");

Test 426: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "if (x > 0) { return x; } else { return -x; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "while (true) { return 42; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 427: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

Test 428: 
JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/");
JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/);");
((JavaParser)"x(sirCQ'7'*%eZ(#1/").SynchronizedStatement();
String string = "x(sirCQ'7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

Test 429: 
StringReader stringReader = new StringReader("         java JavaParser inputfile.txt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

Test 430: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RUNSIGNEDSHIFT();

Test 431: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

Test 432: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 433: 
JavaParser javaParser = new JavaParser("This is a string.");

Test 434: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "Hello World");

Test 435: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 436: 
StringReader stringReader = new StringReader("123456789");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

Test 437: 
StringReader stringReader = new StringReader("@MyAnnotation(value = \"Hello World!\")");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

Test 438: 

Test 439: 
JavaParser javaParser = new JavaParser("path/to/valid/java/file.java");

Test 440: 
StringReader stringReader = new StringReader("Invalid escape character at line 42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeDeclaration(0);

Test 441: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 442: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);

Test 443: 

Test 444: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 445: 
JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");

Test 446: 
JavaParser javaParser = new JavaParser("A string that represents a valid Java source code");

Test 447: 
StringReader stringReader = new StringReader("myIdentifier");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 448: 
StringReader stringReader = new StringReader("A valid Java code");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
((Reader)"A valid Java code").read(charArray);

Test 449: 
StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).Expression();

Test 450: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 451: 
PipedInputStream pipedInputStream = new PipedInputStream();

Test 452: 
StringReader stringReader = new StringReader("ThisIsAString");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).EnumConstant();

Test 453: 
JavaParser javaParser = new JavaParser("A1eXB");
((JavaParser)"A1eXB").FieldDeclaration(20);

Test 454: 
String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();

Test 455: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 456: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);

Test 457: 
StringReader stringReader = new StringReader("class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

Test 458: 
StringReader stringReader = new StringReader("Invalid escape character at line 12");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceType();

Test 459: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 460: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 461: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 462: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();

Test 463: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 464: 
StringReader stringReader = new StringReader("This is a sample input for the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 465: 

Test 466: 
JavaParser javaParser = new JavaParser("U9V\"E7");

Test 467: 
StringReader stringReader = new StringReader("The JavaParser class is used to parse Java code and extract information about its components.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 468: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\t* 'java' [options] <main class> [args...]\n\t* 'java' [options] -jar <jarfile> [args...]\nOptions:\n\t-classpath <directories and zip/jar files>\n\t\tA : separated list of directories, JAR archives, and ZIP archives to search for class files.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 469: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 470: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 471: 
JavaParser javaParser = new JavaParser("1 + 2 * 3 - 4 / 5");

Test 472: 
StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 473: 

Test 474: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 475: 
JavaParser javaParser = new JavaParser("10 + 2");

Test 476: 
StringReader stringReader = new StringReader("2 + 3 * 4");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 477: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 478: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 479: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 480: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 481: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 482: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 483: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 484: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 485: 
StringReader stringReader = new StringReader("PIV! +k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).PrimaryExpression();

Test 486: 
StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 487: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 488: 
StringReader stringReader = new StringReader("{ (!)- \"XYZ7");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 489: 
StringReader stringReader = new StringReader("Hello, world! This is a sample input for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();

Test 490: 
JavaParser javaParser = new JavaParser("Hello World!");

Test 491: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).Annotation();

Test 492: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
((JavaParser)"x(sirCQ`7'*%eZ(#1/").MarkerAnnotation();

Test 493: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.2:  Usage is one of:");

Test 494: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberSelector();

Test 495: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

Test 496: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
String string = "^=";
MockPrintWriter mockPrintWriter = new MockPrintWriter(string);
((JavaParser) stringReader).dump(mockPrintWriter);

Test 497: 
String[] stringArray = new String[1];
stringArray[0] = "Hello World!";
JavaParser.main(stringArray);


* Generated after the refinement and before minimization 498 tests with total length 1463
* test suite isTestSuite: 498
Test 0: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1");
FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression");
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
Test 2: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) stringReader);
Test 3: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.disable_tracing();
Test 4: 
JavaParser javaParser = new JavaParser("zs!Sw");
javaParser.enable_tracing();
Test 5: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)0);
Test 6: 
JavaParser.ModifierSet.removeModifier(12, 12);
Test 7: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)99);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(49);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(82);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1605));
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1604));
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(3010);
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(2393);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(1877);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(27);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(37);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-210));
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2601));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(71);
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-3621));
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-210));
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-3465));
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2101);
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient((-1));
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(94);
Test 26: 
String[] stringArray = new String[12];
JavaParser.main(stringArray);
Test 27: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 28: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: PIV
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
JavaParser javaParser = new JavaParser("\"strictfp\"");
javaParser.CompilationUnit();
Test 30: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
StringReader stringReader = new StringReader(",U++Bm8g");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Modifiers();
Test 34: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ClassOrInterfaceDeclaration(100);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 36: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceDeclaration(2075);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: usj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
StringReader stringReader = new StringReader("0v](UxZ/dYebOU\"3/");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 41: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration(4357);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 42: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: An
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 47: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"SXW4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 48: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
StringReader stringReader = new StringReader("V01oImNMaj:%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: V01oImNMaj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 51: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source = null;
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, (byte)66, 3523, (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 66, column 3523.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 53: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 59: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[2];
stringReader.read(charArray);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
JavaParser javaParser = new JavaParser("Invalid escape character at line ");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 62: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 63: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 64: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, (-857), (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -857, column -858.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 69: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 70: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 71: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 72: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration((-1583));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 74: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 75: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 79: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 80: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
JavaParser javaParser = new JavaParser(javaParser.token_source);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 83: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 84: 
StringReader stringReader = new StringReader("yInKTcd~/[GF!#Jl}=");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 85: 
StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 86: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 87: 
StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 88: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
JavaParser javaParser = new JavaParser("PostfixExpression");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Expression();
Test 92: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 93: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
Test 94: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 95: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 96: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 97: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 98: 
StringReader stringReader = new StringReader("q^AdX@OV#;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 99: 
StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 100: 
StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
Test 101: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 102: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 103: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();
javaParser.AndExpression();
Test 104: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");
javaParser.Expression();
Test 105: 
StringReader stringReader = new StringReader("B}wF[N");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 106: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader("Dh=GbFhX9x");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.Expression();
Test 112: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("&|K3J_d&W, N");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: &
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 114: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 116: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Literal();
// Undeclared exception!
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 119: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: J0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 120: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("}");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 122: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 123: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 126: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 128: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimarySuffix();
Test 129: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 130: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 131: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 132: 
StringReader stringReader = new StringReader("`vuHW6j`O`D-9bd-4vQ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 133: 
SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww}");
javaParser.StatementExpressionList();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 134: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParser javaParser = new JavaParser("K|>?q-");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 137: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 138: 
JavaParser javaParser = new JavaParser("`");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 140: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 143: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 38.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
SystemInUtil.addInputLine("X\"vM%Hc");
JavaParser javaParser = new JavaParser("");
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"vM%Hc\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 151: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 153: 
StringReader stringReader = new StringReader("d_KE{?c:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: protected
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 160: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 161: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 162: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("~8;nTr&s[{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
JavaParser javaParser = new JavaParser("60*v2<");
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 53.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 170: 
StringReader stringReader = new StringReader("PBJ'-wC}90q{v");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"w\" (119), after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 171: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 176: 
JavaParser javaParser = new JavaParser("=N*S}#P!e[HW");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 178: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 179: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 180: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 183: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 184: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 185: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 187: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 189: 
StringReader stringReader = new StringReader("#o[fYsqYgJ&89#C|=C");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 190: 
StringReader stringReader = new StringReader("0#W");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 196: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("         java JavaParser inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 10.  Encountered: java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: 7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser("cT v.oF#-l[|K0Mb3");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 203: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 204: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .3
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 206: 
JavaParser javaParser = new JavaParser("zs!Sw");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration(0);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeDeclaration(799);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 210: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 211: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 212: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 213: 
JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
JavaParser javaParser = new JavaParser(".Qv!&&&)hBg7}>Wdj-");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
stringReader.read(charArray);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.Expression();
Test 219: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.getNextToken();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 221: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 222: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 223: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.FieldDeclaration((byte) (-15));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 225: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.VariableInitializer();
Test 227: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: OR
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader("z!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceType();
Test 233: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
Test 236: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
Test 237: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 238: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 239: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 240: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 241: 
JavaParser javaParser = new JavaParser(".r]_tCHa5(h[I=#t;gX");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 242: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 243: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 244: 
JavaParser javaParser = new JavaParser("eGD{i>~;9zO8]K`hv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 245: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 246: 
JavaParser javaParser = new JavaParser("U9V\"E7");
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 247: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 248: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 249: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 250: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 251: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 252: 
StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"D\" (68), after : \"\\'4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 253: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 254: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 255: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 256: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 257: 
StringReader stringReader = new StringReader("m8Gj2n\"G0l");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\\"G0l\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 258: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 259: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 260: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 261: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 262: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 263: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 264: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 266: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 267: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.PrimaryPrefix();
Test 268: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 269: 
StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"\\\"\" (34), after : \"\\'`\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 270: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 271: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 274: 
JavaParser javaParser = new JavaParser("+8Z#x8F~Ry_lb");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 276: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 277: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 278: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.getToken(125);
Test 279: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 280: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 281: 
StringReader stringReader = new StringReader("{(Pj!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 282: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
MockPrintWriter mockPrintWriter = new MockPrintWriter("^=");
javaParser.dump(mockPrintWriter);
Test 283: 
String[] stringArray = new String[1];
stringArray[0] = "}O@c/";
JavaParser.main(stringArray);
Test 284: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 285: 
FileSystemHandling.appendLineToFile((EvoSuiteFile) "ShiftExpression", (String) null);
String string = "x(sirCQ`7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

Test 286: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: 'JavaParser' or 'JavaParser'");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReInit((Reader) stringReader);

Test 287: 
JavaParser javaParser = new JavaParser("This is a sample input string for testing purposes.");
((JavaParser)"This is a sample input string for testing purposes.").enable_tracing();

Test 288: 
JavaParser.ModifierSet.removeModifier(12, (int) "Awesome Test");

Test 289: 
JavaParser.main((String[]) null);

Test 290: 
StringReader stringReader = new StringReader("PIV!@#$%^&*()_+-=[]{}|;':\",./<>?\t\n\r\f\b\u0000");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).CompilationUnit();

Test 291: 
StringReader stringReader = new StringReader("PIV!#$@%.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CompilationUnit();

Test 292: 
JavaParser javaParser = new JavaParser("\"strictfp\"");

Test 293: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PackageDeclaration();

Test 294: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ImportDeclaration();

Test 295: 

Test 296: 
StringReader stringReader = new StringReader("public class Test { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Modifiers();

Test 297: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
((JavaParser) enumeration).TypeDeclaration();

Test 298: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 299: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExtendsList(true);

Test 300: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ImplementsList(false);

Test 301: 

Test 302: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumDeclaration((int) "lineNumber");

Test 303: 

Test 304: 
StringReader stringReader = new StringReader("class Test { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EnumBody();

Test 305: 
StringReader stringReader = new StringReader("An interface can implement multiple interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameters();

Test 306: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
((JavaParser) stringReader).ReferenceType();

Test 307: 
char[] charArray = new char[5];
JavaParser javaParser = new JavaParser((Reader) charArray);

Test 308: 

Test 309: 
StringReader stringReader = new StringReader("V01oImNMaj:This is a sample string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeBound();

Test 310: 
StringReader stringReader = new StringReader("{()-\"myClassName");
JavaParser javaParser = new JavaParser(stringReader);

Test 311: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);

Test 312: 
JavaCharStream javaCharStream = new JavaCharStream((InputStream) 66, 3523, 3523, (int) (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 313: 
StringReader stringReader = new StringReader("42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 314: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
JavaParser javaParser = new JavaParser(stringReader);

Test 315: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);

Test 316: 
StringReader stringReader = new StringReader("public class TestClass { }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();

Test 317: 
char[] charArray = new char[2];

Test 318: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 319: 

Test 320: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 321: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 32;
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, _int, (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);

Test 322: 
StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 323: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 324: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 325: 
StringReader stringReader = new StringReader("This is a test string that will be used to parse the Java code.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();

Test 326: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MethodDeclaration((int) "myMethodName");

Test 327: 
JavaParser javaParser = new JavaParser("hello");
((JavaParser)5).ConstructorDeclaration();

Test 328: 
StringReader stringReader = new StringReader("This is a sample string that contains a constructor invocation.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExplicitConstructorInvocation();

Test 329: 
StringReader stringReader = new StringReader("int x; double y; String s; int[] a; Integer[] b;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 330: 
StringReader stringReader = new StringReader("This is a sample input for testing the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();

Test 331: 

Test 332: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 333: 

Test 334: 
StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 335: 
JavaParser javaParser = new JavaParser((Reader) null);

Test 336: 
StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WildcardBounds();

Test 337: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: variable_initializer | primitive_type");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).PrimitiveType();

Test 338: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimitiveType();

Test 339: 

Test 340: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
((JavaParser)"com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet").Expression();

Test 341: 
JavaParser javaParser = new JavaParser("Java 14");

Test 342: 
StringReader stringReader = new StringReader("John:Smith,Jane:Doe");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

Test 343: 
StringReader stringReader = new StringReader("Testing123");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).NameList();

Test 344: 

Test 345: 
StringReader stringReader = new StringReader("x + y");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 346: 
JavaParser javaParser = new JavaParser("0#W");

Test 347: 

Test 348: 
StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);

Test 349: 
StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 350: 
StringReader stringReader = new StringReader("This is a test string for parsing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 351: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 352: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();
((JavaParser) stringReader).AndExpression();

Test 353: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");

Test 354: 
StringReader stringReader = new StringReader("2+2");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();

Test 355: 
StringReader stringReader = new StringReader("PIV!1234567890:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

Test 356: 
StringReader stringReader = new StringReader("This is a test sentence.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

Test 357: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='UTF-8' ?>");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 358: 
StringReader stringReader = new StringReader("A complex sentence with multiple words.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 359: 
StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).Expression();

Test 360: 
JavaParser javaParser = new JavaParser("x && y || z && (a != b)");
((JavaParser)"x && y || z && (a != b)").AndExpression();

Test 361: 
StringReader stringReader = new StringReader("x += 5;");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PreIncrementExpression();

Test 362: 
JavaParser javaParser = new JavaParser("TestString");

Test 363: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
((JavaParser)123).UnaryExpressionNotPlusMinus();

Test 364: 
JavaParser javaParser = new JavaParser("0x12345678");

Test 365: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();
((JavaParser) stringReader).ConditionalAndExpression();

Test 366: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).CastLookahead();

Test 367: 
JavaParser javaParser = new JavaParser((Reader) "int x = (int) y;");
javaParser.CastExpression();

Test 368: 
StringReader stringReader = new StringReader("Java Parser Version 1.1: Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).CastExpression();

Test 369: 

Test 370: 

Test 371: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

Test 372: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 373: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimarySuffix();

Test 374: 
JavaParser javaParser = new JavaParser((Reader) null);
((JavaParser)5).PrimarySuffix();

Test 375: 

Test 376: 
StringReader stringReader = new StringReader("A sample input string for testing the JavaParser with a more descriptive and representative data.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Literal();

Test 377: 
SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww{");
((JavaParser)null).StatementExpressionList();
((JavaParser) _void).BooleanLiteral();

Test 378: 
JavaParser javaParser = new JavaParser("false");

Test 379: 
JavaParser javaParser = new JavaParser("K|>?q-");

Test 380: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");

Test 381: 

Test 382: 
BufferedInputStream bufferedInputStream = new BufferedInputStream((InputStream) 4096, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);

Test 383: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ArrayDimsAndInits();

Test 384: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();
String string = "Java Parser Version 1.2:  Usage is one of:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ArrayDimsAndInits();

Test 385: 
StringReader stringReader = new StringReader("SampleCode.java");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 386: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();

Test 387: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

Test 388: 
StringReader stringReader = new StringReader("PIV!Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id pretium ligula.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Statement();

Test 389: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 390: 
JavaParser javaParser = new JavaParser("PIV!1234567890-k");

Test 391: 
SystemInUtil.addInputLine("Hello World!");
JavaParser javaParser = new JavaParser("");
((JavaParser)null).Statement();

Test 392: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();
String string = "Java Parser Version 2.0:  Usage is one of the following:";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AssertStatement();

Test 393: 
StringReader stringReader = new StringReader("This is a sample input string for testing the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).LabeledStatement();

Test 394: 
StringReader stringReader = new StringReader("public class MyClass { public static void main(String[] args) { int x = 10; double y = 3.14159; String z = \"Hello, world!\"; char c = 'A'; } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReferenceType();
((JavaParser) stringReader).Block();

Test 395: 
JavaParser javaParser = new JavaParser((String) null);

Test 396: 

Test 397: 
StringReader stringReader = new StringReader("This is a test string for parsing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).EmptyStatement();

Test 398: 
StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 399: 
StringReader stringReader = new StringReader("20");

Test 400: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 401: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);

Test 402: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();
String string = "Hello, World! This is a sample input for testing the JavaParser class.";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).StatementExpressionList();

Test 403: 
StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ForUpdate();

Test 404: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(stringReader);

Test 405: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();
((JavaParser) stringReader).InstanceOfExpression();

Test 406: 
StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 407: 
StringReader stringReader = new StringReader("public class MyClass { ... }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).StatementExpressionList();

Test 408: 
JavaParser javaParser = new JavaParser("PIV!.+k:");

Test 409: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SwitchLabel();

Test 410: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();
String string = "Java Parser Version 1.1:  Usage is one of: If (condition) { statements; } else if (condition) { statements; } else { statements; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).IfStatement();

Test 411: 
StringReader stringReader = new StringReader("I love to read books.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).WhileStatement();

Test 412: 

Test 413: 

Test 414: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of: <br>-u,--username=USERNAME       the username to use for authentication<br>-p,--password=PASSWORD       the password to use for authentication<br>--help                           display this help message and exit");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForStatement();

Test 415: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 416: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 417: 
StringReader stringReader = new StringReader("1234567890ABCDEF");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 418: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 419: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).ForInit();

Test 420: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 421: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();

Test 422: 
StringReader stringReader = new StringReader("This is a test string with some numbers 123 and some characters $%^&*().");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForInit();

Test 423: 
StringReader stringReader = new StringReader("10#W");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();

Test 424: 
StringReader stringReader = new StringReader("12");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).BreakStatement();

Test 425: 
JavaParser javaParser = new JavaParser("continue;");

Test 426: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "if (x > 0) { return x; } else { return -x; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();
String string = "while (true) { return 42; }";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ReturnStatement();

Test 427: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ThrowStatement();

Test 428: 
JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/");
JavaParser javaParser = new JavaParser("x(sirCQ'7'*%eZ(#1/);");
((JavaParser)"x(sirCQ'7'*%eZ(#1/").SynchronizedStatement();
String string = "x(sirCQ'7'*%eZ(#1/";
JavaParser javaParser = new JavaParser(string);

Test 429: 
StringReader stringReader = new StringReader("         java JavaParser inputfile.txt");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TryStatement();

Test 430: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RUNSIGNEDSHIFT();

Test 431: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).MemberValue();

Test 432: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 433: 
JavaParser javaParser = new JavaParser("This is a string.");

Test 434: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) "Hello World");

Test 435: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 436: 
StringReader stringReader = new StringReader("123456789");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

Test 437: 
StringReader stringReader = new StringReader("@MyAnnotation(value = \"Hello World!\")");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).SingleMemberAnnotation();

Test 438: 

Test 439: 
JavaParser javaParser = new JavaParser("path/to/valid/java/file.java");

Test 440: 
StringReader stringReader = new StringReader("Invalid escape character at line 42");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeDeclaration(0);

Test 441: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 442: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);

Test 443: 

Test 444: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).VariableInitializer();
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 445: 
JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");

Test 446: 
JavaParser javaParser = new JavaParser("A string that represents a valid Java source code");

Test 447: 
StringReader stringReader = new StringReader("myIdentifier");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).AnnotationTypeMemberDeclaration();

Test 448: 
StringReader stringReader = new StringReader("A valid Java code");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[10];
((Reader)"A valid Java code").read(charArray);

Test 449: 
StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).Expression();

Test 450: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
String string = "         java JavaParser < inputfile";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();
boolean _boolean = false;
((JavaParser) stringReader).ClassOrInterfaceBodyDeclaration(_boolean);
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeParameter();

Test 451: 
PipedInputStream pipedInputStream = new PipedInputStream();

Test 452: 
StringReader stringReader = new StringReader("ThisIsAString");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).EnumConstant();

Test 453: 
JavaParser javaParser = new JavaParser("A1eXB");
((JavaParser)"A1eXB").FieldDeclaration(20);

Test 454: 
String string = "Java Parser Version 1.1:  Usage is one of:";
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ForUpdate();
((JavaParser) stringReader).VariableInitializer();

Test 455: 
JavaParser javaParser = new JavaParser("Hello, World!");

Test 456: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);

Test 457: 
StringReader stringReader = new StringReader("class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Initializer();

Test 458: 
StringReader stringReader = new StringReader("Invalid escape character at line 12");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ClassOrInterfaceType();

Test 459: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 460: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ConditionalExpression();

Test 461: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 462: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();
((JavaParser) stringReader).Type();
((JavaParser) stringReader).ConditionalExpression();

Test 463: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InclusiveOrExpression();

Test 464: 
StringReader stringReader = new StringReader("This is a sample input for the JavaParser class.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ExclusiveOrExpression();

Test 465: 

Test 466: 
JavaParser javaParser = new JavaParser("U9V\"E7");

Test 467: 
StringReader stringReader = new StringReader("The JavaParser class is used to parse Java code and extract information about its components.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).InstanceOfExpression();

Test 468: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:\n\t* 'java' [options] <main class> [args...]\n\t* 'java' [options] -jar <jarfile> [args...]\nOptions:\n\t-classpath <directories and zip/jar files>\n\t\tA : separated list of directories, JAR archives, and ZIP archives to search for class files.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 469: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 470: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).RelationalExpression();

Test 471: 
JavaParser javaParser = new JavaParser("1 + 2 * 3 - 4 / 5");

Test 472: 
StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).ShiftExpression();

Test 473: 

Test 474: 
StringReader stringReader = new StringReader("1234567890");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MultiplicativeExpression();

Test 475: 
JavaParser javaParser = new JavaParser("10 + 2");

Test 476: 
StringReader stringReader = new StringReader("2 + 3 * 4");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 477: 
StringReader stringReader = new StringReader("The quick brown fox jumps over the lazy dog.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 478: 
StringReader stringReader = new StringReader("This is a test string.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpression();

Test 479: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);

Test 480: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 481: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();
String string = "x(sirCQ`7'*%eZ(#1/";
StringReader stringReader = new StringReader(string);
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).UnaryExpressionNotPlusMinus();

Test 482: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 483: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PostfixExpression();

Test 484: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryExpression();

Test 485: 
StringReader stringReader = new StringReader("PIV! +k:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).PrimaryExpression();

Test 486: 
StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).PrimaryPrefix();

Test 487: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");

Test 488: 
StringReader stringReader = new StringReader("{ (!)- \"XYZ7");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Statement();

Test 489: 
StringReader stringReader = new StringReader("Hello, world! This is a sample input for testing.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();
((JavaParser) stringReader).Expression();
((JavaParser) stringReader).LocalVariableDeclaration();

Test 490: 
JavaParser javaParser = new JavaParser("Hello World!");

Test 491: 
StringReader stringReader = new StringReader("Hello World!");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValue();
((JavaParser) stringReader).Annotation();

Test 492: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
((JavaParser)"x(sirCQ`7'*%eZ(#1/").MarkerAnnotation();

Test 493: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.2:  Usage is one of:");

Test 494: 
StringReader stringReader = new StringReader("This is a test string for the JavaParser.");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberSelector();

Test 495: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).MemberValuePairs();

Test 496: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
((JavaParser) stringReader).TypeArgument();
String string = "^=";
MockPrintWriter mockPrintWriter = new MockPrintWriter(string);
((JavaParser) stringReader).dump(mockPrintWriter);

Test 497: 
String[] stringArray = new String[1];
stringArray[0] = "Hello World!";
JavaParser.main(stringArray);


* Minimizing test suite
* test suite isTestSuite: 282
Test 0: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit(javaParser.token_source);
Test 1: 
EvoSuiteFile evoSuiteFile = new EvoSuiteFile("x(sirCQ`7'*%eZ(#1");
FileSystemHandling.appendLineToFile(evoSuiteFile, "ShiftExpression");
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
Test 2: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReInit((Reader) stringReader);
Test 4: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
javaParser.disable_tracing();
Test 5: 
JavaParser javaParser = new JavaParser("zs!Sw");
javaParser.enable_tracing();
Test 6: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)0);
Test 7: 
JavaParser.ModifierSet.removeModifier(12, 12);
Test 8: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPublic((byte)99);
Test 9: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(49);
Test 10: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isProtected(82);
Test 11: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1605));
Test 12: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isPrivate((-1604));
Test 13: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(3010);
Test 14: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStatic(2393);
Test 15: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isAbstract(1877);
Test 16: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(27);
Test 17: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isFinal(37);
Test 18: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-210));
Test 19: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isNative((-2601));
Test 20: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp(71);
Test 21: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isStrictfp((-3621));
Test 22: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-210));
Test 23: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isSynchronized((-3465));
Test 24: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient(2101);
Test 25: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isTransient((-1));
Test 26: 
JavaParser.ModifierSet javaParser_ModifierSet = new JavaParser.ModifierSet();
javaParser_ModifierSet.isVolatile(94);
Test 27: 
String[] stringArray = new String[12];
JavaParser.main(stringArray);
Test 28: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.CompilationUnit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 29: 
JavaParser javaParser = new JavaParser("\"strictfp\"");
javaParser.CompilationUnit();
Test 30: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PackageDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 31: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImportDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 32: 
StringReader stringReader = new StringReader(",U++Bm8g");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Modifiers();
Test 33: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
try { 
  javaParser.TypeDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 34: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.ClassOrInterfaceDeclaration(100);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 35: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceDeclaration(2075);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ExtendsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExtendsList(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: usj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 38: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
StringReader stringReader = new StringReader("0v](UxZ/dYebOU\"3/");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ImplementsList(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 40: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumDeclaration(4357);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: com
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 41: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.EnumBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EnumBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 43: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: An
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 44: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 45: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 46: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
char[] charArray = new char[5];
stringReader.read(charArray);
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"SXW4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 47: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.TypeBound();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
StringReader stringReader = new StringReader("V01oImNMaj:%");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TypeBound();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: V01oImNMaj
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 49: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: (
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 50: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.token_source = null;
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 51: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaCharStream javaCharStream = new JavaCharStream(byteArrayInputStream, (byte)66, 3523, (byte) (-128));
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBody(false);
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 66, column 3523.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 52: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 53: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 54: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.EnumConstant();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 55: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 56: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
char[] charArray = new char[2];
stringReader.read(charArray);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ]
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 57: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ExclusiveOrExpression();
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(false);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 58: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 59: 
JavaParser javaParser = new JavaParser("Invalid escape character at line ");
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 60: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 61: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.VariableDeclarator();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 62: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 63: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 64: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 65: 
StringReader stringReader = new StringReader(",");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ,
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 66: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[`=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 67: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaCharStream javaCharStream = new JavaCharStream(sequenceInputStream, (-857), (-857), 32);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line -857, column -858.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 68: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 69: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.VariableInitializer();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 70: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclaration((-1583));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 71: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameters();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: B
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 72: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 73: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.FormalParameter();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 74: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ConstructorDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 75: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ExplicitConstructorInvocation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 76: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 77: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.FieldDeclaration((byte) (-15));
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 78: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 79: 
StringReader stringReader = new StringReader("SJ2ei:8,1b/gX5");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Type();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 80: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 81: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 82: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
JavaParser javaParser = new JavaParser(javaParser.token_source);
// Undeclared exception!
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 83: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 38.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 84: 
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager((JavaCharStream) null);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
// Undeclared exception!
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 85: 
StringReader stringReader = new StringReader("yInKTcd~/[GF!#Jl}=");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 86: 
StringReader stringReader = new StringReader("`p@Evlb'P$D0t");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.TypeArgument();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 87: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 88: 
StringReader stringReader = new StringReader("^");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WildcardBounds();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ^
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 89: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 90: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimitiveType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 91: 
JavaParser javaParser = new JavaParser("PostfixExpression");
try { 
  javaParser.ResultType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 92: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
javaParser.Expression();
Test 93: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.Name();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 94: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.NameList();
Test 95: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.NameList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 96: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 97: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 98: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.AssignmentOperator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 99: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Expression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 100: 
StringReader stringReader = new StringReader("q^AdX@OV#;");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
Test 101: 
StringReader stringReader = new StringReader("t3n1NxMxG7>K56*D");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
Test 102: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ShiftExpression();
Test 103: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 104: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
javaParser.ForInit();
javaParser.AndExpression();
Test 105: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
SystemInUtil.addInputLine("\"class\"");
javaParser.Expression();
Test 106: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 107: 
StringReader stringReader = new StringReader("B}wF[N");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.AdditiveExpression();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 108: 
StringReader stringReader = new StringReader(";r3dkG1(sM");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ;
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 109: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 110: 
StringReader stringReader = new StringReader("Dh=GbFhX9x");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: =
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 111: 
StringReader stringReader = new StringReader("<?xml version='1.0' encoding='ISO-8859-1' ?>");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: <
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 112: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 113: 
StringReader stringReader = new StringReader("b!-4w,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
javaParser.Expression();
Test 114: 
JavaParser javaParser = new JavaParser(".r]_tCHa5(h[I=#t;gX");
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 115: 
StringReader stringReader = new StringReader("&|K3J_d&W, N");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PreIncrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: &
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 116: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.PreDecrementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 117: 
JavaParser javaParser = new JavaParser("0#W");
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 118: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 119: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 120: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: J0
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 121: 
StringReader stringReader = new StringReader("J0*v2<");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: *
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 122: 
StringReader stringReader = new StringReader("}");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.CastLookahead();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 123: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 124: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.CastExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 125: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberSelector();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: r
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 126: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 127: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 128: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimarySuffix();
Test 129: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.InclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 130: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 131: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 132: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.Literal();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 133: 
StringReader stringReader = new StringReader("`vuHW6j`O`D-9bd-4vQ");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.Literal();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 134: 
SystemInUtil.addInputLine("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser("IQIg]RdSz05`Hww}");
javaParser.StatementExpressionList();
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 135: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BooleanLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 136: 
JavaParser javaParser = new JavaParser("K|>?q-");
try { 
  javaParser.NullLiteral();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 137: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.Arguments();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 138: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Arguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 139: 
StringReader stringReader = new StringReader("tS(S9>T8");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Expression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 8.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 140: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
try { 
  javaParser.ArgumentList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 141: 
JavaParser javaParser = new JavaParser("`");
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 142: 
byte[] byteArray = new byte[2];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream, 4096);
DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
JavaParser javaParser = new JavaParser(dataInputStream);
// Undeclared exception!
try { 
  javaParser.AllocationExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 143: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 144: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ArrayDimsAndInits();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 145: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 146: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 147: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 148: 
StringReader stringReader = new StringReader("P[IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: [
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 149: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 150: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 151: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 152: 
SystemInUtil.addInputLine("X\"vM%Hc");
JavaParser javaParser = new JavaParser("");
// Undeclared exception!
try { 
  javaParser.Statement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\\\"vM%Hc\\n\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 153: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AssertStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 154: 
StringReader stringReader = new StringReader("r%!Mv&&Ahm");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.LabeledStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: %
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 155: 
StringReader stringReader = new StringReader("d_KE{?c:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.Block();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: ?
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 156: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.BlockStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 157: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.EmptyStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 158: 
StringReader stringReader = new StringReader("interface");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 159: 
StringReader stringReader = new StringReader("protected");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: protected
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 160: 
StringReader stringReader = new StringReader("0#W");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 161: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 162: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 163: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 164: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 165: 
StringReader stringReader = new StringReader("b!-jw,c*,_AUa \"*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 166: 
StringReader stringReader = new StringReader("~8;nTr&s[{");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForUpdate();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 167: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
javaParser.Type();
javaParser.ForUpdate();
JavaParser javaParser = new JavaParser(javaParser.token_source);
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 24.  Encountered: :
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 168: 
JavaParser javaParser = new JavaParser("+8Z#x8F~Ry_lb");
try { 
  javaParser.StatementExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 169: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.StatementExpressionList();
try { 
  javaParser.InstanceOfExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 53.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 170: 
StringReader stringReader = new StringReader("vBGn?er*");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
Test 171: 
JavaParser javaParser = new JavaParser("PIV!.+k:");
try { 
  javaParser.SwitchStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 172: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SwitchLabel();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 173: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.IfStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 174: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 175: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.WhileStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 176: 
JavaParser javaParser = new JavaParser("=N*S}#P!e[HW");
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 177: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 178: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.DoStatement();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 179: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ForStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 180: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 181: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 182: 
StringReader stringReader = new StringReader("An interface cannot implement other interfaces");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: interface
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 183: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForInit();
Test 184: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
JavaParser javaParser = new JavaParser(javaParser.token_source);
javaParser.Expression();
javaParser.ForInit();
Test 185: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: {
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 186: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 187: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: @
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 188: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 189: 
StringReader stringReader = new StringReader("~7?c?F>#8zS`");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ForInit();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: ~
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 190: 
StringReader stringReader = new StringReader("#o[fYsqYgJ&89#C|=C");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ForInit();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 191: 
StringReader stringReader = new StringReader("6");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.BreakStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: 6
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 192: 
JavaParser javaParser = new JavaParser("");
try { 
  javaParser.ContinueStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 193: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ReturnStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 194: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 195: 
Enumeration<BufferedInputStream> enumeration = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false, true).when(enumeration).hasMoreElements();
doReturn((Object) null).when(enumeration).nextElement();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
JavaParser javaParser = new JavaParser(sequenceInputStream);
// Undeclared exception!
try { 
  javaParser.ThrowStatement();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.SequenceInputStream", e);
}

Test 196: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.SynchronizedStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 197: 
StringReader stringReader = new StringReader("         java JavaParser inputfile");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.TryStatement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 10.  Encountered: java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 198: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.RUNSIGNEDSHIFT();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Java
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 199: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 200: 
StringReader stringReader = new StringReader("qF3l@7yAnplk_6yC8C");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: 7
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 201: 
JavaParser javaParser = new JavaParser("cT v.oF#-l[|K0Mb3");
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 202: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.NormalAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 203: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 204: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .3
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 205: 
StringReader stringReader = new StringReader("`");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.SingleMemberAnnotation();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 206: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MemberValuePairs();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 207: 
JavaParser javaParser = new JavaParser("zs!Sw");
try { 
  javaParser.MemberValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 208: 
StringReader stringReader = new StringReader("z!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 209: 
JavaParser javaParser = new JavaParser((String) null);
try { 
  javaParser.MemberValueArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 210: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeDeclaration(799);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 211: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeDeclaration(0);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: Invalid
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 212: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 213: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
try { 
  javaParser.AnnotationTypeBody();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 214: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableInitializer();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 21.  Encountered: 1.1
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 215: 
JavaParser javaParser = new JavaParser("V&]&!4?`VCt7");
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 216: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ReferenceType();
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 217: 
JavaParser javaParser = new JavaParser(".Qv!&&&)hBg7}>Wdj-");
try { 
  javaParser.DefaultValue();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 218: 
StringReader stringReader = new StringReader("B}w} F[Ne");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.AnnotationTypeMemberDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 2.  Encountered: }
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 219: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.ClassOrInterfaceBodyDeclaration(true);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 13.  Encountered: Version
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 220: 
StringReader stringReader = new StringReader(" not found.");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.Expression();
Test 221: 
JavaParser javaParser = new JavaParser((Reader) null);
// Undeclared exception!
try { 
  javaParser.getNextToken();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 222: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
PipedInputStream pipedInputStream = new PipedInputStream();
javaParser.ReInit((InputStream) pipedInputStream);
Test 223: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.EnumConstant();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 224: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.VariableDeclarator();
Test 225: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.VariableDeclaratorId();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 226: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.VariableInitializer();
Test 227: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ArrayInitializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 228: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.MethodDeclarator();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 6.  Encountered: Parser
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 229: 
StringReader stringReader = new StringReader("OR");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Initializer();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: OR
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 230: 
StringReader stringReader = new StringReader(".r]_tCHa5(h[I=#t;gX");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Type();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 1.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 231: 
StringReader stringReader = new StringReader("         java JavaParser < inputfile");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeParameter();
try { 
  javaParser.ReferenceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 36.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 232: 
StringReader stringReader = new StringReader("Invalid escape character at line ");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ClassOrInterfaceType();
Test 233: 
JavaParser javaParser = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaPa=ser$ModifierSet");
try { 
  javaParser.ClassOrInterfaceType();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 234: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.TypeArguments();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 235: 
StringReader stringReader = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Name();
Test 236: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ConditionalExpression();
Test 237: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 238: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Type();
try { 
  javaParser.ConditionalExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: .
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 239: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 240: 
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.ConditionalOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 241: 
StringReader stringReader = new StringReader(".3JWIsJ'");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Literal();
// Undeclared exception!
try { 
  javaParser.ConditionalAndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 242: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InclusiveOrExpression();
Test 243: 
JavaParser javaParser = new JavaParser("eGD{i>~;9zO8]K`hv");
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 244: 
StringReader stringReader = new StringReader("usj$nV");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ExclusiveOrExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 245: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 246: 
byte[] byteArray = new byte[5];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.AndExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 247: 
JavaParser javaParser = new JavaParser("U9V\"E7");
try { 
  javaParser.EqualityExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 248: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.InstanceOfExpression();
Test 249: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.RelationalExpression();
Test 250: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 251: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.RelationalExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 252: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 253: 
StringReader stringReader = new StringReader("'4DGR_D");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.ShiftExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 3.  Encountered: \"D\" (68), after : \"\\'4\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 254: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.AdditiveExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 255: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MultiplicativeExpression();
Test 256: 
JavaParser javaParser = new JavaParser("A1eXB");
try { 
  javaParser.MultiplicativeExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 257: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 258: 
StringReader stringReader = new StringReader("m8Gj2n\"G0l");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\\"G0l\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 259: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpression();
Test 260: 
JavaParser javaParser = new JavaParser((JavaParserTokenManager) null);
// Undeclared exception!
try { 
  javaParser.UnaryExpression();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 261: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.UnaryExpressionNotPlusMinus();
Test 262: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.UnaryExpressionNotPlusMinus();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 263: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PostfixExpression();
Test 264: 
StringReader stringReader = new StringReader("x(sirCQ`7'*%eZ(#1/");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PostfixExpression();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 8.  Encountered: \"`\" (96), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 265: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.PrimaryExpression();
Test 266: 
StringReader stringReader = new StringReader("PIV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.PrimaryExpression();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 267: 
StringReader stringReader = new StringReader("");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 268: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Reading from standard input . . .");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.ForUpdate();
javaParser.PrimaryPrefix();
Test 269: 
StringReader stringReader = new StringReader("hL'`\"p1NLz])x");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.PrimaryPrefix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 5.  Encountered: \"\\\"\" (34), after : \"\\'`\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 270: 
byte[] byteArray = new byte[8];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
JavaParser javaParser = new JavaParser(byteArrayInputStream);
// Undeclared exception!
try { 
  javaParser.PrimarySuffix();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 271: 
StringReader stringReader = new StringReader("{(!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: )
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 272: 
StringReader stringReader = new StringReader("~IV!.+k:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.Expression();
try { 
  javaParser.LocalVariableDeclaration();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 4.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 273: 
StringReader stringReader = new StringReader("PBJ'-wC}90q{v");
JavaParser javaParser = new JavaParser(stringReader);
// Undeclared exception!
try { 
  javaParser.StatementExpressionList();
  fail("Expecting exception: Error");

} catch(Error e) {
   //
   // Lexical error at line 1, column 6.  Encountered: \"w\" (119), after : \"\\'-\"
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
}

Test 274: 
StringReader stringReader = new StringReader("zs!Sw");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.MemberValue();
try { 
  javaParser.Annotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 3.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 275: 
JavaParser javaParser = new JavaParser("x(sirCQ`7'*%eZ(#1/");
try { 
  javaParser.MarkerAnnotation();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 276: 
FileDescriptor fileDescriptor = new FileDescriptor();
MockFileInputStream mockFileInputStream = new MockFileInputStream(fileDescriptor);
JavaCharStream javaCharStream = new JavaCharStream(mockFileInputStream);
JavaParserTokenManager javaParserTokenManager = new JavaParserTokenManager(javaCharStream);
JavaParser javaParser = new JavaParser(javaParserTokenManager);
try { 
  javaParser.MemberValuePair();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 0.  Encountered: <EOF>
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 277: 
JavaParser javaParser = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
javaParser.getToken(125);
Test 278: 
StringReader stringReader = new StringReader("{(Pj!)-\"SXW4");
JavaParser javaParser = new JavaParser(stringReader);
try { 
  javaParser.Statement();
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Parse error at line 1, column 5.  Encountered: !
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}

Test 279: 
StringReader stringReader = new StringReader("Java Parser Version 1.1:  Usage is one of:");
JavaParser javaParser = new JavaParser(stringReader);
javaParser.TypeArgument();
MockPrintWriter mockPrintWriter = new MockPrintWriter("^=");
javaParser.dump(mockPrintWriter);
Test 280: 
String[] stringArray = new String[1];
stringArray[0] = "Hello World!";
JavaParser.main(stringArray);
Test 281: 
PipedInputStream pipedInputStream = new PipedInputStream();
JavaParser javaParser = new JavaParser(pipedInputStream);
// Undeclared exception!
try { 
  javaParser.generateParseException();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 34%
* Total number of goals: 7938
* Number of covered goals: 2738
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 48%
* Total number of goals: 4940
* Number of covered goals: 2361
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 9
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 134
* Number of covered goals: 133
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 29%
* Total number of goals: 7938
* Number of covered goals: 2317
* Generated 282 tests with total length 850
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: Class too large: com/soops/CEN4010/JMCA/JParser/JavaParser
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.236 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:50:31.253 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:241)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 20 common frames omitted
[MASTER] 22:50:31.261 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:50:31.277 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericField.changeClassLoader(GenericField.java:237)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:458)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 23 common frames omitted
[MASTER] 22:50:31.293 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.variable.FieldReference.changeClassLoader(FieldReference.java:460)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 22 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.311 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.320 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
[MASTER] 22:50:31.349 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.368 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.402 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.416 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.437 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.447 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.463 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.471 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.487 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.495 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.510 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.518 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.534 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.542 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:62)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericConstructor.changeClassLoader(GenericConstructor.java:65)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:459)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.558 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.ConstructorStatement.changeClassLoader(ConstructorStatement.java:460)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
[MASTER] 22:50:31.566 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.utils.generic.GenericAccessibleObject.changeClassLoader(GenericAccessibleObject.java:174)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:423)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 19 common frames omitted
Class not found - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericMethod.changeClassLoader(GenericMethod.java:426)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:636)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 16 common frames omitted
[MASTER] 22:50:31.582 [logback-1] WARN  GenericClass - Class not found: class com.soops.CEN4010.JMCA.JParser.JavaParser - keeping old class loader 
java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:158)
	at org.evosuite.instrumentation.InstrumentingClassLoader.loadClass(InstrumentingClassLoader.java:126)
	at org.evosuite.utils.generic.GenericClassImpl.getClass(GenericClassImpl.java:139)
	at org.evosuite.utils.generic.GenericClassImpl.changeClassLoader(GenericClassImpl.java:279)
	at org.evosuite.testcase.variable.VariableReferenceImpl.changeClassLoader(VariableReferenceImpl.java:611)
	at org.evosuite.testcase.statements.AbstractStatement.lambda$changeClassLoader$2(AbstractStatement.java:542)
	at java.lang.Iterable.forEach(Iterable.java:75)
	at org.evosuite.testcase.statements.AbstractStatement.changeClassLoader(AbstractStatement.java:542)
	at org.evosuite.testcase.statements.MethodStatement.changeClassLoader(MethodStatement.java:637)
	at org.evosuite.testcase.DefaultTestCase.changeClassLoader(DefaultTestCase.java:288)
	at org.evosuite.assertion.AssertionGenerator.changeClassLoader(AssertionGenerator.java:227)
	at org.evosuite.assertion.MutationAssertionGenerator.setupClassLoader(MutationAssertionGenerator.java:182)
	at org.evosuite.assertion.SimpleMutationAssertionGenerator.addAssertions(SimpleMutationAssertionGenerator.java:50)
	at org.evosuite.TestSuiteGeneratorHelper.addAssertions(TestSuiteGeneratorHelper.java:283)
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:535)
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:220)
	at org.evosuite.rmi.service.ClientNodeImpl.lambda$startNewSearch$0(ClientNodeImpl.java:140)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
Caused by: java.lang.IllegalArgumentException: expect to get instruction without BasicBlock already set
	at org.evosuite.graphs.cfg.BasicBlock.appendInstruction(BasicBlock.java:225)
	at org.evosuite.graphs.cfg.BasicBlock.setInstructions(BasicBlock.java:206)
	at org.evosuite.graphs.cfg.BasicBlock.<init>(BasicBlock.java:106)
	at org.evosuite.graphs.cfg.RawControlFlowGraph.determineBasicBlockFor(RawControlFlowGraph.java:314)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeNodes(ActualControlFlowGraph.java:295)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.computeGraph(ActualControlFlowGraph.java:262)
	at org.evosuite.graphs.cfg.ActualControlFlowGraph.<init>(ActualControlFlowGraph.java:97)
	at org.evosuite.graphs.cfg.CFGGenerator.computeActualCFG(CFGGenerator.java:218)
	at org.evosuite.graphs.cfg.CFGGenerator.registerCFGs(CFGGenerator.java:102)
	at org.evosuite.graphs.cfg.CFGMethodAdapter.visitEnd(CFGMethodAdapter.java:219)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.MethodVisitor.visitEnd(MethodVisitor.java:783)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:772)
	at org.evosuite.shaded.org.objectweb.asm.tree.MethodNode.accept(MethodNode.java:649)
	at org.evosuite.shaded.org.objectweb.asm.tree.ClassNode.accept(ClassNode.java:452)
	at org.evosuite.instrumentation.BytecodeInstrumentation.transformBytes(BytecodeInstrumentation.java:282)
	at org.evosuite.instrumentation.InstrumentingClassLoader.getTransformedBytes(InstrumentingClassLoader.java:135)
	at org.evosuite.instrumentation.InstrumentingClassLoader.instrumentClass(InstrumentingClassLoader.java:149)
	... 21 common frames omitted
* Error while initializing target class: com/soops/CEN4010/JMCA/JParser/JavaParser
* Could not find class under test com.soops.CEN4010.JMCA.JParser.JavaParser: java.lang.ClassNotFoundException: expect to get instruction without BasicBlock already set
[MASTER] 22:50:31.616 [logback-1] WARN  SimpleMutationAssertionGenerator - Could not initialize SUT before Assertion generation
[MASTER] 22:50:31.704 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.706 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.707 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.811 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.814 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.815 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:31.815 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.151 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.152 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.153 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
[MASTER] 22:50:32.154 [logback-1] WARN  MethodDescriptor - The target class should be loaded before invoking this method
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
* Computation finished
