* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.soops.CEN4010.JMCA.JMCAAnalyzer
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/19_jmca/evosuite-files/evosuite.properties
* Connecting to master process on port 15977
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:33:02.943 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:33:02.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:33:02.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:33:02.989 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class com.soops.CEN4010.JMCA.JMCAAnalyzer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 626
* Using seed 1710196380836
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 96 / 626
[Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             0%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             2%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            5%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           8%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:==>                           9%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][MASTER] 22:33:24.297 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          11%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:===>                          13%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         14%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         15%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:====>                         16%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        17%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        18%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:=====>                        19%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       20%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       22%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:======>                       23%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      24%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:=======>                      26%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     27%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     28%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    32%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   34%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  37%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:===========>                  39%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 42%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:============>                 43%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                44%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               47%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:==============>               49%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:===============>              53%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             54%] [Cov:=============>                     38%][Progress:================>             55%] [Cov:=============>                     38%][Progress:================>             55%] [Cov:=============>                     38%][Progress:================>             55%] [Cov:=============>                     38%][Progress:================>             55%] [Cov:===============>                   43%][Progress:================>             55%] [Cov:===============>                   43%][Progress:================>             55%] [Cov:===============>                   43%][Progress:================>             55%] [Cov:===============>                   43%][Progress:================>             55%] [Cov:===============>                   45%][Progress:================>             55%] [Cov:===============>                   45%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              58%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             55%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:================>             56%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            57%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            58%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:=================>            59%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           60%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           61%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           62%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:====================>              59%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:==================>           63%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         68%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:====================>         69%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:=====================>        73%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       74%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       75%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:======================>       76%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      77%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      78%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:=======================>      79%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           66%][Progress:========================>     80%] [Cov:=======================>           67%][Progress:========================>     80%] [Cov:=======================>           67%][Progress:========================>     80%] [Cov:=======================>           67%][Progress:========================>     80%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     81%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     82%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:========================>     83%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    84%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    85%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:=========================>    86%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           67%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:=======================>           68%][Progress:==========================>   87%] [Cov:========================>          69%][Progress:==========================>   87%] [Cov:========================>          69%][Progress:==========================>   87%] [Cov:========================>          69%][Progress:==========================>   87%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   88%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:==========================>   89%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  90%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  91%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  92%] [Cov:========================>          69%][Progress:===========================>  93%] [Cov:========================>          69%][Progress:===========================>  93%] [Cov:========================>          69%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:===========================>  93%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 94%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 95%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:============================> 96%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>97%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>98%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:=============================>99%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%][Progress:==============================100%] [Cov:========================>          71%]
* Search finished after 201s and 2241 generations, 1122393 statements, best individual has fitness: 156.0
* Generated before the refinement 23 tests with total length 194
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: setFileName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jMCAAnalyzer.setFileName("MethodDeclaration")
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters");
    }
}
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters") target is: jMCAAnalyzer method is: setFileName(java.lang.String)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: setFileName(Ljava/lang/String;)V
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String string = "MethodDeclarationWithManyParameters";
jMCAAnalyzer.setFileName(string);

statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze((ASTNode) null)
test data is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(new ASTNode() {
            @Override
            public boolean equals(Object obj) {
                return true;
            }
        });
    }
}
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(new ASTNode() {
    @Override
    public boolean equals(Object obj) {
        return true;
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(new ASTNode() {
    @Override
    public boolean equals(Object obj) {
        return true;
    }
}) target is: jMCAAnalyzer method is: analyze(DummyClass$1)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 0, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@a55e64ac type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Identifier", new ASTNode("Type", "String", null)))));
        arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Integer", new ASTNode("Type", "int", null)))));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Identifier", new ASTNode("Type", "String", null))))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Identifier", new ASTNode("Type", "String", null))))) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Integer", new ASTNode("Type", "int", null))))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StatementExpression", "StatementExpression", new ASTNode("VariableDeclaration", "MethodInvocation", new ASTNode("Expression", "Integer", new ASTNode("Type", "int", null))))) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@bffa52d1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "myMethod");
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(new ASTNode("ClassVariableDeclaration", "int", "myVar"));
        arrayList.add(new ASTNode("StatementExpression", "myVar++"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "myMethod"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(new ASTNode("ClassVariableDeclaration", "int", "myVar")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("ClassVariableDeclaration", "int", "myVar")) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("StatementExpression", "myVar++")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StatementExpression", "myVar++")) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@a75d892f type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("=")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
        arrayList.add(aSTNode);
        aSTNode.setIdentity("=");
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode("Literal", "IntegerLiteral", 123));// Improved test data

        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("=") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("Literal", "IntegerLiteral", 123))// Improved test data
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Literal", "IntegerLiteral", 123))// Improved test data
 target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@642395a4 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", " ", arg2)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("(")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        ASTNode aSTNode1 = new ASTNode("StatementExpression", "(", null);
        aSTNode1.setIdentity("(5 + 2)");
        arrayList.add(aSTNode1);
        ASTNode aSTNode2 = new ASTNode("StatementExpression", " ", null);
        aSTNode2.setIdentity("3");
        arrayList.add(aSTNode2);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode1);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: ASTNode aSTNode1 = new ASTNode("StatementExpression", "(", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode1.setIdentity("(5 + 2)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode1.setIdentity("(5 + 2)") target is: aSTNode1 method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode1) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode2 = new ASTNode("StatementExpression", " ", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode2.setIdentity("3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode2.setIdentity("3") target is: aSTNode2 method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode2) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode1) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = " ";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null)
statement is: org.evosuite.testcase.statements.FieldStatement@ba6c9284 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null)));
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) null);
String string = "MethodDeclaration";
String string = "--";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null)
statement is: org.evosuite.testcase.statements.FieldStatement@c2135920 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null)));
        ArrayList<ASTNode> arrayList = aSTNode.list;
        aSTNode.name = "myMethod";
        aSTNode.expression = "5 + 2 * 3";// an example expression that would be passed to the method

        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: aSTNode.name = "myMethod", class spoon.support.reflect.code.CtAssignmentImpl
statement is: aSTNode.expression = "5 + 2 * 3"// an example expression that would be passed to the method
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 5, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@c458f029 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("NwaJtRqt", "MethodDeclaration", arg2)
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setType("Selection")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("NwaJtRqt", "MethodDeclaration", aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode methodDeclaration = new ASTNode("MethodDeclaration");
        ArrayList<ASTNode> list = new ArrayList<>();
        list.add(new ASTNode("Selection", "selectionStatementName"));
        list.add(new ASTNode("For", "forLoopName"));
        methodDeclaration.setList(list);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(methodDeclaration);
    }
}
statement is: ASTNode methodDeclaration = new ASTNode("MethodDeclaration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> list = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: list.add(new ASTNode("Selection", "selectionStatementName")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.add(new ASTNode("Selection", "selectionStatementName")) target is: list method is: add(ASTNode)
statement is: list.add(new ASTNode("For", "forLoopName")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: list.add(new ASTNode("For", "forLoopName")) target is: list method is: add(ASTNode)
statement is: methodDeclaration.setList(list), class spoon.support.reflect.code.CtInvocationImpl
invocation is: methodDeclaration.setList(list) target is: methodDeclaration method is: setList(ArrayList)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(methodDeclaration), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(methodDeclaration) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@730cdbf6 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", 1234567890, 98.7654321);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("Iteration", "methodName", 0, 0.123456789);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "methodName", 1234567890, 98.7654321), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("Iteration", "methodName", 0, 0.123456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@6b1b252a type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("$(3#l\\z", "++", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#l\\z", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null);
        ArrayList<ASTNode> arrayList = new ArrayList<>();
        arrayList.add(new ASTNode("$(3#l\\z", "++", null));
        arrayList.add(new ASTNode("$(3#l\\z", "++", null));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(new ASTNode("$(3#l\\z", "++", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("$(3#l\\z", "++", null)) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("$(3#l\\z", "++", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("$(3#l\\z", "++", null)) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@5e345175 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "[", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "AdditionExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "AdditionExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "AdditionExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@b1d2a514 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "-=", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode nullNode = null;
        ArrayList<ASTNode> emptyList = new ArrayList<>();
        ASTNode node1 = new ASTNode("MethodDeclaration", "StatementExpression");
        node1.list = new ArrayList<>();
        node1.list.add(new ASTNode("StatementExpression", "-="));
        node1.list.add(new ASTNode("StatementExpression"));
        ASTNode node2 = new ASTNode("MethodDeclaration", "StatementExpression", node1);
        JMCAAnalyzer jmcaAnalyzer = new JMCAAnalyzer();
    }
}
statement is: ASTNode nullNode = null, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ArrayList<ASTNode> emptyList = new ArrayList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ASTNode node1 = new ASTNode("MethodDeclaration", "StatementExpression"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: node1.list = new ArrayList<>(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: node1.list.add(new ASTNode("StatementExpression", "-=")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: node1.list.add(new ASTNode("StatementExpression", "-=")) target is: node1.list method is: add(ASTNode)
statement is: node1.list.add(new ASTNode("StatementExpression")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: node1.list.add(new ASTNode("StatementExpression")) target is: node1.list method is: add(ASTNode)
statement is: ASTNode node2 = new ASTNode("MethodDeclaration", "StatementExpression", node1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JMCAAnalyzer jmcaAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@9448ad7a type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("*=")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("add", "subtract", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        ASTNode aSTNode = new ASTNode("subtract", "multiply", aSTNode);
        arrayList.add(aSTNode);
        aSTNode.setIdentity("*=");
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode("x", "y"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("add", "subtract", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: ASTNode aSTNode = new ASTNode("subtract", "multiply", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity("*="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("*=") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("x", "y")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("x", "y")) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "add";
String string = "subtract";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "subtract";
String string = "multiply";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@9a5f9a0e type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "--", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "myMethodName", 1234567890, "myMethodParameter");
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode("StatementExpression", "myVariableName", 0.00123456789));
        arrayList.add(new ASTNode("StatementExpression", "myOtherVariableName", "myStringValue"));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "myMethodName", 1234567890, "myMethodParameter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("StatementExpression", "myVariableName", 0.00123456789)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StatementExpression", "myVariableName", 0.00123456789)) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("StatementExpression", "myOtherVariableName", "myStringValue")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("StatementExpression", "myOtherVariableName", "myStringValue")) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 8, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 0
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
* this is vulnerable: ASTNode aSTNode = null
TestCase is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
ASTNode aSTNode = null;

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@adab0ea8 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity(")")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
        arrayList.add(aSTNode);
        aSTNode.setIdentity(")");
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: aSTNode.setIdentity(")"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity(")") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null)
statement is: org.evosuite.testcase.statements.FieldStatement@7996898c type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "ExpressionStatement", ((ASTNode) (null)));
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null))));
        arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null))));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "ExpressionStatement", ((ASTNode) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null)))) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode(">>>", "BitwiseShiftOperator", ((ASTNode) (null)))) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "ExpressionStatement";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@75b858df type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", " ", arg2)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("(")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(" ", "Y;6", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "statementExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        ASTNode aSTNode = new ASTNode("StatementExpression", "(", aSTNode);
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode(" ", "methodName()", aSTNode);
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "statementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "(", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode(" ", "methodName()", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 11, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "statementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = " ";
String string = "methodName()";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@7dc27d1d type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "[", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode methodDeclaration = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
        ArrayList<ASTNode> statementExpressionList = methodDeclaration.list;
        statementExpressionList.add(methodDeclaration);
        statementExpressionList.add(methodDeclaration);
        ASTNode statementExpression = new ASTNode("StatementExpression", "[", methodDeclaration);
        statementExpressionList.add(statementExpression);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(methodDeclaration);
    }
}
statement is: ASTNode methodDeclaration = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> statementExpressionList = methodDeclaration.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: methodDeclaration.list is methodDeclaration
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: statementExpressionList.add(methodDeclaration), class spoon.support.reflect.code.CtInvocationImpl
invocation is: statementExpressionList.add(methodDeclaration) target is: statementExpressionList method is: add(ASTNode)
statement is: statementExpressionList.add(methodDeclaration), class spoon.support.reflect.code.CtInvocationImpl
invocation is: statementExpressionList.add(methodDeclaration) target is: statementExpressionList method is: add(ASTNode)
statement is: ASTNode statementExpression = new ASTNode("StatementExpression", "[", methodDeclaration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: statementExpressionList.add(statementExpression), class spoon.support.reflect.code.CtInvocationImpl
invocation is: statementExpressionList.add(statementExpression) target is: statementExpressionList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(methodDeclaration), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(methodDeclaration) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 6
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null)
statement is: org.evosuite.testcase.statements.FieldStatement@5597dde2 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null)));
        ArrayList<ASTNode> arrayList = aSTNode.list;
        aSTNode = new ASTNode("MethodDeclaration", "+", ((ASTNode) (null)));
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: aSTNode = new ASTNode("MethodDeclaration", "+", ((ASTNode) (null))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@64ce573b type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "MultiplicationExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode("Identifier", "x", null));
        arrayList.add(new ASTNode("Identifier", "y", null));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "MultiplicationExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("Identifier", "x", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Identifier", "x", null)) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("Identifier", "y", null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Identifier", "y", null)) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 7, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "MultiplicationExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null)
statement is: org.evosuite.testcase.statements.FieldStatement@a42e0d4e type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null)));
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        arrayList.add(new ASTNode("Identifier", "x", ((ASTNode) (null))));
        arrayList.add(new ASTNode("Identifier", "y", ((ASTNode) (null))));
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", ((ASTNode) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("Identifier", "x", ((ASTNode) (null)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Identifier", "x", ((ASTNode) (null)))) target is: arrayList method is: add(ASTNode)
statement is: arrayList.add(new ASTNode("Identifier", "y", ((ASTNode) (null)))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(new ASTNode("Identifier", "y", ((ASTNode) (null)))) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 6, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 3
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase Could not be added: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

statement is: com.soops.CEN4010.JMCA.ASTNode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode()
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", arg2)
statement is: org.evosuite.testcase.statements.FieldStatement@cc592b2e type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.ArrayList<com.soops.CEN4010.JMCA.ASTNode>
statement code is: ArrayList<ASTNode> arrayList = aSTNode.list
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", arg2)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.ASTNode(Ljava/lang/String;Ljava/lang/String;Lcom/soops/CEN4010/JMCA/ASTNode;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.ASTNode
statement code is: ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", arg2)
statement is: setIdentity(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: aSTNode.setIdentity("")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = arrayList.add(arg0)
statement is: com.soops.CEN4010.JMCA.JMCAAnalyzer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.soops.CEN4010.JMCA.JMCAAnalyzer
statement code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer()
statement is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String analyze = jMCAAnalyzer.analyze(arg0)
test data is: ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
aSTNode.setIdentity("");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
        ArrayList<ASTNode> arrayList = aSTNode.list;
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
        arrayList.add(aSTNode);
        ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
        aSTNode.setIdentity("myMethod");
        arrayList.add(aSTNode);
        JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
        jMCAAnalyzer.analyze(aSTNode);
    }
}
statement is: ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ArrayList<ASTNode> arrayList = aSTNode.list, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: aSTNode.list is aSTNode
CtField is: java.util.ArrayList com.soops.CEN4010.JMCA.ASTNode.list ArrayList list
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: aSTNode.setIdentity("myMethod"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: aSTNode.setIdentity("myMethod") target is: aSTNode method is: setIdentity(java.lang.String)
statement is: arrayList.add(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: arrayList.add(aSTNode) target is: arrayList method is: add(ASTNode)
statement is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jMCAAnalyzer.analyze(aSTNode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jMCAAnalyzer.analyze(aSTNode) target is: jMCAAnalyzer method is: analyze(ASTNode)
source statement: com.soops.CEN4010.JMCA.JMCAAnalyzer()V callee: VariableReference: Statement 9, type com.soops.CEN4010.JMCA.JMCAAnalyzerindex is: 9
Matched Method is: analyze(Lcom/soops/CEN4010/JMCA/ASTNode;)Ljava/lang/String;
TestCase is: String string = "MethodDeclaration";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

* test suite isTestSuite: 46
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("NwaJtRqt", "MethodDeclaration", aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#lz", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 19: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
aSTNode.setIdentity("");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 23: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters");

Test 24: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);

Test 25: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 28: 
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = " ";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

Test 29: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 30: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 31: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 32: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 34: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "AdditionExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 35: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 36: 
ASTNode aSTNode = new ASTNode("add", "subtract", (ASTNode) "add");
String string = "subtract";
String string = "multiply";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 37: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 38: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 39: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "ExpressionStatement", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 40: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "statementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = " ";
String string = "methodName()";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 41: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 42: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 43: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MultiplicationExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 44: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 45: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);


* Generated after the refinement and before minimization 46 tests with total length 275
* test suite isTestSuite: 46
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("NwaJtRqt", "MethodDeclaration", aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#lz", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 19: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
aSTNode.setIdentity("");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 23: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters");

Test 24: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);

Test 25: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 26: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 27: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 28: 
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
String string = "StatementExpression";
String string = " ";
ASTNode aSTNode = new ASTNode(string, string, (ASTNode) string);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
((JMCAAnalyzer) aSTNode).analyze(aSTNode);

Test 29: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 30: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 31: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 32: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 33: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 34: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "AdditionExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

Test 35: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 36: 
ASTNode aSTNode = new ASTNode("add", "subtract", (ASTNode) "add");
String string = "subtract";
String string = "multiply";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 37: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 38: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 39: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "ExpressionStatement", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 40: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "statementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "(";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = " ";
String string = "methodName()";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 41: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "[";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 42: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 43: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MultiplicationExpression", (ASTNode) "MethodDeclaration");
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 44: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();

Test 45: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) "MethodDeclaration");
String string = "StatementExpression";
String string = "MethodDeclaration";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
String string = "StatementExpression";
String string = "StatementExpression";
ASTNode aSTNode = new ASTNode(string, string, aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);


* Minimizing test suite
* test suite isTestSuite: 22
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("NwaJtRqt", "MethodDeclaration", aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#lz", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 20: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 71%
* Total number of goals: 199
* Number of covered goals: 142
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 222
* Number of covered goals: 181
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 199
* Number of covered goals: 142
* Generated 22 tests with total length 183
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclarationWithManyParameters");

** It was a parseable test case! 
refined test name is: testNumMethodsWithManyParameters
* Compiling Tests
refined test name is: testGetNumMethodsWithManyParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
String analyze = jMCAAnalyzer.analyze((ASTNode) null);
assertEquals("File did not parse correctly", analyze);


** It was a parseable test case! 
refined test name is: testInvalidInputNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:44:36.328 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:36.352 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:44:36.404 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:36.405 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:44:36.470 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:36.471 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 22:44:36.529 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:36.530 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
[MASTER] 22:44:36.974 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 23
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 3: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#l\\z", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 19: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 20: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 22: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
aSTNode.setIdentity("");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

* Minimizing test suite
* test suite isTestSuite: 22
Test 0: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.setFileName("MethodDeclaration");
Test 1: 
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze((ASTNode) null);
Test 2: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("ClassVariableDeclaration", " : ", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 3: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 4: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "-=", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 5: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 6: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 7: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("MethodDeclaration", "+", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 8: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
aSTNode.setType("Selection");
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 9: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "MethodDeclaration", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("Iteration", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 10: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 0, Size: 0
   //
   verifyException("java.util.ArrayList", e);
}

Test 11: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("$(3#l\\z", "++", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 12: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 2, Size: 2
   //
   verifyException("java.util.ArrayList", e);
}

Test 13: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 14: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", "MethodDeclaration", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity("*=");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 15: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "--", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 16: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "StatementExpression", aSTNode);
arrayList.add(aSTNode);
aSTNode.setIdentity(")");
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 17: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
ASTNode aSTNode = new ASTNode("StatementExpression", " ", aSTNode);
aSTNode.setIdentity("(");
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "Y;6", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 18: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("StatementExpression", "[", aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
// Undeclared exception!
try { 
  jMCAAnalyzer.analyze(aSTNode);
  fail("Expecting exception: IndexOutOfBoundsException");

} catch(IndexOutOfBoundsException e) {
   //
   // Index: 3, Size: 3
   //
   verifyException("java.util.ArrayList", e);
}

Test 19: 
ASTNode aSTNode = new ASTNode();
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", aSTNode);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode("MethodDeclaration", "-", aSTNode);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 20: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(">>", ">>", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);
Test 21: 
ASTNode aSTNode = new ASTNode("MethodDeclaration", "StatementExpression", (ASTNode) null);
ArrayList<ASTNode> arrayList = aSTNode.list;
arrayList.add(aSTNode);
ASTNode aSTNode = new ASTNode(" ", "%", (ASTNode) null);
arrayList.add(aSTNode);
arrayList.add(aSTNode);
JMCAAnalyzer jMCAAnalyzer = new JMCAAnalyzer();
jMCAAnalyzer.analyze(aSTNode);

[MASTER] 22:44:40.698 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 71%
* Total number of goals: 199
* Number of covered goals: 142
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 222
* Number of covered goals: 181
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 3
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 199
* Number of covered goals: 142
* Generated 22 tests with total length 182
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:44:40.802 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
[MASTER] 22:44:50.244 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:44:51.393 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:51.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 22:44:51.434 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:51.434 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 22:44:51.499 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:51.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 22:44:51.571 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8191552360043427141.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 22:44:51.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191552360043427141.jar
* Writing tests to file
[MASTER] 22:44:51.574 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'JMCAAnalyzer_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
* Writing JUnit test case 'JMCAAnalyzer_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
* Done!

* Computation finished
