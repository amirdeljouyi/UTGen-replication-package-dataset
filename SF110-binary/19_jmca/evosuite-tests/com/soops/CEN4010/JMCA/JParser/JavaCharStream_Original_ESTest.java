/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 20:10:16 GMT 2024
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaCharStream_Original_ESTest extends JavaCharStream_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateLineColumnThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      StringReader arg0 = new StringReader("2^");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 40, 72, 40);
      // Undeclared exception!
      try { 
        javaCharStream.UpdateLineColumn('2');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExpandBuff() throws Throwable  {
      StringReader arg0 = new StringReader("");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-5557), (-5557));
      javaCharStream.bufpos = 1;
      javaCharStream.ExpandBuff(true);
      assertEquals(4097, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLineReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader(".");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 2915, 2915, 2915);
      javaCharStream.inBuf = 2915;
      javaCharStream.BeginToken();
      int line = javaCharStream.getLine();
      assertEquals(0, line);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLineReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("aDLH~BRS.j9f6(");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 12, 1);
      javaCharStream.BeginToken();
      int line = javaCharStream.getLine();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(12, line);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndLineReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader(".");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 2915, 2915, 2915);
      javaCharStream.inBuf = 2915;
      javaCharStream.BeginToken();
      javaCharStream.getEndLine();
      assertEquals(0, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndLineReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.readChar();
      int endLine = javaCharStream.getEndLine();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(1, endLine);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndLineReturningNegative() throws Throwable  {
      StringReader arg0 = new StringReader("X8j;75(hQI|}");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.BeginToken();
      javaCharStream.adjustBeginLineColumn((-1241), (-1241));
      int endLine = javaCharStream.getEndLine();
      assertEquals((-1241), javaCharStream.getBeginLine());
      assertEquals((-1241), endLine);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndColumnReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("X8j;75(hQI|}");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.BeginToken();
      int endColumn = javaCharStream.getEndColumn();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(1, endColumn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndColumnReturningNegative() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-1), (-1), 1);
      javaCharStream.BeginToken();
      int endColumn = javaCharStream.getEndColumn();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals((-1), endColumn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.inBuf = 12;
      javaCharStream.BeginToken();
      javaCharStream.getColumn();
      assertEquals(0, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnReturningNegative() throws Throwable  {
      StringReader arg0 = new StringReader("y(>");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 1595, 1595);
      javaCharStream.BeginToken();
      javaCharStream.adjustBeginLineColumn(1595, (-966));
      int column = javaCharStream.getColumn();
      assertEquals((-966), column);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginLineReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("dEG,");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.BeginToken();
      int beginLine = javaCharStream.getBeginLine();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(1, beginLine);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginLineReturningNegative() throws Throwable  {
      StringReader arg0 = new StringReader("^");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-1166), 63);
      javaCharStream.BeginToken();
      int beginLine = javaCharStream.getBeginLine();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals((-1166), beginLine);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginColumnReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("Dlf[Y3 K>D-r.");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 2, 2);
      javaCharStream.readChar();
      int beginColumn = javaCharStream.getBeginColumn();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(2, beginColumn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginColumnReturningNegative() throws Throwable  {
      StringReader arg0 = new StringReader("z{KsBM_&>%");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-3280), (-3280));
      int[] intArray = new int[5];
      intArray[0] = (-1);
      javaCharStream.bufcolumn = intArray;
      int beginColumn = javaCharStream.getBeginColumn();
      assertEquals((-1), beginColumn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningAlphabeticChar() throws Throwable  {
      StringReader arg0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-875), 1, 1);
      char ReadByte = javaCharStream.ReadByte();
      assertEquals('c', ReadByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBeginTokenReturningDigit() throws Throwable  {
      StringReader arg0 = new StringReader("X8j;75(hQI|}");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.BeginToken();
      char BeginToken = javaCharStream.BeginToken();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals('8', BeginToken);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningDigit() throws Throwable  {
      JavaCharStream javaCharStream = new JavaCharStream((Reader) null, 1141, 95, 33);
      StringReader arg0 = new StringReader("0qW3-Pdm|)s)o");
      javaCharStream.ReInit((Reader) arg0, 18, 1141, 33);
      char ReadByte = javaCharStream.ReadByte();
      assertEquals('0', ReadByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBackupWithNegative() throws Throwable  {
      StringReader arg0 = new StringReader("m1628-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.backup((-1529));
      assertEquals(1528, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJavaCharStreamTakingInputStream() throws Throwable  {
      PipedInputStream arg0 = new PipedInputStream();
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.ReInit((InputStream) arg0, (-1318), (-1318), 1);
      assertEquals((-1), javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdjustBeginLineColumn() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.adjustBeginLineColumn((-1241), (-1241));
      javaCharStream.adjustBeginLineColumn((-1241), (-1241));
      assertEquals((-1241), javaCharStream.getBeginColumn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadCharReturningDigit() throws Throwable  {
      StringReader arg0 = new StringReader("8");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 11, 70);
      javaCharStream.readChar();
      javaCharStream.adjustBeginLineColumn(11, 98);
      assertEquals(98, javaCharStream.getBeginColumn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdjustBeginLineColumnThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      StringReader arg0 = new StringReader("");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2496), (-2496), 0);
      // Undeclared exception!
      try { 
        javaCharStream.adjustBeginLineColumn((-2496), (-2496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuffixReturningEmptyArray() throws Throwable  {
      StringReader arg0 = new StringReader("");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      char[] GetSuffix = javaCharStream.GetSuffix(0);
      assertEquals(0, GetSuffix.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuffixReturningNonEmptyArray() throws Throwable  {
      StringReader arg0 = new StringReader("8");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 11, 70);
      char[] GetSuffix = javaCharStream.GetSuffix(11);
      assertEquals(11, GetSuffix.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetImageReturningNonEmptyString() throws Throwable  {
      StringReader arg0 = new StringReader("yuZSov");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.backup(0);
      javaCharStream.GetImage();
      assertEquals(4095, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetImageReturningEmptyString() throws Throwable  {
      StringReader arg0 = new StringReader("f&$<>dGcs");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2209), (-2209), 0);
      String GetImage = javaCharStream.GetImage();
      assertEquals("", GetImage);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndColumnReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.inBuf = 12;
      javaCharStream.readChar();
      int endColumn = javaCharStream.getEndColumn();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals(0, endColumn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBeginTokenReturningAlphabeticChar() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.prevCharIsLF = true;
      char BeginToken = javaCharStream.BeginToken();
      assertEquals(0, javaCharStream.bufpos);
      assertEquals('m', BeginToken);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBackup() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.backup(30);
      javaCharStream.available = 30;
      javaCharStream.BeginToken();
      javaCharStream.AdjustBuffSize();
      assertEquals(4066, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJavaCharStreamTakingReaderAndCallsAdjustBuffSize() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.bufsize = (-1);
      javaCharStream.AdjustBuffSize();
      assertEquals((-1), javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdjustBuffSizeThrowsError() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.available = (-2);
      // Undeclared exception!
      try { 
        javaCharStream.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJavaCharStreamTaking4ArgumentsAndCallsReadChar() throws Throwable  {
      StringReader arg0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-875), 1, 1);
      javaCharStream.readChar();
      javaCharStream.backup(1);
      assertEquals(0, javaCharStream.bufpos);
      
      char BeginToken = javaCharStream.BeginToken();
      assertEquals('c', BeginToken);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJavaCharStreamTaking3Arguments() throws Throwable  {
      StringReader arg0 = new StringReader(",.");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, (-2372), (-2372));
      javaCharStream.backup(71);
      javaCharStream.BeginToken();
      javaCharStream.AdjustBuffSize();
      assertEquals(0, javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFillBuffThrowsIOException() throws Throwable  {
      StringReader arg0 = new StringReader(".");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 2915, 2915, 2915);
      javaCharStream.BeginToken();
      try { 
        javaCharStream.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnReturningPositive() throws Throwable  {
      StringReader arg0 = new StringReader("'jk K7=5>Q");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 0, 0);
      javaCharStream.ReInit((Reader) arg0, 1, 569, 0);
      javaCharStream.readChar();
      int column = javaCharStream.getColumn();
      assertEquals(1, javaCharStream.getBeginLine());
      assertEquals(569, column);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar0() throws Throwable  {
      try { 
        JavaCharStream.hexval('\u0000');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval0() throws Throwable  {
      int hexval = JavaCharStream.hexval('f');
      assertEquals(15, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval1() throws Throwable  {
      int hexval = JavaCharStream.hexval('e');
      assertEquals(14, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval2() throws Throwable  {
      int hexval = JavaCharStream.hexval('d');
      assertEquals(13, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval3() throws Throwable  {
      int hexval = JavaCharStream.hexval('c');
      assertEquals(12, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval4() throws Throwable  {
      int hexval = JavaCharStream.hexval('b');
      assertEquals(11, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithAlphabeticChar0() throws Throwable  {
      int hexval = JavaCharStream.hexval('a');
      assertEquals(10, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar1() throws Throwable  {
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar2() throws Throwable  {
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar3() throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar4() throws Throwable  {
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar5() throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar6() throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithAlphabeticChar() throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException0() throws Throwable  {
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException1() throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException2() throws Throwable  {
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException3() throws Throwable  {
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException4() throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException5() throws Throwable  {
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException6() throws Throwable  {
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException7() throws Throwable  {
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException8() throws Throwable  {
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException9() throws Throwable  {
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException10() throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException11() throws Throwable  {
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException12() throws Throwable  {
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException13() throws Throwable  {
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException14() throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException15() throws Throwable  {
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException16() throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException17() throws Throwable  {
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOException18() throws Throwable  {
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval5() throws Throwable  {
      int hexval = JavaCharStream.hexval('F');
      assertEquals(15, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval6() throws Throwable  {
      int hexval = JavaCharStream.hexval('E');
      assertEquals(14, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval7() throws Throwable  {
      int hexval = JavaCharStream.hexval('D');
      assertEquals(13, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval8() throws Throwable  {
      int hexval = JavaCharStream.hexval('C');
      assertEquals(12, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexval9() throws Throwable  {
      int hexval = JavaCharStream.hexval('B');
      assertEquals(11, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithAlphabeticChar1() throws Throwable  {
      int hexval = JavaCharStream.hexval('A');
      assertEquals(10, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar7() throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar8() throws Throwable  {
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar9() throws Throwable  {
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar10() throws Throwable  {
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar11() throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar12() throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalThrowsIOExceptionAndHexvalWithOtherChar13() throws Throwable  {
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit0() throws Throwable  {
      int hexval = JavaCharStream.hexval('9');
      assertEquals(9, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit1() throws Throwable  {
      int hexval = JavaCharStream.hexval('8');
      assertEquals(8, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit2() throws Throwable  {
      int hexval = JavaCharStream.hexval('7');
      assertEquals(7, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit3() throws Throwable  {
      int hexval = JavaCharStream.hexval('6');
      assertEquals(6, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit4() throws Throwable  {
      int hexval = JavaCharStream.hexval('5');
      assertEquals(5, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit5() throws Throwable  {
      int hexval = JavaCharStream.hexval('4');
      assertEquals(4, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit6() throws Throwable  {
      int hexval = JavaCharStream.hexval('3');
      assertEquals(3, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit7() throws Throwable  {
      int hexval = JavaCharStream.hexval('2');
      assertEquals(2, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalAndHexvalWithDigit8() throws Throwable  {
      int hexval = JavaCharStream.hexval('1');
      assertEquals(1, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexvalReturningZero() throws Throwable  {
      int hexval = JavaCharStream.hexval('0');
      assertEquals(0, hexval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReInitTaking1And3IntsThrowsNegativeArraySizeException() throws Throwable  {
      StringReader arg0 = new StringReader("");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.Done();
      // Undeclared exception!
      try { 
        javaCharStream.ReInit((Reader) arg0, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginLineReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader("dEG,");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.getBeginLine();
      assertEquals((-1), javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReInitTaking3Arguments() throws Throwable  {
      StringReader arg0 = new StringReader("m1>8@-");
      JavaCharStream javaCharStream = new JavaCharStream(arg0);
      javaCharStream.ReInit((Reader) arg0, (-1), (-1));
      assertEquals((-1), javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBeginColumnReturningZero() throws Throwable  {
      StringReader arg0 = new StringReader("Dlf[Y3 K>D-r.");
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 2, 2);
      javaCharStream.getBeginColumn();
      assertEquals((-1), javaCharStream.bufpos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJavaCharStreamTaking4Arguments() throws Throwable  {
      PipedInputStream arg0 = new PipedInputStream();
      JavaCharStream javaCharStream = new JavaCharStream(arg0, 1355, 11, 1355);
      assertEquals((-1), javaCharStream.bufpos);
  }
}
