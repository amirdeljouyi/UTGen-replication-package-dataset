* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: de.beiri22.stringincrementor.StringIncrementor
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/39_diffi/evosuite-files/evosuite.properties
* Connecting to master process on port 4167
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:56:01.436 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:56:01.439 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:56:01.440 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:56:01.447 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class de.beiri22.stringincrementor.StringIncrementor
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 152
* Using seed 1709254559543
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 45 / 152
[Progress:=>                            6%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:============================>      82%][Progress:==>                           8%] [Cov:============================>      82%][Progress:==>                           9%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%]
* Search finished after 101s and 136 generations, 49904 statements, best individual has fitness: 28.0
* Generated before the refinement 13 tests with total length 29
statement is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,")
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("I$v9.zD&Q+[b5.,", arg1)
test data is: RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString diff = StringIncrementor.diff("Original String 1", "Updated String 2");
        StringIncrementor.patch("Original String 1", diff);
    }
}
statement is: RelativeString diff = StringIncrementor.diff("Original String 1", "Updated String 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("Original String 1", "Updated String 2") target is: StringIncrementor method is: diff(java.lang.String,java.lang.String)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: StringIncrementor.patch("Original String 1", diff), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("Original String 1", diff) target is: StringIncrementor method is: patch(java.lang.String,RelativeString)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String;
TestCase is: String string = "Original String 1";
String string = "Updated String 2";
RelativeString diff = StringIncrementor.diff(string, string);
String string = "Original String 1";
StringIncrementor.patch(string, diff);

statement is: de.beiri22.stringincrementor.StringIncrementor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.StringIncrementor
statement code is: StringIncrementor stringIncrementor = new StringIncrementor()
test data is: StringIncrementor stringIncrementor = new StringIncrementor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringIncrementor stringIncrementor = new StringIncrementor();
        // Before
        stringIncrementor.increment("a");
        stringIncrementor.increment("z");
        // After
        stringIncrementor.increment("A");// "B"

        stringIncrementor.increment("Z");// "AA" }}

    }
}
statement is: StringIncrementor stringIncrementor = new StringIncrementor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Before
stringIncrementor.increment("a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Before
stringIncrementor.increment("a") target is: stringIncrementor method is: increment(java.lang.String)
statement is: stringIncrementor.increment("z"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringIncrementor.increment("z") target is: stringIncrementor method is: increment(java.lang.String)
statement is: // After
stringIncrementor.increment("A")// "B"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After
stringIncrementor.increment("A")// "B"
 target is: stringIncrementor method is: increment(java.lang.String)
statement is: stringIncrementor.increment("Z")// "AA" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: stringIncrementor.increment("Z")// "AA" }}
 target is: stringIncrementor method is: increment(java.lang.String)
TestCase is: StringIncrementor stringIncrementor = new StringIncrementor();

statement is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("", "Searching links...", true)
test data is: StringIncrementor.diff("", "Searching links...", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true);
    }
}
statement is: StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
TestCase is: String string = "abcdefghijklmnopqrstuvwxyz";
String string = "Searching links...";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("Creating index...", "Creating index...", true)
test data is: StringIncrementor.diff("Creating index...", "Creating index...", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringIncrementor.diff("The number is a multiple of 3, 5 and 7", "The number is a multiple of 3, 5 and 7", true);
    }
}
statement is: StringIncrementor.diff("The number is a multiple of 3, 5 and 7", "The number is a multiple of 3, 5 and 7", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("The number is a multiple of 3, 5 and 7", "The number is a multiple of 3, 5 and 7", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
TestCase is: String string = "The number is a multiple of 3, 5 and 7";
String string = "The number is a multiple of 3, 5 and 7";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi")
statement is: org.evosuite.testcase.statements.ArrayStatement@bdf19a91 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: de.beiri22.stringincrementor.relativestring.StringLink([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.relativestring.StringLink
statement code is: StringLink stringLink = new StringLink(arg0)
statement is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addLink = relativeString.addLink(arg0)
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("&FjQ`M,vim2;EUTi", arg1, true)
test data is: RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString diff = StringIncrementor.diff("original", "modified");
        byte[] byteArray = new byte[2];
        StringLink stringLink = new StringLink(byteArray);
        diff.addLink(stringLink);
        StringIncrementor.patch("original", diff, true);
    }
}
statement is: RelativeString diff = StringIncrementor.diff("original", "modified"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("original", "modified") target is: StringIncrementor method is: diff(java.lang.String,java.lang.String)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: StringLink stringLink = new StringLink(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: diff.addLink(stringLink), class spoon.support.reflect.code.CtInvocationImpl
invocation is: diff.addLink(stringLink) target is: diff method is: addLink(StringLink)
source statement: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.relativestring.RelativeStringindex is: 2
Matched Method is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z
statement is: StringIncrementor.patch("original", diff, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("original", diff, true) target is: StringIncrementor method is: patch(java.lang.String,RelativeString,boolean)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String;
TestCase is: String string = "original";
String string = "modified";
RelativeString diff = StringIncrementor.diff(string, string);
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString) string).addLink(stringLink);
String string = "original";
boolean _boolean = true;
StringIncrementor.patch(string, diff, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("", "hSe8I5L$]%{D&", false)
test data is: StringIncrementor.diff("", "hSe8I5L$]%{D&", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for StringIncrementor.diff() method
        StringIncrementor.diff("Hello World!", "Greetings from Earth!", true);
        StringIncrementor.diff("1234567890", "-=!@#$%^&*()_+", false);
        StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", true);
    }
}
statement is: // Improved test data for StringIncrementor.diff() method
StringIncrementor.diff("Hello World!", "Greetings from Earth!", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for StringIncrementor.diff() method
StringIncrementor.diff("Hello World!", "Greetings from Earth!", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: StringIncrementor.diff("1234567890", "-=!@#$%^&*()_+", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("1234567890", "-=!@#$%^&*()_+", false) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
TestCase is: String string = "Hello World!";
String string = "Greetings from Earth!";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);
String string = "1234567890";
String string = "-=!@#$%^&*()_+";
boolean _boolean = false;
StringIncrementor.diff(string, string, _boolean);
String string = "abcdefghijklmnopqrstuvwxyz";
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false)
statement is: setAbsolute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: relativeString.setAbsolute("/cU\"@O;EB1eL&<bU")
statement is: de.beiri22.stringincrementor.relativestring.StringLink(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.relativestring.StringLink
statement code is: StringLink stringLink = new StringLink((-8), (byte)22, 256)
statement is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addLink = relativeString.addLink(arg0)
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", arg1)
test data is: RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
diff.setAbsolute("/cU\"@O;EB1eL&<bU");
StringLink stringLink = new StringLink((-8), (byte)22, 256);
diff.addLink(stringLink);
StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
        diff.setAbsolute("/cU\"@O;EB1eL&<bU");
        StringLink stringLink = new StringLink(-8, ((byte) (22)), 256);
        diff.addLink(stringLink);
        StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff);
    }
}
statement is: RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: diff.setAbsolute("/cU\"@O;EB1eL&<bU"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: diff.setAbsolute("/cU\"@O;EB1eL&<bU") target is: diff method is: setAbsolute(java.lang.String)
source statement: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.relativestring.RelativeStringindex is: 3
Matched Method is: setAbsolute(Ljava/lang/String;)V
statement is: StringLink stringLink = new StringLink(-8, ((byte) (22)), 256), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: diff.addLink(stringLink), class spoon.support.reflect.code.CtInvocationImpl
invocation is: diff.addLink(stringLink) target is: diff method is: addLink(StringLink)
source statement: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.relativestring.RelativeStringindex is: 3
Matched Method is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z
statement is: StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff) target is: StringIncrementor method is: patch(java.lang.String,RelativeString)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String;
TestCase is: String string = "/cU\"@O;EB1eL&<bU";
String string = "/cU\"@O;EB1eL&<bU";
boolean _boolean = false;
RelativeString diff = StringIncrementor.diff(string, string, _boolean);
String string = "/cU\"@O;EB1eL&<bU";
((RelativeString) string).setAbsolute(string);
int _int = 22;
int _int = 256;
StringLink stringLink = new StringLink(_int, _int, 256);
((RelativeString) string).addLink(stringLink);
String string = "de.beiri22.stringincrementor.StringIncrementor";
StringIncrementor.patch(string, diff);

statement is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,")
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("I$v9.zD&Q+[b5.,", arg1, true)
test data is: RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
        StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);
    }
}
statement is: RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,") target is: StringIncrementor method is: diff(java.lang.String,java.lang.String)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true) target is: StringIncrementor method is: patch(java.lang.String,RelativeString,boolean)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String;
TestCase is: String string = "I$v9.zD&Q+[b5.,";
String string = "I$v9.zD&Q+[b5.,";
RelativeString diff = StringIncrementor.diff(string, string);
String string = "I$v9.zD&Q+[b5.,";
boolean _boolean = true;
StringIncrementor.patch(string, diff, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi")
statement is: org.evosuite.testcase.statements.ArrayStatement@86d59682 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: de.beiri22.stringincrementor.relativestring.StringLink([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.relativestring.StringLink
statement code is: StringLink stringLink = new StringLink(arg0)
statement is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean addLink = relativeString.addLink(arg0)
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("&FjQ`M,vim2;EUTi", arg1, false)
test data is: RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString diff = StringIncrementor.diff("apple", "banana");
        byte[] byteArray = new byte[2];
        StringLink stringLink = new StringLink(byteArray);
        diff.addLink(stringLink);
        StringIncrementor.patch("apple", diff, false);
    }
}
statement is: RelativeString diff = StringIncrementor.diff("apple", "banana"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("apple", "banana") target is: StringIncrementor method is: diff(java.lang.String,java.lang.String)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: byte[] byteArray = new byte[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[2] Elements: []
lengths: [2] [2]
Their type are: class [B byte[]
statement is: StringLink stringLink = new StringLink(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: diff.addLink(stringLink), class spoon.support.reflect.code.CtInvocationImpl
invocation is: diff.addLink(stringLink) target is: diff method is: addLink(StringLink)
source statement: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.relativestring.RelativeStringindex is: 2
Matched Method is: addLink(Lde/beiri22/stringincrementor/relativestring/StringLink;)Z
statement is: StringIncrementor.patch("apple", diff, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("apple", diff, false) target is: StringIncrementor method is: patch(java.lang.String,RelativeString,boolean)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String;
TestCase is: String string = "apple";
String string = "banana";
RelativeString diff = StringIncrementor.diff(string, string);
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString) string).addLink(stringLink);
String string = "apple";
boolean _boolean = false;
StringIncrementor.patch(string, diff, _boolean);

statement is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("9XT@-NJnp7AQ^", "")
test data is: StringIncrementor.diff("9XT@-NJnp7AQ^", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringIncrementor.diff("ZYXWVUTSRQPONMLKJIHGFEDCBA@", "1234567890");
    }
}
statement is: StringIncrementor.diff("ZYXWVUTSRQPONMLKJIHGFEDCBA@", "1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("ZYXWVUTSRQPONMLKJIHGFEDCBA@", "1234567890") target is: StringIncrementor method is: diff(java.lang.String,java.lang.String)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;)Lde/beiri22/stringincrementor/relativestring/RelativeString;
TestCase is: String string = "ZYXWVUTSRQPONMLKJIHGFEDCBA@";
String string = "1234567890";
StringIncrementor.diff(string, string);

statement is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString diff = StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true)
test data is: StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
        // Improved test data:
        StringIncrementor.diff("1234567890", "", true);
    }
}
statement is: StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
statement is: // Improved test data:
StringIncrementor.diff("1234567890", "", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
StringIncrementor.diff("1234567890", "", true) target is: StringIncrementor method is: diff(java.lang.String,java.lang.String,boolean)
Matched Method is: diff(Ljava/lang/String;Ljava/lang/String;Z)Lde/beiri22/stringincrementor/relativestring/RelativeString;
TestCase is: String string = "IIz6(E'cviy@(/%lG";
String string = "";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);
String string = "1234567890";
String string = "";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

statement is: de.beiri22.stringincrementor.relativestring.RelativeString()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString relativeString = new RelativeString()
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("", arg1)
test data is: RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        // Before:
        // StringIncrementor.patch("", relativeString);
        // After:
        StringIncrementor.patch("abcdefghijklmnopqrstuvwxyz", relativeString);
    }
}
statement is: // Improved test data
// Before:
// StringIncrementor.patch("", relativeString);
// After:
StringIncrementor.patch("abcdefghijklmnopqrstuvwxyz", relativeString), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
// Before:
// StringIncrementor.patch("", relativeString);
// After:
StringIncrementor.patch("abcdefghijklmnopqrstuvwxyz", relativeString) target is: StringIncrementor method is: patch(java.lang.String)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: String string = "abcdefghijklmnopqrstuvwxyz";
RelativeString relativeString = null;
StringIncrementor.patch(string, relativeString);

statement is: de.beiri22.stringincrementor.relativestring.RelativeString()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.relativestring.RelativeString
statement code is: RelativeString relativeString = new RelativeString()
statement is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String patch = StringIncrementor.patch("", arg1, false)
test data is: RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RelativeString relativeString = new RelativeString();
        StringIncrementor.patch("This is a test string.", relativeString, false);
    }
}
statement is: RelativeString relativeString = new RelativeString(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringIncrementor.patch("This is a test string.", relativeString, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: StringIncrementor.patch("This is a test string.", relativeString, false) target is: StringIncrementor method is: patch(java.lang.String,RelativeString,boolean)
Matched Method is: patch(Ljava/lang/String;Lde/beiri22/stringincrementor/relativestring/RelativeString;Z)Ljava/lang/String;
TestCase is: RelativeString relativeString = new RelativeString();
String string = "This is a test string.";
boolean _boolean = false;
StringIncrementor.patch(string, relativeString, _boolean);

* test suite isTestSuite: 26
Test 0: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff);
Test 1: 
StringIncrementor stringIncrementor = new StringIncrementor();
Test 2: 
// Undeclared exception!
try { 
  StringIncrementor.diff("", "Searching links...", true);
  fail("Expecting exception: ArithmeticException");

} catch(ArithmeticException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
StringIncrementor.diff("Creating index...", "Creating index...", true);
Test 4: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 5: 
StringIncrementor.diff("", "hSe8I5L$]%{D&", false);
Test 6: 
RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
diff.setAbsolute("/cU\"@O;EB1eL&<bU");
StringLink stringLink = new StringLink((-8), (byte)22, 256);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);
Test 8: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, false);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
StringIncrementor.diff("9XT@-NJnp7AQ^", "");
Test 10: 
StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
Test 11: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString);
Test 12: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString, false);
Test 13: 
RelativeString diff = StringIncrementor.diff("Original String 1", "Updated String 2");
StringIncrementor.patch("Original String 1", diff);

Test 14: 
StringIncrementor stringIncrementor = new StringIncrementor();

Test 15: 
StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true);

Test 16: 
StringIncrementor.diff("The number is a multiple of 3, 5 and 7", "The number is a multiple of 3, 5 and 7", true);

Test 17: 
RelativeString diff = StringIncrementor.diff("original", "modified");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString)"original").addLink(stringLink);
String string = "original";
boolean _boolean = true;
StringIncrementor.patch(string, diff, _boolean);

Test 18: 
StringIncrementor.diff("Hello World!", "Greetings from Earth!", true);
String string = "1234567890";
String string = "-=!@#$%^&*()_+";
boolean _boolean = false;
StringIncrementor.diff(string, string, _boolean);
String string = "abcdefghijklmnopqrstuvwxyz";
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

Test 19: 
String string = "/cU\"@O;EB1eL&<bU";
RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
((RelativeString)"/cU\"@O;EB1eL&<bU").setAbsolute("/cU\"@O;EB1eL&<bU");
int _int = 22;
int _int = 256;
StringLink stringLink = new StringLink(_int, _int, 256);
((RelativeString) string).addLink(stringLink);
String string = "de.beiri22.stringincrementor.StringIncrementor";
StringIncrementor.patch(string, diff);

Test 20: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);

Test 21: 
RelativeString diff = StringIncrementor.diff("apple", "banana");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString)"apple").addLink(stringLink);
String string = "apple";
boolean _boolean = false;
StringIncrementor.patch(string, diff, _boolean);

Test 22: 
StringIncrementor.diff("ZYXWVUTSRQPONMLKJIHGFEDCBA@", "1234567890");

Test 23: 
StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
StringIncrementor.diff("1234567890", "", true);

Test 24: 
StringIncrementor.patch("abcdefghijklmnopqrstuvwxyz", (RelativeString) null);

Test 25: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("This is a test string.", relativeString, false);


* Generated after the refinement and before minimization 26 tests with total length 74
* test suite isTestSuite: 26
Test 0: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff);
Test 1: 
StringIncrementor stringIncrementor = new StringIncrementor();
Test 2: 
// Undeclared exception!
try { 
  StringIncrementor.diff("", "Searching links...", true);
  fail("Expecting exception: ArithmeticException");

} catch(ArithmeticException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
StringIncrementor.diff("Creating index...", "Creating index...", true);
Test 4: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 5: 
StringIncrementor.diff("", "hSe8I5L$]%{D&", false);
Test 6: 
RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
diff.setAbsolute("/cU\"@O;EB1eL&<bU");
StringLink stringLink = new StringLink((-8), (byte)22, 256);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);
Test 8: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, false);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
StringIncrementor.diff("9XT@-NJnp7AQ^", "");
Test 10: 
StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
Test 11: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString);
Test 12: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString, false);
Test 13: 
RelativeString diff = StringIncrementor.diff("Original String 1", "Updated String 2");
StringIncrementor.patch("Original String 1", diff);

Test 14: 
StringIncrementor stringIncrementor = new StringIncrementor();

Test 15: 
StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true);

Test 16: 
StringIncrementor.diff("The number is a multiple of 3, 5 and 7", "The number is a multiple of 3, 5 and 7", true);

Test 17: 
RelativeString diff = StringIncrementor.diff("original", "modified");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString)"original").addLink(stringLink);
String string = "original";
boolean _boolean = true;
StringIncrementor.patch(string, diff, _boolean);

Test 18: 
StringIncrementor.diff("Hello World!", "Greetings from Earth!", true);
String string = "1234567890";
String string = "-=!@#$%^&*()_+";
boolean _boolean = false;
StringIncrementor.diff(string, string, _boolean);
String string = "abcdefghijklmnopqrstuvwxyz";
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
boolean _boolean = true;
StringIncrementor.diff(string, string, _boolean);

Test 19: 
String string = "/cU\"@O;EB1eL&<bU";
RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
((RelativeString)"/cU\"@O;EB1eL&<bU").setAbsolute("/cU\"@O;EB1eL&<bU");
int _int = 22;
int _int = 256;
StringLink stringLink = new StringLink(_int, _int, 256);
((RelativeString) string).addLink(stringLink);
String string = "de.beiri22.stringincrementor.StringIncrementor";
StringIncrementor.patch(string, diff);

Test 20: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);

Test 21: 
RelativeString diff = StringIncrementor.diff("apple", "banana");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
((RelativeString)"apple").addLink(stringLink);
String string = "apple";
boolean _boolean = false;
StringIncrementor.patch(string, diff, _boolean);

Test 22: 
StringIncrementor.diff("ZYXWVUTSRQPONMLKJIHGFEDCBA@", "1234567890");

Test 23: 
StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
StringIncrementor.diff("1234567890", "", true);

Test 24: 
StringIncrementor.patch("abcdefghijklmnopqrstuvwxyz", (RelativeString) null);

Test 25: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("This is a test string.", relativeString, false);


* Minimizing test suite
* test suite isTestSuite: 13
Test 0: 
RelativeString diff = StringIncrementor.diff("Original String 1", "Updated String 2");
StringIncrementor.patch("Original String 1", diff);
Test 1: 
StringIncrementor stringIncrementor = new StringIncrementor();
Test 2: 
RelativeString diff = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
StringIncrementor.patch("I$v9.zD&Q+[b5.,", diff, true);
Test 3: 
// Undeclared exception!
try { 
  StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true);
  fail("Expecting exception: ArithmeticException");

} catch(ArithmeticException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
StringIncrementor.diff("Creating index...", "Creating index...", true);
Test 5: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, false);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 6: 
RelativeString diff = StringIncrementor.diff("&FjQ`M,vim2;EUTi", "&FjQ`M,vim2;EUTi");
byte[] byteArray = new byte[2];
StringLink stringLink = new StringLink(byteArray);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("&FjQ`M,vim2;EUTi", diff, true);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 7: 
StringIncrementor.diff("", "hSe8I5L$]%{D&", false);
Test 8: 
RelativeString diff = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
diff.setAbsolute("/cU\"@O;EB1eL&<bU");
StringLink stringLink = new StringLink((-8), (byte)22, 256);
diff.addLink(stringLink);
// Undeclared exception!
try { 
  StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", diff);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
StringIncrementor.diff("9XT@-NJnp7AQ^", "");
Test 10: 
StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
Test 11: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString);
Test 12: 
RelativeString relativeString = new RelativeString();
StringIncrementor.patch("", relativeString, false);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 35
* Number of covered goals: 29
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 86%
* Total number of goals: 57
* Number of covered goals: 49
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 60%
* Total number of goals: 20
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 35
* Number of covered goals: 29
* Generated 13 tests with total length 29
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString arg1 = StringIncrementor.diff("Original String 1", "Updated String 2");
String patch = StringIncrementor.patch("Original String 1", arg1);
assertEquals("Updated String 2", arg1.getAbsolute());
assertEquals("Updated String 2", patch);


** It was a parseable test case! 
refined test name is: testPatchMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StringIncrementor stringIncrementor = new StringIncrementor();

** It was a parseable test case! 
refined test name is: testIncrementWithEmptyString
* Compiling Tests
refined test name is: testEmptyStringIncrementation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString arg1 = StringIncrementor.diff("I$v9.zD&Q+[b5.,", "I$v9.zD&Q+[b5.,");
String patch = StringIncrementor.patch("I$v9.zD&Q+[b5.,", arg1, true);
assertEquals("", arg1.getAbsolute());
assertEquals("I$v9.zD&Q+[b5.,", patch);


** It was a parseable test case! 
refined test name is: testDiffAndPatch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  StringIncrementor.diff("abcdefghijklmnopqrstuvwxyz", "Searching links...", true);
  fail("Expecting exception: ArithmeticException");

} catch(ArithmeticException e) {
   //
   // / by zero
   //
   verifyException("de.beiri22.stringincrementor.StringIncrementor", e);
}


** It was a parseable test case! 
refined test name is: testDiffThrowsArithmeticExceptionWhenZeroDivisor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString diff = StringIncrementor.diff("Creating index...", "Creating index...", true);
assertEquals("", diff.getAbsolute());


** It was a parseable test case! 
refined test name is: testCalculateDiffWithIdenticalStrings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString diff = StringIncrementor.diff("", "hSe8I5L$]%{D&", false);
assertEquals("hSe8I5L$]%{D&", diff.getAbsolute());


** It was a parseable test case! 
refined test name is: testDiffWithEmptyInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString arg1 = StringIncrementor.diff("/cU\"@O;EB1eL&<bU", "/cU\"@O;EB1eL&<bU", false);
arg1.setAbsolute("/cU\"@O;EB1eL&<bU");
StringLink arg0 = new StringLink((-8), (byte)22, 256);
arg1.addLink(arg0);
// Undeclared exception!
try { 
  StringIncrementor.patch("de.beiri22.stringincrementor.StringIncrementor", arg1);
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}


** It was a parseable test case! 
refined test name is: testPatchWithInvalidArgumentsShouldThrowException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString diff = StringIncrementor.diff("9XT@-NJnp7AQ^", "");
assertEquals(0, diff.linksCount());


** It was a parseable test case! 
refined test name is: testDiffWithNoComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString diff = StringIncrementor.diff("IIz6(E'cviy@(/%lG", "", true);
assertEquals(0, diff.linksCount());


** It was a parseable test case! 
refined test name is: testDiffBetweenEmptyStringsReturnsZeroLinks
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString arg1 = new RelativeString();
String patch = StringIncrementor.patch("", arg1);
assertEquals("", patch);


** It was a parseable test case! 
refined test name is: testPatchWithEmptyRelativeStringAndNoArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: RelativeString arg1 = new RelativeString();
String patch = StringIncrementor.patch("", arg1, false);
assertEquals("", patch);


** It was a parseable test case! 
refined test name is: testPatchEmptyStringsNoIncrementing
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.177 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:01:18.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:01:18.265 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:01:18.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.353 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:01:18.355 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.448 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.535 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.616 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:01:18.618 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.708 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.875 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.877 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:18.952 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:18.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
[MASTER] 01:01:19.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:19.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 01:01:19.221 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:01:19.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
** Write a test suite: 9 called: 0 to improve: false
[MASTER] 01:01:19.425 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8148619759003979992.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'StringIncrementor_ESTest' to evosuite-tests
[MASTER] 01:01:19.428 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8148619759003979992.jar
** Write a test suite: 9 called: 0 to improve: false
* Done!

* Computation finished
