* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: de.beiri22.stringincrementor.helper.IndexedString
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/39_diffi/evosuite-files/evosuite.properties
* Connecting to master process on port 18946
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class de.beiri22.stringincrementor.helper.IndexedString
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 75
* Using seed 1709254413578
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 24 / 75
[Progress:>                             1%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===============================>   91%][Progress:=>                            4%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:===>                          10%] [Cov:===============================>   91%][Progress:===>                          12%] [Cov:===============================>   91%][Progress:===>                          13%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:=====>                        17%] [Cov:===============================>   91%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:======>                       20%] [Cov:================================>  93%][Progress:======>                       22%] [Cov:================================>  93%][Progress:======>                       23%] [Cov:================================>  93%][Progress:=======>                      24%] [Cov:================================>  93%][Progress:=======>                      26%] [Cov:================================>  93%][Progress:========>                     27%] [Cov:================================>  93%][Progress:========>                     28%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    30%] [Cov:================================>  93%][Progress:=========>                    32%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   34%] [Cov:================================>  93%][Progress:==========>                   35%] [Cov:================================>  93%][Progress:===========>                  37%] [Cov:================================>  93%][Progress:===========>                  38%] [Cov:================================>  93%][Progress:===========>                  39%] [Cov:================================>  93%][Progress:============>                 41%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:===================================100%]
* Search finished after 77s and 71 generations, 50496 statements, best individual has fitness: 0.0
* Generated before the refinement 4 tests with total length 17
statement is: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.helper.IndexedString
statement code is: IndexedString indexedString = new IndexedString("a)&P;rUgA")
statement is: org.evosuite.testcase.statements.ArrayStatement@39ad1d6a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ab42cd8e type is: class org.evosuite.testcase.statements.AssignmentStatement return type char
statement code is: charArray[0] = 'a'
statement is: indexOf([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int indexOf = indexedString.indexOf(arg0)
test data is: IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
charArray[0] = 'a';
indexedString.indexOf(charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        IndexedString indexedString = new IndexedString("a)&P;rUgA");
        char[] charArray = new char[1];
        charArray[0] = 'p';// changed from 'a' to 'p' to better represent the situation being tested

        indexedString.indexOf(charArray);
    }
}
statement is: IndexedString indexedString = new IndexedString("a)&P;rUgA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[1] Elements: []
lengths: [1] [1]
Their type are: class [C char[]
statement is: charArray[0] = 'p'// changed from 'a' to 'p' to better represent the situation being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'p' Ct is: charArray[0] = 'p'// changed from 'a' to 'p' to better represent the situation being tested

target : charArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e84e509
statement is: indexedString.indexOf(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArray) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
* this is vulnerable: char _char = 'p'
TestCase is: String string = "a)&P;rUgA";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[1];
char _char = 'p';
((IndexedString) string).indexOf(charArray);

statement is: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.helper.IndexedString
statement code is: IndexedString indexedString = new IndexedString("UA>s )k")
statement is: org.evosuite.testcase.statements.ArrayStatement@1cb1f0e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[10]
statement is: org.evosuite.testcase.statements.AssignmentStatement@676c517c type is: class org.evosuite.testcase.statements.AssignmentStatement return type char
statement code is: charArray[0] = 'k'
statement is: indexOf([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int indexOf = indexedString.indexOf(arg0)
test data is: IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
charArray[0] = 'k';
indexedString.indexOf(charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        IndexedString indexedString = new IndexedString("UA>s )k");
        char[] charArrayEmpty = new char[0];
        indexedString.indexOf(charArrayEmpty);
        char[] charArraySingle = new char[]{ 'a' };
        indexedString.indexOf(charArraySingle);
        char[] charArrayMultiple = new char[]{ 'a', 'b', 'c' };
        indexedString.indexOf(charArrayMultiple);
        char[] charArrayNonExistent = new char[]{ 'd' };
        indexedString.indexOf(charArrayNonExistent);
        char[] charArrayCaseInsensitive = new char[]{ 'A' };
        indexedString.indexOf(charArrayCaseInsensitive);
        char[] charArrayUnicode = new char[]{ ((char) (0x2603)) };
        indexedString.indexOf(charArrayUnicode);
        char[] charArrayEdgeCases = new char[]{  };
        indexedString.indexOf(charArrayEdgeCases);
    }
}
statement is: IndexedString indexedString = new IndexedString("UA>s )k"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArrayEmpty = new char[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[0] Elements: []
lengths: [10] [0]
Their type are: class [C char[]
statement is: indexedString.indexOf(charArrayEmpty), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayEmpty) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
statement is: char[] charArraySingle = new char[]{ 'a' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{ 'a' } Elements: ['a']
lengths: [10] []
statement is: indexedString.indexOf(charArraySingle), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArraySingle) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: char[] charArrayMultiple = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{ 'a', 'b', 'c' } Elements: ['a', 'b', 'c']
lengths: [10] []
statement is: indexedString.indexOf(charArrayMultiple), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayMultiple) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: char[] charArrayNonExistent = new char[]{ 'd' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{ 'd' } Elements: ['d']
lengths: [10] []
statement is: indexedString.indexOf(charArrayNonExistent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayNonExistent) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: char[] charArrayCaseInsensitive = new char[]{ 'A' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{ 'A' } Elements: ['A']
lengths: [10] []
statement is: indexedString.indexOf(charArrayCaseInsensitive), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayCaseInsensitive) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: char[] charArrayUnicode = new char[]{ ((char) (0x2603)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{ ((char) (0x2603)) } Elements: [((char) (0x2603))]
lengths: [10] []
statement is: indexedString.indexOf(charArrayUnicode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayUnicode) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: char[] charArrayEdgeCases = new char[]{  }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[]{  } Elements: []
lengths: [10] []
statement is: indexedString.indexOf(charArrayEdgeCases), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArrayEdgeCases) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "UA>s )k";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[10];
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);

statement is: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.helper.IndexedString
statement code is: IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey")
statement is: org.evosuite.testcase.statements.ArrayStatement@7ce1fa85 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5c646d32 type is: class org.evosuite.testcase.statements.AssignmentStatement return type char
statement code is: charArray[0] = '+'
statement is: indexOf([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int indexOf = indexedString.indexOf(arg0)
test data is: IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
charArray[0] = '+';
indexedString.indexOf(charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
        char[] charArray = new char[3];
        charArray[0] = '>';// Changed the primitive value to a more descriptive character

        indexedString.indexOf(charArray);
    }
}
statement is: IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[3] isAssignment: false Array: new char[3] Elements: []
lengths: [3] [3]
Their type are: class [C char[]
statement is: charArray[0] = '>'// Changed the primitive value to a more descriptive character
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'>' Ct is: charArray[0] = '>'// Changed the primitive value to a more descriptive character

target : charArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@129cb2b
statement is: indexedString.indexOf(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArray) target is: indexedString method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 1
Matched Method is: indexOf([C)I
* this is vulnerable: char _char = '>'
TestCase is: String string = "OX83b:tx!S8>+ey";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[3];
char _char = '>';
((IndexedString) string).indexOf(charArray);

statement is: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.beiri22.stringincrementor.helper.IndexedString
statement code is: IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il")
statement is: org.evosuite.testcase.statements.ArrayStatement@2251fb8c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ad640cdc type is: class org.evosuite.testcase.statements.AssignmentStatement return type char
statement code is: charArray[0] = 'X'
statement is: org.evosuite.testcase.statements.AssignmentStatement@abb1ac60 type is: class org.evosuite.testcase.statements.AssignmentStatement return type char
statement code is: charArray[1] = '}'
statement is: indexOf([C)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int indexOf = indexedString.indexOf(arg0)
test data is: IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
charArray[0] = 'X';
charArray[1] = '}';
indexedString.indexOf(charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[2];
        charArray[0] = 'A';
        charArray[1] = 'Z';
        indexedString.indexOf(charArray);
        // Test data for the case where the character array contains multiple characters
        IndexedString indexedString2 = new IndexedString(";DWJ_dza-5X}8!il");
        char[] charArray2 = new char[3];
        charArray2[0] = 'A';
        charArray2[1] = 'Z';
        charArray2[2] = '-';
        indexedString2.indexOf(charArray2);
        // Test data for the case where the string contains special characters
        IndexedString indexedString3 = new IndexedString(";DWJ_dza-5X}8!il");
        char[] charArray3 = new char[1];
        charArray3[0] = '!';
        indexedString3.indexOf(charArray3);
        // Test data for the case where the string contains numeric characters
        IndexedString indexedString4 = new IndexedString(";DWJ_dza-5X}8!il");
        char[] charArray4 = new char[1];
        charArray4[0] = '2';
        indexedString4.indexOf(charArray4);
        // Test data for the case where the string contains a mixture of characters
        IndexedString indexedString5 = new IndexedString(";DWJ_dza-5X}8!il");
        char[] charArray5 = new char[3];
        charArray5[0] = 'A';
        charArray5[1] = 'Z';
        charArray5[2] = '-';
        indexedString5.indexOf(charArray5);
    }
}
statement is: char[] charArray = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[2] Elements: []
lengths: [2] [2]
Their type are: class [C char[]
statement is: charArray[0] = 'A', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'A' Ct is: charArray[0] = 'A'
target : charArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8a180392
statement is: charArray[1] = 'Z', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'Z' Ct is: charArray[1] = 'Z'
target : charArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8f942b90
statement is: indexedString.indexOf(charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString.indexOf(charArray) target is: indexedString method is: indexOf(char[])
statement is: // Test data for the case where the character array contains multiple characters
IndexedString indexedString2 = new IndexedString(";DWJ_dza-5X}8!il"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray2 = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[3] Elements: []
lengths: [2] [3]
Their type are: class [C char[]
statement is: charArray2[0] = 'A', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'A' Ct is: charArray2[0] = 'A'
target : charArray2 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aae17f74
statement is: charArray2[1] = 'Z', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray2[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'Z' Ct is: charArray2[1] = 'Z'
target : charArray2 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@979fc8a3
statement is: charArray2[2] = '-', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray2[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'-' Ct is: charArray2[2] = '-'
target : charArray2 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@aae17f74
statement is: indexedString2.indexOf(charArray2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString2.indexOf(charArray2) target is: indexedString2 method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 4
Matched Method is: indexOf([C)I
statement is: // Test data for the case where the string contains special characters
IndexedString indexedString3 = new IndexedString(";DWJ_dza-5X}8!il"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray3 = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[1] Elements: []
lengths: [2] [1]
Their type are: class [C char[]
statement is: charArray3[0] = '!', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray3[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'!' Ct is: charArray3[0] = '!'
target : charArray3 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@31eb13ac
statement is: indexedString3.indexOf(charArray3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString3.indexOf(charArray3) target is: indexedString3 method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 10
Matched Method is: indexOf([C)I
statement is: // Test data for the case where the string contains numeric characters
IndexedString indexedString4 = new IndexedString(";DWJ_dza-5X}8!il"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray4 = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[1] Elements: []
lengths: [2] [1]
Their type are: class [C char[]
statement is: charArray4[0] = '2', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray4[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'2' Ct is: charArray4[0] = '2'
target : charArray4 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2d255857
statement is: indexedString4.indexOf(charArray4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString4.indexOf(charArray4) target is: indexedString4 method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 15
Matched Method is: indexOf([C)I
statement is: // Test data for the case where the string contains a mixture of characters
IndexedString indexedString5 = new IndexedString(";DWJ_dza-5X}8!il"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray5 = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[3] Elements: []
lengths: [2] [3]
Their type are: class [C char[]
statement is: charArray5[0] = 'A', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray5[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'A' Ct is: charArray5[0] = 'A'
target : charArray5 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5b466c85
statement is: charArray5[1] = 'Z', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray5[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'Z' Ct is: charArray5[1] = 'Z'
target : charArray5 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9a9950aa
statement is: charArray5[2] = '-', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : charArray5[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'-' Ct is: charArray5[2] = '-'
target : charArray5 class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5b466c85
statement is: indexedString5.indexOf(charArray5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: indexedString5.indexOf(charArray5) target is: indexedString5 method is: indexOf(char[])
source statement: de.beiri22.stringincrementor.helper.IndexedString(Ljava/lang/String;)V callee: VariableReference: Statement 0, type de.beiri22.stringincrementor.helper.IndexedStringindex is: 20
Matched Method is: indexOf([C)I
* this is vulnerable: char _char = 'A'
* this is vulnerable: char _char = 'Z'
* this is vulnerable: char _char = 'A'
* this is vulnerable: char _char = 'Z'
* this is vulnerable: char _char = '!'
* this is vulnerable: char _char = '2'
* this is vulnerable: char _char = 'A'
* this is vulnerable: char _char = 'Z'
TestCase is: char[] charArray = new char[2];
char _char = 'A';
char _char = 'Z';
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
char _char = 'A';
char _char = 'Z';
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
char _char = '!';
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
char _char = '2';
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
char _char = 'A';
char _char = 'Z';
((IndexedString) charArray).indexOf(charArray);

* test suite isTestSuite: 8
Test 0: 
IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
charArray[0] = 'a';
indexedString.indexOf(charArray);

Test 1: 
IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
charArray[0] = 'k';
indexedString.indexOf(charArray);
Test 2: 
IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
charArray[0] = '+';
indexedString.indexOf(charArray);
Test 3: 
IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
charArray[0] = 'X';
charArray[1] = '}';
indexedString.indexOf(charArray);
Test 4: 
IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
((IndexedString)"a)&P;rUgA").indexOf(charArray);

Test 5: 
String string = "UA>s )k";
IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
((IndexedString)"UA>s )k").indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);

Test 6: 
IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
((IndexedString)"OX83b:tx!S8>+ey").indexOf(charArray);

Test 7: 
char[] charArray = new char[2];
IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);


* Generated after the refinement and before minimization 8 tests with total length 55
* test suite isTestSuite: 8
Test 0: 
IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
charArray[0] = 'a';
indexedString.indexOf(charArray);

Test 1: 
IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
charArray[0] = 'k';
indexedString.indexOf(charArray);
Test 2: 
IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
charArray[0] = '+';
indexedString.indexOf(charArray);
Test 3: 
IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
charArray[0] = 'X';
charArray[1] = '}';
indexedString.indexOf(charArray);
Test 4: 
IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
((IndexedString)"a)&P;rUgA").indexOf(charArray);

Test 5: 
String string = "UA>s )k";
IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
((IndexedString)"UA>s )k").indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);
char[] charArray = null;
((IndexedString) string).indexOf(charArray);

Test 6: 
IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
((IndexedString)"OX83b:tx!S8>+ey").indexOf(charArray);

Test 7: 
char[] charArray = new char[2];
IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);
String string = ";DWJ_dza-5X}8!il";
IndexedString indexedString = new IndexedString(string);
char[] charArray = new char[2];
((IndexedString) charArray).indexOf(charArray);


* Minimizing test suite
* test suite isTestSuite: 4
Test 0: 
IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] charArray = new char[3];
charArray[0] = '+';
indexedString.indexOf(charArray);

Test 1: 
IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] charArray = new char[1];
charArray[0] = 'a';
indexedString.indexOf(charArray);
Test 2: 
IndexedString indexedString = new IndexedString("UA>s )k");
char[] charArray = new char[10];
charArray[0] = 'k';
indexedString.indexOf(charArray);
Test 3: 
IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] charArray = new char[2];
charArray[0] = 'X';
charArray[1] = '}';
indexedString.indexOf(charArray);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Generated 4 tests with total length 17
* Resulting test suite's coverage: 100% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: IndexedString indexedString = new IndexedString("OX83b:tx!S8>+ey");
char[] arg0 = new char[3];
arg0[0] = '+';
int indexOf = indexedString.indexOf(arg0);
assertEquals((-1), indexOf);


** It was a parseable test case! 
refined test name is: testIndexOfNotFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: IndexedString indexedString = new IndexedString("a)&P;rUgA");
char[] arg0 = new char[1];
arg0[0] = 'a';
int indexOf = indexedString.indexOf(arg0);
assertEquals(0, indexOf);


** It was a parseable test case! 
refined test name is: testIndexOfSearchesForACharInTheString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: IndexedString indexedString = new IndexedString("UA>s )k");
char[] arg0 = new char[10];
arg0[0] = 'k';
int indexOf = indexedString.indexOf(arg0);
assertEquals((-1), indexOf);


** It was a parseable test case! 
refined test name is: testIndexOfNotPresentCharArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: IndexedString indexedString = new IndexedString(";DWJ_dza-5X}8!il");
char[] arg0 = new char[2];
arg0[0] = 'X';
arg0[1] = '}';
int indexOf = indexedString.indexOf(arg0);
assertEquals(10, indexOf);


** It was a parseable test case! 
refined test name is: testIndexedStringindexOfCharArray
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:55.423 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:55.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:55.668 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:55.671 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:55.869 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:55.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:56.128 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:56.131 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:56.602 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:56.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:55:57.091 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar6010521583429825180.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:55:57.094 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6010521583429825180.jar
* Writing tests to file
* Writing JUnit test case 'IndexedString_ESTest' to evosuite-tests
* Done!

* Computation finished
