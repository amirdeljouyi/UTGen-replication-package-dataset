/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 06:04:14 GMT 2024
 */

package de.beiri22.stringincrementor.helper;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import de.beiri22.stringincrementor.helper.IndexedString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndexedString_ESTest extends IndexedString_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIndexOfReturningPositive() throws Throwable  {
      // Create an instance of IndexedString with a specific value
      IndexedString indexedString = new IndexedString("HQTuTEek?YoHxODP,;");
      
      // Create a char array with a single character 'Q'
      char[] arg0 = new char[1];
      arg0[0] = 'Q';
      
      // Call the indexOf method on the indexedString instance and store the result in a variable
      int indexOf = indexedString.indexOf(arg0);
      
      // Assert that the value returned by the indexOf method is equal to 1
      assertEquals(1, indexOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIndexOfReturningNegative() throws Throwable  {
      // Create an instance of the IndexedString class with a specific string value
      IndexedString indexedString = new IndexedString("HQTuTEek?YoHxODP,;");
      
      // Define a character array that represents the substring to search for
      char[] arg0 = new char[8];
      arg0[0] = 'H';
      arg0[1] = 'Q';
      
      // Call the indexOf method on the IndexedString instance with the substring to search for
      int indexOf = indexedString.indexOf(arg0);
      
      // Assert that the method returns -1, indicating that the substring was not found
      assertEquals((-1), indexOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIndexOfReturningZero() throws Throwable  {
      IndexedString indexedString = new IndexedString("o%H");
      // Given a string that contains the substring "o"
      char[] arg0 = new char[1];
      arg0[0] = 'o';
      int indexOf = indexedString.indexOf(arg0);
      // When we call the method to find the index of the substring in the string
      // Then it should return the index where the substring starts
      assertEquals(0, indexOf);
  }
}
