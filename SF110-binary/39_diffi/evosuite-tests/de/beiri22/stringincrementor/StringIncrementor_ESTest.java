/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 06:19:02 GMT 2024
 */

package de.beiri22.stringincrementor;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import de.beiri22.stringincrementor.StringIncrementor;
import de.beiri22.stringincrementor.relativestring.RelativeString;
import de.beiri22.stringincrementor.relativestring.StringLink;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringIncrementor_ESTest extends StringIncrementor_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      // Given
      RelativeString arg1 = StringIncrementor.diff("]", "+^/T<W@Y=", true);
      
      // When
      String patch = StringIncrementor.patch("]", arg1, true);
      
      // Then
      assertEquals("+^/T<W@Y=", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsReturningEmptyString() throws Throwable  {
      // No Comments were added
      RelativeString arg1 = new RelativeString((InputStream) null);
      String patch = StringIncrementor.patch("", arg1);
      assertEquals("", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking2ArgumentsReturningRelativeStringWhereGetLengthIsZero() throws Throwable  {
      // No Comments were added
      RelativeString arg1 = StringIncrementor.diff("", "");
      StringLink arg0 = new StringLink(462, 462, 462);
      arg1.addLink(arg0);
      // Undeclared exception!
      try { 
        StringIncrementor.patch(" *pVu?-C-D#f&", arg1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsReturningRelativeStringWhereGetLengthIsZero() throws Throwable  {
      // This test case verifies that the diff and patch methods of the StringIncrementor class work correctly.
      // The diff method is used to find the difference between two strings, while the patch method is used to apply a patch to a string.
      // In this test case, we are testing the case where both the original string and the modified string are empty.
      // We expect the diff method to return an empty string, and the patch method to leave the original string unchanged.
      
      StringIncrementor incrementor = new StringIncrementor();
      RelativeString arg1 = incrementor.diff("", "", true);
      String patch = incrementor.patch("", arg1, true);
      
      assertEquals("", arg1.toString());
      assertEquals("", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsReturningRelativeStringWhereLinksCountIsZero() throws Throwable  {
      // No Comments were added
      RelativeString diff = StringIncrementor.diff("/", "AZaz09!@#$%^&*()_+-={}[]|\":;'<,>.?/~`", false);
      assertEquals(0, diff.linksCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsWithTrue() throws Throwable  {
      // No Comments were added
      RelativeString arg1 = StringIncrementor.diff("{:QhO3U-#+vv+E_hU", "{:QhO3U-#+vv+E_hU");
      StringLink arg0 = new StringLink((-408), (-1502), 704);
      arg1.addLink(arg0);
      // Undeclared exception!
      try { 
        StringIncrementor.patch("{:QhO3U-#+vv+E_hU", arg1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsWithFalse() throws Throwable  {
      // Test with two strings that have different lengths
      RelativeString arg1 = StringIncrementor.diff("X5wF)kwxGt`+}3d", "X5wF)kwxGt`+}3d", false);
      try {
      // The patch method is called with two strings that have different lengths
      StringIncrementor.patch("#.6U`F}J2CJyk", arg1, false);
      // If the test reaches this point, it means that no exception was thrown, which means that the test failed
      fail("Expected an exception to be thrown when patching two strings with different lengths");
      } catch (StringIndexOutOfBoundsException e) {
      // The test passes if the correct exception is caught
      assertTrue(true);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsWithTrue() throws Throwable  {
      // No Comments were added
      RelativeString diff = StringIncrementor.diff("#;P=;1<J`\"wh;*I$4@q", "#;P=;1<J`\"wh;*I$4@q", true);
      assertEquals("", diff.getAbsolute());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsThrowsArithmeticException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        StringIncrementor.diff("Hello World!", "Goodbye World!", true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("de.beiri22.stringincrementor.StringIncrementor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      // Given
      RelativeString arg1 = StringIncrementor.diff("`zH~>by>tT<h:jW-AZ", "`zR~>by>tT<h:jW-IZ");
      
      // When
      try {
      StringIncrementor.patch(null, arg1);
      
      // Then
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      verifyException("de.beiri22.stringincrementor.StringIncrementor", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesStringIncrementor() throws Throwable  {
      // rollbacked to evosuite
      StringIncrementor stringIncrementor = new StringIncrementor();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsReturningNonEmptyString() throws Throwable  {
      // Setup
      RelativeString arg1 = StringIncrementor.diff("Hello", "World");
      String expectedPatch = "World";
      
      // Execute
      String patch = StringIncrementor.patch("Hello", arg1);
      
      // Verify
      assertEquals(expectedPatch, patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking2ArgumentsReturningRelativeStringWhereGetLengthIsPositive() throws Throwable  {
      // rollbacked to evosuite
      RelativeString diff = StringIncrementor.diff(" absolute chars ", " absolute chars (");
      assertEquals("(", diff.getAbsolute());
  }
}
