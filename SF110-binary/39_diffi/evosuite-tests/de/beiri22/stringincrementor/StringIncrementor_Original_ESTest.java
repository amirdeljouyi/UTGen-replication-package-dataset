/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 06:19:02 GMT 2024
 */

package de.beiri22.stringincrementor;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import de.beiri22.stringincrementor.StringIncrementor;
import de.beiri22.stringincrementor.relativestring.RelativeString;
import de.beiri22.stringincrementor.relativestring.StringLink;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringIncrementor_Original_ESTest extends StringIncrementor_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("]", "+^/T<W@Y=", true);
      String patch = StringIncrementor.patch("]", arg1, true);
      assertEquals("+^/T<W@Y=", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsReturningEmptyString() throws Throwable  {
      RelativeString arg1 = new RelativeString((InputStream) null);
      String patch = StringIncrementor.patch("", arg1);
      assertEquals("", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking2ArgumentsReturningRelativeStringWhereGetLengthIsZero() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("", "");
      StringLink arg0 = new StringLink(462, 462, 462);
      arg1.addLink(arg0);
      // Undeclared exception!
      try { 
        StringIncrementor.patch(" *pVu?-C-D#f&", arg1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsReturningRelativeStringWhereGetLengthIsZero() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("", "", true);
      String patch = StringIncrementor.patch("", arg1, true);
      assertEquals("", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsWithTrue() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("{:QhO3U-#+vv+E_hU", "{:QhO3U-#+vv+E_hU");
      StringLink arg0 = new StringLink((-408), (-1502), 704);
      arg1.addLink(arg0);
      // Undeclared exception!
      try { 
        StringIncrementor.patch("{:QhO3U-#+vv+E_hU", arg1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking3ArgumentsWithFalse() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("X5wF)kwxGt`+}3d", "X5wF)kwxGt`+}3d", false);
      // Undeclared exception!
      try { 
        StringIncrementor.patch("#.6U`F}J2CJyk", arg1, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsWithTrue() throws Throwable  {
      RelativeString diff = StringIncrementor.diff("#;P=;1<J`\"wh;*I$4@q", "#;P=;1<J`\"wh;*I$4@q", true);
      assertEquals("", diff.getAbsolute());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("`zH~>by>tT<h:jW-AZ", "`zR~>by>tT<h:jW-IZ");
      // Undeclared exception!
      try { 
        StringIncrementor.patch((String) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.beiri22.stringincrementor.StringIncrementor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsThrowsArithmeticException() throws Throwable  {
      // Undeclared exception!
      try { 
        StringIncrementor.diff("b8/bK, %F", "de.beiri22.stringincrementor.relativestring.StringLink", true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("de.beiri22.stringincrementor.StringIncrementor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking3ArgumentsReturningRelativeStringWhereLinksCountIsZero() throws Throwable  {
      RelativeString diff = StringIncrementor.diff("/", "X5wF)kwxGt`+}3d", false);
      assertEquals(0, diff.linksCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesStringIncrementor() throws Throwable  {
      StringIncrementor stringIncrementor = new StringIncrementor();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPatchTaking2ArgumentsReturningNonEmptyString() throws Throwable  {
      RelativeString arg1 = StringIncrementor.diff("@ ", "@ ");
      String patch = StringIncrementor.patch("@ ", arg1);
      assertEquals("@ ", patch);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiffTaking2ArgumentsReturningRelativeStringWhereGetLengthIsPositive() throws Throwable  {
      RelativeString diff = StringIncrementor.diff(" absolute chars ", " absolute chars (");
      assertEquals("(", diff.getAbsolute());
  }
}
