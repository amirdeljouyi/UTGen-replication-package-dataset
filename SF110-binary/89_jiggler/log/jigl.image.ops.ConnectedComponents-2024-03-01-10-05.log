* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: jigl.image.ops.ConnectedComponents
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/89_jiggler/evosuite-files/evosuite.properties
* Connecting to master process on port 15313
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:05:52.853 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 10:05:52.854 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 10:05:52.855 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 10:05:53.420 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:05:53.421 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:05:53.440 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 10:05:55.126 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 10:05:55.229 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 10:05:55.233 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 10:05:55.233 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 10:05:55.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 10:05:55.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 10:05:55.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 10:05:55.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 10:05:55.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 10:05:55.258 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
* Finished analyzing classpath
* Generating tests for class jigl.image.ops.ConnectedComponents
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 241
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709287549317
* Starting evolution
* Initial Number of Goals in DynaMOSA = 36 / 241
[MASTER] 10:05:56.441 [logback-1] WARN  TestCluster - Failed to check cache for jigl.image.Image<T> : Type points to itself
[Progress:>                             0%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:===============>                   45%][Progress:=>                            4%] [Cov:===============>                   45%][Progress:=>                            5%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:================>                  46%][Progress:=>                            6%] [Cov:================>                  46%][Progress:==>                           7%] [Cov:================>                  46%][Progress:==>                           8%] [Cov:================>                  46%][Progress:==>                           9%] [Cov:==================>                52%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          10%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:========================>          69%][Progress:===>                          11%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          12%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         15%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       21%] [Cov:============================>      80%][Progress:======>                       22%] [Cov:============================>      80%][Progress:======>                       23%] [Cov:============================>      80%][Progress:======>                       23%] [Cov:============================>      80%][Progress:=======>                      25%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%]
* Search finished after 180s and 55 generations, 19365 statements, best individual has fitness: 43.0
[MASTER] 10:08:55.984 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 80 seconds more than allowed.
* Generated before the refinement 9 tests with total length 32
statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0)
statement is: jigl.image.types.BinaryImage(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(2943, 0)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
        BinaryImage binaryImage = new BinaryImage(2943, 0);
        connectedComponents.apply(binaryImage);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BinaryImage binaryImage = new BinaryImage(2943, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 2
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
TestCase is: int _int = 0;
int _int = 0;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
int _int = 2943;
int _int = 0;
BinaryImage binaryImage = new BinaryImage(_int, _int);
((ConnectedComponents) _int).apply(binaryImage);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(616, 616)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(616, 616);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(800, 800);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(800, 800), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 800;
int _int = 800;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, (-240))
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(1, (-240));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(1, 240);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 240), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 1;
int _int = 240;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1)
statement is: jigl.image.types.BinaryImage(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(1, 10)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1, 10);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponentFinder connectedComponentFinder = new ConnectedComponentFinder(5, 10);
        BinaryImage binaryImage = new BinaryImage(5, 10);
        connectedComponentFinder.apply(binaryImage);
    }
}
statement is: ConnectedComponentFinder connectedComponentFinder = new ConnectedComponentFinder(5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BinaryImage binaryImage = new BinaryImage(5, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponentFinder.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponentFinder.apply(binaryImage) target is: connectedComponentFinder method is: apply(BinaryImage)
TestCase is: int _int = 5;
int _int = 10;
BinaryImage binaryImage = new BinaryImage(_int, _int);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1)
statement is: jigl.image.types.BinaryImage(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(1441, 1441)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1441, 1441);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(100, 100);
        BinaryImage binaryImage = new BinaryImage(1441, 1441);
        connectedComponents.apply(binaryImage);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(100, 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BinaryImage binaryImage = new BinaryImage(1441, 1441), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 2
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
TestCase is: int _int = 100;
int _int = 100;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
int _int = 1441;
int _int = 1441;
BinaryImage binaryImage = new BinaryImage(_int, _int);
((ConnectedComponents) _int).apply(binaryImage);

statement is: jigl.image.types.BinaryImage(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(2, 1)
statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 1)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryImage binaryImage = new BinaryImage(2, 1);// Replace the hard-coded values with more descriptive examples

        ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
        connectedComponents.apply(binaryImage);
    }
}
statement is: BinaryImage binaryImage = new BinaryImage(2, 1)// Replace the hard-coded values with more descriptive examples
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 1, type jigl.image.ops.ConnectedComponentsindex is: 5
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
TestCase is: int _int = 2;
int _int = 1;
BinaryImage binaryImage = new BinaryImage(_int, _int);
int _int = 0;
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
((ConnectedComponents) _int).apply(binaryImage);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0)
statement is: org.evosuite.testcase.statements.ArrayStatement@3a11659f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bb1c1bc1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[3] = (byte)1
statement is: org.evosuite.testcase.statements.ArrayStatement@d6fb0c2c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[B
statement code is: byte[][] byteArray = new byte[3][6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c73c715 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [B
statement code is: byteArray[0] = byteArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@28ab10e2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [B
statement code is: byteArray[1] = byteArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@88919738 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [B
statement code is: byteArray[2] = byteArray
statement is: jigl.image.types.BinaryImage([[B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(arg0)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[4];
byteArray[3] = (byte)1;
byte[][] byteArray = new byte[3][6];
byteArray[0] = byteArray;
byteArray[1] = byteArray;
byteArray[2] = byteArray;
BinaryImage binaryImage = new BinaryImage(byteArray);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(2, 3);
        byte[] byteArray = new byte[]{ 1, 0, 0, 1, 1, 0, 1, 0 };
        BinaryImage binaryImage = new BinaryImage(byteArray);
        connectedComponents.apply(binaryImage);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(2, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 0, 0, 1, 1, 0, 1, 0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[4] isAssignment: false Array: new byte[]{ 1, 0, 0, 1, 1, 0, 1, 0 } Elements: [1, 0, 0, 1, 1, 0, 1, 0]
lengths: [4] []
Dimension: [] Ct is: byte[][] byteArray = new byte[3][6] isAssignment: false Array: new byte[]{ 1, 0, 0, 1, 1, 0, 1, 0 } Elements: [1, 0, 0, 1, 1, 0, 1, 0]
lengths: [3, 6] []
statement is: BinaryImage binaryImage = new BinaryImage(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: jigl.image.types.BinaryImage([[B)V
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 2
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2;
int _int = 3;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
BinaryImage binaryImage = null;
((ConnectedComponents) _int).apply(binaryImage);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1)
statement is: org.evosuite.testcase.statements.ArrayStatement@ec9d05f2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[22]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ecb40cc9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type byte
statement code is: byteArray[0] = (byte)87
statement is: jigl.image.types.BinaryImage(II[B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(3, 1, arg2)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
byteArray[0] = (byte)87;
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
        byte[] byteArray = new byte[22];
        byteArray[0] = ((byte) (87));
        BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
        connectedComponents.apply(binaryImage);
        // Improved test data
        ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
        byte[] byteArray = new byte[22];
        byteArray[0] = ((byte) (87));
        BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
        connectedComponents.apply(binaryImage);
        // The data in the above example is more descriptive and representative of the situation being tested because it includes a realistic scenario where the connected components algorithm is applied to a binary image. }}
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[22], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [22] Ct is: byte[] byteArray = new byte[22] isAssignment: false Array: new byte[22] Elements: []
lengths: [22] [22]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (87)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (87)) Ct is: byteArray[0] = ((byte) (87))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4fdde8f1
statement is: BinaryImage binaryImage = new BinaryImage(3, 1, byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 2
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
statement is: // Improved test data
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[22], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [22] Ct is: byte[] byteArray = new byte[22] isAssignment: false Array: new byte[22] Elements: []
lengths: [22] [22]
Their type are: class [B byte[]
statement is: byteArray[0] = ((byte) (87)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : byteArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl byte Assignment:((byte) (87)) Ct is: byteArray[0] = ((byte) (87))
target : byteArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@6270eacb
statement is: BinaryImage binaryImage = new BinaryImage(3, 1, byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 11
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
statement is: // The data in the above example is more descriptive and representative of the situation being tested because it includes a realistic scenario where the connected components algorithm is applied to a binary image. }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 87
* this is vulnerable: int _int = 87
TestCase is: int _int = 1;
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
byte[] byteArray = new byte[22];
int _int = 87;
int _int = 3;
int _int = 1;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);
int _int = 1;
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
byte[] byteArray = new byte[22];
int _int = 87;
int _int = 3;
int _int = 1;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);

statement is: jigl.image.ops.ConnectedComponents(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.ops.ConnectedComponents
statement code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0)
statement is: org.evosuite.testcase.statements.ArrayStatement@d3210b1c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: jigl.image.types.BinaryImage(II[B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class jigl.image.types.BinaryImage
statement code is: BinaryImage binaryImage = new BinaryImage(0, 339, arg2)
statement is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage; type is: class org.evosuite.testcase.statements.MethodStatement return type class jigl.image.types.GrayImage
statement code is: GrayImage apply = connectedComponents.apply(arg0)
test data is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[1];
BinaryImage binaryImage = new BinaryImage(0, 339, byteArray);
connectedComponents.apply(binaryImage);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ConnectedComponents connectedComponents = new ConnectedComponents(10, 20);
        byte[] byteArray = new byte[5];
        BinaryImage binaryImage = new BinaryImage(10, 339, byteArray);
        connectedComponents.apply(binaryImage);
    }
}
statement is: ConnectedComponents connectedComponents = new ConnectedComponents(10, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[5] Elements: []
lengths: [1] [5]
Their type are: class [B byte[]
statement is: BinaryImage binaryImage = new BinaryImage(10, 339, byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: connectedComponents.apply(binaryImage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: connectedComponents.apply(binaryImage) target is: connectedComponents method is: apply(BinaryImage)
source statement: jigl.image.ops.ConnectedComponents(II)V callee: VariableReference: Statement 0, type jigl.image.ops.ConnectedComponentsindex is: 2
Matched Method is: apply(Ljigl/image/types/BinaryImage;)Ljigl/image/types/GrayImage;
TestCase is: int _int = 10;
int _int = 20;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
byte[] byteArray = new byte[1];
int _int = 10;
int _int = 339;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);

* test suite isTestSuite: 18
Test 0: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
connectedComponents.apply(binaryImage);
Test 1: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(616, 616);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 2: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(1, (-240));
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 3: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1, 10);
connectedComponents.apply(binaryImage);
Test 4: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1441, 1441);
// Undeclared exception!
try { 
  connectedComponents.apply(binaryImage);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
connectedComponents.apply(binaryImage);
Test 6: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[4];
byteArray[3] = (byte)1;
byte[][] byteArray = new byte[3][6];
byteArray[0] = byteArray;
byteArray[1] = byteArray;
byteArray[2] = byteArray;
BinaryImage binaryImage = new BinaryImage(byteArray);
connectedComponents.apply(binaryImage);
Test 7: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
byteArray[0] = (byte)87;
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
connectedComponents.apply(binaryImage);
Test 8: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[1];
BinaryImage binaryImage = new BinaryImage(0, 339, byteArray);
connectedComponents.apply(binaryImage);
Test 9: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
((ConnectedComponents)0).apply(binaryImage);

Test 10: 
ConnectedComponents connectedComponents = new ConnectedComponents(800, 800);

Test 11: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 240);

Test 12: 
BinaryImage binaryImage = new BinaryImage(5, 10);

Test 13: 
int _int = 100;
ConnectedComponents connectedComponents = new ConnectedComponents(100, 100);
int _int = 1441;
int _int = 1441;
BinaryImage binaryImage = new BinaryImage(_int, _int);
((ConnectedComponents) _int).apply(binaryImage);

Test 14: 
BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
((ConnectedComponents)1).apply(binaryImage);

Test 15: 
int _int = 2;
ConnectedComponents connectedComponents = new ConnectedComponents(2, 3);
BinaryImage binaryImage = null;
((ConnectedComponents) _int).apply(binaryImage);

Test 16: 
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
((ConnectedComponents)1).apply(binaryImage);
int _int = 1;
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
byte[] byteArray = new byte[22];
int _int = 3;
int _int = 1;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);

Test 17: 
int _int = 10;
ConnectedComponents connectedComponents = new ConnectedComponents(10, 20);
byte[] byteArray = new byte[1];
int _int = 10;
int _int = 339;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);


* Generated after the refinement and before minimization 18 tests with total length 71
* test suite isTestSuite: 18
Test 0: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
connectedComponents.apply(binaryImage);
Test 1: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(616, 616);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 2: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(1, (-240));
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 3: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1, 10);
connectedComponents.apply(binaryImage);
Test 4: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1441, 1441);
// Undeclared exception!
try { 
  connectedComponents.apply(binaryImage);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
connectedComponents.apply(binaryImage);
Test 6: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[4];
byteArray[3] = (byte)1;
byte[][] byteArray = new byte[3][6];
byteArray[0] = byteArray;
byteArray[1] = byteArray;
byteArray[2] = byteArray;
BinaryImage binaryImage = new BinaryImage(byteArray);
connectedComponents.apply(binaryImage);
Test 7: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
byteArray[0] = (byte)87;
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
connectedComponents.apply(binaryImage);
Test 8: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[1];
BinaryImage binaryImage = new BinaryImage(0, 339, byteArray);
connectedComponents.apply(binaryImage);
Test 9: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
((ConnectedComponents)0).apply(binaryImage);

Test 10: 
ConnectedComponents connectedComponents = new ConnectedComponents(800, 800);

Test 11: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 240);

Test 12: 
BinaryImage binaryImage = new BinaryImage(5, 10);

Test 13: 
int _int = 100;
ConnectedComponents connectedComponents = new ConnectedComponents(100, 100);
int _int = 1441;
int _int = 1441;
BinaryImage binaryImage = new BinaryImage(_int, _int);
((ConnectedComponents) _int).apply(binaryImage);

Test 14: 
BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
((ConnectedComponents)1).apply(binaryImage);

Test 15: 
int _int = 2;
ConnectedComponents connectedComponents = new ConnectedComponents(2, 3);
BinaryImage binaryImage = null;
((ConnectedComponents) _int).apply(binaryImage);

Test 16: 
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
((ConnectedComponents)1).apply(binaryImage);
int _int = 1;
int _int = 1;
ConnectedComponents connectedComponents = new ConnectedComponents(_int, _int);
byte[] byteArray = new byte[22];
int _int = 3;
int _int = 1;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);

Test 17: 
int _int = 10;
ConnectedComponents connectedComponents = new ConnectedComponents(10, 20);
byte[] byteArray = new byte[1];
int _int = 10;
int _int = 339;
BinaryImage binaryImage = new BinaryImage(_int, _int, byteArray);
((ConnectedComponents) _int).apply(binaryImage);


* Minimizing test suite
* test suite isTestSuite: 9
Test 0: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(1, 240);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 1: 
ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(2, 3);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}

Test 2: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[4];
byteArray[3] = (byte)1;
byte[][] byteArray = new byte[3][6];
byteArray[0] = byteArray;
byteArray[1] = byteArray;
byteArray[2] = byteArray;
BinaryImage binaryImage = new BinaryImage(byteArray);
connectedComponents.apply(binaryImage);
Test 3: 
BinaryImage binaryImage = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
connectedComponents.apply(binaryImage);
Test 4: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] byteArray = new byte[22];
byteArray[0] = (byte)87;
BinaryImage binaryImage = new BinaryImage(3, 1, byteArray);
connectedComponents.apply(binaryImage);
Test 5: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1, 10);
connectedComponents.apply(binaryImage);
Test 6: 
ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage binaryImage = new BinaryImage(1441, 1441);
// Undeclared exception!
try { 
  connectedComponents.apply(binaryImage);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 7: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] byteArray = new byte[1];
BinaryImage binaryImage = new BinaryImage(0, 339, byteArray);
connectedComponents.apply(binaryImage);
Test 8: 
ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage binaryImage = new BinaryImage(2943, 0);
connectedComponents.apply(binaryImage);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 74
* Number of covered goals: 60
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 75
* Number of covered goals: 66
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 62%
* Total number of goals: 16
* Number of covered goals: 10
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 74
* Number of covered goals: 60
* Generated 9 tests with total length 32
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 68%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(1, 240);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}


** It was a parseable test case! 
refined test name is: testInvalidRadiusThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = null;
try {
  connectedComponents = new ConnectedComponents(2, 3);
  fail("Expecting exception: Exception");

} catch(Throwable e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}


** It was a parseable test case! 
refined test name is: testThrowsExceptionWhenNoMessageInException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryImage arg0 = new BinaryImage(2, 1);
ConnectedComponents connectedComponents = new ConnectedComponents(0, 1);
GrayImage apply = connectedComponents.apply(arg0);
assertEquals(2L, apply.sqrSum());


** It was a parseable test case! 
refined test name is: testConnectedComponentsBinaryImage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
byte[] arg2 = new byte[22];
arg2[0] = (byte)87;
BinaryImage arg0 = new BinaryImage(3, 1, arg2);
GrayImage apply = connectedComponents.apply(arg0);
assertEquals(2, apply.absSum());


** It was a parseable test case! 
refined test name is: testConnectedComponentsApplyreturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage arg0 = new BinaryImage(1, 10);
GrayImage apply = connectedComponents.apply(arg0);
assertEquals(10L, apply.sqrSum());


** It was a parseable test case! 
refined test name is: testConnectedComponentsAlgorithm
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = new ConnectedComponents(1, 1);
BinaryImage arg0 = new BinaryImage(1441, 1441);
// Undeclared exception!
try { 
  connectedComponents.apply(arg0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("jigl.image.ops.ConnectedComponents", e);
}


** It was a parseable test case! 
refined test name is: testApplyThrowsNullPointerExceptionOnNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
byte[] arg2 = new byte[1];
BinaryImage arg0 = new BinaryImage(0, 339, arg2);
GrayImage apply = connectedComponents.apply(arg0);
assertEquals(339, apply.Y());


** It was a parseable test case! 
refined test name is: testConnectedComponents
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ConnectedComponents connectedComponents = new ConnectedComponents(0, 0);
BinaryImage arg0 = new BinaryImage(2943, 0);
GrayImage apply = connectedComponents.apply(arg0);
assertEquals(0, apply.absSum());


** It was a parseable test case! 
refined test name is: testApplyConnectedComponentsShouldNotChangeAbsSum
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:40.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:40.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:40.789 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:40.791 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:41.473 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:41.476 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:42.113 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:42.116 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:42.706 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:42.725 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:43.322 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:43.337 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:43.849 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:43.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:44.561 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:44.573 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:45.625 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:45.634 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:10:46.777 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
file:/tmp/EvoSuite_pathingJar4655573478920210962.jar
[MASTER] 10:10:46.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4655573478920210962.jar
* Writing tests to file
* Writing JUnit test case 'ConnectedComponents_ESTest' to evosuite-tests
* Done!

* Computation finished
