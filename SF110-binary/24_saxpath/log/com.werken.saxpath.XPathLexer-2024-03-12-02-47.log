* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.werken.saxpath.XPathLexer
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/24_saxpath/evosuite-files/evosuite.properties
* Connecting to master process on port 9739
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class com.werken.saxpath.XPathLexer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1404
* Using seed 1710211677858
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 638 / 1404
[Progress:>                             0%] [Cov:====================>              58%][Progress:>                             1%] [Cov:====================>              59%][Progress:>                             1%] [Cov:=====================>             60%][Progress:>                             1%] [Cov:=====================>             61%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:======================>            64%][Progress:>                             2%] [Cov:======================>            64%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             3%] [Cov:======================>            65%][Progress:>                             3%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           67%][Progress:=>                            4%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            5%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          70%][Progress:=>                            6%] [Cov:========================>          71%][Progress:=>                            6%] [Cov:========================>          71%][Progress:=>                            6%] [Cov:========================>          71%][Progress:=>                            6%] [Cov:========================>          71%][Progress:=>                            6%] [Cov:=========================>         72%][Progress:=>                            6%] [Cov:=========================>         72%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   87%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:==========================>   89%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  92%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 94%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:============================> 96%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>97%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:=============================>99%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      81%]
* Search finished after 201s and 1129 generations, 347392 statements, best individual has fitness: 218.0
* Generated before the refinement 139 tests with total length 368
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@id='foo']/p");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "div");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "[");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "@");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "id");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "'");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "foo");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "'");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "/");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.identifierOrOperatorName(), "p");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@id='foo']/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "div"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "div") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "["), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "[") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "@"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "@") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "id"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "id") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "'") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "foo"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "foo") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "'") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "/"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "/") target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.identifierOrOperatorName(), "p"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.identifierOrOperatorName(), "p") target is:  method is: assertEquals(<unknown>,java.lang.String)
TestCase is: String string = "//div[@id='foo']/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H")
statement is: pipe()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token pipe = xPathLexer.pipe()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.pipe();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
        xPathLexer.pipe();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.pipe(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.pipe() target is: xPathLexer method is: pipe()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: pipe()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-")
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: plus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token plus = xPathLexer.plus()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.leftBracket();
xPathLexer.not();
xPathLexer.plus();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
        xPathLexer.leftBracket();
        xPathLexer.not();
        xPathLexer.plus();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: leftBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.plus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus() target is: xPathLexer method is: plus()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: plus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "AA93_v9J9<Y-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).leftBracket();
((XPathLexer) string).not();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("]W=%08MZ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
        xPathLexer.nextToken();
        assertEquals(IDENTIFIER_OR_OPERATOR, xPathLexer.getCurrentToken().getType());
        assertEquals("W", xPathLexer.getCurrentToken().getValue());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("]W=%08MZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(IDENTIFIER_OR_OPERATOR, xPathLexer.getCurrentToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(IDENTIFIER_OR_OPERATOR, xPathLexer.getCurrentToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("W", xPathLexer.getCurrentToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("W", xPathLexer.getCurrentToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: String string = "]W=%08MZ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.star();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5.7234.89");
        xPathLexer.star();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5.7234.89"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "5.7234.89";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).star();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("com.werken.saxpath.Token")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("com.werken.saxpath.Token");
        xPathLexer.nextToken();
        String input = "//*[@id='myElement']";
        xPathLexer.setInput(input);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("com.werken.saxpath.Token"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("com.werken.saxpath.Token") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: String input = "//*[@id='myElement']", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer.setInput(input), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setInput(input) target is: xPathLexer method is: setInput(java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
* this is vulnerable: String string = "//*[@id='myElement']"
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "com.werken.saxpath.Token";
xPathLexer.setXPath(string);
xPathLexer.nextToken();
String string = "//*[@id='myElement']";
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H")
statement is: consume(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume((-3001))
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.consume((-3001));
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
        xPathLexer.consume(1000);
        xPathLexer.currentPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume(1000) target is: xPathLexer method is: consume(int)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume(I)V
statement is: xPathLexer.currentPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition() target is: xPathLexer method is: currentPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: currentPosition()I
TestCase is: String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer(string);
int _int = 1000;
((XPathLexer) string).consume(_int);
((XPathLexer) string).currentPosition();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
        // Changed the primitive values to more descriptive examples
        int number1 = 10;
        int number2 = 5;
        double doubleValue = 3.14;
        String string1 = "Hello";
        String string2 = "World";
        char char1 = 'a';
        char char2 = 'b';
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
statement is: // Changed the primitive values to more descriptive examples
int number1 = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int number2 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string1 = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string2 = "World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char char1 = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char char2 = 'b', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 5
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
* this is vulnerable: char _char = 'a'
* this is vulnerable: char _char = 'b'
TestCase is: String string = "!cZ87@wChFK%";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();
int _int = 10;
int _int = 5;
double _double = 3.14;
String string = "Hello";
String string = "World";
char _char = 'a';
char _char = 'b';

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "Fkn\"\"0\"P,H17";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("#<@'<%X")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("#<@'<%X");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']/author/text()");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']/author/text()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='1234']/author/text()";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("$Q9")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("$Q9");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div/p");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%u4P3D$8")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("%u4P3D$8");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("!@#$%^&*()_+-=[]{}|;\':\"<>,./\\1234567890abcdef");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("!@#$%^&*()_+-=[]{}|;\':\"<>,./\\1234567890abcdef"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "!@#$%^&*()_+-=[]{}|;':\"<>,./\\1234567890abcdef";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
        xPathLexer.nextToken();
        String input = "&|2K<,.UD";
        String expectedOutput = "&|2K<,.UD";
        // Actual output
        String actualOutput = xPathLexer.getOutput();
        // Testing if the output is as expected
        assertEquals(expectedOutput, actualOutput);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: String input = "&|2K<,.UD", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutput = "&|2K<,.UD", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Actual output
String actualOutput = xPathLexer.getOutput(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getOutput() target is: xPathLexer method is: getOutput()
statement is: // Testing if the output is as expected
assertEquals(expectedOutput, actualOutput), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Testing if the output is as expected
assertEquals(expectedOutput, actualOutput) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "&|2K<,.UD"
* this is vulnerable: String string = "&|2K<,.UD"
TestCase is: String string = "&|2K<,.UD";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "&|2K<,.UD";
String string = "&|2K<,.UD";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        // Improved test data:
        String xPathExpression = "'=V*JbyQ}7D";
        xPathLexer = new XPathLexer(xPathExpression);
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: // Improved test data:
String xPathExpression = "'=V*JbyQ}7D", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer = new XPathLexer(xPathExpression), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
* this is vulnerable: String string = "'=V*JbyQ}7D"
TestCase is: String string = "'=V*JbyQ}7D";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("(!")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("(!");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("(/root/element[@attribute='value'])[3]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("(/root/element[@attribute='value'])[3]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "(/root/element[@attribute='value'])[3]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(")")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("sum(1234567890, 987654321)");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("sum(1234567890, 987654321)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "sum(1234567890, 987654321)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='myelement']/child::div");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='myelement']/child::div"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//*[@id='myelement']/child::div";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("<l^-D9a,zB==1Im.")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("<l^-D9a,zB==1Im.");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//a/b[@c='d']");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.equals();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//a/b[@c='d']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//a/b[@c='d']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: consume()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.consume();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
        xPathLexer.nextToken();
        xPathLexer.consume();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume()V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("/ZP4F4I ]{~5f`zWi8H")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("/ZP4F4I ]{~5f`zWi8H");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        // Improved test data:
        // The input string "/ZP4F4I ]{~5f`zWi8H" is a valid XPath expression that evaluates to the string "ZP4F4I".
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: // Improved test data:
// The input string "/ZP4F4I ]{~5f`zWi8H" is a valid XPath expression that evaluates to the string "ZP4F4I".
xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
// The input string "/ZP4F4I ]{~5f`zWi8H" is a valid XPath expression that evaluates to the string "ZP4F4I".
xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("0H")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("0H");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("0123456789ABCDEF");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("0123456789ABCDEF"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "0123456789ABCDEF";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
        // Improved test data:
        xPathLexer.nextToken();
        String expression = "1^u:_LWr5bGT|)?bX_4";
        xPathLexer.setInput(expression);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: String expression = "1^u:_LWr5bGT|)?bX_4", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer.setInput(expression), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setInput(expression) target is: xPathLexer method is: setInput(java.lang.String)
* this is vulnerable: String string = "1^u:_LWr5bGT|)?bX_4"
TestCase is: String string = "1^u:_LWr5bGT|)?bX_4";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "1^u:_LWr5bGT|)?bX_4";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        // The lexer should return a token with the following properties:
        // - type: NUMBER
        // - value: 2xi5My<:K}7Ri]e?~
        assertEquals(xPathLexer.getType(), NUMBER);
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: // The lexer should return a token with the following properties:
// - type: NUMBER
// - value: 2xi5My<:K}7Ri]e?~
assertEquals(xPathLexer.getType(), NUMBER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The lexer should return a token with the following properties:
// - type: NUMBER
// - value: 2xi5My<:K}7Ri]e?~
assertEquals(xPathLexer.getType(), NUMBER) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5B+.")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("5B+.");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5B+.");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        // Token: 1.0 "5"
        // Token: 2.0 "B"
        // Token: 3.0 "+" }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5B+."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Token: 1.0 "5", class spoon.support.reflect.code.CtCommentImpl
statement is: // Token: 2.0 "B", class spoon.support.reflect.code.CtCommentImpl
statement is: // Token: 3.0 "+" }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("6@20NQ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("6@20NQ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='foo']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='foo']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='foo']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("7/N")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("7/N");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("10/N");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("10/N"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "10/N";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("83.1`PQ\"hrIu6Z,uBCoJ");
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer2 = new XPathLexer("95.1`PQ\"hrIu6Z,uBCoJ");
        xPathLexer2.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("83.1`PQ\"hrIu6Z,uBCoJ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer2 = new XPathLexer("95.1`PQ\"hrIu6Z,uBCoJ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.nextToken() target is: xPathLexer2 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "83.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "95.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(":vsR,m]8?}!WtL)")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(":vsR,m]8?}!WtL)");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String inputString = "//div[@class='container']/p[contains(text(), 'Hello World')]";
        XPathLexer xPathLexer = new XPathLexer(inputString);
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: String inputString = "//div[@class='container']/p[contains(text(), 'Hello World')]", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer xPathLexer = new XPathLexer(inputString), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']/p[contains(text(), 'Hello World')]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";?")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";?");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p/strong");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p/strong"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@id='main']/p/strong";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//employee[gender='Male' and salary>50000]/name");
        xPathLexer.nextToken();
        // Improved test data:
        String input = "//employee[gender='Male' and salary>50000]/name";// Input string with a valid XPath expression }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//employee[gender='Male' and salary>50000]/name"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
String input = "//employee[gender='Male' and salary>50000]/name"// Input string with a valid XPath expression }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "//employee[gender='Male' and salary>50000]/name"
TestCase is: String string = "//employee[gender='Male' and salary>50000]/name";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//employee[gender='Male' and salary>50000]/name";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E")
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
xPathLexer.not();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
        xPathLexer.not();
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "4>=$=L5]/:,5E";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).not();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='example']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='example']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='example']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot")
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("\u007f@-m\"BP@jl-Ka(+Ot");
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("(/bookstore/book[1]/@author)");
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("\u007f@-m\"BP@jl-Ka(+Ot"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("(/bookstore/book[1]/@author)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "@-m\"BP@jl-Ka(+Ot";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();
String string = "(/bookstore/book[1]/@author)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
        xPathLexer.nextToken();
        XPathLexer xPathLexer2 = new XPathLexer("/bookstore/book[price>35]");
        xPathLexer2.nextToken();
        XPathLexer xPathLexer3 = new XPathLexer("//author/last_name");
        xPathLexer3.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: XPathLexer xPathLexer2 = new XPathLexer("/bookstore/book[price>35]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.nextToken() target is: xPathLexer2 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: XPathLexer xPathLexer3 = new XPathLexer("//author/last_name"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer3.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer3.nextToken() target is: xPathLexer3 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "/bookstore/book[price>35]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//author/last_name";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("E29^n")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("E29^n");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("E29^n");
        xPathLexer.nextToken();
        assertEquals(xPathLexer.getCurrentToken().type(), NUMBER);
        assertEquals(xPathLexer.getCurrentToken().getValue(), "E29^n");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("E29^n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(xPathLexer.getCurrentToken().type(), NUMBER), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.getCurrentToken().type(), NUMBER) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals(xPathLexer.getCurrentToken().getValue(), "E29^n"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(xPathLexer.getCurrentToken().getValue(), "E29^n") target is:  method is: assertEquals(<unknown>,java.lang.String)
TestCase is: String string = "E29^n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
        xPathLexer.nextToken();
        // Improved test data
        String input = "Gep_3F$n!c(P+7Ew-rH";
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String input = "Gep_3F$n!c(P+7Ew-rH", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Gep_3F$n!c(P+7Ew-rH"
TestCase is: String string = "Gep_3F$n!c(P+7Ew-rH";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "Gep_3F$n!c(P+7Ew-rH";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Jr>*Lo")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
        xPathLexer.nextToken();
        // Improved code:
        XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attribute=\"value\"][position()=3]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Jr>*Lo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved code:
XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attribute=\"value\"][position()=3]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "Jr>*Lo";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "/root/child::node()[@attribute=\"value\"][position()=3]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("KP\"")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("KP\"");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("KP\"");
        String expectedTokenType = "STRING";
        xPathLexer.nextToken();
        assertEquals(expectedTokenType, xPathLexer.getToken().getType());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("KP\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedTokenType = "STRING", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(expectedTokenType, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedTokenType, xPathLexer.getToken().getType()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "STRING"
TestCase is: String string = "KP\"";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "STRING";
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("<L#Jr[]]WV{mM")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("<L#Jr[]]WV{mM");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='example']");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='example']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//*[@id='example']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Mco<")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Mco<");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Mco<");
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Mco<"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "Mco<";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//book[@id='123']/author";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("N8]WA`]")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("N8]WA`]");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/books/book[author='Jane Doe']/title");
        String nextToken = xPathLexer.nextToken();
        assertEquals(nextToken, "/");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/books/book[author='Jane Doe']/title"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String nextToken = xPathLexer.nextToken(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(nextToken, "/"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(nextToken, "/") target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: String string = "/books/book[author='Jane Doe']/title";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("O.3")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("O.3");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("7(D8~P")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: notEquals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token notEquals = xPathLexer.notEquals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.at();
xPathLexer.notEquals();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        700 = $missing$;
        8.3456789 = ~P123456 = $missing$;
    }
}
statement is: 700 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: 8.3456789 = ~P123456 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("QbMi7U1iExNzLy ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("QbMi7U1iExNzLy ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//button[@type='submit' and @value='Login']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//button[@type='submit' and @value='Login']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//button[@type='submit' and @value='Login']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("T|29K")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("T|29K");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("T|29K");
        xPathLexer.nextToken();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("T|29K");
        xPathLexer.nextToken();
        // Changing the primitive values and strings to more illustrative examples:
        XPathLexer xPathLexer = new XPathLexer("T|29K");
        xPathLexer.nextToken();
        // Replacing the hard-coded input with a more descriptive variable name:
        String input = "T|29K";
        XPathLexer xPathLexer = new XPathLexer(input);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("T|29K"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("T|29K"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Changing the primitive values and strings to more illustrative examples:
XPathLexer xPathLexer = new XPathLexer("T|29K"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Replacing the hard-coded input with a more descriptive variable name:
String input = "T|29K", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer xPathLexer = new XPathLexer(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 10
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("V2(K@zEW")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
        xPathLexer.nextToken();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
        xPathLexer.nextToken();
        assertEquals(PATH_SEGMENT, xPathLexer.getToken().getType());
        assertEquals("V2", xPathLexer.getToken().getValue());
        xPathLexer.nextToken();
        assertEquals(OPEN_PARENTHESIS, xPathLexer.getToken().getType());
        assertEquals("(", xPathLexer.getToken().getValue());
        xPathLexer.nextToken();
        assertEquals(ATTRIBUTE_NAME, xPathLexer.getToken().getType());
        assertEquals("@z", xPathLexer.getToken().getValue());
        xPathLexer.nextToken();
        assertEquals(EQUALS, xPathLexer.getToken().getType());
        assertEquals("=", xPathLexer.getToken().getValue());
        xPathLexer.nextToken();
        assertEquals(STRING_LITERAL, xPathLexer.getToken().getType());
        assertEquals("EW", xPathLexer.getToken().getValue());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("V2(K@zEW"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(PATH_SEGMENT, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(PATH_SEGMENT, xPathLexer.getToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("V2", xPathLexer.getToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("V2", xPathLexer.getToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(OPEN_PARENTHESIS, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(OPEN_PARENTHESIS, xPathLexer.getToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("(", xPathLexer.getToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("(", xPathLexer.getToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(ATTRIBUTE_NAME, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(ATTRIBUTE_NAME, xPathLexer.getToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("@z", xPathLexer.getToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("@z", xPathLexer.getToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(EQUALS, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(EQUALS, xPathLexer.getToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("=", xPathLexer.getToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("=", xPathLexer.getToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals(STRING_LITERAL, xPathLexer.getToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(STRING_LITERAL, xPathLexer.getToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("EW", xPathLexer.getToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("EW", xPathLexer.getToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("XJD")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("XJD");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("XJD");
        // Improved test data
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        String input = "123";// Integer

        double expectedResult = 123;
        String input = "0.5";// Double

        double expectedResult = 0.5;
        String input = "abc";// String

        String expectedResult = "abc";
        String input = "XYZ";// Uppercase string

        String expectedResult = "XYZ";
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("XJD"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: String input = "123"// Integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double expectedResult = 123, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String input = "0.5"// Double
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double expectedResult = 0.5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String input = "abc"// String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResult = "abc", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String input = "XYZ"// Uppercase string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResult = "XYZ", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "123"
* this is vulnerable: int _int = 123
* this is vulnerable: String string = "0.5"
* this is vulnerable: double _double = 0.5
* this is vulnerable: String string = "abc"
* this is vulnerable: String string = "abc"
* this is vulnerable: String string = "XYZ"
* this is vulnerable: String string = "XYZ"
TestCase is: String string = "XJD";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = "123";
int _int = 123;
String string = "0.5";
double _double = 0.5;
String string = "abc";
String string = "abc";
String string = "XYZ";
String string = "XYZ";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Y,")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Y,");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("[ (")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("[ (10 + 2) * 5");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("[ (10 + 2) * 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "[ (10 + 2) * 5";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("^(1234567890.123456)");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("^(1234567890.123456)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "^&aItG'c6-'+8*+WxJ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "^(1234567890.123456)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("_")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("_");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/path/to/file.txt");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/path/to/file.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/path/to/file.txt";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("`X4rWMHQLW'ABS})P")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("`X4rWMHQLW'ABS})P");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("a) (")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("a) (");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("abc(def)");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("abc(def)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "abc(def)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("b4ZBOiHicD~3")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("b4ZBOiHicD~3");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id=1 and @class='novel']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id=1 and @class='novel']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id=1 and @class='novel']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
        xPathLexer.nextToken();
        // Improved test data
        String input = "e@`Bxc3e3&$c *$*";
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String input = "e@`Bxc3e3&$c *$*", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "e@`Bxc3e3&$c *$*"
TestCase is: String string = "e@`Bxc3e3&$c *$*";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "e@`Bxc3e3&$c *$*";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(3.14)");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(3.14)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "f*@Sn~TYP5(3.14)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("gn\"0\"P,Hw")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("gn\"0\"P,Hw");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("productName@schemaLocation");
        xPathLexer.nextToken();
        // After tokenizing, the lexer should return a token for "productName" with type IDENTIFIER
        assertEquals(IDENTIFIER, xPathLexer.getCurrentToken().getType());
        assertEquals("productName", xPathLexer.getCurrentToken().getValue());
        // The lexer should also return a token for "@schemaLocation" with type ATTRIBUTE_PREFIX
        assertEquals(ATTRIBUTE_PREFIX, xPathLexer.nextToken().getType());
        assertEquals("@schemaLocation", xPathLexer.getCurrentToken().getValue());
        // After tokenizing the entire input string, the lexer should return a token with type EOF
        assertEquals(EOF, xPathLexer.nextToken().getType());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("productName@schemaLocation"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // After tokenizing, the lexer should return a token for "productName" with type IDENTIFIER
assertEquals(IDENTIFIER, xPathLexer.getCurrentToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After tokenizing, the lexer should return a token for "productName" with type IDENTIFIER
assertEquals(IDENTIFIER, xPathLexer.getCurrentToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("productName", xPathLexer.getCurrentToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("productName", xPathLexer.getCurrentToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: // The lexer should also return a token for "@schemaLocation" with type ATTRIBUTE_PREFIX
assertEquals(ATTRIBUTE_PREFIX, xPathLexer.nextToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The lexer should also return a token for "@schemaLocation" with type ATTRIBUTE_PREFIX
assertEquals(ATTRIBUTE_PREFIX, xPathLexer.nextToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("@schemaLocation", xPathLexer.getCurrentToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("@schemaLocation", xPathLexer.getCurrentToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: // After tokenizing the entire input string, the lexer should return a token with type EOF
assertEquals(EOF, xPathLexer.nextToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // After tokenizing the entire input string, the lexer should return a token with type EOF
assertEquals(EOF, xPathLexer.nextToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "productName@schemaLocation";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("ht$$iog/vM")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("ht$$iog/vM");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("jn)t/oJ=\"LOh;+ ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("jn)t/oJ=\"LOh;+ ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//employee[@salary > 50000]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//employee[@salary > 50000]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//employee[@salary > 50000]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".2k>91")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".2k>91");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(".2k>91");
        xPathLexer.nextToken();// returns a Token object with the type "NUMBER" and the value "0.2k"

        xPathLexer.nextToken();// returns a Token object with the type "COMPARATOR" and the value ">" }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(".2k>91"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// returns a Token object with the type "NUMBER" and the value "0.2k"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns a Token object with the type "NUMBER" and the value "0.2k"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns a Token object with the type "COMPARATOR" and the value ">" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns a Token object with the type "COMPARATOR" and the value ">" }}
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ".2k>91";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("n{")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("n{");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the XPathLexer
        XPathLexer xPathLexer = new XPathLexer("n{");
        xPathLexer.nextToken();
        Assert.assertEquals(NODE, xPathLexer.getCurrentToken().type);
        Assert.assertEquals("n", xPathLexer.getCurrentToken().value);
    }
}
statement is: // Improved test data for the XPathLexer
XPathLexer xPathLexer = new XPathLexer("n{"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: Assert.assertEquals(NODE, xPathLexer.getCurrentToken().type), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals(NODE, xPathLexer.getCurrentToken().type) target is: Assert method is: assertEquals()
statement is: Assert.assertEquals("n", xPathLexer.getCurrentToken().value), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("n", xPathLexer.getCurrentToken().value) target is: Assert method is: assertEquals(java.lang.String)
TestCase is: String string = "n{";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("ozQN25AIn")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
        xPathLexer.nextToken();
        // Improved test data
        String xpathExpression = "//div[@class='foo']";
        XPathLexer lexer = new XPathLexer(xpathExpression);
        lexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("ozQN25AIn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String xpathExpression = "//div[@class='foo']", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer lexer = new XPathLexer(xpathExpression), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: lexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: lexer.nextToken() target is: lexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "ozQN25AIn";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//div[@class='foo']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("pTF:A -tg")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
        xPathLexer.nextToken();
        // Improved test data:
        xPathLexer = new XPathLexer("pTF:A -tg");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("pTF:A -tg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
xPathLexer = new XPathLexer("pTF:A -tg"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "pTF:A -tg";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("qZ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("qZ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("qZ");
        xPathLexer.nextToken();
        // Expect the first token to be a QUOTE_DOUBLE token with the value "qZ"
        assertEquals(new Token(TokenType.QUOTE_DOUBLE, "qZ", 0), xPathLexer.getCurrentToken());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("qZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Expect the first token to be a QUOTE_DOUBLE token with the value "qZ"
assertEquals(new Token(TokenType.QUOTE_DOUBLE, "qZ", 0), xPathLexer.getCurrentToken()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Expect the first token to be a QUOTE_DOUBLE token with the value "qZ"
assertEquals(new Token(TokenType.QUOTE_DOUBLE, "qZ", 0), xPathLexer.getCurrentToken()) target is:  method is: assertEquals(Token,<unknown>)
TestCase is: String string = "qZ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("r>R6p:FrAWv,lu")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("r>R6p:FrAWv,lu");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("r>R6p:FraWv,lu");
        xPathLexer.nextToken();
        // Test data for nextToken(): r>R6p:FraWv,lu }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("r>R6p:FraWv,lu"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Test data for nextToken(): r>R6p:FraWv,lu }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "r>R6p:FraWv,lu";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
        xPathLexer.nextToken();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");// Lexer with a realistic input string

        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/")// Lexer with a realistic input string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("t1Ta3J80/$")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("t1Ta3J80/$");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attribute='value']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attribute='value']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/root/parent/child[@attribute='value']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
        xPathLexer.nextToken();
        // Improved test data
        String input = "😊";// Unicode character for a smiley face emoji

        int expectedTokenType = TokenType.UNICODE_CHAR;
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String input = "😊"// Unicode character for a smiley face emoji
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedTokenType = TokenType.UNICODE_CHAR, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: TokenType.UNICODE_CHAR is TokenType
* this is vulnerable: String string = "\uD83D\uDE0A"
TestCase is: String string = "uB5B:CYRc^";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "\uD83D\uDE0A";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" vmJv,29'kU")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(" vmJv,29'kU");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/parent/child[@attribute='value']/following-sibling::*[2]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/parent/child[@attribute='value']/following-sibling::*[2]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/parent/child[@attribute='value']/following-sibling::*[2]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
        xPathLexer.nextToken();
        xPathLexer.getPreviousToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: getPreviousToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).getPreviousToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
        xPathLexer.nextToken();
    }
}
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "x7ZM1h}Np>m|.b";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("y?lS8s")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("y?lS8s");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("y@lS8s");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("y@lS8s"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "y@lS8s";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/root/parent[@attribute='value']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/root/parent[@attribute='value']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/root/parent[@attribute='value']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("{1)hrIu6Z,uBCoJ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("{1)hrIu6Z,uBCoJ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "|7VRF1`@MFzN";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("7(D8~P")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        XPathLexer xPathLexer1 = new XPathLexer("123(abc~xyz");
        xPathLexer1.whitespace();
        xPathLexer1.star();
        xPathLexer1.nextToken();
        xPathLexer1.nextToken();
        XPathLexer xPathLexer2 = new XPathLexer("987(def~mno");
        xPathLexer2.whitespace();
        xPathLexer2.star();
        xPathLexer2.nextToken();
        xPathLexer2.nextToken();
    }
}
statement is: // Improved test data
XPathLexer xPathLexer1 = new XPathLexer("123(abc~xyz"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer1.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer1.whitespace() target is: xPathLexer1 method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
statement is: xPathLexer1.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer1.star() target is: xPathLexer1 method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer1.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer1.nextToken() target is: xPathLexer1 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer1.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer1.nextToken() target is: xPathLexer1 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: XPathLexer xPathLexer2 = new XPathLexer("987(def~mno"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer2.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.whitespace() target is: xPathLexer2 method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
statement is: xPathLexer2.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.star() target is: xPathLexer2 method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.nextToken() target is: xPathLexer2 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer2.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer2.nextToken() target is: xPathLexer2 method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 7
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "123(abc~xyz";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = "987(def~mno";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='example']/div/p[1]/a");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='example']/div/p[1]/a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//*[@id='example']/div/p[1]/a";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".3[/e>6")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".3[/e>6");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p[2]/a");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p[2]/a"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@id='main']/p[2]/a";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".4[>cU")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".4[>cU");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/root/child[gt 5 cm]");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/root/child[gt 5 cm]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/root/child[gt 5 cm]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".6")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".6");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//body[@id='main']/p[2]/strong");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//body[@id='main']/p[2]/strong"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//body[@id='main']/p[2]/strong";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".G6")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(".G6");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("8>rBa")
statement is: leftParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftParen = xPathLexer.leftParen()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("8>rBa");
Token leftParen = xPathLexer.leftParen();
xPathLexer.setPreviousToken(leftParen);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("89>rBa");
        Token leftParen = xPathLexer.leftParen();
        xPathLexer.setPreviousToken(leftParen);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("89>rBa"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token leftParen = xPathLexer.leftParen(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftParen() target is: xPathLexer method is: leftParen()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: leftParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(leftParen), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(leftParen) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "89>rBa";
XPathLexer xPathLexer = new XPathLexer(string);
Token leftParen = ((XPathLexer) string).leftParen();
((XPathLexer) string).setPreviousToken(leftParen);
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("abc/def");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("abc/def"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "abc/def";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: minus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token minus = xPathLexer.minus()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        Token minus = xPathLexer.minus();
        xPathLexer.setPreviousToken(minus);
        xPathLexer.identifierOrOperatorName("subtract");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token minus = xPathLexer.minus(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.minus() target is: xPathLexer method is: minus()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: minus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(minus), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(minus) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName("subtract"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName("subtract") target is: xPathLexer method is: identifierOrOperatorName(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("xpathQuery");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("xpathQuery"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "xpathQuery";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?/}NIw#]?9OVi58")
statement is: slashes()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token slashes = xPathLexer.slashes()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("?/}NIw#]?9OVi58");
Token slashes = xPathLexer.slashes();
xPathLexer.setPreviousToken(slashes);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("book/author");
        Token slashes = xPathLexer.slashes();
        xPathLexer.setPreviousToken(slashes);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("book/author"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token slashes = xPathLexer.slashes(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slashes() target is: xPathLexer method is: slashes()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: slashes()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(slashes), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(slashes) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "book/author";
XPathLexer xPathLexer = new XPathLexer(string);
Token slashes = ((XPathLexer) string).slashes();
((XPathLexer) string).setPreviousToken(slashes);
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("sum(age, 2) > 18");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("sum(age, 2) > 18"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "sum(age, 2) > 18";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Token at = xPathLexer.at();
        xPathLexer.setPreviousToken(at);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: Token at = xPathLexer.at(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
statement is: xPathLexer.setPreviousToken(at), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(at) target is: xPathLexer method is: setPreviousToken(Token)
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: pipe()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token pipe = xPathLexer.pipe()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        Token pipe = xPathLexer.pipe();
        xPathLexer.setPreviousToken(pipe);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token pipe = xPathLexer.pipe(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.pipe() target is: xPathLexer method is: pipe()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: pipe()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(pipe), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(pipe) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("com.werken.saxpath.Token")
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: rightParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightParen = xPathLexer.rightParen()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("com.werken.saxpath.Token");
        Token doubleColon = xPathLexer.doubleColon();
        xPathLexer.not();
        xPathLexer.setPreviousToken(doubleColon);
        xPathLexer.rightParen();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("com.werken.saxpath.Token"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("com.werken.saxpath.Token") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: Token doubleColon = xPathLexer.doubleColon(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(doubleColon), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(doubleColon) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.rightParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightParen() target is: xPathLexer method is: rightParen()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: rightParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "com.werken.saxpath.Token";
xPathLexer.setXPath(string);
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
        Token star = xPathLexer.star();
        xPathLexer.setPreviousToken(star);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token star = xPathLexer.star(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(star), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(star) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "%4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);
Token star = ((XPathLexer) string).star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token equals = xPathLexer.equals();
xPathLexer.setPreviousToken(equals);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Token equals = xPathLexer.equals();
        xPathLexer.setPreviousToken(equals);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: Token equals = xPathLexer.equals(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
statement is: xPathLexer.setPreviousToken(equals), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(equals) target is: xPathLexer method is: setPreviousToken(Token)
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Fkn?RXy}b,H1+")
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: notEquals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token notEquals = xPathLexer.notEquals()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Fkn?RXy}b,H1+");
xPathLexer.star();
xPathLexer.at();
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title");
        xPathLexer.star();
        xPathLexer.at();
        Token notEquals = xPathLexer.notEquals();
        xPathLexer.setPreviousToken(notEquals);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: Token notEquals = xPathLexer.notEquals(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.notEquals() target is: xPathLexer method is: notEquals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: notEquals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(notEquals), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(notEquals) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).star();
((XPathLexer) string).at();
Token notEquals = ((XPathLexer) string).notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5B+.")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = xPathLexer.dollar();
xPathLexer.setPreviousToken(dollar);
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5B+.");
        Token dollar = xPathLexer.dollar();
        xPathLexer.setPreviousToken(dollar);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5B+."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token dollar = xPathLexer.dollar(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(dollar), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(dollar) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer(string);
Token dollar = ((XPathLexer) string).dollar();
((XPathLexer) string).setPreviousToken(dollar);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
        // Test data for nextToken() method
        String[] tokenStrings = new String[]{ " ", "/", "*", "+", "-", "=", "<", ">", "(", ")", "[", "]", "{", "}", "!", "@", "#", "$", "%", "^", "&", "|", "~", "'", "\"" };
        for (String tokenString : tokenStrings) {
            xPathLexer.nextToken();
            assertEquals(tokenString, xPathLexer.getCurrentToken().getText());
        }
        // Test data for identifierOrOperatorName() method
        String[] operatorNames = new String[]{ "and", "or", "mod", "div" };
        for (String operatorName : operatorNames) {
            xPathLexer.identifierOrOperatorName();
            assertEquals(operatorName, xPathLexer.getCurrentToken().getText());
        }
        String[] identifierNames = new String[]{ "book", "bookstore", "author", "price" };
        for (String identifierName : identifierNames) {
            xPathLexer.identifierOrOperatorName();
            assertEquals(identifierName, xPathLexer.getCurrentToken().getText());
        }
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
statement is: // Test data for nextToken() method
String[] tokenStrings = new String[]{ " ", "/", "*", "+", "-", "=", "<", ">", "(", ")", "[", "]", "{", "}", "!", "@", "#", "$", "%", "^", "&", "|", "~", "'", "\"" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (String tokenString : tokenStrings) {
    xPathLexer.nextToken();
    assertEquals(tokenString, xPathLexer.getCurrentToken().getText());
}, class spoon.support.reflect.code.CtForEachImpl
statement is: // Test data for identifierOrOperatorName() method
String[] operatorNames = new String[]{ "and", "or", "mod", "div" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (String operatorName : operatorNames) {
    xPathLexer.identifierOrOperatorName();
    assertEquals(operatorName, xPathLexer.getCurrentToken().getText());
}, class spoon.support.reflect.code.CtForEachImpl
statement is: String[] identifierNames = new String[]{ "book", "bookstore", "author", "price" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (String identifierName : identifierNames) {
    xPathLexer.identifierOrOperatorName();
    assertEquals(identifierName, xPathLexer.getCurrentToken().getText());
}, class spoon.support.reflect.code.CtForEachImpl
TestCase is: String string = "/bookstore/book";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("<ae,?")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: operatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token operatorName = xPathLexer.operatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("<ae,?");
xPathLexer.whitespace();
xPathLexer.operatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.whitespace(" \t\n");
        xPathLexer.operatorName("div");
    }
}
statement is: xPathLexer.whitespace(" \t\n"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace(" \t\n") target is: xPathLexer method is: whitespace(java.lang.String)
statement is: xPathLexer.operatorName("div"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName("div") target is: xPathLexer method is: operatorName(java.lang.String)
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W")
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: operatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token operatorName = xPathLexer.operatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.rightBracket();
xPathLexer.operatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.rightBracket();
        xPathLexer.operatorName();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("+dF*_{2E^W");
        xPathLexer.rightBracket();
        xPathLexer.operatorName();
    }
}
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
statement is: xPathLexer.operatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName() target is: xPathLexer method is: operatorName()
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("+dF*_{2E^W"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.operatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName() target is: xPathLexer method is: operatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: operatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "+dF*_{2E^W";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).operatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: relationalOperator()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token relationalOperator = xPathLexer.relationalOperator()
statement is: pipe()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token pipe = xPathLexer.pipe()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
xPathLexer.nextToken();
xPathLexer.relationalOperator();
xPathLexer.pipe();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
        xPathLexer.nextToken();
        xPathLexer.relationalOperator();
        xPathLexer.pipe();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.relationalOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.relationalOperator() target is: xPathLexer method is: relationalOperator()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: relationalOperator()Lcom/werken/saxpath/Token;
statement is: xPathLexer.pipe(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.pipe() target is: xPathLexer method is: pipe()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: pipe()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "W.TY>[mAQ9zum_|uw6#";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).relationalOperator();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("com.werken.saxpath.XPathLexer")
statement is: colon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token colon = xPathLexer.colon()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.nextToken();
        xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
        xPathLexer.colon();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setXPath("com.werken.saxpath.XPathLexer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("com.werken.saxpath.XPathLexer") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.colon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.colon() target is: xPathLexer method is: colon()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: colon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
String string = "com.werken.saxpath.XPathLexer";
xPathLexer.setXPath(string);
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: mod()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token mod = xPathLexer.mod()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.mod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
        xPathLexer.mod();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.mod(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.mod() target is: xPathLexer method is: mod()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: mod()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).mod();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: div()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token div = xPathLexer.div()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.div();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("123.456/789");
        xPathLexer.div();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("123.456/789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.div(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.div() target is: xPathLexer method is: div()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: div()Lcom/werken/saxpath/Token;
TestCase is: String string = "123.456/789";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).div();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("")
statement is: and()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token and = xPathLexer.and()
test data is: XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.and();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']");
        xPathLexer.and();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.and(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.and() target is: xPathLexer method is: and()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: and()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='1234']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).and();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: or()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token or = xPathLexer.or()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.or();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("4X.b,YpQ8=tN/grDI ");
        xPathLexer.or();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("4X.b,YpQ8=tN/grDI "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.or(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.or() target is: xPathLexer method is: or()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: or()Lcom/werken/saxpath/Token;
TestCase is: String string = "4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).or();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";Wor")
statement is: consume()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume()
statement is: rightParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightParen = xPathLexer.rightParen()
statement is: operatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token operatorName = xPathLexer.operatorName()
test data is: XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.rightParen();
xPathLexer.operatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
        xPathLexer.consume();
        xPathLexer.rightParen();
        xPathLexer.operatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume()V
statement is: xPathLexer.rightParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightParen() target is: xPathLexer method is: rightParen()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.operatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName() target is: xPathLexer method is: operatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: operatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).rightParen();
((XPathLexer) string).operatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("8>rBa")
statement is: consume(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume(32)
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
test data is: XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.consume(32);
xPathLexer.whitespace();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("8>rBa");
        xPathLexer.consume(32);
        xPathLexer.whitespace();
        // Improved test data:
        // - Changed the value of the input string to a more descriptive and representative value, such as "8>rBa"
        // - Increased the number of consumed characters to 32 from 0
        // - Added a call to the whitespace() method to simulate consuming whitespace characters in the input string }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("8>rBa"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(32), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume(32) target is: xPathLexer method is: consume(int)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume(I)V
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
statement is: // Improved test data:, class spoon.support.reflect.code.CtCommentImpl
statement is: // - Changed the value of the input string to a more descriptive and representative value, such as "8>rBa", class spoon.support.reflect.code.CtCommentImpl
statement is: // - Increased the number of consumed characters to 32 from 0, class spoon.support.reflect.code.CtCommentImpl
statement is: // - Added a call to the whitespace() method to simulate consuming whitespace characters in the input string }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "8>rBa";
XPathLexer xPathLexer = new XPathLexer(string);
int _int = 32;
((XPathLexer) string).consume(_int);
((XPathLexer) string).whitespace();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(") (")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
test data is: XPathLexer xPathLexer = new XPathLexer(") (");
xPathLexer.whitespace();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("2+2");
        xPathLexer.whitespace();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("2+2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
TestCase is: String string = "2+2";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ")
statement is: relationalOperator()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token relationalOperator = xPathLexer.relationalOperator()
test data is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.relationalOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("\\$4X.b,YpQ8=tN/grDI ");
        xPathLexer.relationalOperator();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("\\$4X.b,YpQ8=tN/grDI ");
        xPathLexer.relationalOperator(GREATER_THAN);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("\\$4X.b,YpQ8=tN/grDI "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.relationalOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.relationalOperator() target is: xPathLexer method is: relationalOperator()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: relationalOperator()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("\\$4X.b,YpQ8=tN/grDI "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.relationalOperator(GREATER_THAN), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.relationalOperator(GREATER_THAN) target is: xPathLexer method is: relationalOperator()
TestCase is: String string = "\\$4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).relationalOperator();
String string = "\\$4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("<=")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("<=");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer")
statement is: colon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token colon = xPathLexer.colon()
statement is: plus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token plus = xPathLexer.plus()
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
test data is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.plus();
xPathLexer.dots();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
        xPathLexer.colon(':');
        xPathLexer.plus('+');
        xPathLexer.dots('.');
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.colon(':'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.colon(':') target is: xPathLexer method is: colon(char)
statement is: xPathLexer.plus('+'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus('+') target is: xPathLexer method is: plus(char)
statement is: xPathLexer.dots('.'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots('.') target is: xPathLexer method is: dots(char)
TestCase is: String string = "com.werken.saxpath.XPathLexer";
XPathLexer xPathLexer = new XPathLexer(string);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("U-92/&,}j!d")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("U-92/&,}j!d");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("10/5/3.14");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("10/5/3.14"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "10/5/3.14";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("")
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[1]/@id");
        xPathLexer.getXPath();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[3]/@id");
        xPathLexer.getXPath();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[1]/@id"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.getXPath(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath() target is: xPathLexer method is: getXPath()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: getXPath()Ljava/lang/String;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[3]/@id"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.getXPath(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath() target is: xPathLexer method is: getXPath()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 4
Matched Method is: getXPath()Ljava/lang/String;
TestCase is: String string = "/bookstore/book[1]/@id";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).getXPath();
String string = "/bookstore/book[3]/@id";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).getXPath();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("1iHBLR^NacO")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("1iHBLR^NacO");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("1234567890abcdef");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("1234567890abcdef"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "1234567890abcdef";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("com.werken.saxpath.Token")
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA(0)
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.not();
xPathLexer.LA(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("a-token");
        xPathLexer.not();
        xPathLexer.LA(-1);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("a-token"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("a-token") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.LA(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.LA(-1) target is: xPathLexer method is: LA(int)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: LA(I)C
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "a-token";
xPathLexer.setXPath(string);
xPathLexer.not();
int _int = null;
xPathLexer.LA(_int);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1")
statement is: slashes()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token slashes = xPathLexer.slashes()
statement is: minus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token minus = xPathLexer.minus()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA(13)
test data is: XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
xPathLexer.slashes();
xPathLexer.minus();
xPathLexer.star();
xPathLexer.at();
xPathLexer.LA(13);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
        xPathLexer.slashes();
        xPathLexer.minus();
        xPathLexer.star();
        xPathLexer.at();
        xPathLexer.LA(13);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.slashes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slashes() target is: xPathLexer method is: slashes()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: slashes()Lcom/werken/saxpath/Token;
statement is: xPathLexer.minus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.minus() target is: xPathLexer method is: minus()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: minus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.LA(13), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.LA(13) target is: xPathLexer method is: LA(int)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: LA(I)C
TestCase is: String string = "7TYTM/-O\"2H:.`.~3M1";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).slashes();
((XPathLexer) string).minus();
((XPathLexer) string).star();
((XPathLexer) string).at();
int _int = 13;
((XPathLexer) string).LA(_int);

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA(26)
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.LA(26);
        // Changed the value of 26 to a more descriptive one, such as "numberOfNodesInTheDocument"
        xPathLexer.LA(numberOfNodesInTheDocument);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.LA(26), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.LA(26) target is: xPathLexer method is: LA(int)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: LA(I)C
statement is: // Changed the value of 26 to a more descriptive one, such as "numberOfNodesInTheDocument"
xPathLexer.LA(numberOfNodesInTheDocument), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the value of 26 to a more descriptive one, such as "numberOfNodesInTheDocument"
xPathLexer.LA(numberOfNodesInTheDocument) target is: xPathLexer method is: LA()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: LA(I)C
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: XPathLexer xPathLexer = new XPathLexer();
int _int = 26;
xPathLexer.LA(_int);
int _int = null;
xPathLexer.LA(_int);

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: comma()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token comma = xPathLexer.comma()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.comma();
        // Improved test data
        xPathLexer.comma("//div[@id='main']");
        // The above line is more descriptive and representative of the situation being tested, as it uses a realistic XPath expression to represent a comma character in an XML file. }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.comma(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.comma() target is: xPathLexer method is: comma()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: comma()Lcom/werken/saxpath/Token;
statement is: // Improved test data
xPathLexer.comma("//div[@id='main']"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
xPathLexer.comma("//div[@id='main']") target is: xPathLexer method is: comma(java.lang.String)
statement is: // The above line is more descriptive and representative of the situation being tested, as it uses a realistic XPath expression to represent a comma character in an XML file. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t")
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
        xPathLexer.doubleColon();
        xPathLexer.currentPosition();
        // Improved test data:
        // The input string "h'lO^bxvY;k@t" contains a mix of valid and invalid characters. The double colon (::) is a reserved character in XPath, so it should be escaped with a backslash (\). The current position of the lexer after reading the input string can be used to check if the lexer is correctly parsing the input string. }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.doubleColon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.currentPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition() target is: xPathLexer method is: currentPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: currentPosition()I
statement is: // Improved test data:, class spoon.support.reflect.code.CtCommentImpl
statement is: // The input string "h'lO^bxvY;k@t" contains a mix of valid and invalid characters. The double colon (::) is a reserved character in XPath, so it should be escaped with a backslash (\). The current position of the lexer after reading the input string can be used to check if the lexer is correctly parsing the input string. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).doubleColon();
((XPathLexer) string).currentPosition();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.currentPosition(10, 20);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.currentPosition(10, 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition(10, 20) target is: xPathLexer method is: currentPosition(int,int)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("EY'")
statement is: endPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endPosition = xPathLexer.endPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("EY'");
xPathLexer.endPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='foo']");
        xPathLexer.endPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='foo']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.endPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.endPosition() target is: xPathLexer method is: endPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: endPosition()I
TestCase is: String string = "//*[@id='foo']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).endPosition();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("")
statement is: endPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endPosition = xPathLexer.endPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.endPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]");
        xPathLexer.endPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.endPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.endPosition() target is: xPathLexer method is: endPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: endPosition()I
TestCase is: String string = "/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).endPosition();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t")
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
        xPathLexer.doubleColon();
        xPathLexer.nextToken();
        xPathLexer.getPreviousToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.doubleColon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: getPreviousToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).doubleColon();
((XPathLexer) string).nextToken();
((XPathLexer) string).getPreviousToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:")
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("123abc@#$%^&*()_+-=[]{}|;\':\"<>,./?`~");
        xPathLexer.getPreviousToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("123abc@#$%^&*()_+-=[]{}|;\':\"<>,./?`~"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: getPreviousToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "123abc@#$%^&*()_+-=[]{}|;':\"<>,./?`~";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).getPreviousToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("F?NzI)")
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer("F?NzI)");
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("FöhnzI)");
        String expectedOutput = "FnzI)";
        String actualOutput = xPathLexer.getXPath();
        assertEquals(expectedOutput, actualOutput);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("FöhnzI)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedOutput = "FnzI)", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualOutput = xPathLexer.getXPath(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath() target is: xPathLexer method is: getXPath()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: getXPath()Ljava/lang/String;
statement is: assertEquals(expectedOutput, actualOutput), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, actualOutput) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "FnzI)"
TestCase is: String string = "F\u00F6hnzI)";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "FnzI)";
((XPathLexer) string).getXPath();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.getXPath();
        // Improved test data:
        int inputLength = 10;// A more descriptive value for the length of the input string.

        String inputString = "This is a test string";// A more representative value for the input string.

        xPathLexer.getXPath(inputString, inputLength);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.getXPath(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath() target is: xPathLexer method is: getXPath()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: getXPath()Ljava/lang/String;
statement is: // Improved test data:
int inputLength = 10// A more descriptive value for the length of the input string.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String inputString = "This is a test string"// A more representative value for the input string.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer.getXPath(inputString, inputLength), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath(inputString, inputLength) target is: xPathLexer method is: getXPath(java.lang.String,int)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "This is a test string"
TestCase is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
int _int = 10;
String string = "This is a test string";

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: hasMoreChars()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean moreChars = xPathLexer.hasMoreChars()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer();
        String input = "/bookstore/book[0]/@id";
        xPathLexer.hasMoreChars(input);
    }
}
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String input = "/bookstore/book[0]/@id", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer.hasMoreChars(input), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.hasMoreChars(input) target is: xPathLexer method is: hasMoreChars(java.lang.String)
* this is vulnerable: String string = "/bookstore/book[0]/@id"
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "/bookstore/book[0]/@id";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer")
statement is: hasMoreChars()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean moreChars = xPathLexer.hasMoreChars()
test data is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.hasMoreChars();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
        xPathLexer.hasMoreChars();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.hasMoreChars(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.hasMoreChars() target is: xPathLexer method is: hasMoreChars()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: hasMoreChars()Z
TestCase is: String string = "com.werken.saxpath.XPathLexer";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).hasMoreChars();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("*Eu%b(xvX=-e ")
statement is: identifier()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifier = xPathLexer.identifier()
test data is: XPathLexer xPathLexer = new XPathLexer("*Eu%b(xvX=-e ");
xPathLexer.identifier();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @pub_year=2018]");
        xPathLexer.identifier();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @pub_year=2018]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.identifier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifier() target is: xPathLexer method is: identifier()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifier()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@author='Jane Doe' and @pub_year=2018]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).identifier();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W")
statement is: isIdentifierChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierChar = xPathLexer.isIdentifierChar('|')
test data is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierChar('|');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.isIdentifierChar('|');
        // Improved test data:
        // Use more descriptive and representative values for the primitive types and Strings used in the code snippet.
        int intValue = 10;
        double doubleValue = 3.14;
        String stringValue = "hello world";
        char charValue = 'a';
        boolean booleanValue = true;
        // Use a more representative input string for the XPathLexer constructor.
        xPathLexer = new XPathLexer("//*[@id='container']/div");
        assertTrue(xPathLexer.isIdentifierChar('|'));
    }
}
statement is: xPathLexer.isIdentifierChar('|'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierChar('|') target is: xPathLexer method is: isIdentifierChar(char)
statement is: // Improved test data:
// Use more descriptive and representative values for the primitive types and Strings used in the code snippet.
int intValue = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean booleanValue = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use a more representative input string for the XPathLexer constructor.
xPathLexer = new XPathLexer("//*[@id='container']/div"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertTrue(xPathLexer.isIdentifierChar('|')), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(xPathLexer.isIdentifierChar('|')) target is:  method is: assertTrue(<unknown>)
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 10;
double _double = 3.14;
String string = "hello world";
char _char = 'a';
boolean _boolean = true;

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: isIdentifierChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierChar = xPathLexer.isIdentifierChar('W')
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('W');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.isIdentifierChar('_');
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierChar('_'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierChar('_') target is: xPathLexer method is: isIdentifierChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierChar(C)Z
TestCase is: XPathLexer xPathLexer = new XPathLexer();
char _char = '_';
xPathLexer.isIdentifierChar(_char);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W")
statement is: isIdentifierStartChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierStartChar = xPathLexer.isIdentifierStartChar('5')
test data is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierStartChar('5');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.isIdentifierStartChar('5');
    }
}
statement is: xPathLexer.isIdentifierStartChar('5'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('5') target is: xPathLexer method is: isIdentifierStartChar(char)
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("8>rBa")
statement is: isIdentifierStartChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierStartChar = xPathLexer.isIdentifierStartChar('f')
test data is: XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.isIdentifierStartChar('f');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("8>rBa");
        xPathLexer.isIdentifierStartChar('f');// "f" is an identifier start character in XPath }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("8>rBa"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierStartChar('f')// "f" is an identifier start character in XPath }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('f')// "f" is an identifier start character in XPath }}
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: isIdentifierStartChar(C)Z
TestCase is: String string = "8>rBa";
XPathLexer xPathLexer = new XPathLexer(string);
char _char = 'f';
((XPathLexer) string).isIdentifierStartChar(_char);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("0T?60Yc6};3")
statement is: literal()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token literal = xPathLexer.literal()
test data is: XPathLexer xPathLexer = new XPathLexer("0T?60Yc6};3");
xPathLexer.literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.literal();
    }
}
statement is: xPathLexer.literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.literal() target is: xPathLexer method is: literal()
statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: literal()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token literal = xPathLexer.literal()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.literal("The quick brown fox jumps over the lazy dog.");
        int i1 = 123456789;
        int i2 = -987654321;
        int i3 = 0xaabbccdd;
        char c1 = 'q';
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.literal("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.literal("The quick brown fox jumps over the lazy dog.") target is: xPathLexer method is: literal(java.lang.String)
statement is: int i1 = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int i2 = -987654321, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -987654321
statement is: int i3 = 0xaabbccdd, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c1 = 'q', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123456789
* this is vulnerable: int _int = (-1430532899)
* this is vulnerable: char _char = 'q'
TestCase is: XPathLexer xPathLexer = new XPathLexer();
int _int = 123456789;
int _int = (-1430532899);
char _char = 'q';

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: number()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token number = xPathLexer.number()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.number();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.number("1234567890");// more descriptive example of a number

        xPathLexer.number("-1234567890");// more descriptive example of a negative number

        xPathLexer.number("0.1234567890");// more descriptive example of a floating-point number

        xPathLexer.number("-0.1234567890");// more descriptive example of a negative floating-point number

        xPathLexer.string();// more descriptive example of a string }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.number("1234567890")// more descriptive example of a number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.number("1234567890")// more descriptive example of a number
 target is: xPathLexer method is: number(java.lang.String)
statement is: xPathLexer.number("-1234567890")// more descriptive example of a negative number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.number("-1234567890")// more descriptive example of a negative number
 target is: xPathLexer method is: number(java.lang.String)
statement is: xPathLexer.number("0.1234567890")// more descriptive example of a floating-point number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.number("0.1234567890")// more descriptive example of a floating-point number
 target is: xPathLexer method is: number(java.lang.String)
statement is: xPathLexer.number("-0.1234567890")// more descriptive example of a negative floating-point number
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.number("-0.1234567890")// more descriptive example of a negative floating-point number
 target is: xPathLexer method is: number(java.lang.String)
statement is: xPathLexer.string()// more descriptive example of a string }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.string()// more descriptive example of a string }}
 target is: xPathLexer method is: string()
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";Wor")
statement is: consume()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: or()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token or = xPathLexer.or()
test data is: XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.star();
xPathLexer.or();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(";Word");
        xPathLexer.consume();
        xPathLexer.star();
        xPathLexer.or();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("/Books/title");
        xPathLexer.consume();
        xPathLexer.star();
        xPathLexer.or();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(";Word"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume()V
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.or(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.or() target is: xPathLexer method is: or()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: or()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("/Books/title"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 6
Matched Method is: consume()V
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 6
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.or(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.or() target is: xPathLexer method is: or()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 6
Matched Method is: or()Lcom/werken/saxpath/Token;
TestCase is: String string = ";Word";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).star();
((XPathLexer) string).or();
String string = "/Books/title";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).star();
((XPathLexer) string).or();

* test suite isTestSuite: 265
Test 0: 
XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 1: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.pipe();
xPathLexer.nextToken();
Test 2: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.leftBracket();
xPathLexer.not();
xPathLexer.plus();
xPathLexer.nextToken();
Test 3: 
XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 4: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.star();
xPathLexer.nextToken();
Test 5: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();
Test 6: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.consume((-3001));
xPathLexer.currentPosition();
Test 7: 
XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("#<@'<%X");
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("$Q9");
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer("%u4P3D$8");
xPathLexer.nextToken();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D");
xPathLexer.nextToken();
Test 14: 
XPathLexer xPathLexer = new XPathLexer("(!");
xPathLexer.nextToken();
Test 15: 
XPathLexer xPathLexer = new XPathLexer(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 16: 
XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ");
xPathLexer.nextToken();
Test 17: 
XPathLexer xPathLexer = new XPathLexer("<l^-D9a,zB==1Im.");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.consume();
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("/ZP4F4I ]{~5f`zWi8H");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("0H");
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
xPathLexer.nextToken();
Test 22: 
XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~");
xPathLexer.nextToken();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer("6@20NQ");
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("7/N");
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>");
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer(":vsR,m]8?}!WtL)");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer(";?");
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW");
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
xPathLexer.not();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<");
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^");
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer("E29^n");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
xPathLexer.nextToken();
Test 38: 
XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{");
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("KP\"");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer("<L#Jr[]]WV{mM");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("Mco<");
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("N8]WA`]");
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer("O.3");
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.at();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("QbMi7U1iExNzLy ");
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
xPathLexer.nextToken();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("T|29K");
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer("XJD");
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer("Y,");
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 53: 
XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer("_");
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("`X4rWMHQLW'ABS})P");
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("a) (");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer("b4ZBOiHicD~3");
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(");
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer("gn\"0\"P,Hw");
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("ht$$iog/vM");
xPathLexer.nextToken();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("jn)t/oJ=\"LOh;+ ");
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer(".2k>91");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer("n{");
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer("qZ");
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer("r>R6p:FrAWv,lu");
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
xPathLexer.nextToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer("t1Ta3J80/$");
xPathLexer.nextToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer(" vmJv,29'kU");
xPathLexer.nextToken();
Test 73: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
xPathLexer.nextToken();
Test 75: 
XPathLexer xPathLexer = new XPathLexer("y?lS8s");
xPathLexer.nextToken();
Test 76: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("{1)hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
xPathLexer.nextToken();
Test 79: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 81: 
XPathLexer xPathLexer = new XPathLexer(".3[/e>6");
xPathLexer.nextToken();
Test 82: 
XPathLexer xPathLexer = new XPathLexer(".4[>cU");
xPathLexer.nextToken();
Test 83: 
XPathLexer xPathLexer = new XPathLexer(".6");
xPathLexer.nextToken();
Test 84: 
XPathLexer xPathLexer = new XPathLexer(".G6");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 85: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
Token leftParen = xPathLexer.leftParen();
xPathLexer.setPreviousToken(leftParen);
xPathLexer.identifierOrOperatorName();
Test 86: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 87: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 88: 
XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 89: 
XPathLexer xPathLexer = new XPathLexer("?/}NIw#]?9OVi58");
Token slashes = xPathLexer.slashes();
xPathLexer.setPreviousToken(slashes);
xPathLexer.identifierOrOperatorName();
Test 90: 
XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 91: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.identifierOrOperatorName();
Test 92: 
XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();
Test 93: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 94: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 95: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token equals = xPathLexer.equals();
xPathLexer.setPreviousToken(equals);
xPathLexer.identifierOrOperatorName();
Test 96: 
XPathLexer xPathLexer = new XPathLexer("Fkn?RXy}b,H1+");
xPathLexer.star();
xPathLexer.at();
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.nextToken();
Test 97: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = xPathLexer.dollar();
xPathLexer.setPreviousToken(dollar);
xPathLexer.nextToken();
Test 98: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 99: 
XPathLexer xPathLexer = new XPathLexer("<ae,?");
xPathLexer.whitespace();
xPathLexer.operatorName();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.rightBracket();
xPathLexer.operatorName();
Test 101: 
XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
xPathLexer.nextToken();
xPathLexer.relationalOperator();
xPathLexer.pipe();
xPathLexer.nextToken();
Test 102: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();
Test 103: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.mod();
Test 104: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.div();
Test 105: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.and();
Test 106: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.or();
Test 107: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.rightParen();
xPathLexer.operatorName();
Test 108: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.consume(32);
xPathLexer.whitespace();
Test 109: 
XPathLexer xPathLexer = new XPathLexer(") (");
xPathLexer.whitespace();
Test 110: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.relationalOperator();
Test 111: 
XPathLexer xPathLexer = new XPathLexer("<=");
xPathLexer.nextToken();
Test 112: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.plus();
xPathLexer.dots();
Test 113: 
XPathLexer xPathLexer = new XPathLexer("U-92/&,}j!d");
xPathLexer.nextToken();
Test 114: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.getXPath();
Test 115: 
XPathLexer xPathLexer = new XPathLexer("1iHBLR^NacO");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 116: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.not();
xPathLexer.LA(0);
Test 117: 
XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
xPathLexer.slashes();
xPathLexer.minus();
xPathLexer.star();
xPathLexer.at();
xPathLexer.LA(13);
Test 118: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);
Test 119: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();
Test 120: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.currentPosition();
Test 121: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.currentPosition();
Test 122: 
XPathLexer xPathLexer = new XPathLexer("EY'");
xPathLexer.endPosition();
Test 123: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.endPosition();
Test 124: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 125: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.getPreviousToken();
Test 126: 
XPathLexer xPathLexer = new XPathLexer("F?NzI)");
xPathLexer.getXPath();
Test 127: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 128: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 129: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.hasMoreChars();
Test 130: 
XPathLexer xPathLexer = new XPathLexer("*Eu%b(xvX=-e ");
xPathLexer.identifier();
Test 131: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierChar('|');
Test 132: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('W');
Test 133: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierStartChar('5');
Test 134: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.isIdentifierStartChar('f');
Test 135: 
XPathLexer xPathLexer = new XPathLexer("0T?60Yc6};3");
xPathLexer.literal();
Test 136: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.literal();
Test 137: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.number();
Test 138: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.star();
xPathLexer.or();
Test 139: 
String string = "//div[@id='foo']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@id='foo']/p");
((XPathLexer)"//div[@id='foo']/p").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 140: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").pipe();
((XPathLexer) string).nextToken();

Test 141: 
String string = "AA93_v9J9<Y-";
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
((XPathLexer)"AA93_v9J9<Y-").leftBracket();
((XPathLexer) string).not();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();

Test 142: 
XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
((XPathLexer)"]W=%08MZ").nextToken();

Test 143: 
String string = "5.7234.89";
XPathLexer xPathLexer = new XPathLexer("5.7234.89");
((XPathLexer)"5.7234.89").star();
((XPathLexer) string).nextToken();

Test 144: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();
xPathLexer.nextToken();

Test 145: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").consume(1000);
((XPathLexer) string).currentPosition();

Test 146: 
String string = "!cZ87@wChFK%";
XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
((XPathLexer)"!cZ87@wChFK%").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 147: 
String string = "Fkn\"\"0\"P,H17";
XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
((XPathLexer)"Fkn\"\"0\"P,H17").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 148: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']/author/text()");
((XPathLexer)"//book[@id='1234']/author/text()").nextToken();

Test 149: 
XPathLexer xPathLexer = new XPathLexer("//div/p");
((XPathLexer)"//div/p").nextToken();

Test 150: 
XPathLexer xPathLexer = new XPathLexer("!@#$%^&*()_+-=[]{}|;':\"<>,./S4567890abcdef");
((XPathLexer)"!@#$%^&*()_+-=[]{}|;':\"<>,./S4567890abcdef").nextToken();

Test 151: 
XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
((XPathLexer)"&|2K<,.UD").nextToken();

Test 152: 

Test 153: 
XPathLexer xPathLexer = new XPathLexer("(/root/element[@attribute='value'])[3]");
((XPathLexer)"(/root/element[@attribute='value'])[3]").nextToken();

Test 154: 
String string = "sum(1234567890, 987654321)";
XPathLexer xPathLexer = new XPathLexer("sum(1234567890, 987654321)");
((XPathLexer)"sum(1234567890, 987654321)").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 155: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='myelement']/child::div");
((XPathLexer)"//*[@id='myelement']/child::div").nextToken();

Test 156: 
String string = "//a/b[@c='d']";
XPathLexer xPathLexer = new XPathLexer("//a/b[@c='d']");
((XPathLexer)"//a/b[@c='d']").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).nextToken();

Test 157: 
String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
((XPathLexer)"Wf+.8+`cB*ty").nextToken();
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

Test 158: 
XPathLexer xPathLexer = new XPathLexer("0123456789ABCDEF");
((XPathLexer)"0123456789ABCDEF").nextToken();

Test 159: 
XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
((XPathLexer)"1^u:_LWr5bGT|)?bX_4").nextToken();

Test 160: 
String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer("5B+.");
((XPathLexer)"5B+.").nextToken();
((XPathLexer) string).nextToken();

Test 161: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='foo']");
((XPathLexer)"//div[@class='foo']").nextToken();

Test 162: 
XPathLexer xPathLexer = new XPathLexer("10/N");
((XPathLexer)"10/N").nextToken();

Test 163: 
String string = "83.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer("83.1`PQ\"hrIu6Z,uBCoJ");
((XPathLexer)"83.1`PQ\"hrIu6Z,uBCoJ").nextToken();
String string = "95.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 164: 
String string = "//div[@class='container']/p[contains(text(), 'Hello World')]";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[contains(text(), 'Hello World')]");
((XPathLexer)"//div[@class='container']/p[contains(text(), 'Hello World')]").nextToken();
((XPathLexer) string).nextToken();

Test 165: 
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p/strong");
((XPathLexer)"//div[@id='main']/p/strong").nextToken();

Test 166: 
XPathLexer xPathLexer = new XPathLexer("//employee[gender='Male' and salary>50000]/name");
((XPathLexer)"//employee[gender='Male' and salary>50000]/name").nextToken();

Test 167: 
String string = "4>=$=L5]/:,5E";
XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
((XPathLexer)"4>=$=L5]/:,5E").not();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 168: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='example']");
((XPathLexer)"//div[@class='example']").nextToken();

Test 169: 
String string = "@-m\"BP@jl-Ka(+Ot";
XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
((XPathLexer)"@-m\"BP@jl-Ka(+Ot").rightBracket();
((XPathLexer) string).nextToken();
String string = "(/bookstore/book[1]/@author)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 170: 
String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
((XPathLexer)"//book[@author='Jane Austen']").nextToken();
String string = "/bookstore/book[price>35]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//author/last_name";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 171: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]");
((XPathLexer)"/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]").nextToken();

Test 172: 
XPathLexer xPathLexer = new XPathLexer("E29^n");
((XPathLexer)"E29^n").nextToken();

Test 173: 
XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
((XPathLexer)"Gep_3F$n!c(P+7Ew-rH").nextToken();

Test 174: 
String string = "Jr>*Lo";
XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
((XPathLexer)"Jr>*Lo").nextToken();
String string = "/root/child::node()[@attribute=\"value\"][position()=3]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 175: 
XPathLexer xPathLexer = new XPathLexer("KP\"");
((XPathLexer)"KP\"").nextToken();

Test 176: 
String string = "//*[@id='example']";
XPathLexer xPathLexer = new XPathLexer("//*[@id='example']");
((XPathLexer)"//*[@id='example']").dollar();
((XPathLexer) string).nextToken();

Test 177: 
String string = "Mco<";
XPathLexer xPathLexer = new XPathLexer("Mco<");
((XPathLexer)"Mco<").nextToken();
String string = "//book[@id='123']/author";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 178: 
XPathLexer xPathLexer = new XPathLexer("/books/book[author='Jane Doe']/title");
((XPathLexer)"/books/book[author='Jane Doe']/title").nextToken();

Test 179: 
XPathLexer xPathLexer = new XPathLexer("//button[@type='submit' and @value='Login']");
((XPathLexer)"//button[@type='submit' and @value='Login']").nextToken();

Test 180: 
String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
((XPathLexer)"S&$|%)K:o=n").nextToken();
String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 181: 
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer("T|29K");
((XPathLexer)"T|29K").nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 182: 
String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
((XPathLexer)"V2(K@zEW").nextToken();
String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 183: 
String string = "XJD";
XPathLexer xPathLexer = new XPathLexer("XJD");
((XPathLexer)"XJD").nextToken();
((XPathLexer) string).nextToken();

Test 184: 
XPathLexer xPathLexer = new XPathLexer("/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a");
((XPathLexer)"/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a").nextToken();

Test 185: 
String string = "[ (10 + 2) * 5";
XPathLexer xPathLexer = new XPathLexer("[ (10 + 2) * 5");
((XPathLexer)"[ (10 + 2) * 5").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 186: 
String string = "^&aItG'c6-'+8*+WxJ";
XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
((XPathLexer)"^&aItG'c6-'+8*+WxJ").nextToken();
String string = "^(1234567890.123456)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 187: 
XPathLexer xPathLexer = new XPathLexer("/path/to/file.txt");
((XPathLexer)"/path/to/file.txt").nextToken();

Test 188: 
XPathLexer xPathLexer = new XPathLexer("`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()");
((XPathLexer)"`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()").nextToken();

Test 189: 
XPathLexer xPathLexer = new XPathLexer("abc(def)");
((XPathLexer)"abc(def)").nextToken();

Test 190: 
XPathLexer xPathLexer = new XPathLexer("//book[@id=1 and @class='novel']");
((XPathLexer)"//book[@id=1 and @class='novel']").nextToken();

Test 191: 
XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
((XPathLexer)"e@`Bxc3e3&$c *$*").nextToken();

Test 192: 
XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(3.14)");
((XPathLexer)"f*@Sn~TYP5(3.14)").nextToken();

Test 193: 
XPathLexer xPathLexer = new XPathLexer("productName@schemaLocation");
((XPathLexer)"productName@schemaLocation").nextToken();

Test 194: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]");
((XPathLexer)"/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]").nextToken();

Test 195: 
XPathLexer xPathLexer = new XPathLexer("//employee[@salary > 50000]");
((XPathLexer)"//employee[@salary > 50000]").nextToken();

Test 196: 
String string = ".2k>91";
XPathLexer xPathLexer = new XPathLexer(".2k>91");
((XPathLexer)".2k>91").nextToken();
((XPathLexer) string).nextToken();

Test 197: 
XPathLexer xPathLexer = new XPathLexer("n{");
((XPathLexer)"n{").nextToken();

Test 198: 
String string = "ozQN25AIn";
XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
((XPathLexer)"ozQN25AIn").nextToken();
String string = "//div[@class='foo']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 199: 
String string = "pTF:A -tg";
XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
((XPathLexer)"pTF:A -tg").nextToken();
((XPathLexer) string).nextToken();

Test 200: 
XPathLexer xPathLexer = new XPathLexer("qZ");
((XPathLexer)"qZ").nextToken();

Test 201: 
XPathLexer xPathLexer = new XPathLexer("r>R6p:FraWv,lu");
((XPathLexer)"r>R6p:FraWv,lu").nextToken();

Test 202: 
String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
((XPathLexer)"sV<^!8L?1L1X<tb,--/").nextToken();
String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 203: 
XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attribute='value']");
((XPathLexer)"/root/parent/child[@attribute='value']").nextToken();

Test 204: 
XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
((XPathLexer)"uB5B:CYRc^").nextToken();

Test 205: 
XPathLexer xPathLexer = new XPathLexer("/parent/child[@attribute='value']/following-sibling::*[2]");
((XPathLexer)"/parent/child[@attribute='value']/following-sibling::*[2]").nextToken();

Test 206: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").nextToken();
((XPathLexer) string).getPreviousToken();

Test 207: 
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
((XPathLexer)"x7ZM1h}Np>m|.b").nextToken();

Test 208: 
XPathLexer xPathLexer = new XPathLexer("y@lS8s");
((XPathLexer)"y@lS8s").nextToken();

Test 209: 
XPathLexer xPathLexer = new XPathLexer("/root/parent[@attribute='value']");
((XPathLexer)"/root/parent[@attribute='value']").nextToken();

Test 210: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']");
((XPathLexer)"//div[@class='container']").nextToken();

Test 211: 
XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
((XPathLexer)"|7VRF1`@MFzN").nextToken();

Test 212: 
String string = "123(abc~xyz";
XPathLexer xPathLexer = new XPathLexer("123(abc~xyz");
((XPathLexer)"123(abc~xyz").whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = "987(def~mno";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 213: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='example']/div/p[1]/a");
((XPathLexer)"//*[@id='example']/div/p[1]/a").nextToken();

Test 214: 
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p[2]/a");
((XPathLexer)"//div[@id='main']/p[2]/a").nextToken();

Test 215: 
XPathLexer xPathLexer = new XPathLexer("/root/child[gt 5 cm]");
((XPathLexer)"/root/child[gt 5 cm]").nextToken();

Test 216: 
XPathLexer xPathLexer = new XPathLexer("//body[@id='main']/p[2]/strong");
((XPathLexer)"//body[@id='main']/p[2]/strong").nextToken();

Test 217: 
String string = "89>rBa";
XPathLexer xPathLexer = new XPathLexer("89>rBa");
Token leftParen = ((XPathLexer)"89>rBa").leftParen();
((XPathLexer) string).setPreviousToken(leftParen);
((XPathLexer) string).identifierOrOperatorName();

Test 218: 
String string = "abc/def";
XPathLexer xPathLexer = new XPathLexer("abc/def");
((XPathLexer)"abc/def").nextToken();
((XPathLexer) string).nextToken();

Test 219: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);

Test 220: 
String string = "xpathQuery";
XPathLexer xPathLexer = new XPathLexer("xpathQuery");
((XPathLexer)"xpathQuery").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 221: 
String string = "book/author";
XPathLexer xPathLexer = new XPathLexer("book/author");
Token slashes = ((XPathLexer)"book/author").slashes();
((XPathLexer) string).setPreviousToken(slashes);
((XPathLexer) string).identifierOrOperatorName();

Test 222: 
String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
((XPathLexer)"Wf+.8+`cB*ty").nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "sum(age, 2) > 18";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 223: 
XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();

Test 224: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();

Test 225: 
String string = "%4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = ((XPathLexer)"%4X.b,YpQ8=tN/grDI ").star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

Test 226: 
String string = "/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title");
((XPathLexer)"/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title").star();
((XPathLexer) string).at();
Token notEquals = ((XPathLexer) string).notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).nextToken();

Test 227: 
String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = ((XPathLexer)"5B+.").dollar();
((XPathLexer) string).setPreviousToken(dollar);
((XPathLexer) string).nextToken();

Test 228: 
String string = "/bookstore/book";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book");
((XPathLexer)"/bookstore/book").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 229: 
String string = "+dF*_{2E^W";
XPathLexer xPathLexer = new XPathLexer("+dF*_{2E^W");
((XPathLexer)"+dF*_{2E^W").rightBracket();
((XPathLexer) string).operatorName();

Test 230: 
String string = "W.TY>[mAQ9zum_|uw6#";
XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
((XPathLexer)"W.TY>[mAQ9zum_|uw6#").nextToken();
((XPathLexer) string).relationalOperator();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

Test 231: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();

Test 232: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").mod();

Test 233: 
XPathLexer xPathLexer = new XPathLexer("123.456/789");
((XPathLexer)"123.456/789").div();

Test 234: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']");
((XPathLexer)"//book[@id='1234']").and();

Test 235: 
XPathLexer xPathLexer = new XPathLexer("4X.b,YpQ8=tN/grDI ");
((XPathLexer)"4X.b,YpQ8=tN/grDI ").or();

Test 236: 
String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
((XPathLexer)"//book[@author='Jane Austen']").consume();
((XPathLexer) string).rightParen();
((XPathLexer) string).operatorName();

Test 237: 
String string = "8>rBa";
XPathLexer xPathLexer = new XPathLexer("8>rBa");
((XPathLexer)"8>rBa").consume(32);
((XPathLexer) string).whitespace();

Test 238: 
XPathLexer xPathLexer = new XPathLexer("2+2");
((XPathLexer)"2+2").whitespace();

Test 239: 
XPathLexer xPathLexer = new XPathLexer("$4X.b,YpQ8=tN/grDI ");
((XPathLexer)"$4X.b,YpQ8=tN/grDI ").relationalOperator();
String string = "\\$4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);

Test 240: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");

Test 241: 
XPathLexer xPathLexer = new XPathLexer("10/5/3.14");
((XPathLexer)"10/5/3.14").nextToken();

Test 242: 
String string = "/bookstore/book[1]/@id";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[1]/@id");
((XPathLexer)"/bookstore/book[1]/@id").getXPath();
String string = "/bookstore/book[3]/@id";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).getXPath();

Test 243: 
String string = "1234567890abcdef";
XPathLexer xPathLexer = new XPathLexer("1234567890abcdef");
((XPathLexer)"1234567890abcdef").dollar();
((XPathLexer) string).nextToken();

Test 244: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("a-token");
xPathLexer.not();
xPathLexer.LA((int) (Integer) null);

Test 245: 
String string = "7TYTM/-O\"2H:.`.~3M1";
XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
((XPathLexer)"7TYTM/-O\"2H:.`.~3M1").slashes();
((XPathLexer) string).minus();
((XPathLexer) string).star();
((XPathLexer) string).at();
int _int = 13;
((XPathLexer) string).LA(_int);

Test 246: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);
xPathLexer.LA((int) (Integer) null);

Test 247: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();

Test 248: 
String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
((XPathLexer)"h'lO^bxvY;k@t").doubleColon();
((XPathLexer) string).currentPosition();

Test 249: 
XPathLexer xPathLexer = new XPathLexer();

Test 250: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='foo']");
((XPathLexer)"//*[@id='foo']").endPosition();

Test 251: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]");
((XPathLexer)"/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]").endPosition();

Test 252: 
String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
((XPathLexer)"h'lO^bxvY;k@t").doubleColon();
((XPathLexer) string).nextToken();
((XPathLexer) string).getPreviousToken();

Test 253: 
XPathLexer xPathLexer = new XPathLexer("123abc@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
((XPathLexer)"123abc@#$%^&*()_+-=[]{}|;':\"<>,./?`~").getPreviousToken();

Test 254: 
XPathLexer xPathLexer = new XPathLexer("F\u00F6hnzI)");
((XPathLexer)"F\u00F6hnzI)").getXPath();

Test 255: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();

Test 256: 
XPathLexer xPathLexer = new XPathLexer();

Test 257: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
((XPathLexer)"com.werken.saxpath.XPathLexer").hasMoreChars();

Test 258: 
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @pub_year=2018]");
((XPathLexer)"//book[@author='Jane Doe' and @pub_year=2018]").identifier();

Test 259: 

Test 260: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('_');

Test 261: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
((XPathLexer)"8>rBa").isIdentifierStartChar('f');

Test 262: 
XPathLexer xPathLexer = new XPathLexer();

Test 263: 
XPathLexer xPathLexer = new XPathLexer();

Test 264: 
String string = ";Word";
XPathLexer xPathLexer = new XPathLexer(";Word");
((XPathLexer)";Word").consume();
((XPathLexer) string).star();
((XPathLexer) string).or();
String string = "/Books/title";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).star();
((XPathLexer) string).or();


* Generated after the refinement and before minimization 265 tests with total length 815
* test suite isTestSuite: 265
Test 0: 
XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 1: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.pipe();
xPathLexer.nextToken();
Test 2: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.leftBracket();
xPathLexer.not();
xPathLexer.plus();
xPathLexer.nextToken();
Test 3: 
XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 4: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.star();
xPathLexer.nextToken();
Test 5: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();
Test 6: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.consume((-3001));
xPathLexer.currentPosition();
Test 7: 
XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("#<@'<%X");
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("$Q9");
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer("%u4P3D$8");
xPathLexer.nextToken();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D");
xPathLexer.nextToken();
Test 14: 
XPathLexer xPathLexer = new XPathLexer("(!");
xPathLexer.nextToken();
Test 15: 
XPathLexer xPathLexer = new XPathLexer(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 16: 
XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ");
xPathLexer.nextToken();
Test 17: 
XPathLexer xPathLexer = new XPathLexer("<l^-D9a,zB==1Im.");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.consume();
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("/ZP4F4I ]{~5f`zWi8H");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("0H");
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
xPathLexer.nextToken();
Test 22: 
XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~");
xPathLexer.nextToken();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer("6@20NQ");
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("7/N");
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>");
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer(":vsR,m]8?}!WtL)");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer(";?");
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW");
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
xPathLexer.not();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<");
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^");
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer("E29^n");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
xPathLexer.nextToken();
Test 38: 
XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{");
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("KP\"");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer("<L#Jr[]]WV{mM");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("Mco<");
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("N8]WA`]");
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer("O.3");
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.at();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("QbMi7U1iExNzLy ");
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
xPathLexer.nextToken();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("T|29K");
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer("XJD");
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer("Y,");
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 53: 
XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer("_");
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("`X4rWMHQLW'ABS})P");
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("a) (");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer("b4ZBOiHicD~3");
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(");
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer("gn\"0\"P,Hw");
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("ht$$iog/vM");
xPathLexer.nextToken();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("jn)t/oJ=\"LOh;+ ");
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer(".2k>91");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer("n{");
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer("qZ");
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer("r>R6p:FrAWv,lu");
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
xPathLexer.nextToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer("t1Ta3J80/$");
xPathLexer.nextToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer(" vmJv,29'kU");
xPathLexer.nextToken();
Test 73: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
xPathLexer.nextToken();
Test 75: 
XPathLexer xPathLexer = new XPathLexer("y?lS8s");
xPathLexer.nextToken();
Test 76: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("{1)hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
xPathLexer.nextToken();
Test 79: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 81: 
XPathLexer xPathLexer = new XPathLexer(".3[/e>6");
xPathLexer.nextToken();
Test 82: 
XPathLexer xPathLexer = new XPathLexer(".4[>cU");
xPathLexer.nextToken();
Test 83: 
XPathLexer xPathLexer = new XPathLexer(".6");
xPathLexer.nextToken();
Test 84: 
XPathLexer xPathLexer = new XPathLexer(".G6");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 85: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
Token leftParen = xPathLexer.leftParen();
xPathLexer.setPreviousToken(leftParen);
xPathLexer.identifierOrOperatorName();
Test 86: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 87: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 88: 
XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 89: 
XPathLexer xPathLexer = new XPathLexer("?/}NIw#]?9OVi58");
Token slashes = xPathLexer.slashes();
xPathLexer.setPreviousToken(slashes);
xPathLexer.identifierOrOperatorName();
Test 90: 
XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 91: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.identifierOrOperatorName();
Test 92: 
XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();
Test 93: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 94: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 95: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token equals = xPathLexer.equals();
xPathLexer.setPreviousToken(equals);
xPathLexer.identifierOrOperatorName();
Test 96: 
XPathLexer xPathLexer = new XPathLexer("Fkn?RXy}b,H1+");
xPathLexer.star();
xPathLexer.at();
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.nextToken();
Test 97: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = xPathLexer.dollar();
xPathLexer.setPreviousToken(dollar);
xPathLexer.nextToken();
Test 98: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 99: 
XPathLexer xPathLexer = new XPathLexer("<ae,?");
xPathLexer.whitespace();
xPathLexer.operatorName();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.rightBracket();
xPathLexer.operatorName();
Test 101: 
XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
xPathLexer.nextToken();
xPathLexer.relationalOperator();
xPathLexer.pipe();
xPathLexer.nextToken();
Test 102: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();
Test 103: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.mod();
Test 104: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.div();
Test 105: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.and();
Test 106: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.or();
Test 107: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.rightParen();
xPathLexer.operatorName();
Test 108: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.consume(32);
xPathLexer.whitespace();
Test 109: 
XPathLexer xPathLexer = new XPathLexer(") (");
xPathLexer.whitespace();
Test 110: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.relationalOperator();
Test 111: 
XPathLexer xPathLexer = new XPathLexer("<=");
xPathLexer.nextToken();
Test 112: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.plus();
xPathLexer.dots();
Test 113: 
XPathLexer xPathLexer = new XPathLexer("U-92/&,}j!d");
xPathLexer.nextToken();
Test 114: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.getXPath();
Test 115: 
XPathLexer xPathLexer = new XPathLexer("1iHBLR^NacO");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 116: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.not();
xPathLexer.LA(0);
Test 117: 
XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
xPathLexer.slashes();
xPathLexer.minus();
xPathLexer.star();
xPathLexer.at();
xPathLexer.LA(13);
Test 118: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);
Test 119: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();
Test 120: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.currentPosition();
Test 121: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.currentPosition();
Test 122: 
XPathLexer xPathLexer = new XPathLexer("EY'");
xPathLexer.endPosition();
Test 123: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.endPosition();
Test 124: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 125: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.getPreviousToken();
Test 126: 
XPathLexer xPathLexer = new XPathLexer("F?NzI)");
xPathLexer.getXPath();
Test 127: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 128: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 129: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.hasMoreChars();
Test 130: 
XPathLexer xPathLexer = new XPathLexer("*Eu%b(xvX=-e ");
xPathLexer.identifier();
Test 131: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierChar('|');
Test 132: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('W');
Test 133: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierStartChar('5');
Test 134: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.isIdentifierStartChar('f');
Test 135: 
XPathLexer xPathLexer = new XPathLexer("0T?60Yc6};3");
xPathLexer.literal();
Test 136: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.literal();
Test 137: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.number();
Test 138: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.star();
xPathLexer.or();
Test 139: 
String string = "//div[@id='foo']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@id='foo']/p");
((XPathLexer)"//div[@id='foo']/p").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 140: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").pipe();
((XPathLexer) string).nextToken();

Test 141: 
String string = "AA93_v9J9<Y-";
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
((XPathLexer)"AA93_v9J9<Y-").leftBracket();
((XPathLexer) string).not();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();

Test 142: 
XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
((XPathLexer)"]W=%08MZ").nextToken();

Test 143: 
String string = "5.7234.89";
XPathLexer xPathLexer = new XPathLexer("5.7234.89");
((XPathLexer)"5.7234.89").star();
((XPathLexer) string).nextToken();

Test 144: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();
xPathLexer.nextToken();

Test 145: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").consume(1000);
((XPathLexer) string).currentPosition();

Test 146: 
String string = "!cZ87@wChFK%";
XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
((XPathLexer)"!cZ87@wChFK%").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 147: 
String string = "Fkn\"\"0\"P,H17";
XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
((XPathLexer)"Fkn\"\"0\"P,H17").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 148: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']/author/text()");
((XPathLexer)"//book[@id='1234']/author/text()").nextToken();

Test 149: 
XPathLexer xPathLexer = new XPathLexer("//div/p");
((XPathLexer)"//div/p").nextToken();

Test 150: 
XPathLexer xPathLexer = new XPathLexer("!@#$%^&*()_+-=[]{}|;':\"<>,./S4567890abcdef");
((XPathLexer)"!@#$%^&*()_+-=[]{}|;':\"<>,./S4567890abcdef").nextToken();

Test 151: 
XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
((XPathLexer)"&|2K<,.UD").nextToken();

Test 152: 

Test 153: 
XPathLexer xPathLexer = new XPathLexer("(/root/element[@attribute='value'])[3]");
((XPathLexer)"(/root/element[@attribute='value'])[3]").nextToken();

Test 154: 
String string = "sum(1234567890, 987654321)";
XPathLexer xPathLexer = new XPathLexer("sum(1234567890, 987654321)");
((XPathLexer)"sum(1234567890, 987654321)").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 155: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='myelement']/child::div");
((XPathLexer)"//*[@id='myelement']/child::div").nextToken();

Test 156: 
String string = "//a/b[@c='d']";
XPathLexer xPathLexer = new XPathLexer("//a/b[@c='d']");
((XPathLexer)"//a/b[@c='d']").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).nextToken();

Test 157: 
String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
((XPathLexer)"Wf+.8+`cB*ty").nextToken();
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

Test 158: 
XPathLexer xPathLexer = new XPathLexer("0123456789ABCDEF");
((XPathLexer)"0123456789ABCDEF").nextToken();

Test 159: 
XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
((XPathLexer)"1^u:_LWr5bGT|)?bX_4").nextToken();

Test 160: 
String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer("5B+.");
((XPathLexer)"5B+.").nextToken();
((XPathLexer) string).nextToken();

Test 161: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='foo']");
((XPathLexer)"//div[@class='foo']").nextToken();

Test 162: 
XPathLexer xPathLexer = new XPathLexer("10/N");
((XPathLexer)"10/N").nextToken();

Test 163: 
String string = "83.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer("83.1`PQ\"hrIu6Z,uBCoJ");
((XPathLexer)"83.1`PQ\"hrIu6Z,uBCoJ").nextToken();
String string = "95.1`PQ\"hrIu6Z,uBCoJ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 164: 
String string = "//div[@class='container']/p[contains(text(), 'Hello World')]";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[contains(text(), 'Hello World')]");
((XPathLexer)"//div[@class='container']/p[contains(text(), 'Hello World')]").nextToken();
((XPathLexer) string).nextToken();

Test 165: 
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p/strong");
((XPathLexer)"//div[@id='main']/p/strong").nextToken();

Test 166: 
XPathLexer xPathLexer = new XPathLexer("//employee[gender='Male' and salary>50000]/name");
((XPathLexer)"//employee[gender='Male' and salary>50000]/name").nextToken();

Test 167: 
String string = "4>=$=L5]/:,5E";
XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
((XPathLexer)"4>=$=L5]/:,5E").not();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 168: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='example']");
((XPathLexer)"//div[@class='example']").nextToken();

Test 169: 
String string = "@-m\"BP@jl-Ka(+Ot";
XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
((XPathLexer)"@-m\"BP@jl-Ka(+Ot").rightBracket();
((XPathLexer) string).nextToken();
String string = "(/bookstore/book[1]/@author)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 170: 
String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
((XPathLexer)"//book[@author='Jane Austen']").nextToken();
String string = "/bookstore/book[price>35]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "//author/last_name";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 171: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]");
((XPathLexer)"/bookstore/book[author='Harry Potter and the Philosopher's Stone' and year>2015]").nextToken();

Test 172: 
XPathLexer xPathLexer = new XPathLexer("E29^n");
((XPathLexer)"E29^n").nextToken();

Test 173: 
XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
((XPathLexer)"Gep_3F$n!c(P+7Ew-rH").nextToken();

Test 174: 
String string = "Jr>*Lo";
XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
((XPathLexer)"Jr>*Lo").nextToken();
String string = "/root/child::node()[@attribute=\"value\"][position()=3]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 175: 
XPathLexer xPathLexer = new XPathLexer("KP\"");
((XPathLexer)"KP\"").nextToken();

Test 176: 
String string = "//*[@id='example']";
XPathLexer xPathLexer = new XPathLexer("//*[@id='example']");
((XPathLexer)"//*[@id='example']").dollar();
((XPathLexer) string).nextToken();

Test 177: 
String string = "Mco<";
XPathLexer xPathLexer = new XPathLexer("Mco<");
((XPathLexer)"Mco<").nextToken();
String string = "//book[@id='123']/author";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 178: 
XPathLexer xPathLexer = new XPathLexer("/books/book[author='Jane Doe']/title");
((XPathLexer)"/books/book[author='Jane Doe']/title").nextToken();

Test 179: 
XPathLexer xPathLexer = new XPathLexer("//button[@type='submit' and @value='Login']");
((XPathLexer)"//button[@type='submit' and @value='Login']").nextToken();

Test 180: 
String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
((XPathLexer)"S&$|%)K:o=n").nextToken();
String string = "S&$|%)K:o=n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 181: 
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer("T|29K");
((XPathLexer)"T|29K").nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "T|29K";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 182: 
String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
((XPathLexer)"V2(K@zEW").nextToken();
String string = "V2(K@zEW";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 183: 
String string = "XJD";
XPathLexer xPathLexer = new XPathLexer("XJD");
((XPathLexer)"XJD").nextToken();
((XPathLexer) string).nextToken();

Test 184: 
XPathLexer xPathLexer = new XPathLexer("/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a");
((XPathLexer)"/html/body/div[@id='container']/ul[@class='menu']/li[@class='active']/a").nextToken();

Test 185: 
String string = "[ (10 + 2) * 5";
XPathLexer xPathLexer = new XPathLexer("[ (10 + 2) * 5");
((XPathLexer)"[ (10 + 2) * 5").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 186: 
String string = "^&aItG'c6-'+8*+WxJ";
XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
((XPathLexer)"^&aItG'c6-'+8*+WxJ").nextToken();
String string = "^(1234567890.123456)";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 187: 
XPathLexer xPathLexer = new XPathLexer("/path/to/file.txt");
((XPathLexer)"/path/to/file.txt").nextToken();

Test 188: 
XPathLexer xPathLexer = new XPathLexer("`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()");
((XPathLexer)"`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-*/+()").nextToken();

Test 189: 
XPathLexer xPathLexer = new XPathLexer("abc(def)");
((XPathLexer)"abc(def)").nextToken();

Test 190: 
XPathLexer xPathLexer = new XPathLexer("//book[@id=1 and @class='novel']");
((XPathLexer)"//book[@id=1 and @class='novel']").nextToken();

Test 191: 
XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
((XPathLexer)"e@`Bxc3e3&$c *$*").nextToken();

Test 192: 
XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(3.14)");
((XPathLexer)"f*@Sn~TYP5(3.14)").nextToken();

Test 193: 
XPathLexer xPathLexer = new XPathLexer("productName@schemaLocation");
((XPathLexer)"productName@schemaLocation").nextToken();

Test 194: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]");
((XPathLexer)"/bookstore/book[@author='J. R. R. Tolkien' and @year>1950]").nextToken();

Test 195: 
XPathLexer xPathLexer = new XPathLexer("//employee[@salary > 50000]");
((XPathLexer)"//employee[@salary > 50000]").nextToken();

Test 196: 
String string = ".2k>91";
XPathLexer xPathLexer = new XPathLexer(".2k>91");
((XPathLexer)".2k>91").nextToken();
((XPathLexer) string).nextToken();

Test 197: 
XPathLexer xPathLexer = new XPathLexer("n{");
((XPathLexer)"n{").nextToken();

Test 198: 
String string = "ozQN25AIn";
XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
((XPathLexer)"ozQN25AIn").nextToken();
String string = "//div[@class='foo']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 199: 
String string = "pTF:A -tg";
XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
((XPathLexer)"pTF:A -tg").nextToken();
((XPathLexer) string).nextToken();

Test 200: 
XPathLexer xPathLexer = new XPathLexer("qZ");
((XPathLexer)"qZ").nextToken();

Test 201: 
XPathLexer xPathLexer = new XPathLexer("r>R6p:FraWv,lu");
((XPathLexer)"r>R6p:FraWv,lu").nextToken();

Test 202: 
String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
((XPathLexer)"sV<^!8L?1L1X<tb,--/").nextToken();
String string = "sV<^!8L?1L1X<tb,--/";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

Test 203: 
XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attribute='value']");
((XPathLexer)"/root/parent/child[@attribute='value']").nextToken();

Test 204: 
XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
((XPathLexer)"uB5B:CYRc^").nextToken();

Test 205: 
XPathLexer xPathLexer = new XPathLexer("/parent/child[@attribute='value']/following-sibling::*[2]");
((XPathLexer)"/parent/child[@attribute='value']/following-sibling::*[2]").nextToken();

Test 206: 
String string = "wI>)+_6H";
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
((XPathLexer)"wI>)+_6H").nextToken();
((XPathLexer) string).getPreviousToken();

Test 207: 
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
((XPathLexer)"x7ZM1h}Np>m|.b").nextToken();

Test 208: 
XPathLexer xPathLexer = new XPathLexer("y@lS8s");
((XPathLexer)"y@lS8s").nextToken();

Test 209: 
XPathLexer xPathLexer = new XPathLexer("/root/parent[@attribute='value']");
((XPathLexer)"/root/parent[@attribute='value']").nextToken();

Test 210: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']");
((XPathLexer)"//div[@class='container']").nextToken();

Test 211: 
XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
((XPathLexer)"|7VRF1`@MFzN").nextToken();

Test 212: 
String string = "123(abc~xyz";
XPathLexer xPathLexer = new XPathLexer("123(abc~xyz");
((XPathLexer)"123(abc~xyz").whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = "987(def~mno";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();
((XPathLexer) string).star();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 213: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='example']/div/p[1]/a");
((XPathLexer)"//*[@id='example']/div/p[1]/a").nextToken();

Test 214: 
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p[2]/a");
((XPathLexer)"//div[@id='main']/p[2]/a").nextToken();

Test 215: 
XPathLexer xPathLexer = new XPathLexer("/root/child[gt 5 cm]");
((XPathLexer)"/root/child[gt 5 cm]").nextToken();

Test 216: 
XPathLexer xPathLexer = new XPathLexer("//body[@id='main']/p[2]/strong");
((XPathLexer)"//body[@id='main']/p[2]/strong").nextToken();

Test 217: 
String string = "89>rBa";
XPathLexer xPathLexer = new XPathLexer("89>rBa");
Token leftParen = ((XPathLexer)"89>rBa").leftParen();
((XPathLexer) string).setPreviousToken(leftParen);
((XPathLexer) string).identifierOrOperatorName();

Test 218: 
String string = "abc/def";
XPathLexer xPathLexer = new XPathLexer("abc/def");
((XPathLexer)"abc/def").nextToken();
((XPathLexer) string).nextToken();

Test 219: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);

Test 220: 
String string = "xpathQuery";
XPathLexer xPathLexer = new XPathLexer("xpathQuery");
((XPathLexer)"xpathQuery").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 221: 
String string = "book/author";
XPathLexer xPathLexer = new XPathLexer("book/author");
Token slashes = ((XPathLexer)"book/author").slashes();
((XPathLexer) string).setPreviousToken(slashes);
((XPathLexer) string).identifierOrOperatorName();

Test 222: 
String string = "Wf+.8+`cB*ty";
XPathLexer xPathLexer = new XPathLexer("Wf+.8+`cB*ty");
((XPathLexer)"Wf+.8+`cB*ty").nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "sum(age, 2) > 18";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 223: 
XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();

Test 224: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();

Test 225: 
String string = "%4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = ((XPathLexer)"%4X.b,YpQ8=tN/grDI ").star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

Test 226: 
String string = "/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title");
((XPathLexer)"/bookstore/book[@author=\"J.K. Rowling\" and @year>1997]/title").star();
((XPathLexer) string).at();
Token notEquals = ((XPathLexer) string).notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).nextToken();

Test 227: 
String string = "5B+.";
XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = ((XPathLexer)"5B+.").dollar();
((XPathLexer) string).setPreviousToken(dollar);
((XPathLexer) string).nextToken();

Test 228: 
String string = "/bookstore/book";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book");
((XPathLexer)"/bookstore/book").nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 229: 
String string = "+dF*_{2E^W";
XPathLexer xPathLexer = new XPathLexer("+dF*_{2E^W");
((XPathLexer)"+dF*_{2E^W").rightBracket();
((XPathLexer) string).operatorName();

Test 230: 
String string = "W.TY>[mAQ9zum_|uw6#";
XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
((XPathLexer)"W.TY>[mAQ9zum_|uw6#").nextToken();
((XPathLexer) string).relationalOperator();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

Test 231: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();

Test 232: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").mod();

Test 233: 
XPathLexer xPathLexer = new XPathLexer("123.456/789");
((XPathLexer)"123.456/789").div();

Test 234: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']");
((XPathLexer)"//book[@id='1234']").and();

Test 235: 
XPathLexer xPathLexer = new XPathLexer("4X.b,YpQ8=tN/grDI ");
((XPathLexer)"4X.b,YpQ8=tN/grDI ").or();

Test 236: 
String string = "//book[@author='Jane Austen']";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Austen']");
((XPathLexer)"//book[@author='Jane Austen']").consume();
((XPathLexer) string).rightParen();
((XPathLexer) string).operatorName();

Test 237: 
String string = "8>rBa";
XPathLexer xPathLexer = new XPathLexer("8>rBa");
((XPathLexer)"8>rBa").consume(32);
((XPathLexer) string).whitespace();

Test 238: 
XPathLexer xPathLexer = new XPathLexer("2+2");
((XPathLexer)"2+2").whitespace();

Test 239: 
XPathLexer xPathLexer = new XPathLexer("$4X.b,YpQ8=tN/grDI ");
((XPathLexer)"$4X.b,YpQ8=tN/grDI ").relationalOperator();
String string = "\\$4X.b,YpQ8=tN/grDI ";
XPathLexer xPathLexer = new XPathLexer(string);

Test 240: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");

Test 241: 
XPathLexer xPathLexer = new XPathLexer("10/5/3.14");
((XPathLexer)"10/5/3.14").nextToken();

Test 242: 
String string = "/bookstore/book[1]/@id";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[1]/@id");
((XPathLexer)"/bookstore/book[1]/@id").getXPath();
String string = "/bookstore/book[3]/@id";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).getXPath();

Test 243: 
String string = "1234567890abcdef";
XPathLexer xPathLexer = new XPathLexer("1234567890abcdef");
((XPathLexer)"1234567890abcdef").dollar();
((XPathLexer) string).nextToken();

Test 244: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("a-token");
xPathLexer.not();
xPathLexer.LA((int) (Integer) null);

Test 245: 
String string = "7TYTM/-O\"2H:.`.~3M1";
XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
((XPathLexer)"7TYTM/-O\"2H:.`.~3M1").slashes();
((XPathLexer) string).minus();
((XPathLexer) string).star();
((XPathLexer) string).at();
int _int = 13;
((XPathLexer) string).LA(_int);

Test 246: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);
xPathLexer.LA((int) (Integer) null);

Test 247: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();

Test 248: 
String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
((XPathLexer)"h'lO^bxvY;k@t").doubleColon();
((XPathLexer) string).currentPosition();

Test 249: 
XPathLexer xPathLexer = new XPathLexer();

Test 250: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='foo']");
((XPathLexer)"//*[@id='foo']").endPosition();

Test 251: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]");
((XPathLexer)"/bookstore/book[@author=\"J.K. Rowling\" and @price<30.00]").endPosition();

Test 252: 
String string = "h'lO^bxvY;k@t";
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
((XPathLexer)"h'lO^bxvY;k@t").doubleColon();
((XPathLexer) string).nextToken();
((XPathLexer) string).getPreviousToken();

Test 253: 
XPathLexer xPathLexer = new XPathLexer("123abc@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
((XPathLexer)"123abc@#$%^&*()_+-=[]{}|;':\"<>,./?`~").getPreviousToken();

Test 254: 
XPathLexer xPathLexer = new XPathLexer("F\u00F6hnzI)");
((XPathLexer)"F\u00F6hnzI)").getXPath();

Test 255: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();

Test 256: 
XPathLexer xPathLexer = new XPathLexer();

Test 257: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
((XPathLexer)"com.werken.saxpath.XPathLexer").hasMoreChars();

Test 258: 
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @pub_year=2018]");
((XPathLexer)"//book[@author='Jane Doe' and @pub_year=2018]").identifier();

Test 259: 

Test 260: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('_');

Test 261: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
((XPathLexer)"8>rBa").isIdentifierStartChar('f');

Test 262: 
XPathLexer xPathLexer = new XPathLexer();

Test 263: 
XPathLexer xPathLexer = new XPathLexer();

Test 264: 
String string = ";Word";
XPathLexer xPathLexer = new XPathLexer(";Word");
((XPathLexer)";Word").consume();
((XPathLexer) string).star();
((XPathLexer) string).or();
String string = "/Books/title";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).star();
((XPathLexer) string).or();


* Minimizing test suite
* test suite isTestSuite: 137
Test 0: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.comma();
Test 1: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.LA(26);
Test 2: 
XPathLexer xPathLexer = new XPathLexer("(!");
xPathLexer.nextToken();
Test 3: 
XPathLexer xPathLexer = new XPathLexer();
Token pipe = xPathLexer.pipe();
xPathLexer.setPreviousToken(pipe);
xPathLexer.identifierOrOperatorName();
Test 4: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 5: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.rightBracket();
xPathLexer.operatorName();
Test 6: 
XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 7: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.nextToken();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("$Q9");
xPathLexer.nextToken();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW");
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ");
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.consume(32);
xPathLexer.whitespace();
Test 14: 
XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>");
xPathLexer.nextToken();
Test 15: 
XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 16: 
XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 17: 
XPathLexer xPathLexer = new XPathLexer("#<@'<%X");
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer("%u4P3D$8");
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D");
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 22: 
XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("<l^-D9a,zB==1Im.");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("/ZP4F4I ]{~5f`zWi8H");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("0H");
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~");
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.leftBracket();
xPathLexer.not();
xPathLexer.plus();
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.star();
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("6@20NQ");
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("7/N");
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer(":vsR,m]8?}!WtL)");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer(";?");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 38: 
XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<");
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("E29^n");
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{");
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.pipe();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer("KP\"");
xPathLexer.nextToken();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("<L#Jr[]]WV{mM");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("Mco<");
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer("N8]WA`]");
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer("O.3");
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer("7(D8~P");
xPathLexer.whitespace();
xPathLexer.star();
xPathLexer.at();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 53: 
XPathLexer xPathLexer = new XPathLexer("QbMi7U1iExNzLy ");
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer("S&$|%)K:o=n");
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("T|29K");
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("U-92/&,}j!d");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer("V2(K@zEW");
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer(" Wf+.8+`cB*ty");
xPathLexer.nextToken();
xPathLexer.consume();
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer("XJD");
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer("Y,");
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("]W=%08MZ");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("^&aItG'c6-'+8*+WxJ");
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer("_");
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer("`X4rWMHQLW'ABS})P");
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer("a) (");
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer("b4ZBOiHicD~3");
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer("e@`Bxc3e3&$c *$*");
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer("f*@Sn~TYP5(");
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer("gn\"0\"P,Hw");
xPathLexer.nextToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer("ht$$iog/vM");
xPathLexer.nextToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("1iHBLR^NacO");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer("jn)t/oJ=\"LOh;+ ");
xPathLexer.nextToken();
Test 73: 
XPathLexer xPathLexer = new XPathLexer(".2k>91");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("W.TY>[mAQ9zum_|uw6#");
xPathLexer.nextToken();
xPathLexer.relationalOperator();
xPathLexer.pipe();
xPathLexer.nextToken();
Test 75: 
XPathLexer xPathLexer = new XPathLexer("n{");
xPathLexer.nextToken();
Test 76: 
XPathLexer xPathLexer = new XPathLexer("ozQN25AIn");
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("pTF:A -tg");
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("qZ");
xPathLexer.nextToken();
Test 79: 
XPathLexer xPathLexer = new XPathLexer("r>R6p:FrAWv,lu");
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer("sV<^!8L?1L1X<tb,--/");
xPathLexer.nextToken();
Test 81: 
XPathLexer xPathLexer = new XPathLexer("t1Ta3J80/$");
xPathLexer.nextToken();
Test 82: 
XPathLexer xPathLexer = new XPathLexer("uB5B:CYRc^");
xPathLexer.nextToken();
Test 83: 
XPathLexer xPathLexer = new XPathLexer(" vmJv,29'kU");
xPathLexer.nextToken();
Test 84: 
XPathLexer xPathLexer = new XPathLexer("x7ZM1h}Np>m|.b");
xPathLexer.nextToken();
Test 85: 
XPathLexer xPathLexer = new XPathLexer("y?lS8s");
xPathLexer.nextToken();
Test 86: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.nextToken();
Test 87: 
XPathLexer xPathLexer = new XPathLexer("{1)hrIu6Z,uBCoJ");
xPathLexer.nextToken();
Test 88: 
XPathLexer xPathLexer = new XPathLexer("|7VRF1`@MFzN");
xPathLexer.nextToken();
Test 89: 
XPathLexer xPathLexer = new XPathLexer(".3[/e>6");
xPathLexer.nextToken();
Test 90: 
XPathLexer xPathLexer = new XPathLexer(".4[>cU");
xPathLexer.nextToken();
Test 91: 
XPathLexer xPathLexer = new XPathLexer(".6");
xPathLexer.nextToken();
Test 92: 
XPathLexer xPathLexer = new XPathLexer(".G6");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 93: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
Token leftParen = xPathLexer.leftParen();
xPathLexer.setPreviousToken(leftParen);
xPathLexer.identifierOrOperatorName();
Test 94: 
XPathLexer xPathLexer = new XPathLexer("4>=$=L5]/:,5E");
xPathLexer.not();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 95: 
XPathLexer xPathLexer = new XPathLexer("?/}NIw#]?9OVi58");
Token slashes = xPathLexer.slashes();
xPathLexer.setPreviousToken(slashes);
xPathLexer.identifierOrOperatorName();
Test 96: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.identifierOrOperatorName();
Test 97: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.not();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 98: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 99: 
XPathLexer xPathLexer = new XPathLexer("Fkn?\"XU}\"b,H17");
Token equals = xPathLexer.equals();
xPathLexer.setPreviousToken(equals);
xPathLexer.identifierOrOperatorName();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("Fkn?RXy}b,H1+");
xPathLexer.star();
xPathLexer.at();
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.nextToken();
Test 101: 
XPathLexer xPathLexer = new XPathLexer("5B+.");
Token dollar = xPathLexer.dollar();
xPathLexer.setPreviousToken(dollar);
xPathLexer.nextToken();
Test 102: 
XPathLexer xPathLexer = new XPathLexer("<ae,?");
xPathLexer.whitespace();
xPathLexer.operatorName();
Test 103: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.setXPath("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.identifierOrOperatorName();
Test 104: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.mod();
Test 105: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.div();
Test 106: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.and();
Test 107: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.or();
Test 108: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.rightParen();
xPathLexer.operatorName();
Test 109: 
XPathLexer xPathLexer = new XPathLexer(") (");
xPathLexer.whitespace();
Test 110: 
XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
xPathLexer.relationalOperator();
Test 111: 
XPathLexer xPathLexer = new XPathLexer("<=");
xPathLexer.nextToken();
Test 112: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.colon();
xPathLexer.plus();
xPathLexer.dots();
Test 113: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 114: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
xPathLexer.not();
xPathLexer.LA(0);
Test 115: 
XPathLexer xPathLexer = new XPathLexer("7TYTM/-O\"2H:.`.~3M1");
xPathLexer.slashes();
xPathLexer.minus();
xPathLexer.star();
xPathLexer.at();
xPathLexer.LA(13);
Test 116: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.consume((-3001));
xPathLexer.currentPosition();
Test 117: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.currentPosition();
Test 118: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.currentPosition();
Test 119: 
XPathLexer xPathLexer = new XPathLexer("EY'");
xPathLexer.endPosition();
Test 120: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.endPosition();
Test 121: 
XPathLexer xPathLexer = new XPathLexer("h'lO^bxvY;k@t");
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 122: 
XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 123: 
XPathLexer xPathLexer = new XPathLexer("zi0$5a<+:");
xPathLexer.getPreviousToken();
Test 124: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.getXPath();
Test 125: 
XPathLexer xPathLexer = new XPathLexer("F?NzI)");
xPathLexer.getXPath();
Test 126: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 127: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.hasMoreChars();
Test 128: 
XPathLexer xPathLexer = new XPathLexer("*Eu%b(xvX=-e ");
xPathLexer.identifier();
Test 129: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierChar('|');
Test 130: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierChar('W');
Test 131: 
XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.isIdentifierStartChar('5');
Test 132: 
XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.isIdentifierStartChar('f');
Test 133: 
XPathLexer xPathLexer = new XPathLexer("0T?60Yc6};3");
xPathLexer.literal();
Test 134: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.literal();
Test 135: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.number();
Test 136: 
XPathLexer xPathLexer = new XPathLexer(";Wor");
xPathLexer.consume();
xPathLexer.star();
xPathLexer.or();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 484
* Number of covered goals: 428
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 250
* Number of covered goals: 236
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 142
* Number of covered goals: 56
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 484
* Number of covered goals: 428
* Generated 137 tests with total length 361
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token comma = xPathLexer.comma();
assertEquals(32, comma.getTokenType());


** It was a parseable test case! 
refined test name is: parseCommaTest
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
char LA = xPathLexer.LA(26);
assertEquals('\uFFFF', LA);


** It was a parseable test case! 
refined test name is: testLookaheadTokenWithDistanceOf26
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("(!");
Token nextToken = xPathLexer.nextToken();
assertEquals("(", nextToken.getTokenText());
assertEquals(1, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerNextTokenSingleLeftParenthesis
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token arg0 = xPathLexer.pipe();
xPathLexer.setPreviousToken(arg0);
assertEquals(17, arg0.getTokenType());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testPipedInputShouldProduceCorrectTokens
* Compiling Tests
refined test name is: testXPathLexerpipeCharacters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("[ (");
Token nextToken = xPathLexer.nextToken();
assertEquals("[", nextToken.getTokenText());
assertEquals(3, nextToken.getTokenType());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals(15, identifierOrOperatorName.getTokenType());
assertEquals("", identifierOrOperatorName.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsExpectedTokenTypeAndText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("+dfN*{2e^W");
xPathLexer.rightBracket();
Token operatorName = xPathLexer.operatorName();
assertNull(operatorName);


** It was a parseable test case! 
refined test name is: testWhenOperatorNameIsNullShouldReturnNull
* Compiling Tests
refined test name is: testOperatorNameShouldBeNullWhenNotPresent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("@-m\"BP@jl-Ka(+Ot");
Token rightBracket = xPathLexer.rightBracket();
assertEquals("", rightBracket.getTokenText());
assertEquals(4, rightBracket.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("@", nextToken.getTokenText());
assertEquals(16, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testRightBracketTokenizer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("com.werken.saxpath.Token");
Token nextToken = xPathLexer.nextToken();
assertEquals("com.werken.saxpath.Token", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenclass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("$Q9");
Token nextToken = xPathLexer.nextToken();
assertEquals("$", nextToken.getTokenText());
assertEquals(26, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerNextTokenWithDollarSignAndDigit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("=0n 4fx_eqfg:jnaW");
Token nextToken = xPathLexer.nextToken();
assertEquals(21, nextToken.getTokenType());
assertEquals("=", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenOperator
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("*6p%A(xvV`-e ");
Token nextToken = xPathLexer.nextToken();
assertEquals(20, nextToken.getTokenType());
assertEquals("*", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testWildcardTokenization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token arg0 = xPathLexer.minus();
xPathLexer.setPreviousToken(arg0);
assertEquals(6, arg0.getTokenType());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testMinusAndIdentifierOrOperatorName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("8>rBa");
xPathLexer.consume(32);
Token whitespace = xPathLexer.whitespace();
assertEquals("", whitespace.getTokenText());
assertEquals((-2), whitespace.getTokenType());


** It was a parseable test case! 
refined test name is: testConsumeWhitespaceChar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(" 9;HKGM]W}>");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("9", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testTokenizeInputStringWithXPathLexer
* Compiling Tests
refined test name is: testTokenizeInputStringWithXPathLexer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("!cZ87@wChFK%");
xPathLexer.nextToken();
Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertNull(identifierOrOperatorName);


** It was a parseable test case! 
refined test name is: testInvalidXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("Fkn\"\"0\"P,H17");
xPathLexer.nextToken();
xPathLexer.nextToken();
Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertNull(identifierOrOperatorName);


** It was a parseable test case! 
refined test name is: testNextTokenOnXPathLexerWithValidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("#<@'<%X");
Token nextToken = xPathLexer.nextToken();
assertEquals("#<@'<%X", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsExpectedTokenText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("%u4P3D$8");
Token nextToken = xPathLexer.nextToken();
assertEquals("%u4P3D$8", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("&|2K<,.UD");
Token nextToken = xPathLexer.nextToken();
assertEquals("&|2K<,.UD", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerWithInvalidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("'=V*JbyQ}7D");
Token nextToken = xPathLexer.nextToken();
assertEquals((-1), nextToken.getTokenType());
assertEquals("", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(")");
xPathLexer.nextToken();
Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertNull(identifierOrOperatorName);


** It was a parseable test case! 
refined test name is: testInvalidInputThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(",rBByng?D#A@m*ZmQ4");
Token nextToken = xPathLexer.nextToken();
assertEquals(32, nextToken.getTokenType());
assertEquals(",", nextToken.getTokenText());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals("rBByng", identifierOrOperatorName.getTokenText());
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathTokenization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(".1`)\"hrIu6Z,uBCoJ");
Token nextToken = xPathLexer.nextToken();
assertEquals(".1", nextToken.getTokenText());
assertEquals(31, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("0H");
Token nextToken = xPathLexer.nextToken();
assertEquals("0", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerNextTokenInteger
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("1^u:_LWr5bGT|)?bX_4");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("1", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenNumericalValueReturns30
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("2xi5My<:K}7Ri]e?~");
Token nextToken = xPathLexer.nextToken();
assertEquals("2", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidQuery
* Compiling Tests
refined test name is: testXPathLexerNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
Token leftBracket = xPathLexer.leftBracket();
assertEquals("A", leftBracket.getTokenText());
assertEquals(3, leftBracket.getTokenType());

Token not = xPathLexer.not();
assertEquals("A", not.getTokenText());
assertEquals(23, not.getTokenType());

Token plus = xPathLexer.plus();
assertEquals("9", plus.getTokenText());
assertEquals(5, plus.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("3", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerWithLeftBracketNotAndPlus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("%4X.b,YpQ8=tN/grDI ");
Token star = xPathLexer.star();
assertEquals("%", star.getTokenText());
assertEquals(20, star.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("4", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerTokenization
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("6@20NQ");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("6", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenwithValidInputreturnsNumberToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("7/N");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("7", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testGetNextTokenFromValidXPath
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("83.1`)Q\"hrIu6Z,uBCoJ");
Token nextToken = xPathLexer.nextToken();
assertEquals("83.1", nextToken.getTokenText());
assertEquals(31, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";?");
Token nextToken = xPathLexer.nextToken();
assertEquals(";?", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(">>c3ch;ZZNNPP");
Token nextToken = xPathLexer.nextToken();
assertEquals(9, nextToken.getTokenType());
assertEquals(">", nextToken.getTokenText());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals("", identifierOrOperatorName.getTokenText());
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?3DDD|)B<");
Token nextToken = xPathLexer.nextToken();
assertEquals("?3DDD|)B<", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLexerliteralString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("AA93_v9J9<Y-");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("AA93_v9J9", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsCorrectTokenTypeAndText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("C97`T3|sv}{O^");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("C97", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLexerNextTokenNumericValue
* Compiling Tests
refined test name is: testLexerExtractsNumericValueToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("7(D8~P");
Token whitespace = xPathLexer.whitespace();
assertEquals((-2), whitespace.getTokenType());
assertEquals("", whitespace.getTokenText());

Token star = xPathLexer.star();
assertEquals(20, star.getTokenType());
assertEquals("(", star.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("D8", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testTokenizationOfXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("E29^n");
Token nextToken = xPathLexer.nextToken();
assertEquals("E29", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsNumericConstant
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("Gep_3F$n!c(P+7Ew-rH");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("Gep_3F", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testTokenizingXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("HY\"!pd|;R{");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("HY", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenstringLiteralHY
* Compiling Tests
refined test name is: testNextTokenTypeAndText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("wI>)+_6H");
Token pipe = xPathLexer.pipe();
assertEquals("w", pipe.getTokenText());
assertEquals(17, pipe.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("I", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerpipesAndIdentifiers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("Jr>*Lo");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("Jr", nextToken.getTokenText());


** It was a parseable test case! 
* Computation finished
