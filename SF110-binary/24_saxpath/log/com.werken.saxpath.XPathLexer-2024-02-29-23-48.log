* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.werken.saxpath.XPathLexer
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/24_saxpath/evosuite-files/evosuite.properties
* Connecting to master process on port 11262
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class com.werken.saxpath.XPathLexer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1404
* Using seed 1709250513524
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 638 / 1404
[Progress:>                             0%] [Cov:====================>              59%][Progress:>                             1%] [Cov:=====================>             61%][Progress:>                             1%] [Cov:======================>            63%][Progress:>                             2%] [Cov:======================>            64%][Progress:>                             2%] [Cov:=======================>           67%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          69%][Progress:=>                            4%] [Cov:========================>          71%][Progress:=>                            4%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         72%][Progress:=>                            5%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         73%][Progress:=>                            6%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           7%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           8%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:=========================>         74%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:==>                           9%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          10%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        75%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          12%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        76%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        18%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:=====>                        19%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       78%][Progress:======>                       20%] [Cov:===========================>       78%][Progress:======>                       21%] [Cov:===========================>       78%][Progress:======>                       21%] [Cov:===========================>       78%][Progress:======>                       21%] [Cov:===========================>       78%][Progress:======>                       21%] [Cov:===========================>       78%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       22%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:======>                       23%] [Cov:===========================>       78%][Progress:=======>                      24%] [Cov:===========================>       78%][Progress:=======>                      24%] [Cov:===========================>       78%][Progress:=======>                      24%] [Cov:===========================>       78%][Progress:=======>                      24%] [Cov:===========================>       78%][Progress:=======>                      25%] [Cov:===========================>       78%][Progress:=======>                      25%] [Cov:===========================>       78%][Progress:=======>                      25%] [Cov:===========================>       78%][Progress:=======>                      25%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       78%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:========================>     83%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 104s and 456 generations, 177921 statements, best individual has fitness: 237.0
* Generated before the refinement 114 tests with total length 386
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28")
statement is: identifier()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifier = xPathLexer.identifier()
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: plus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token plus = xPathLexer.plus()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.identifier();
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.identifier();// This token represents the identifier "ID1"

        xPathLexer.doubleColon();// This token represents the double colon operator "::"

        xPathLexer.nextToken();// This token represents the next token in the input stream

        xPathLexer.plus();// This token represents the plus sign "+"

        xPathLexer.identifierOrOperatorName();// This token represents either the identifier "ID2" or the operator name "OP1", depending on the context of the input stream }}

    }
}
statement is: xPathLexer.identifier()// This token represents the identifier "ID1"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifier()// This token represents the identifier "ID1"
 target is: xPathLexer method is: identifier()
statement is: xPathLexer.doubleColon()// This token represents the double colon operator "::"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon()// This token represents the double colon operator "::"
 target is: xPathLexer method is: doubleColon()
statement is: xPathLexer.nextToken()// This token represents the next token in the input stream
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// This token represents the next token in the input stream
 target is: xPathLexer method is: nextToken()
statement is: xPathLexer.plus()// This token represents the plus sign "+"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus()// This token represents the plus sign "+"
 target is: xPathLexer method is: plus()
statement is: xPathLexer.identifierOrOperatorName()// This token represents either the identifier "ID2" or the operator name "OP1", depending on the context of the input stream }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName()// This token represents either the identifier "ID2" or the operator name "OP1", depending on the context of the input stream }}
 target is: xPathLexer method is: identifierOrOperatorName()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("[ (")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("[ (");
        xPathLexer.nextToken();// returns the token '['

        xPathLexer.nextToken();// returns the token '('

        xPathLexer.identifierOrOperatorName();// returns the token 'OR' }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("[ ("), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// returns the token '['
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns the token '['
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns the token '('
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns the token '('
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName()// returns the token 'OR' }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName()// returns the token 'OR' }}
 target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "[ (";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: minus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token minus = xPathLexer.minus()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
        xPathLexer.nextToken();
        xPathLexer.dollar();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.minus();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.minus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.minus() target is: xPathLexer method is: minus()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: minus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: colon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token colon = xPathLexer.colon()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.colon();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.lex(":");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.lex(":"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.lex(":") target is: xPathLexer method is: lex(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("v3!t#sa=:t#");
        xPathLexer.nextToken();// returns token of type INTEGER with value 3

        xPathLexer.nextToken();// returns token of type STRING with value "A"

        xPathLexer.nextToken();// returns token of type IDENTIFIER with value "SA"

        xPathLexer.nextToken();// returns token of type EQUALS with value "="

        xPathLexer.nextToken();// returns token of type COLON with value ":"

        xPathLexer.nextToken();// returns token of type STRING with value "B"

        xPathLexer.nextToken();// returns token of type IDENTIFIER with value "SA" }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("v3!t#sa=:t#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// returns token of type INTEGER with value 3
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type INTEGER with value 3
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type STRING with value "A"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type STRING with value "A"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type IDENTIFIER with value "SA"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type IDENTIFIER with value "SA"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type EQUALS with value "="
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type EQUALS with value "="
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type COLON with value ":"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type COLON with value ":"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type STRING with value "B"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type STRING with value "B"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns token of type IDENTIFIER with value "SA" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns token of type IDENTIFIER with value "SA" }}
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "v3!t#sa=:t#";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
        xPathLexer.nextToken();// Token type: NUMBER, value: 12345

        xPathLexer.nextToken();// Token type: STRING, value: "This is a test string" }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// Token type: NUMBER, value: 12345
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// Token type: NUMBER, value: 12345
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// Token type: STRING, value: "This is a test string" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// Token type: STRING, value: "This is a test string" }}
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("P#Ab9")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("P#Ab9");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("path/attribute[@attr1=*]/number");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("path/attribute[@attr1=*]/number"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "path/attribute[@attr1=*]/number";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
        xPathLexer.nextToken();// returns "7"

        xPathLexer.nextToken();// returns "$YX.X5T"

        xPathLexer.nextToken();// returns "[Wr)o$A C" }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// returns "7"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns "7"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns "$YX.X5T"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns "$YX.X5T"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// returns "[Wr)o$A C" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// returns "[Wr)o$A C" }}
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "7$YX.X5T[Wr)o$A C";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("3.141592653589793238462643383279502884197169399375105820974944592307816");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("3.141592653589793238462643383279502884197169399375105820974944592307816"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "3.141592653589793238462643383279502884197169399375105820974944592307816";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("lmX9pp&9^")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("lmX9pp&9^");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='John Doe']");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='John Doe']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[author='John Doe']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath(">'&")
statement is: leftParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftParen = xPathLexer.leftParen()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath(">'&");
xPathLexer.leftParen();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
        xPathLexer.setXPath(">='&");
        xPathLexer.leftParen();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath(">='&"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath(">='&") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.leftParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftParen() target is: xPathLexer method is: leftParen()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: leftParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer(string);
String string = ">='&";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).leftParen();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
        xPathLexer.nextToken();
        // Improved test data
        String expectedTokenType = "MULTIPLICATION";
        String expectedTokenValue = "*p";
        assertEquals(expectedTokenType, xPathLexer.getTokenType());
        assertEquals(expectedTokenValue, xPathLexer.getTokenValue());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String expectedTokenType = "MULTIPLICATION", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedTokenValue = "*p", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedTokenType, xPathLexer.getTokenType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedTokenType, xPathLexer.getTokenType()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals(expectedTokenValue, xPathLexer.getTokenValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedTokenValue, xPathLexer.getTokenValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "MULTIPLICATION"
* this is vulnerable: String string = "*p"
TestCase is: String string = "*p(GDl*7/kp0R";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "MULTIPLICATION";
String string = "*p";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.dollar();
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='title'] +%Q5!PMe5-:Se>");
        xPathLexer.nextToken();
        xPathLexer.equals();
        xPathLexer.dollar();
        xPathLexer.nextToken();
        xPathLexer.star();
        xPathLexer.dollar();
        Token doubleColon = xPathLexer.doubleColon();
        xPathLexer.setPreviousToken(doubleColon);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='title'] +%Q5!PMe5-:Se>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.star(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: Token doubleColon = xPathLexer.doubleColon(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(doubleColon), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(doubleColon) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='title'] +%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).star();
((XPathLexer) string).dollar();
Token doubleColon = ((XPathLexer) string).doubleColon();
((XPathLexer) string).setPreviousToken(doubleColon);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(",_p5;-/;")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(",_p5;-/;");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='main']/div/p");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='main']/div/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//*[@id='main']/div/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='123' and @class='novel']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='123' and @class='novel']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='123' and @class='novel']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
        xPathLexer.dollar();
        xPathLexer.nextToken();
        // Improved test data:
        xPathLexer = new XPathLexer("//div[@class='container']/p[contains(., 'Hello')]");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
xPathLexer = new XPathLexer("//div[@class='container']/p[contains(., 'Hello')]"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ".0_fo~0N:=IpectkY-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("C1@mQT2")
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
xPathLexer.not();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
        xPathLexer.not();
        xPathLexer.nextToken();
        // Improved test data:
        xPathLexer = new XPathLexer("C1@mQT2");
        xPathLexer.not();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("C1@mQT2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
xPathLexer = new XPathLexer("C1@mQT2"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "C1@mQT2";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).not();
((XPathLexer) string).nextToken();
((XPathLexer) string).not();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
        xPathLexer.nextToken();
        // Improved code goes here
        String inputString = "2d#<6(Rf 2";
        int tokenType = xPathLexer.getCurrentToken().getType();
        assertEquals(tokenType, OPERATOR);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved code goes here
String inputString = "2d#<6(Rf 2", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int tokenType = xPathLexer.getCurrentToken().getType(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getCurrentToken().getType() target is: xPathLexer.getCurrentToken() method is: getType()
statement is: assertEquals(tokenType, OPERATOR), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(tokenType, OPERATOR) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: String string = "2d#<6(Rf 2"
TestCase is: String string = "2d#<6(Rf 2";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "2d#<6(Rf 2";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("1234567890RJ1$Pizza");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("1234567890RJ1$Pizza"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "1234567890RJ1$Pizza";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5Sa]7MJ@![J_1")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("5Sa]7MJ@![J_1");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("The quick brown fox jumps over the lazy dog");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("The quick brown fox jumps over the lazy dog"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "The quick brown fox jumps over the lazy dog";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#")
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: notEquals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token notEquals = xPathLexer.notEquals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.notEquals();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("123,abc");
        xPathLexer.dots();
        xPathLexer.leftBracket();
        xPathLexer.notEquals();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("123,abc"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dots()Lcom/werken/saxpath/Token;
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: leftBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.notEquals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.notEquals() target is: xPathLexer method is: notEquals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: notEquals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "123,abc";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dots();
((XPathLexer) string).leftBracket();
((XPathLexer) string).notEquals();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("c8]?563;}w")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("c8]?563;}w");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X") target is: xPathLexer method is: setXPath(java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: pipe()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token pipe = xPathLexer.pipe()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.pipe();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@id='main']//p[@class='title']/text()");
        xPathLexer.equals();
        xPathLexer.at();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.dollar();
        xPathLexer.nextToken();
        xPathLexer.pipe();
        xPathLexer.nextToken();
        // Test that the next token is a string with the value "Hello World"
        assertEquals(xPathLexer.getNextToken(), new Token("String", "\"Hello World\""));
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@id='main']//p[@class='title']/text()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.pipe(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.pipe() target is: xPathLexer method is: pipe()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: pipe()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Test that the next token is a string with the value "Hello World"
assertEquals(xPathLexer.getNextToken(), new Token("String", "\"Hello World\"")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test that the next token is a string with the value "Hello World"
assertEquals(xPathLexer.getNextToken(), new Token("String", "\"Hello World\"")) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "//div[@id='main']//p[@class='title']/text()";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/users/user[@id='7890']/phone");
        xPathLexer.nextToken();
        // Improved test data }}
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/users/user[@id='7890']/phone"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: String string = "/users/user[@id='7890']/phone";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("<W#DS'Z(Y^,X/B&uZkn")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("<W#DS'Z(Y^,X/B&uZkn");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("W3DS'Z(Y^,X/B&uZkn");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("W3DS'Z(Y^,X/B&uZkn"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "W3DS'Z(Y^,X/B&uZkn";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("=f}Q2$'[c")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("=f}Q2$'[c");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(">x*~-")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(">x*~-");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(">x*~-");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer(">10*~-");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(">x*~-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer(">10*~-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ">x*~-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = ">10*~-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("VDb1?Ui`O#SHx[+")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("VDb1?Ui`O#SHx[+");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @available='true']");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @available='true']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='1234' and @available='true']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>")
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.not();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
        xPathLexer.not();
        xPathLexer.nextToken();
        // Test data with more descriptive values
        String testData1 = "|@t+%Q5!PMe5-:Se>";
        String testData2 = "|@t+%Q5!PMe5-:Se>";
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Test data with more descriptive values
String testData1 = "|@t+%Q5!PMe5-:Se>", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String testData2 = "|@t+%Q5!PMe5-:Se>", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "|@t+%Q5!PMe5-:Se>"
* this is vulnerable: String string = "|@t+%Q5!PMe5-:Se>"
TestCase is: String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).not();
((XPathLexer) string).nextToken();
String string = "|@t+%Q5!PMe5-:Se>";
String string = "|@t+%Q5!PMe5-:Se>";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P");
xPathLexer.whitespace();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String input = "//a[@href='https://www.example.com']/b/c";
        XPathLexer xPathLexer = new XPathLexer(input);
        xPathLexer.whitespace();
        xPathLexer.nextToken();
    }
}
statement is: String input = "//a[@href='https://www.example.com']/b/c", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer xPathLexer = new XPathLexer(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//a[@href='https://www.example.com']/b/c";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).whitespace();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.at();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
        xPathLexer.dots();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.at();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dots()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dots();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
        xPathLexer.nextToken();
        // Improved test data:
        String input = "CsQB>JPw8[JCPxsq";
        xPathLexer = new XPathLexer(input);
        xPathLexer.nextToken();
        assertEquals("XPathLexer", xPathLexer.getClass().getName());
        assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getInput());
        assertEquals(0, xPathLexer.getPos());
        assertEquals(PATH_SEGMENT, xPathLexer.getCurrentToken().getType());
        assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getCurrentToken().getValue());
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data:
String input = "CsQB>JPw8[JCPxsq", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: xPathLexer = new XPathLexer(input), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: assertEquals("XPathLexer", xPathLexer.getClass().getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("XPathLexer", xPathLexer.getClass().getName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getInput()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getInput()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals(0, xPathLexer.getPos()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(0, xPathLexer.getPos()) target is:  method is: assertEquals(int,<unknown>)
statement is: assertEquals(PATH_SEGMENT, xPathLexer.getCurrentToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(PATH_SEGMENT, xPathLexer.getCurrentToken().getType()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getCurrentToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("CsQB>JPw8[JCPxsq", xPathLexer.getCurrentToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "CsQB>JPw8[JCPxsq"
TestCase is: String string = "CsQB>JPw8[JCPxsq";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
String string = "CsQB>JPw8[JCPxsq";
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("abc1234>XYZ1234");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("abc1234>XYZ1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "abc1234>XYZ1234";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("F$7:}")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("F$7:}");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("TGZ$>! MaID?f2&|")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("TGZ$>! MaID?f2&|");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("TGZ$>! MaID?f2&|"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("TGZ$>! MaID?f2&|") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "TGZ$>! MaID?f2&|";
xPathLexer.setXPath(string);
xPathLexer.dollar();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("HC")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("HC");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attr1='foo']/@attr2");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attr1='foo']/@attr2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/root/child::node()[@attr1='foo']/@attr2";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("J+D")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("J+D");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n")
statement is: literal()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token literal = xPathLexer.literal()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n");
xPathLexer.literal();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("3TG!KS1#Fw\"KmCG~n");
        xPathLexer.literal();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("3TG!KS1#Fw\"KmCG~n"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.literal() target is: xPathLexer method is: literal()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: literal()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "3TG!KS1#Fw\"KmCG~n";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).literal();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String xpathExpression = "LH>7Uw4wb1uVnR";
        XPathLexer xPathLexer = new XPathLexer(xpathExpression);
        xPathLexer.nextToken();
    }
}
statement is: String xpathExpression = "LH>7Uw4wb1uVnR", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer xPathLexer = new XPathLexer(xpathExpression), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "LH>7Uw4wb1uVnR";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("TGZ$>! MaID?f2&|")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: rightParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightParen = xPathLexer.rightParen()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']");
        xPathLexer.nextToken();
        xPathLexer.equals();
        xPathLexer.nextToken();
        xPathLexer.rightParen();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.rightParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightParen() target is: xPathLexer method is: rightParen()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: rightParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "//book[price>35.00 and author='J.K. Rowling']";
xPathLexer.setXPath(string);
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ")
statement is: consume()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.consume();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
        xPathLexer.consume();
        xPathLexer.nextToken();
        // Improved test data
        String input = "ENZi6>rrixQ";
        XPathLexer xPathLexer = new XPathLexer(input);
        xPathLexer.consume();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: consume()V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
String input = "ENZi6>rrixQ", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: XPathLexer xPathLexer = new XPathLexer(input), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: consume()V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();
String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("TXO]$")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("TXO]$");
xPathLexer.at();
xPathLexer.whitespace();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//foo/bar");
        xPathLexer.at();
        xPathLexer.whitespace();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//foo/bar"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//foo/bar";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).at();
((XPathLexer) string).whitespace();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("|*Uwnlda =wJhv")
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.setXPath("|*Uwnlda =wJhv");
xPathLexer.doubleColon();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
        xPathLexer.setXPath("|*Uwnlda =wJhv");
        xPathLexer.doubleColon();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("|*Uwnlda =wJhv"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("|*Uwnlda =wJhv") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.doubleColon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "|*Uwnlda =wJhv";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).doubleColon();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("nXW0n")
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("nXW0n");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("/bookstore/book");
        xPathLexer.dots();
        xPathLexer.leftBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("/bookstore/book"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("/bookstore/book") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: dots()Lcom/werken/saxpath/Token;
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: leftBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "/bookstore/book";
xPathLexer.setXPath(string);
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
        xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "XS;hr|YS<H<+Q3rx &";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("TGZ$>! MaID?f2&|")
statement is: not()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token not = xPathLexer.not()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("TGZ$>! MaID?f2&|");
        xPathLexer.not();
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("TGZ$>! MaID?f2&|"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("TGZ$>! MaID?f2&|") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.not(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.not() target is: xPathLexer method is: not()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: not()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "TGZ$>! MaID?f2&|";
xPathLexer.setXPath(string);
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("/yvW-=1[3Ky`O9h")
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("/yvW-=1[3Ky`O9h");
xPathLexer.doubleColon();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//h2::text");
        xPathLexer.doubleColon();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//h2::text"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.doubleColon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: doubleColon()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']//h2::text";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).doubleColon();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%")
statement is: identifier()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifier = xPathLexer.identifier()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%");
xPathLexer.identifier();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("customerId");
        xPathLexer.identifier();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("customerId"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.identifier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifier() target is: xPathLexer method is: identifier()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifier()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "customerId";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).identifier();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[1]");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[1]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']/p[1]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("g`1")
statement is: plus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token plus = xPathLexer.plus()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("g`1");
        xPathLexer.plus();
        xPathLexer.nextToken();
        // Improved test data
        xPathLexer = new XPathLexer();
        xPathLexer.setXPath("g`1234567890");
        xPathLexer.plus();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("g`1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("g`1") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.plus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus() target is: xPathLexer method is: plus()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: plus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: xPathLexer.setXPath("g`1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("g`1234567890") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.plus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus() target is: xPathLexer method is: plus()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: plus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "g`1";
xPathLexer.setXPath(string);
xPathLexer.plus();
xPathLexer.nextToken();
String string = "g`1234567890";
xPathLexer.setXPath(string);
xPathLexer.plus();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("TGZ$>! MaDf2|")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaDf2|");
xPathLexer.nextToken();
xPathLexer.dots();
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("//div[@id='myDiv']/h1");
        xPathLexer.nextToken();
        xPathLexer.slash();
        xPathLexer.dot();
        xPathLexer.dot();
        xPathLexer.leftBracket();
        xPathLexer.string("id");
        xPathLexer.equalsSign();
        xPathLexer.string("myDiv");
        xPathLexer.rightBracket();
        xPathLexer.slash();
        xPathLexer.identifier("h1");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//div[@id='myDiv']/h1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//div[@id='myDiv']/h1") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.slash(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slash() target is: xPathLexer method is: slash()
statement is: xPathLexer.dot(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dot() target is: xPathLexer method is: dot()
statement is: xPathLexer.dot(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dot() target is: xPathLexer method is: dot()
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
statement is: xPathLexer.string("id"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.string("id") target is: xPathLexer method is: string(java.lang.String)
statement is: xPathLexer.equalsSign(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equalsSign() target is: xPathLexer method is: equalsSign()
statement is: xPathLexer.string("myDiv"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.string("myDiv") target is: xPathLexer method is: string(java.lang.String)
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.slash(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slash() target is: xPathLexer method is: slash()
statement is: xPathLexer.identifier("h1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifier("h1") target is: xPathLexer method is: identifier(java.lang.String)
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "//div[@id='myDiv']/h1";
xPathLexer.setXPath(string);
xPathLexer.nextToken();
xPathLexer.rightBracket();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("{bmClqy")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("{bmClqy");
xPathLexer.at();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @published_date>2018-01-01]");
        xPathLexer.setXPath("{bmClqy");
        xPathLexer.at();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @published_date>2018-01-01]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("{bmClqy"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("{bmClqy") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@author='Jane Doe' and @published_date>2018-01-01]";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "{bmClqy";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1");
xPathLexer.equals();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xpathLexer = new XPathLexer("//div[@id='main']/p");
        xpathLexer.equals();
        xpathLexer.nextToken();
        xpathLexer.hasNextToken();
    }
}
statement is: XPathLexer xpathLexer = new XPathLexer("//div[@id='main']/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xpathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xpathLexer.equals() target is: xpathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xpathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xpathLexer.nextToken() target is: xpathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xpathLexer.hasNextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xpathLexer.hasNextToken() target is: xpathLexer method is: hasNextToken()
TestCase is: String string = "//div[@id='main']/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("d")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("d");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='123']/author";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='123']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='123']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@id='123']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("g({/|'v*\"v>Os")
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("g({/|'v*\"v>Os");
xPathLexer.dots();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
        xPathLexer.setXPath("\u007fg({/|\'v*\"v>Os");
        xPathLexer.dots();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("\u007fg({/|\'v*\"v>Os"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("\u007fg({/|\'v*\"v>Os") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dots()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "g({/|'v*\"v>Os";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).dots();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g")
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g");
xPathLexer.whitespace();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.whitespace();
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("i")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("i");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("//div[@id='main']/p[contains(text(),'Hello')]/em");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//div[@id='main']/p[contains(text(),'Hello')]/em"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//div[@id='main']/p[contains(text(),'Hello')]/em") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "//div[@id='main']/p[contains(text(),'Hello')]/em";
xPathLexer.setXPath(string);
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("j z#")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("j z#");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@price > 40 and @author='Jane Doe']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@price > 40 and @author='Jane Doe']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[@price > 40 and @author='Jane Doe']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("mIklL#9GY'|ICo'w")
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: consume()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.rightBracket();
xPathLexer.consume();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.setXPath("myName#9GY'|ICo'w");
        xPathLexer.rightBracket();
        xPathLexer.consume();
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.setXPath("myName#9GY'|ICo'w"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("myName#9GY'|ICo'w") target is: xPathLexer method is: setXPath(java.lang.String)
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
statement is: xPathLexer.consume(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume() target is: xPathLexer method is: consume()
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
        xPathLexer.at();
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "com.werken.saxpath.XPathLexer";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).at();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("o>kQ~tP5]d8dxb;hT!")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("o>kQ~tP5]d8dxb;hT!");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@price>35]/@price");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@price>35]/@price"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[@price>35]/@price";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("rot|K")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("rot|K");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/book[price>30]/author");
        xPathLexer.nextToken();// "

        xPathLexer.nextToken();// "book"

        xPathLexer.nextToken();// "["

        xPathLexer.nextToken();// "price"

        xPathLexer.nextToken();// ">"

        xPathLexer.nextToken();// "30"

        xPathLexer.nextToken();// "]"

        xPathLexer.nextToken();// "

        xPathLexer.nextToken();// "author" }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/book[price>30]/author"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// "
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "book"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "book"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "["
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "["
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "price"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "price"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// ">"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// ">"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "30"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "30"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "]"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "]"
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken()// "author" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// "author" }}
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/book[price>30]/author";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("1s_>hg")
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("1s_>hg");
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
        xPathLexer.setXPath("1s_>hg");
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("1s_>hg"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("1s_>hg") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "1s_>hg";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("u")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("u");
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@id='123']");
        xPathLexer.setXPath("//author[last-name='Smith']");
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@id='123']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//author[last-name='Smith']"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//author[last-name='Smith']") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "/bookstore/book[@id='123']";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "//author[last-name='Smith']";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("V5Hv]wytK@fkUC")
statement is: identifier()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifier = xPathLexer.identifier()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("V5Hv]wytK@fkUC");
        xPathLexer.identifier();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("V5Hv]wytK@fkUC"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("V5Hv]wytK@fkUC") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.identifier(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifier() target is: xPathLexer method is: identifier()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: identifier()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "V5Hv]wytK@fkUC";
xPathLexer.setXPath(string);
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath(">+y}]sKzo4Kdu")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath(">+y}]sKzo4Kdu");
        xPathLexer.at();
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath(">+y}]sKzo4Kdu"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath(">+y}]sKzo4Kdu") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = ">+y}]sKzo4Kdu";
xPathLexer.setXPath(string);
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|\\~`\'\",./<>?");
        xPathLexer.equals();
        xPathLexer.at();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.dollar();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|\\~`\'\",./<>?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|\\~`'\",./<>?";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @price > 20]");
        xPathLexer.nextToken();
        xPathLexer.getPreviousToken();
        // Improved test data:
        XPathLexer xPathLexer = new XPathLexer("//book[@id='abc' and @price > 20]");
        xPathLexer.nextToken();
        xPathLexer.getPreviousToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @price > 20]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
statement is: // Improved test data:
XPathLexer xPathLexer = new XPathLexer("//book[@id='abc' and @price > 20]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt")
statement is: slashes()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token slashes = xPathLexer.slashes()
statement is: doubleColon()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token doubleColon = xPathLexer.doubleColon()
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt");
xPathLexer.slashes();
xPathLexer.doubleColon();
xPathLexer.leftBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.slashes();
        xPathLexer.doubleColon();
        xPathLexer.leftBracket();
        xPathLexer.nextToken();
    }
}
statement is: xPathLexer.slashes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slashes() target is: xPathLexer method is: slashes()
statement is: xPathLexer.doubleColon(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.doubleColon() target is: xPathLexer method is: doubleColon()
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3");
xPathLexer.dollar();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("-0.7nu+?U3");
        xPathLexer.dollar();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("-0.7nu+?U3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "-0.7nu+?U3";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath(")")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("//div[@class='container']");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//div[@class='container']"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//div[@class='container']") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "//div[@class='container']";
xPathLexer.setXPath(string);
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("[ (")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("[ (");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("[ (10 + 2 * 3) > 5");
        xPathLexer.nextToken();
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("[ ("), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("[ (10 + 2 * 3) > 5"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "[ (";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "[ (10 + 2 * 3) > 5";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: minus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token minus = xPathLexer.minus()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        Token minus = xPathLexer.minus("-");
        xPathLexer.setPreviousToken(minus);
        xPathLexer.identifierOrOperatorName("subtract");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token minus = xPathLexer.minus("-"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.minus("-") target is: xPathLexer method is: minus(java.lang.String)
statement is: xPathLexer.setPreviousToken(minus), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(minus) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: xPathLexer.identifierOrOperatorName("subtract"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName("subtract") target is: xPathLexer method is: identifierOrOperatorName(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();
Token token = null;
xPathLexer.setPreviousToken(token);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(">=DB'FK_")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(">=DB'FK_");
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(">='DB'FK_");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer(">=DB'FK_");
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(">='DB'FK_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer(">=DB'FK_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 5
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ">='DB'FK_";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
String string = ">=DB'FK_";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
        xPathLexer.equals();
        Token at = xPathLexer.at();
        xPathLexer.setPreviousToken(at);
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: Token at = xPathLexer.at(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(at), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(at) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
Token at = ((XPathLexer) string).at();
((XPathLexer) string).setPreviousToken(at);
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#")
statement is: star()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token star = xPathLexer.star()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: identifierOrOperatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
        Token star = xPathLexer.star();
        xPathLexer.setPreviousToken(star);
        xPathLexer.identifierOrOperatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token star = xPathLexer.star(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.star() target is: xPathLexer method is: star()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: star()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(star), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(star) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.identifierOrOperatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.identifierOrOperatorName() target is: xPathLexer method is: identifierOrOperatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: identifierOrOperatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer(string);
Token star = ((XPathLexer) string).star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: notEquals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token notEquals = xPathLexer.notEquals()
statement is: setPreviousToken(Lcom/werken/saxpath/Token;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setPreviousToken(arg0)
statement is: rightParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightParen = xPathLexer.rightParen()
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.rightParen();
xPathLexer.rightBracket();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
        Token notEquals = xPathLexer.notEquals();
        xPathLexer.setPreviousToken(notEquals);
        xPathLexer.rightParen();
        xPathLexer.rightBracket();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Token notEquals = xPathLexer.notEquals(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.notEquals() target is: xPathLexer method is: notEquals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: notEquals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.setPreviousToken(notEquals), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setPreviousToken(notEquals) target is: xPathLexer method is: setPreviousToken(Token)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setPreviousToken(Lcom/werken/saxpath/Token;)V
statement is: xPathLexer.rightParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightParen() target is: xPathLexer method is: rightParen()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightParen()Lcom/werken/saxpath/Token;
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(string);
Token notEquals = ((XPathLexer) string).notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).rightParen();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("?");
        xPathLexer.equals();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
        xPathLexer.nextToken();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
TestCase is: String string = "?";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("mIklL#9GY'|ICo'w")
statement is: operatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token operatorName = xPathLexer.operatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.operatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.setXPath("mIklL#9GY'|ICo'w");
        xPathLexer.operatorName();
    }
}
statement is: xPathLexer.setXPath("mIklL#9GY'|ICo'w"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("mIklL#9GY'|ICo'w") target is: xPathLexer method is: setXPath(java.lang.String)
statement is: xPathLexer.operatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName() target is: xPathLexer method is: operatorName()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("not|Z")
statement is: dollar()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dollar = xPathLexer.dollar()
statement is: operatorName()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token operatorName = xPathLexer.operatorName()
test data is: XPathLexer xPathLexer = new XPathLexer("not|Z");
xPathLexer.dollar();
xPathLexer.operatorName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("$not|Z");
        xPathLexer.dollar();
        xPathLexer.operatorName();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("$not|Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.dollar(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dollar() target is: xPathLexer method is: dollar()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dollar()Lcom/werken/saxpath/Token;
statement is: xPathLexer.operatorName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.operatorName() target is: xPathLexer method is: operatorName()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: operatorName()Lcom/werken/saxpath/Token;
TestCase is: String string = "$not|Z";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).dollar();
((XPathLexer) string).operatorName();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: mod()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token mod = xPathLexer.mod()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.mod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[has-attribute('price') and attribute-value('price') > 10.99]");
        xPathLexer.mod();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[has-attribute('price') and attribute-value('price') > 10.99]"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.mod(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.mod() target is: xPathLexer method is: mod()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: mod()Lcom/werken/saxpath/Token;
TestCase is: String string = "//book[has-attribute('price') and attribute-value('price') > 10.99]";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).mod();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: div()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token div = xPathLexer.div()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.div();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.div("1234567890abcdef", "1234567890abcdef");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.div("1234567890abcdef", "1234567890abcdef"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.div("1234567890abcdef", "1234567890abcdef") target is: xPathLexer method is: div(java.lang.String,java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: and()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token and = xPathLexer.and()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.and();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        boolean result1 = xPathLexer.and(true, true);
        assertEquals(result1, true);
        boolean result2 = xPathLexer.and(true, false);
        assertEquals(result2, false);
        boolean result3 = xPathLexer.and(false, true);
        assertEquals(result3, false);
        boolean result4 = xPathLexer.and(false, false);
        assertEquals(result4, false);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: boolean result1 = xPathLexer.and(true, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.and(true, true) target is: xPathLexer method is: and(boolean,boolean)
statement is: assertEquals(result1, true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result1, true) target is:  method is: assertEquals(boolean,boolean)
statement is: boolean result2 = xPathLexer.and(true, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.and(true, false) target is: xPathLexer method is: and(boolean,boolean)
statement is: assertEquals(result2, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result2, false) target is:  method is: assertEquals(boolean,boolean)
statement is: boolean result3 = xPathLexer.and(false, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.and(false, true) target is: xPathLexer method is: and(boolean,boolean)
statement is: assertEquals(result3, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result3, false) target is:  method is: assertEquals(boolean,boolean)
statement is: boolean result4 = xPathLexer.and(false, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.and(false, false) target is: xPathLexer method is: and(boolean,boolean)
statement is: assertEquals(result4, false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(result4, false) target is:  method is: assertEquals(boolean,boolean)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: or()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token or = xPathLexer.or()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.or();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.or(12345, "abcdef");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.or(12345, "abcdef"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.or(12345, "abcdef") target is: xPathLexer method is: or(int,java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: plus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token plus = xPathLexer.plus()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: number()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token number = xPathLexer.number()
test data is: XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.number();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
        xPathLexer.nextToken();
        xPathLexer.plus();
        xPathLexer.nextToken();
        xPathLexer.number();
        // Test data
        String[] tokens = new String[]{ "$", "9QvUuA", "/a^wFvpIb" };
        int[] tokenTypes = new int[]{ XPathLexer.NUMBER, XPathLexer.OPERATOR, XPathLexer.STRING };
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.plus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.plus() target is: xPathLexer method is: plus()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: plus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.number(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.number() target is: xPathLexer method is: number()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: number()Lcom/werken/saxpath/Token;
statement is: // Test data
String[] tokens = new String[]{ "$", "9QvUuA", "/a^wFvpIb" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] tokenTypes = new int[]{ XPathLexer.NUMBER, XPathLexer.OPERATOR, XPathLexer.STRING }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
TestCase is: String string = "$9QvUuA/a^wFvpIb";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();
((XPathLexer) string).number();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.whitespace();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.whitespace("//div[@class='container']/h2 | //a[starts-with(@href, 'https://')]");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.whitespace("//div[@class='container']/h2 | //a[starts-with(@href, 'https://')]"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace("//div[@class='container']/h2 | //a[starts-with(@href, 'https://')]") target is: xPathLexer method is: whitespace(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#")
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("[ (20) (5)")
statement is: at()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token at = xPathLexer.at()
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: minus()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token minus = xPathLexer.minus()
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
statement is: whitespace()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token whitespace = xPathLexer.whitespace()
test data is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath("[ (20) (5)");
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.dots();
xPathLexer.whitespace();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
        xPathLexer.setXPath("[ (20) (30)");
        xPathLexer.at();
        xPathLexer.nextToken();
        xPathLexer.minus();
        xPathLexer.dots();
        xPathLexer.whitespace();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("[ (20) (30)"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("[ (20) (30)") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: xPathLexer.at(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.at() target is: xPathLexer method is: at()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: at()Lcom/werken/saxpath/Token;
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.minus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.minus() target is: xPathLexer method is: minus()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: minus()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dots()Lcom/werken/saxpath/Token;
statement is: xPathLexer.whitespace(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.whitespace() target is: xPathLexer method is: whitespace()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: whitespace()Lcom/werken/saxpath/Token;
TestCase is: String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "[ (20) (30)";
((XPathLexer) string).setXPath(string);
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).dots();
((XPathLexer) string).whitespace();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: relationalOperator()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token relationalOperator = xPathLexer.relationalOperator()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.relationalOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.relationalOperator("<=");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.relationalOperator("<="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.relationalOperator("<=") target is: xPathLexer method is: relationalOperator(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: rightBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightBracket = xPathLexer.rightBracket()
statement is: dots()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token dots = xPathLexer.dots()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.rightBracket();
xPathLexer.dots();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
        xPathLexer.equals();
        xPathLexer.leftBracket();
        xPathLexer.rightBracket();
        xPathLexer.dots();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: leftBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.rightBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightBracket() target is: xPathLexer method is: rightBracket()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: rightBracket()Lcom/werken/saxpath/Token;
statement is: xPathLexer.dots(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.dots() target is: xPathLexer method is: dots()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: dots()Lcom/werken/saxpath/Token;
TestCase is: String string = "1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).equals();
((XPathLexer) string).leftBracket();
((XPathLexer) string).rightBracket();
((XPathLexer) string).dots();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("c/a)/[>Xb8X")
statement is: slashes()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token slashes = xPathLexer.slashes()
test data is: XPathLexer xPathLexer = new XPathLexer("c/a)/[>Xb8X");
xPathLexer.slashes();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attr=\"value\"]/descendant::text()");
        xPathLexer.slashes();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attr=\"value\"]/descendant::text()"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.slashes(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.slashes() target is: xPathLexer method is: slashes()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: slashes()Lcom/werken/saxpath/Token;
TestCase is: String string = "/root/parent/child[@attr=\"value\"]/descendant::text()";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).slashes();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Example 1: Simple XPath
        String xpath1 = "/bookstore/book/author";
        String expectedResult1 = "Nigel Rees, Evan Williams, Richard Bachman";
        // Example 2: More complex XPath
        String xpath2 = "/bookstore/book[price>15.99]/@style";
        String expectedResult2 = "red";
        // Example 3: Using a variable in an XPath expression
        String xpath3 = ("/bookstore/book[price>" + bookPrice) + "]/author";
        String expectedResult3 = "Nigel Rees, Herman Melville, J.R.R. Tolkien";
    }
}
statement is: // Example 1: Simple XPath
String xpath1 = "/bookstore/book/author", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResult1 = "Nigel Rees, Evan Williams, Richard Bachman", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Example 2: More complex XPath
String xpath2 = "/bookstore/book[price>15.99]/@style", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResult2 = "red", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Example 3: Using a variable in an XPath expression
String xpath3 = ("/bookstore/book[price>" + bookPrice) + "]/author", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: ("/bookstore/book[price>" + bookPrice) + "]/author"
statement is: String expectedResult3 = "Nigel Rees, Herman Melville, J.R.R. Tolkien", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "/bookstore/book/author"
* this is vulnerable: String string = "Nigel Rees, Evan Williams, Richard Bachman"
* this is vulnerable: String string = "/bookstore/book[price>15.99]/@style"
* this is vulnerable: String string = "red"
* this is vulnerable: String string = "Nigel Rees, Herman Melville, J.R.R. Tolkien"
TestCase is: String string = "/bookstore/book/author";
String string = "Nigel Rees, Evan Williams, Richard Bachman";
String string = "/bookstore/book[price>15.99]/@style";
String string = "red";
String string = "Nigel Rees, Herman Melville, J.R.R. Tolkien";

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: leftBracket()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token leftBracket = xPathLexer.leftBracket()
statement is: comma()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token comma = xPathLexer.comma()
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA(0)
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.comma();
xPathLexer.LA(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.equals();
        xPathLexer.leftBracket();
        xPathLexer.comma();
        xPathLexer.LA(0);
    }
}
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
statement is: xPathLexer.leftBracket(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.leftBracket() target is: xPathLexer method is: leftBracket()
statement is: xPathLexer.comma(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.comma() target is: xPathLexer method is: comma()
statement is: xPathLexer.LA(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.LA(0) target is: xPathLexer method is: LA(int)
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: equals()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token equals = xPathLexer.equals()
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA((-1))
test data is: XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.LA((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("version=3");
        xPathLexer.nextToken();// Token(IDENTIFIER, "version")

        xPathLexer.equals();
        // Token(EQUALS, "=")
        xPathLexer.LA(-1);// Token(INTEGER, 3) }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("version=3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.nextToken()// Token(IDENTIFIER, "version")
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken()// Token(IDENTIFIER, "version")
 target is: xPathLexer method is: nextToken()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: nextToken()Lcom/werken/saxpath/Token;
statement is: xPathLexer.equals(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.equals() target is: xPathLexer method is: equals()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: equals()Lcom/werken/saxpath/Token;
statement is: // Token(EQUALS, "=")
xPathLexer.LA(-1)// Token(INTEGER, 3) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Token(EQUALS, "=")
xPathLexer.LA(-1)// Token(INTEGER, 3) }}
 target is: xPathLexer method is: LA(int)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: LA(I)C
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: String string = "version=3";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).equals();
int _int = null;
((XPathLexer) string).LA(_int);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: LA(I)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char LA = xPathLexer.LA(384)
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.LA(384);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/child::p[@id='intro']");
        xPathLexer.LA(384);
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/child::p[@id='intro']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.LA(384), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.LA(384) target is: xPathLexer method is: LA(int)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: LA(I)C
TestCase is: String string = "//div[@class='container']/child::p[@id='intro']";
XPathLexer xPathLexer = new XPathLexer(string);
int _int = 384;
((XPathLexer) string).LA(_int);

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: consume(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.consume((-3590))
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume((-3590));
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.consume(1234);
        xPathLexer.currentPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.consume(1234), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.consume(1234) target is: xPathLexer method is: consume(int)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: consume(I)V
statement is: xPathLexer.currentPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition() target is: xPathLexer method is: currentPosition()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: currentPosition()I
TestCase is: XPathLexer xPathLexer = new XPathLexer();
int _int = 1234;
xPathLexer.consume(_int);
xPathLexer.currentPosition();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: rightParen()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token rightParen = xPathLexer.rightParen()
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.rightParen();
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("(+ * 5 7)");
        xPathLexer.rightParen();
        xPathLexer.currentPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("(+ * 5 7)"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.rightParen(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.rightParen() target is: xPathLexer method is: rightParen()
statement is: xPathLexer.currentPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition() target is: xPathLexer method is: currentPosition()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("")
statement is: currentPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentPosition = xPathLexer.currentPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.currentPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("//book[@id='ABC123']");
        xPathLexer.currentPosition();
    }
}
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("//book[@id='ABC123']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.currentPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.currentPosition() target is: xPathLexer method is: currentPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: currentPosition()I
TestCase is: String string = "//book[@id='ABC123']";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).currentPosition();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI")
statement is: endPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endPosition = xPathLexer.endPosition()
test data is: XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI");
xPathLexer.endPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//*[@id='root']/div/p");
        xPathLexer.endPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//*[@id='root']/div/p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.endPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.endPosition() target is: xPathLexer method is: endPosition()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: endPosition()I
TestCase is: String string = "//*[@id='root']/div/p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).endPosition();

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: endPosition()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int endPosition = xPathLexer.endPosition()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.endPosition();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']");
        xPathLexer.endPosition();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='1234']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.endPosition(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.endPosition() target is: xPathLexer method is: endPosition()
statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28")
statement is: nextToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token nextToken = xPathLexer.nextToken()
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        xPathLexer.nextToken();
        xPathLexer.getPreviousToken();
    }
}
statement is: xPathLexer.nextToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.nextToken() target is: xPathLexer method is: nextToken()
statement is: xPathLexer.getPreviousToken(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getPreviousToken() target is: xPathLexer method is: getPreviousToken()
statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: getPreviousToken()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token previousToken = xPathLexer.getPreviousToken()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getPreviousToken();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        XPathLexer xPathLexer = new XPathLexer("//*[@id='root']");
        String expectedTokenType = "IDENTIFIER";
        String expectedTokenValue = "root";
        assertEquals(expectedTokenType, xPathLexer.getPreviousToken().getType());
        assertEquals(expectedTokenValue, xPathLexer.getPreviousToken().getValue());
    }
}
statement is: // Improved test data
XPathLexer xPathLexer = new XPathLexer("//*[@id='root']"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedTokenType = "IDENTIFIER", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedTokenValue = "root", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedTokenType, xPathLexer.getPreviousToken().getType()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedTokenType, xPathLexer.getPreviousToken().getType()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals(expectedTokenValue, xPathLexer.getPreviousToken().getValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedTokenValue, xPathLexer.getPreviousToken().getValue()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "IDENTIFIER"
* this is vulnerable: String string = "root"
TestCase is: String string = "IDENTIFIER";
String string = "root";

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: setXPath(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: xPathLexer.setXPath("")
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("");
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for XPathLexer class
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.setXPath("//*[@id='example']");
        String xPath = xPathLexer.getXPath();
        System.out.println(xPath);
    }
}
statement is: // Improved test data for XPathLexer class
XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.setXPath("//*[@id='example']"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.setXPath("//*[@id='example']") target is: xPathLexer method is: setXPath(java.lang.String)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: setXPath(Ljava/lang/String;)V
statement is: String xPath = xPathLexer.getXPath(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.getXPath() target is: xPathLexer method is: getXPath()
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: getXPath()Ljava/lang/String;
statement is: System.out.println(xPath), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(xPath) target is: System.out method is: println(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();
String string = "//*[@id='example']";
xPathLexer.setXPath(string);
xPathLexer.getXPath();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6")
statement is: getXPath()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String xPath = xPathLexer.getXPath()
test data is: XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6");
xPathLexer.getXPath();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        XPathLexer xPathLexer = new XPathLexer("EwZO%ej9V}VE6");
        String expectedXPath = "EwZO%ej9V}VE6";
        assertEquals(expectedXPath, xPathLexer.getXPath());
    }
}
statement is: // Improved test data for the above code snippet
XPathLexer xPathLexer = new XPathLexer("EwZO%ej9V}VE6"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedXPath = "EwZO%ej9V}VE6", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedXPath, xPathLexer.getXPath()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedXPath, xPathLexer.getXPath()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: String string = "EwZO%ej9V}VE6"
TestCase is: String string = "EwZO%ej9V}VE6";
XPathLexer xPathLexer = new XPathLexer(string);
String string = "EwZO%ej9V}VE6";

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: hasMoreChars()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean moreChars = xPathLexer.hasMoreChars()
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.hasMoreChars("This is a test string.");
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.hasMoreChars("This is a test string."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.hasMoreChars("This is a test string.") target is: xPathLexer method is: hasMoreChars(java.lang.String)
TestCase is: XPathLexer xPathLexer = new XPathLexer();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: hasMoreChars()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean moreChars = xPathLexer.hasMoreChars()
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.hasMoreChars();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author/name");
        xPathLexer.hasMoreChars();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author/name"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.hasMoreChars(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.hasMoreChars() target is: xPathLexer method is: hasMoreChars()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: hasMoreChars()Z
TestCase is: String string = "//book[@id='123']/author/name";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).hasMoreChars();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt")
statement is: isIdentifierChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierChar = xPathLexer.isIdentifierChar(' ')
test data is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.isIdentifierChar(' ');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("?");
        xPathLexer.isIdentifierChar('p');
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierChar('p'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierChar('p') target is: xPathLexer method is: isIdentifierChar(char)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: isIdentifierChar(C)Z
TestCase is: String string = "?";
XPathLexer xPathLexer = new XPathLexer(string);
char _char = 'p';
((XPathLexer) string).isIdentifierChar(_char);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,")
statement is: isIdentifierChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierChar = xPathLexer.isIdentifierChar('c')
test data is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.isIdentifierChar('c');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("abc123@!#$%^&*()_+-=[]{}|\\:;\'\"<>,./`");
        xPathLexer.isIdentifierChar('a');// Returns true because 'a' is a valid identifier character in XPath }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("abc123@!#$%^&*()_+-=[]{}|\\:;\'\"<>,./`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierChar('a')// Returns true because 'a' is a valid identifier character in XPath }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierChar('a')// Returns true because 'a' is a valid identifier character in XPath }}
 target is: xPathLexer method is: isIdentifierChar(char)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: isIdentifierChar(C)Z
TestCase is: String string = "abc123@!#$%^&*()_+-=[]{}|\\:;'\"<>,./`";
XPathLexer xPathLexer = new XPathLexer(string);
char _char = 'a';
((XPathLexer) string).isIdentifierChar(_char);

statement is: com.werken.saxpath.XPathLexer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer()
statement is: isIdentifierStartChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierStartChar = xPathLexer.isIdentifierStartChar('\"')
test data is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('\"');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer();
        xPathLexer.isIdentifierStartChar('a');// Testing a valid identifier start character

        xPathLexer.isIdentifierStartChar('_');// Testing a valid identifier start character with an underscore

        xPathLexer.isIdentifierStartChar('$');// Testing a valid identifier start character with a dollar sign

        xPathLexer.isIdentifierStartChar('A');// Testing a valid identifier start character with an uppercase letter

        xPathLexer.isIdentifierStartChar('a');// Testing a valid identifier start character with a lowercase letter

        xPathLexer.isIdentifierStartChar('0');// Testing a valid identifier start character with a digit

        xPathLexer.isIdentifierStartChar('-');// Testing a valid identifier start character with a hyphen

        xPathLexer.isIdentifierStartChar('@');// Testing a valid identifier start character with an at symbol

        xPathLexer.isIdentifierStartChar('/');// Testing a valid identifier start character with a forward slash }}

    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierStartChar('a')// Testing a valid identifier start character
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('a')// Testing a valid identifier start character
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('_')// Testing a valid identifier start character with an underscore
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('_')// Testing a valid identifier start character with an underscore
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('$')// Testing a valid identifier start character with a dollar sign
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('$')// Testing a valid identifier start character with a dollar sign
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('A')// Testing a valid identifier start character with an uppercase letter
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('A')// Testing a valid identifier start character with an uppercase letter
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('a')// Testing a valid identifier start character with a lowercase letter
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('a')// Testing a valid identifier start character with a lowercase letter
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('0')// Testing a valid identifier start character with a digit
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('0')// Testing a valid identifier start character with a digit
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('-')// Testing a valid identifier start character with a hyphen
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('-')// Testing a valid identifier start character with a hyphen
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('@')// Testing a valid identifier start character with an at symbol
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('@')// Testing a valid identifier start character with an at symbol
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
statement is: xPathLexer.isIdentifierStartChar('/')// Testing a valid identifier start character with a forward slash }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('/')// Testing a valid identifier start character with a forward slash }}
 target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer()V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 0
Matched Method is: isIdentifierStartChar(C)Z
TestCase is: XPathLexer xPathLexer = new XPathLexer();
char _char = 'a';
xPathLexer.isIdentifierStartChar(_char);
char _char = '_';
xPathLexer.isIdentifierStartChar(_char);
char _char = '$';
xPathLexer.isIdentifierStartChar(_char);
char _char = 'A';
xPathLexer.isIdentifierStartChar(_char);
char _char = 'a';
xPathLexer.isIdentifierStartChar(_char);
char _char = '0';
xPathLexer.isIdentifierStartChar(_char);
char _char = '-';
xPathLexer.isIdentifierStartChar(_char);
char _char = '@';
xPathLexer.isIdentifierStartChar(_char);
char _char = '/';
xPathLexer.isIdentifierStartChar(_char);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#")
statement is: isIdentifierStartChar(C)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean identifierStartChar = xPathLexer.isIdentifierStartChar('_')
test data is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.isIdentifierStartChar('_');

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
        xPathLexer.isIdentifierStartChar('Z');
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.isIdentifierStartChar('Z'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.isIdentifierStartChar('Z') target is: xPathLexer method is: isIdentifierStartChar(char)
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: isIdentifierStartChar(C)Z
TestCase is: String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer(string);
char _char = 'Z';
((XPathLexer) string).isIdentifierStartChar(_char);

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer("Frv")
statement is: literal()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token literal = xPathLexer.literal()
test data is: XPathLexer xPathLexer = new XPathLexer("Frv");
xPathLexer.literal();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//p");
        xPathLexer.literal();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//p"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.literal(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.literal() target is: xPathLexer method is: literal()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: literal()Lcom/werken/saxpath/Token;
TestCase is: String string = "//div[@class='container']//p";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).literal();

statement is: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.werken.saxpath.XPathLexer
statement code is: XPathLexer xPathLexer = new XPathLexer(">^")
statement is: relationalOperator()Lcom/werken/saxpath/Token; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.werken.saxpath.Token
statement code is: Token relationalOperator = xPathLexer.relationalOperator()
test data is: XPathLexer xPathLexer = new XPathLexer(">^");
xPathLexer.relationalOperator();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        XPathLexer xPathLexer = new XPathLexer(">foo");
        xPathLexer.relationalOperator();
    }
}
statement is: XPathLexer xPathLexer = new XPathLexer(">foo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: xPathLexer.relationalOperator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: xPathLexer.relationalOperator() target is: xPathLexer method is: relationalOperator()
source statement: com.werken.saxpath.XPathLexer(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.werken.saxpath.XPathLexerindex is: 1
Matched Method is: relationalOperator()Lcom/werken/saxpath/Token;
TestCase is: String string = ">foo";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).relationalOperator();

* test suite isTestSuite: 214
Test 0: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.identifier();
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.identifierOrOperatorName();
Test 1: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 2: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.nextToken();
Test 3: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.colon();
Test 4: 
XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 5: 
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 6: 
XPathLexer xPathLexer = new XPathLexer("P#Ab9");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 7: 
XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn");
xPathLexer.nextToken();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("lmX9pp&9^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath(">'&");
xPathLexer.leftParen();
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
xPathLexer.nextToken();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.dollar();
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer(",_p5;-/;");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 14: 
XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3");
xPathLexer.nextToken();
Test 15: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 16: 
XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
xPathLexer.not();
xPathLexer.nextToken();
Test 17: 
XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi");
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("5Sa]7MJ@![J_1");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer("c8]?563;}w");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 22: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
xPathLexer.nextToken();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.pipe();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("<W#DS'Z(Y^,X/B&uZkn");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("=f}Q2$'[c");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer(">x*~-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer("VDb1?Ui`O#SHx[+");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.not();
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.at();
xPathLexer.nextToken();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer("F$7:}");
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer("HC");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH");
xPathLexer.nextToken();
Test 38: 
XPathLexer xPathLexer = new XPathLexer("J+D");
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n");
xPathLexer.literal();
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.consume();
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("TXO]$");
xPathLexer.at();
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.setXPath("|*Uwnlda =wJhv");
xPathLexer.doubleColon();
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("nXW0n");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("/yvW-=1[3Ky`O9h");
xPathLexer.doubleColon();
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%");
xPathLexer.identifier();
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaDf2|");
xPathLexer.nextToken();
xPathLexer.dots();
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 53: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("{bmClqy");
xPathLexer.at();
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1");
xPathLexer.equals();
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("d");
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("g({/|'v*\"v>Os");
xPathLexer.dots();
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("i");
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer("j z#");
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.rightBracket();
xPathLexer.consume();
xPathLexer.nextToken();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer("o>kQ~tP5]d8dxb;hT!");
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer("rot|K");
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("1s_>hg");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("u");
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt");
xPathLexer.slashes();
xPathLexer.doubleColon();
xPathLexer.leftBracket();
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 73: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 75: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 76: 
XPathLexer xPathLexer = new XPathLexer(">=DB'FK_");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 79: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.rightParen();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 81: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.operatorName();
Test 82: 
XPathLexer xPathLexer = new XPathLexer("not|Z");
xPathLexer.dollar();
xPathLexer.operatorName();
Test 83: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.mod();
Test 84: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.div();
Test 85: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.and();
Test 86: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.or();
Test 87: 
XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.number();
Test 88: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.whitespace();
Test 89: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath("[ (20) (5)");
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.dots();
xPathLexer.whitespace();
Test 90: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.relationalOperator();
Test 91: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.rightBracket();
xPathLexer.dots();
Test 92: 
XPathLexer xPathLexer = new XPathLexer("c/a)/[>Xb8X");
xPathLexer.slashes();
Test 93: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 94: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.comma();
xPathLexer.LA(0);
Test 95: 
XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.LA((-1));
Test 96: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.LA(384);
Test 97: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume((-3590));
xPathLexer.currentPosition();
Test 98: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.rightParen();
xPathLexer.currentPosition();
Test 99: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.currentPosition();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI");
xPathLexer.endPosition();
Test 101: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.endPosition();
Test 102: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 103: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getPreviousToken();
Test 104: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("");
xPathLexer.getXPath();
Test 105: 
XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6");
xPathLexer.getXPath();
Test 106: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 107: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.hasMoreChars();
Test 108: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.isIdentifierChar(' ');
Test 109: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.isIdentifierChar('c');
Test 110: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('\"');
Test 111: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.isIdentifierStartChar('_');
Test 112: 
XPathLexer xPathLexer = new XPathLexer("Frv");
xPathLexer.literal();
Test 113: 
XPathLexer xPathLexer = new XPathLexer(">^");
xPathLexer.relationalOperator();
Test 114: 
String string = "[ (";
XPathLexer xPathLexer = new XPathLexer("[ (");
((XPathLexer)"[ (").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 115: 
String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
((XPathLexer)"|@t+%Q!PMe5-:S>").nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).nextToken();

Test 116: 
XPathLexer xPathLexer = new XPathLexer();

Test 117: 
String string = "v3!t#sa=:t#";
XPathLexer xPathLexer = new XPathLexer("v3!t#sa=:t#");
((XPathLexer)"v3!t#sa=:t#").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 118: 
String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
((XPathLexer)"nkyCfokrKc\"`Fi").nextToken();
((XPathLexer) string).nextToken();
String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 119: 
String string = "path/attribute[@attr1=*]/number";
XPathLexer xPathLexer = new XPathLexer("path/attribute[@attr1=*]/number");
((XPathLexer)"path/attribute[@attr1=*]/number").nextToken();
((XPathLexer) string).nextToken();

Test 120: 
String string = "7$YX.X5T[Wr)o$A C";
XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
((XPathLexer)"7$YX.X5T[Wr)o$A C").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 121: 
XPathLexer xPathLexer = new XPathLexer("3.141592653589793238462643383279502884197169399375105820974944592307816");
((XPathLexer)"3.141592653589793238462643383279502884197169399375105820974944592307816").nextToken();

Test 122: 
String string = "/bookstore/book[author='John Doe']";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='John Doe']");
((XPathLexer)"/bookstore/book[author='John Doe']").nextToken();
((XPathLexer) string).nextToken();

Test 123: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").setXPath(">='&");
((XPathLexer) string).leftParen();
((XPathLexer) string).nextToken();

Test 124: 
XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
((XPathLexer)"*p(GDl*7/kp0R").nextToken();

Test 125: 
String string = "//div[@class='title'] +%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("//div[@class='title'] +%Q5!PMe5-:Se>");
((XPathLexer)"//div[@class='title'] +%Q5!PMe5-:Se>").nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).star();
((XPathLexer) string).dollar();
Token doubleColon = ((XPathLexer) string).doubleColon();
((XPathLexer) string).setPreviousToken(doubleColon);
((XPathLexer) string).nextToken();

Test 126: 
String string = "//*[@id='main']/div/p";
XPathLexer xPathLexer = new XPathLexer("//*[@id='main']/div/p");
((XPathLexer)"//*[@id='main']/div/p").nextToken();
((XPathLexer) string).nextToken();

Test 127: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123' and @class='novel']");
((XPathLexer)"//book[@id='123' and @class='novel']").nextToken();

Test 128: 
String string = ".0_fo~0N:=IpectkY-";
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
((XPathLexer)".0_fo~0N:=IpectkY-").dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

Test 129: 
String string = "C1@mQT2";
XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
((XPathLexer)"C1@mQT2").not();
((XPathLexer) string).nextToken();
((XPathLexer) string).not();
((XPathLexer) string).nextToken();

Test 130: 
XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
((XPathLexer)"2d#<6(Rf 2").nextToken();

Test 131: 
XPathLexer xPathLexer = new XPathLexer("1234567890RJ1$Pizza");
((XPathLexer)"1234567890RJ1$Pizza").nextToken();

Test 132: 
String string = "The quick brown fox jumps over the lazy dog";
XPathLexer xPathLexer = new XPathLexer("The quick brown fox jumps over the lazy dog");
((XPathLexer)"The quick brown fox jumps over the lazy dog").nextToken();
((XPathLexer) string).nextToken();

Test 133: 
String string = "123,abc";
XPathLexer xPathLexer = new XPathLexer("123,abc");
((XPathLexer)"123,abc").dots();
((XPathLexer) string).leftBracket();
((XPathLexer) string).notEquals();
((XPathLexer) string).nextToken();

Test 134: 
String string = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
((XPathLexer)"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").dollar();
((XPathLexer) string).nextToken();

Test 135: 
String string = "//div[@id='main']//p[@class='title']/text()";
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']//p[@class='title']/text()");
((XPathLexer)"//div[@id='main']//p[@class='title']/text()").equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

Test 136: 
XPathLexer xPathLexer = new XPathLexer("/users/user[@id='7890']/phone");
((XPathLexer)"/users/user[@id='7890']/phone").nextToken();

Test 137: 
String string = "W3DS'Z(Y^,X/B&uZkn";
XPathLexer xPathLexer = new XPathLexer("W3DS'Z(Y^,X/B&uZkn");
((XPathLexer)"W3DS'Z(Y^,X/B&uZkn").nextToken();
((XPathLexer) string).nextToken();

Test 138: 
String string = ">x*~-";
XPathLexer xPathLexer = new XPathLexer(">x*~-");
((XPathLexer)">x*~-").nextToken();
((XPathLexer) string).nextToken();
String string = ">10*~-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 139: 
String string = "//book[@id='1234' and @available='true']";
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @available='true']");
((XPathLexer)"//book[@id='1234' and @available='true']").nextToken();
((XPathLexer) string).nextToken();

Test 140: 
String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
((XPathLexer)"|@t+%Q5!PMe5-:Se>").not();
((XPathLexer) string).nextToken();

Test 141: 
String string = "//a[@href='https://www.example.com']/b/c";
XPathLexer xPathLexer = new XPathLexer("//a[@href='https://www.example.com']/b/c");
((XPathLexer)"//a[@href='https://www.example.com']/b/c").whitespace();
((XPathLexer) string).nextToken();

Test 142: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").dots();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

Test 143: 
String string = "CsQB>JPw8[JCPxsq";
XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
((XPathLexer)"CsQB>JPw8[JCPxsq").nextToken();
((XPathLexer) string).nextToken();

Test 144: 
XPathLexer xPathLexer = new XPathLexer("abc1234>XYZ1234");
((XPathLexer)"abc1234>XYZ1234").nextToken();

Test 145: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();

Test 146: 
XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attr1='foo']/@attr2");
((XPathLexer)"/root/child::node()[@attr1='foo']/@attr2").nextToken();

Test 147: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").nextToken();

Test 148: 
String string = "3TG!KS1#Fw\"KmCG~n";
XPathLexer xPathLexer = new XPathLexer("3TG!KS1#Fw\"KmCG~n");
((XPathLexer)"3TG!KS1#Fw\"KmCG~n").literal();
((XPathLexer) string).nextToken();

Test 149: 
XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
((XPathLexer)"LH>7Uw4wb1uVnR").nextToken();

Test 150: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();

Test 151: 
String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
((XPathLexer)"ENZi6>rrixQ").consume();
((XPathLexer) string).nextToken();
String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

Test 152: 
String string = "//foo/bar";
XPathLexer xPathLexer = new XPathLexer("//foo/bar");
((XPathLexer)"//foo/bar").at();
((XPathLexer) string).whitespace();
((XPathLexer) string).nextToken();

Test 153: 
String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
((XPathLexer)"|@t+%Q!PMe5-:S>").setXPath("|*Uwnlda =wJhv");
((XPathLexer) string).doubleColon();
((XPathLexer) string).nextToken();

Test 154: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("/bookstore/book");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();

Test 155: 
String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
((XPathLexer)"|@t+%Q5!PMe5-:Se>").setXPath("XS;hr|YS<H<+Q3rx &");
((XPathLexer) string).nextToken();

Test 156: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();

Test 157: 
String string = "//div[@class='container']//h2::text";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//h2::text");
((XPathLexer)"//div[@class='container']//h2::text").doubleColon();
((XPathLexer) string).nextToken();

Test 158: 
String string = "customerId";
XPathLexer xPathLexer = new XPathLexer("customerId");
((XPathLexer)"customerId").identifier();
((XPathLexer) string).nextToken();

Test 159: 
String string = "//div[@class='container']/p[1]";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[1]");
((XPathLexer)"//div[@class='container']/p[1]").nextToken();
((XPathLexer) string).nextToken();

Test 160: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.setXPath("g`1234567890");
xPathLexer.plus();
xPathLexer.nextToken();

Test 161: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@id='myDiv']/h1");
xPathLexer.nextToken();
xPathLexer.rightBracket();
xPathLexer.nextToken();

Test 162: 
String string = "//book[@author='Jane Doe' and @published_date>2018-01-01]";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @published_date>2018-01-01]");
((XPathLexer)"//book[@author='Jane Doe' and @published_date>2018-01-01]").setXPath("{bmClqy");
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

Test 163: 
String string = "//div[@id='main']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p");
((XPathLexer)"//div[@id='main']/p").equals();
((XPathLexer) string).nextToken();

Test 164: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author");
((XPathLexer)"//book[@id='123']/author").nextToken();

Test 165: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']");
((XPathLexer)"//book[@id='123']").nextToken();

Test 166: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").setXPath("g({/|'v*\"v>Os");
((XPathLexer) string).dots();
((XPathLexer) string).nextToken();

Test 167: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@id='main']/p[contains(text(),'Hello')]/em");
xPathLexer.nextToken();

Test 168: 
XPathLexer xPathLexer = new XPathLexer("//book[@price > 40 and @author='Jane Doe']");
((XPathLexer)"//book[@price > 40 and @author='Jane Doe']").nextToken();

Test 169: 
String string = "com.werken.saxpath.XPathLexer";
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
((XPathLexer)"com.werken.saxpath.XPathLexer").at();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 170: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@price>35]/@price");
((XPathLexer)"/bookstore/book[@price>35]/@price").nextToken();

Test 171: 
String string = "/book[price>30]/author";
XPathLexer xPathLexer = new XPathLexer("/book[price>30]/author");
((XPathLexer)"/book[price>30]/author").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 172: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").setXPath("1s_>hg");
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 173: 
String string = "/bookstore/book[@id='123']";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@id='123']");
((XPathLexer)"/bookstore/book[@id='123']").setXPath("//author[last-name='Smith']");
((XPathLexer) string).nextToken();

Test 174: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();

Test 175: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();

Test 176: 
String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|\\~`'\",./<>?";
XPathLexer xPathLexer = new XPathLexer("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|~`'\",./<>?");
((XPathLexer)"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|~`'\",./<>?").equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 177: 
String string = "-0.7nu+?U3";
XPathLexer xPathLexer = new XPathLexer("-0.7nu+?U3");
((XPathLexer)"-0.7nu+?U3").dollar();
((XPathLexer) string).nextToken();

Test 178: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@class='container']");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

Test 179: 
String string = "[ (";
XPathLexer xPathLexer = new XPathLexer("[ (");
((XPathLexer)"[ (").nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "[ (10 + 2 * 3) > 5";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 180: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setPreviousToken((Token) null);

Test 181: 
String string = ">='DB'FK_";
XPathLexer xPathLexer = new XPathLexer(">='DB'FK_");
((XPathLexer)">='DB'FK_").nextToken();
((XPathLexer) string).nextToken();
String string = ">=DB'FK_";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 182: 
String string = "//div[@class='container']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").equals();
Token at = ((XPathLexer) string).at();
((XPathLexer) string).setPreviousToken(at);
((XPathLexer) string).nextToken();

Test 183: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = ((XPathLexer)"5,b6KRVA_#").star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

Test 184: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = ((XPathLexer)";qs7R/nB:DI,").notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).rightParen();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 185: 
String string = "?";
XPathLexer xPathLexer = new XPathLexer("?");
((XPathLexer)"?").equals();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 186: 
String string = "$not|Z";
XPathLexer xPathLexer = new XPathLexer("$not|Z");
((XPathLexer)"$not|Z").dollar();
((XPathLexer) string).operatorName();

Test 187: 
XPathLexer xPathLexer = new XPathLexer("//book[has-attribute('price') and attribute-value('price') > 10.99]");
((XPathLexer)"//book[has-attribute('price') and attribute-value('price') > 10.99]").mod();

Test 188: 
XPathLexer xPathLexer = new XPathLexer();

Test 189: 
XPathLexer xPathLexer = new XPathLexer();

Test 190: 
XPathLexer xPathLexer = new XPathLexer();

Test 191: 
String string = "$9QvUuA/a^wFvpIb";
XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
((XPathLexer)"$9QvUuA/a^wFvpIb").nextToken();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();
((XPathLexer) string).number();

Test 192: 
XPathLexer xPathLexer = new XPathLexer();

Test 193: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").setXPath("[ (20) (30)");
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).dots();
((XPathLexer) string).whitespace();

Test 194: 
XPathLexer xPathLexer = new XPathLexer();

Test 195: 
String string = "1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer("1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
((XPathLexer)"1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").equals();
((XPathLexer) string).leftBracket();
((XPathLexer) string).rightBracket();
((XPathLexer) string).dots();

Test 196: 
XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attr=\"value\"]/descendant::text()");
((XPathLexer)"/root/parent/child[@attr=\"value\"]/descendant::text()").slashes();

Test 197: 

Test 198: 
String string = "version=3";
XPathLexer xPathLexer = new XPathLexer("version=3");
((XPathLexer)"version=3").nextToken();
((XPathLexer) string).equals();
int _int = null;
((XPathLexer) string).LA(_int);

Test 199: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/child::p[@id='intro']");
((XPathLexer)"//div[@class='container']/child::p[@id='intro']").LA(384);

Test 200: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume(1234);
xPathLexer.currentPosition();

Test 201: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='ABC123']");
((XPathLexer)"//book[@id='ABC123']").currentPosition();

Test 202: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='root']/div/p");
((XPathLexer)"//*[@id='root']/div/p").endPosition();

Test 203: 

Test 204: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//*[@id='example']");
xPathLexer.getXPath();

Test 205: 
XPathLexer xPathLexer = new XPathLexer("EwZO%ej9V}VE6");

Test 206: 
XPathLexer xPathLexer = new XPathLexer();

Test 207: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author/name");
((XPathLexer)"//book[@id='123']/author/name").hasMoreChars();

Test 208: 
XPathLexer xPathLexer = new XPathLexer("?");
((XPathLexer)"?").isIdentifierChar('p');

Test 209: 
XPathLexer xPathLexer = new XPathLexer("abc123@!#$%^&*()_+-=[]{}|:;'\"<>,./`");
((XPathLexer)"abc123@!#$%^&*()_+-=[]{}|:;'\"<>,./`").isIdentifierChar('a');

Test 210: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('a');
xPathLexer.isIdentifierStartChar('_');
xPathLexer.isIdentifierStartChar('$');
xPathLexer.isIdentifierStartChar('A');
xPathLexer.isIdentifierStartChar('a');
xPathLexer.isIdentifierStartChar('0');
xPathLexer.isIdentifierStartChar('-');
xPathLexer.isIdentifierStartChar('@');
xPathLexer.isIdentifierStartChar('/');

Test 211: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").isIdentifierStartChar('Z');

Test 212: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//p");
((XPathLexer)"//div[@class='container']//p").literal();

Test 213: 
XPathLexer xPathLexer = new XPathLexer(">foo");
((XPathLexer)">foo").relationalOperator();


* Generated after the refinement and before minimization 214 tests with total length 806
* test suite isTestSuite: 214
Test 0: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.identifier();
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.identifierOrOperatorName();
Test 1: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 2: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.nextToken();
Test 3: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.colon();
Test 4: 
XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 5: 
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 6: 
XPathLexer xPathLexer = new XPathLexer("P#Ab9");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 7: 
XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn");
xPathLexer.nextToken();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("lmX9pp&9^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath(">'&");
xPathLexer.leftParen();
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
xPathLexer.nextToken();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.dollar();
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer(",_p5;-/;");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 14: 
XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3");
xPathLexer.nextToken();
Test 15: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 16: 
XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
xPathLexer.not();
xPathLexer.nextToken();
Test 17: 
XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi");
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("5Sa]7MJ@![J_1");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer("c8]?563;}w");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 22: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
xPathLexer.nextToken();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.pipe();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("<W#DS'Z(Y^,X/B&uZkn");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("=f}Q2$'[c");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer(">x*~-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer("VDb1?Ui`O#SHx[+");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.not();
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.at();
xPathLexer.nextToken();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer("F$7:}");
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer("HC");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH");
xPathLexer.nextToken();
Test 38: 
XPathLexer xPathLexer = new XPathLexer("J+D");
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n");
xPathLexer.literal();
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.consume();
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("TXO]$");
xPathLexer.at();
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.setXPath("|*Uwnlda =wJhv");
xPathLexer.doubleColon();
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("nXW0n");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("/yvW-=1[3Ky`O9h");
xPathLexer.doubleColon();
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%");
xPathLexer.identifier();
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaDf2|");
xPathLexer.nextToken();
xPathLexer.dots();
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 53: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("{bmClqy");
xPathLexer.at();
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1");
xPathLexer.equals();
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("d");
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("g({/|'v*\"v>Os");
xPathLexer.dots();
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("i");
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer("j z#");
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.rightBracket();
xPathLexer.consume();
xPathLexer.nextToken();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer("o>kQ~tP5]d8dxb;hT!");
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer("rot|K");
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("1s_>hg");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("u");
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt");
xPathLexer.slashes();
xPathLexer.doubleColon();
xPathLexer.leftBracket();
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 73: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 75: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 76: 
XPathLexer xPathLexer = new XPathLexer(">=DB'FK_");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 79: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.rightParen();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 81: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.operatorName();
Test 82: 
XPathLexer xPathLexer = new XPathLexer("not|Z");
xPathLexer.dollar();
xPathLexer.operatorName();
Test 83: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.mod();
Test 84: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.div();
Test 85: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.and();
Test 86: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.or();
Test 87: 
XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.number();
Test 88: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.whitespace();
Test 89: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath("[ (20) (5)");
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.dots();
xPathLexer.whitespace();
Test 90: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.relationalOperator();
Test 91: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.rightBracket();
xPathLexer.dots();
Test 92: 
XPathLexer xPathLexer = new XPathLexer("c/a)/[>Xb8X");
xPathLexer.slashes();
Test 93: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 94: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.comma();
xPathLexer.LA(0);
Test 95: 
XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.LA((-1));
Test 96: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.LA(384);
Test 97: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume((-3590));
xPathLexer.currentPosition();
Test 98: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.rightParen();
xPathLexer.currentPosition();
Test 99: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.currentPosition();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI");
xPathLexer.endPosition();
Test 101: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.endPosition();
Test 102: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 103: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getPreviousToken();
Test 104: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("");
xPathLexer.getXPath();
Test 105: 
XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6");
xPathLexer.getXPath();
Test 106: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 107: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.hasMoreChars();
Test 108: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.isIdentifierChar(' ');
Test 109: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.isIdentifierChar('c');
Test 110: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('\"');
Test 111: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.isIdentifierStartChar('_');
Test 112: 
XPathLexer xPathLexer = new XPathLexer("Frv");
xPathLexer.literal();
Test 113: 
XPathLexer xPathLexer = new XPathLexer(">^");
xPathLexer.relationalOperator();
Test 114: 
String string = "[ (";
XPathLexer xPathLexer = new XPathLexer("[ (");
((XPathLexer)"[ (").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 115: 
String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
((XPathLexer)"|@t+%Q!PMe5-:S>").nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).nextToken();

Test 116: 
XPathLexer xPathLexer = new XPathLexer();

Test 117: 
String string = "v3!t#sa=:t#";
XPathLexer xPathLexer = new XPathLexer("v3!t#sa=:t#");
((XPathLexer)"v3!t#sa=:t#").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 118: 
String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
((XPathLexer)"nkyCfokrKc\"`Fi").nextToken();
((XPathLexer) string).nextToken();
String string = "nkyCfokrKc\"`Fi";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 119: 
String string = "path/attribute[@attr1=*]/number";
XPathLexer xPathLexer = new XPathLexer("path/attribute[@attr1=*]/number");
((XPathLexer)"path/attribute[@attr1=*]/number").nextToken();
((XPathLexer) string).nextToken();

Test 120: 
String string = "7$YX.X5T[Wr)o$A C";
XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
((XPathLexer)"7$YX.X5T[Wr)o$A C").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 121: 
XPathLexer xPathLexer = new XPathLexer("3.141592653589793238462643383279502884197169399375105820974944592307816");
((XPathLexer)"3.141592653589793238462643383279502884197169399375105820974944592307816").nextToken();

Test 122: 
String string = "/bookstore/book[author='John Doe']";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[author='John Doe']");
((XPathLexer)"/bookstore/book[author='John Doe']").nextToken();
((XPathLexer) string).nextToken();

Test 123: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").setXPath(">='&");
((XPathLexer) string).leftParen();
((XPathLexer) string).nextToken();

Test 124: 
XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
((XPathLexer)"*p(GDl*7/kp0R").nextToken();

Test 125: 
String string = "//div[@class='title'] +%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("//div[@class='title'] +%Q5!PMe5-:Se>");
((XPathLexer)"//div[@class='title'] +%Q5!PMe5-:Se>").nextToken();
((XPathLexer) string).equals();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).star();
((XPathLexer) string).dollar();
Token doubleColon = ((XPathLexer) string).doubleColon();
((XPathLexer) string).setPreviousToken(doubleColon);
((XPathLexer) string).nextToken();

Test 126: 
String string = "//*[@id='main']/div/p";
XPathLexer xPathLexer = new XPathLexer("//*[@id='main']/div/p");
((XPathLexer)"//*[@id='main']/div/p").nextToken();
((XPathLexer) string).nextToken();

Test 127: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123' and @class='novel']");
((XPathLexer)"//book[@id='123' and @class='novel']").nextToken();

Test 128: 
String string = ".0_fo~0N:=IpectkY-";
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
((XPathLexer)".0_fo~0N:=IpectkY-").dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();

Test 129: 
String string = "C1@mQT2";
XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
((XPathLexer)"C1@mQT2").not();
((XPathLexer) string).nextToken();
((XPathLexer) string).not();
((XPathLexer) string).nextToken();

Test 130: 
XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
((XPathLexer)"2d#<6(Rf 2").nextToken();

Test 131: 
XPathLexer xPathLexer = new XPathLexer("1234567890RJ1$Pizza");
((XPathLexer)"1234567890RJ1$Pizza").nextToken();

Test 132: 
String string = "The quick brown fox jumps over the lazy dog";
XPathLexer xPathLexer = new XPathLexer("The quick brown fox jumps over the lazy dog");
((XPathLexer)"The quick brown fox jumps over the lazy dog").nextToken();
((XPathLexer) string).nextToken();

Test 133: 
String string = "123,abc";
XPathLexer xPathLexer = new XPathLexer("123,abc");
((XPathLexer)"123,abc").dots();
((XPathLexer) string).leftBracket();
((XPathLexer) string).notEquals();
((XPathLexer) string).nextToken();

Test 134: 
String string = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
((XPathLexer)"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").dollar();
((XPathLexer) string).nextToken();

Test 135: 
String string = "//div[@id='main']//p[@class='title']/text()";
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']//p[@class='title']/text()");
((XPathLexer)"//div[@id='main']//p[@class='title']/text()").equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).pipe();
((XPathLexer) string).nextToken();

Test 136: 
XPathLexer xPathLexer = new XPathLexer("/users/user[@id='7890']/phone");
((XPathLexer)"/users/user[@id='7890']/phone").nextToken();

Test 137: 
String string = "W3DS'Z(Y^,X/B&uZkn";
XPathLexer xPathLexer = new XPathLexer("W3DS'Z(Y^,X/B&uZkn");
((XPathLexer)"W3DS'Z(Y^,X/B&uZkn").nextToken();
((XPathLexer) string).nextToken();

Test 138: 
String string = ">x*~-";
XPathLexer xPathLexer = new XPathLexer(">x*~-");
((XPathLexer)">x*~-").nextToken();
((XPathLexer) string).nextToken();
String string = ">10*~-";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 139: 
String string = "//book[@id='1234' and @available='true']";
XPathLexer xPathLexer = new XPathLexer("//book[@id='1234' and @available='true']");
((XPathLexer)"//book[@id='1234' and @available='true']").nextToken();
((XPathLexer) string).nextToken();

Test 140: 
String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
((XPathLexer)"|@t+%Q5!PMe5-:Se>").not();
((XPathLexer) string).nextToken();

Test 141: 
String string = "//a[@href='https://www.example.com']/b/c";
XPathLexer xPathLexer = new XPathLexer("//a[@href='https://www.example.com']/b/c");
((XPathLexer)"//a[@href='https://www.example.com']/b/c").whitespace();
((XPathLexer) string).nextToken();

Test 142: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").dots();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

Test 143: 
String string = "CsQB>JPw8[JCPxsq";
XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
((XPathLexer)"CsQB>JPw8[JCPxsq").nextToken();
((XPathLexer) string).nextToken();

Test 144: 
XPathLexer xPathLexer = new XPathLexer("abc1234>XYZ1234");
((XPathLexer)"abc1234>XYZ1234").nextToken();

Test 145: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();

Test 146: 
XPathLexer xPathLexer = new XPathLexer("/root/child::node()[@attr1='foo']/@attr2");
((XPathLexer)"/root/child::node()[@attr1='foo']/@attr2").nextToken();

Test 147: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").nextToken();

Test 148: 
String string = "3TG!KS1#Fw\"KmCG~n";
XPathLexer xPathLexer = new XPathLexer("3TG!KS1#Fw\"KmCG~n");
((XPathLexer)"3TG!KS1#Fw\"KmCG~n").literal();
((XPathLexer) string).nextToken();

Test 149: 
XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
((XPathLexer)"LH>7Uw4wb1uVnR").nextToken();

Test 150: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();

Test 151: 
String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
((XPathLexer)"ENZi6>rrixQ").consume();
((XPathLexer) string).nextToken();
String string = "ENZi6>rrixQ";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).consume();
((XPathLexer) string).nextToken();

Test 152: 
String string = "//foo/bar";
XPathLexer xPathLexer = new XPathLexer("//foo/bar");
((XPathLexer)"//foo/bar").at();
((XPathLexer) string).whitespace();
((XPathLexer) string).nextToken();

Test 153: 
String string = "|@t+%Q!PMe5-:S>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
((XPathLexer)"|@t+%Q!PMe5-:S>").setXPath("|*Uwnlda =wJhv");
((XPathLexer) string).doubleColon();
((XPathLexer) string).nextToken();

Test 154: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("/bookstore/book");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.nextToken();

Test 155: 
String string = "|@t+%Q5!PMe5-:Se>";
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
((XPathLexer)"|@t+%Q5!PMe5-:Se>").setXPath("XS;hr|YS<H<+Q3rx &");
((XPathLexer) string).nextToken();

Test 156: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();

Test 157: 
String string = "//div[@class='container']//h2::text";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//h2::text");
((XPathLexer)"//div[@class='container']//h2::text").doubleColon();
((XPathLexer) string).nextToken();

Test 158: 
String string = "customerId";
XPathLexer xPathLexer = new XPathLexer("customerId");
((XPathLexer)"customerId").identifier();
((XPathLexer) string).nextToken();

Test 159: 
String string = "//div[@class='container']/p[1]";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p[1]");
((XPathLexer)"//div[@class='container']/p[1]").nextToken();
((XPathLexer) string).nextToken();

Test 160: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.setXPath("g`1234567890");
xPathLexer.plus();
xPathLexer.nextToken();

Test 161: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@id='myDiv']/h1");
xPathLexer.nextToken();
xPathLexer.rightBracket();
xPathLexer.nextToken();

Test 162: 
String string = "//book[@author='Jane Doe' and @published_date>2018-01-01]";
XPathLexer xPathLexer = new XPathLexer("//book[@author='Jane Doe' and @published_date>2018-01-01]");
((XPathLexer)"//book[@author='Jane Doe' and @published_date>2018-01-01]").setXPath("{bmClqy");
((XPathLexer) string).at();
((XPathLexer) string).nextToken();

Test 163: 
String string = "//div[@id='main']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@id='main']/p");
((XPathLexer)"//div[@id='main']/p").equals();
((XPathLexer) string).nextToken();

Test 164: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author");
((XPathLexer)"//book[@id='123']/author").nextToken();

Test 165: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']");
((XPathLexer)"//book[@id='123']").nextToken();

Test 166: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").setXPath("g({/|'v*\"v>Os");
((XPathLexer) string).dots();
((XPathLexer) string).nextToken();

Test 167: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@id='main']/p[contains(text(),'Hello')]/em");
xPathLexer.nextToken();

Test 168: 
XPathLexer xPathLexer = new XPathLexer("//book[@price > 40 and @author='Jane Doe']");
((XPathLexer)"//book[@price > 40 and @author='Jane Doe']").nextToken();

Test 169: 
String string = "com.werken.saxpath.XPathLexer";
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
((XPathLexer)"com.werken.saxpath.XPathLexer").at();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 170: 
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@price>35]/@price");
((XPathLexer)"/bookstore/book[@price>35]/@price").nextToken();

Test 171: 
String string = "/book[price>30]/author";
XPathLexer xPathLexer = new XPathLexer("/book[price>30]/author");
((XPathLexer)"/book[price>30]/author").nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 172: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
((XPathLexer)";qs7R/nB:DI,").setXPath("1s_>hg");
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 173: 
String string = "/bookstore/book[@id='123']";
XPathLexer xPathLexer = new XPathLexer("/bookstore/book[@id='123']");
((XPathLexer)"/bookstore/book[@id='123']").setXPath("//author[last-name='Smith']");
((XPathLexer) string).nextToken();

Test 174: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();

Test 175: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();

Test 176: 
String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|\\~`'\",./<>?";
XPathLexer xPathLexer = new XPathLexer("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|~`'\",./<>?");
((XPathLexer)"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:;<=>@#$%^&*()_+-=[]{}|~`'\",./<>?").equals();
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).dollar();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 177: 
String string = "-0.7nu+?U3";
XPathLexer xPathLexer = new XPathLexer("-0.7nu+?U3");
((XPathLexer)"-0.7nu+?U3").dollar();
((XPathLexer) string).nextToken();

Test 178: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@class='container']");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();

Test 179: 
String string = "[ (";
XPathLexer xPathLexer = new XPathLexer("[ (");
((XPathLexer)"[ (").nextToken();
((XPathLexer) string).identifierOrOperatorName();
String string = "[ (10 + 2 * 3) > 5";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).identifierOrOperatorName();

Test 180: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setPreviousToken((Token) null);

Test 181: 
String string = ">='DB'FK_";
XPathLexer xPathLexer = new XPathLexer(">='DB'FK_");
((XPathLexer)">='DB'FK_").nextToken();
((XPathLexer) string).nextToken();
String string = ">=DB'FK_";
XPathLexer xPathLexer = new XPathLexer(string);
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 182: 
String string = "//div[@class='container']/p";
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/p");
((XPathLexer)"//div[@class='container']/p").equals();
Token at = ((XPathLexer) string).at();
((XPathLexer) string).setPreviousToken(at);
((XPathLexer) string).nextToken();

Test 183: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = ((XPathLexer)"5,b6KRVA_#").star();
((XPathLexer) string).setPreviousToken(star);
((XPathLexer) string).identifierOrOperatorName();

Test 184: 
String string = ";qs7R/nB:DI,";
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = ((XPathLexer)";qs7R/nB:DI,").notEquals();
((XPathLexer) string).setPreviousToken(notEquals);
((XPathLexer) string).rightParen();
((XPathLexer) string).rightBracket();
((XPathLexer) string).nextToken();

Test 185: 
String string = "?";
XPathLexer xPathLexer = new XPathLexer("?");
((XPathLexer)"?").equals();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();
((XPathLexer) string).nextToken();

Test 186: 
String string = "$not|Z";
XPathLexer xPathLexer = new XPathLexer("$not|Z");
((XPathLexer)"$not|Z").dollar();
((XPathLexer) string).operatorName();

Test 187: 
XPathLexer xPathLexer = new XPathLexer("//book[has-attribute('price') and attribute-value('price') > 10.99]");
((XPathLexer)"//book[has-attribute('price') and attribute-value('price') > 10.99]").mod();

Test 188: 
XPathLexer xPathLexer = new XPathLexer();

Test 189: 
XPathLexer xPathLexer = new XPathLexer();

Test 190: 
XPathLexer xPathLexer = new XPathLexer();

Test 191: 
String string = "$9QvUuA/a^wFvpIb";
XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
((XPathLexer)"$9QvUuA/a^wFvpIb").nextToken();
((XPathLexer) string).plus();
((XPathLexer) string).nextToken();
((XPathLexer) string).number();

Test 192: 
XPathLexer xPathLexer = new XPathLexer();

Test 193: 
String string = "5,b6KRVA_#";
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").setXPath("[ (20) (30)");
((XPathLexer) string).at();
((XPathLexer) string).nextToken();
((XPathLexer) string).minus();
((XPathLexer) string).dots();
((XPathLexer) string).whitespace();

Test 194: 
XPathLexer xPathLexer = new XPathLexer();

Test 195: 
String string = "1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
XPathLexer xPathLexer = new XPathLexer("1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
((XPathLexer)"1234.567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ").equals();
((XPathLexer) string).leftBracket();
((XPathLexer) string).rightBracket();
((XPathLexer) string).dots();

Test 196: 
XPathLexer xPathLexer = new XPathLexer("/root/parent/child[@attr=\"value\"]/descendant::text()");
((XPathLexer)"/root/parent/child[@attr=\"value\"]/descendant::text()").slashes();

Test 197: 

Test 198: 
String string = "version=3";
XPathLexer xPathLexer = new XPathLexer("version=3");
((XPathLexer)"version=3").nextToken();
((XPathLexer) string).equals();
int _int = null;
((XPathLexer) string).LA(_int);

Test 199: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']/child::p[@id='intro']");
((XPathLexer)"//div[@class='container']/child::p[@id='intro']").LA(384);

Test 200: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume(1234);
xPathLexer.currentPosition();

Test 201: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='ABC123']");
((XPathLexer)"//book[@id='ABC123']").currentPosition();

Test 202: 
XPathLexer xPathLexer = new XPathLexer("//*[@id='root']/div/p");
((XPathLexer)"//*[@id='root']/div/p").endPosition();

Test 203: 

Test 204: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//*[@id='example']");
xPathLexer.getXPath();

Test 205: 
XPathLexer xPathLexer = new XPathLexer("EwZO%ej9V}VE6");

Test 206: 
XPathLexer xPathLexer = new XPathLexer();

Test 207: 
XPathLexer xPathLexer = new XPathLexer("//book[@id='123']/author/name");
((XPathLexer)"//book[@id='123']/author/name").hasMoreChars();

Test 208: 
XPathLexer xPathLexer = new XPathLexer("?");
((XPathLexer)"?").isIdentifierChar('p');

Test 209: 
XPathLexer xPathLexer = new XPathLexer("abc123@!#$%^&*()_+-=[]{}|:;'\"<>,./`");
((XPathLexer)"abc123@!#$%^&*()_+-=[]{}|:;'\"<>,./`").isIdentifierChar('a');

Test 210: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('a');
xPathLexer.isIdentifierStartChar('_');
xPathLexer.isIdentifierStartChar('$');
xPathLexer.isIdentifierStartChar('A');
xPathLexer.isIdentifierStartChar('a');
xPathLexer.isIdentifierStartChar('0');
xPathLexer.isIdentifierStartChar('-');
xPathLexer.isIdentifierStartChar('@');
xPathLexer.isIdentifierStartChar('/');

Test 211: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
((XPathLexer)"5,b6KRVA_#").isIdentifierStartChar('Z');

Test 212: 
XPathLexer xPathLexer = new XPathLexer("//div[@class='container']//p");
((XPathLexer)"//div[@class='container']//p").literal();

Test 213: 
XPathLexer xPathLexer = new XPathLexer(">foo");
((XPathLexer)">foo").relationalOperator();


* Minimizing test suite
* test suite isTestSuite: 110
Test 0: 
XPathLexer xPathLexer = new XPathLexer(",_p5;-/;");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 1: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.nextToken();
Test 2: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.colon();
Test 3: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 4: 
XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
xPathLexer.nextToken();
Test 5: 
XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3");
xPathLexer.nextToken();
Test 6: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume(1234);
xPathLexer.currentPosition();
Test 7: 
XPathLexer xPathLexer = new XPathLexer("nkyCfokrKc\"`Fi");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 8: 
XPathLexer xPathLexer = new XPathLexer("P#Ab9");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 9: 
XPathLexer xPathLexer = new XPathLexer("7$YX.X5T[Wr)o$A C");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 10: 
XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn");
xPathLexer.nextToken();
Test 11: 
XPathLexer xPathLexer = new XPathLexer("lmX9pp&9^");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 12: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath(">'&");
xPathLexer.leftParen();
xPathLexer.nextToken();
Test 13: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 14: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(")");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 15: 
XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 16: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
Test 17: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 18: 
XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
xPathLexer.not();
xPathLexer.nextToken();
Test 19: 
XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
xPathLexer.nextToken();
Test 20: 
XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi");
xPathLexer.nextToken();
Test 21: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 22: 
XPathLexer xPathLexer = new XPathLexer("5Sa]7MJ@![J_1");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 23: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.dots();
xPathLexer.leftBracket();
xPathLexer.notEquals();
xPathLexer.nextToken();
Test 24: 
XPathLexer xPathLexer = new XPathLexer("c8]?563;}w");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 25: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
xPathLexer.nextToken();
Test 26: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 27: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.nextToken();
Test 28: 
XPathLexer xPathLexer = new XPathLexer("<W#DS'Z(Y^,X/B&uZkn");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 29: 
XPathLexer xPathLexer = new XPathLexer("=f}Q2$'[c");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 30: 
XPathLexer xPathLexer = new XPathLexer(">=DB'FK_");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 31: 
XPathLexer xPathLexer = new XPathLexer("VDb1?Ui`O#SHx[+");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 32: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.not();
xPathLexer.nextToken();
Test 33: 
XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 34: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.at();
xPathLexer.nextToken();
Test 35: 
XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
xPathLexer.nextToken();
Test 36: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.nextToken();
Test 37: 
XPathLexer xPathLexer = new XPathLexer("F$7:}");
xPathLexer.nextToken();
Test 38: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.dollar();
xPathLexer.nextToken();
Test 39: 
XPathLexer xPathLexer = new XPathLexer("HC");
xPathLexer.nextToken();
Test 40: 
XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH");
xPathLexer.nextToken();
Test 41: 
XPathLexer xPathLexer = new XPathLexer("J+D");
xPathLexer.nextToken();
Test 42: 
XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n");
xPathLexer.literal();
xPathLexer.nextToken();
Test 43: 
XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
xPathLexer.nextToken();
Test 44: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 45: 
XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.consume();
xPathLexer.nextToken();
Test 46: 
XPathLexer xPathLexer = new XPathLexer("TXO]$");
xPathLexer.at();
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 47: 
XPathLexer xPathLexer = new XPathLexer("$9QvUuA/a^wFvpIb");
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.nextToken();
xPathLexer.number();
Test 48: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.setXPath("|*Uwnlda =wJhv");
xPathLexer.doubleColon();
xPathLexer.nextToken();
Test 49: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
xPathLexer.nextToken();
Test 50: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
xPathLexer.not();
xPathLexer.dollar();
xPathLexer.nextToken();
Test 51: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("V5Hv]wytK@fkUC");
xPathLexer.identifier();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 52: 
XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%");
xPathLexer.identifier();
xPathLexer.nextToken();
Test 53: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
xPathLexer.plus();
xPathLexer.nextToken();
Test 54: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaDf2|");
xPathLexer.nextToken();
xPathLexer.dots();
xPathLexer.dots();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 55: 
XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1");
xPathLexer.equals();
xPathLexer.nextToken();
Test 56: 
XPathLexer xPathLexer = new XPathLexer("d");
xPathLexer.nextToken();
Test 57: 
XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0");
xPathLexer.nextToken();
Test 58: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("g({/|'v*\"v>Os");
xPathLexer.dots();
xPathLexer.nextToken();
Test 59: 
XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g");
xPathLexer.whitespace();
xPathLexer.nextToken();
Test 60: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//div[@id='myDiv']/h1");
xPathLexer.nextToken();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 61: 
XPathLexer xPathLexer = new XPathLexer("j z#");
xPathLexer.nextToken();
Test 62: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.rightBracket();
xPathLexer.consume();
xPathLexer.nextToken();
Test 63: 
XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
xPathLexer.at();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 64: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("//book[price>35.00 and author='J.K. Rowling']");
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.rightParen();
xPathLexer.nextToken();
Test 65: 
XPathLexer xPathLexer = new XPathLexer("rot|K");
xPathLexer.nextToken();
Test 66: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("1s_>hg");
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 67: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("u");
xPathLexer.nextToken();
Test 68: 
XPathLexer xPathLexer = new XPathLexer(">x*~-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 69: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
xPathLexer.getPreviousToken();
Test 70: 
XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 71: 
XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt");
xPathLexer.slashes();
xPathLexer.doubleColon();
xPathLexer.leftBracket();
xPathLexer.nextToken();
Test 72: 
XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.identifier();
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.plus();
xPathLexer.identifierOrOperatorName();
Test 73: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.nextToken();
xPathLexer.nextToken();
xPathLexer.nextToken();
Test 74: 
XPathLexer xPathLexer = new XPathLexer("[ (");
xPathLexer.nextToken();
xPathLexer.identifierOrOperatorName();
Test 75: 
XPathLexer xPathLexer = new XPathLexer();
Token minus = xPathLexer.minus();
xPathLexer.setPreviousToken(minus);
xPathLexer.identifierOrOperatorName();
Test 76: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
Token at = xPathLexer.at();
xPathLexer.setPreviousToken(at);
xPathLexer.nextToken();
Test 77: 
XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.dollar();
xPathLexer.nextToken();
xPathLexer.star();
xPathLexer.dollar();
Token doubleColon = xPathLexer.doubleColon();
xPathLexer.setPreviousToken(doubleColon);
xPathLexer.nextToken();
Test 78: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token star = xPathLexer.star();
xPathLexer.setPreviousToken(star);
xPathLexer.identifierOrOperatorName();
Test 79: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token notEquals = xPathLexer.notEquals();
xPathLexer.setPreviousToken(notEquals);
xPathLexer.rightParen();
xPathLexer.rightBracket();
xPathLexer.nextToken();
Test 80: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
xPathLexer.operatorName();
Test 81: 
XPathLexer xPathLexer = new XPathLexer("not|Z");
xPathLexer.dollar();
xPathLexer.operatorName();
Test 82: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.mod();
Test 83: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.div();
Test 84: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.and();
Test 85: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.or();
Test 86: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.whitespace();
Test 87: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath("[ (20) (5)");
xPathLexer.at();
xPathLexer.nextToken();
xPathLexer.minus();
xPathLexer.dots();
xPathLexer.whitespace();
Test 88: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.relationalOperator();
Test 89: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.rightBracket();
xPathLexer.dots();
Test 90: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getXPath();
Test 91: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.equals();
xPathLexer.leftBracket();
xPathLexer.comma();
xPathLexer.LA(0);
Test 92: 
XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
xPathLexer.nextToken();
xPathLexer.equals();
xPathLexer.LA((-1));
Test 93: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.LA(384);
Test 94: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume((-3590));
xPathLexer.currentPosition();
Test 95: 
XPathLexer xPathLexer = new XPathLexer("");
xPathLexer.currentPosition();
Test 96: 
XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI");
xPathLexer.endPosition();
Test 97: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.endPosition();
Test 98: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.getPreviousToken();
Test 99: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("");
xPathLexer.getXPath();
Test 100: 
XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6");
xPathLexer.getXPath();
Test 101: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.hasMoreChars();
Test 102: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.hasMoreChars();
Test 103: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.isIdentifierChar(' ');
Test 104: 
XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.isIdentifierChar('c');
Test 105: 
XPathLexer xPathLexer = new XPathLexer();
xPathLexer.isIdentifierStartChar('\"');
Test 106: 
XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.isIdentifierStartChar('_');
Test 107: 
XPathLexer xPathLexer = new XPathLexer("Frv");
xPathLexer.literal();
Test 108: 
XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.pipe();
Test 109: 
XPathLexer xPathLexer = new XPathLexer(">^");
xPathLexer.relationalOperator();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 484
* Number of covered goals: 422
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 250
* Number of covered goals: 231
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 142
* Number of covered goals: 54
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 44
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 484
* Number of covered goals: 422
* Generated 110 tests with total length 372
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 58%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token colon = xPathLexer.colon();
assertEquals(18, colon.getTokenType());


** It was a parseable test case! 
refined test name is: testColon
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(">+y}]sKzo4Kdu");
Token at = xPathLexer.at();
assertEquals(16, at.getTokenType());
assertEquals(">", at.getTokenText());

Token rightBracket = xPathLexer.rightBracket();
assertEquals("+", rightBracket.getTokenText());
assertEquals(4, rightBracket.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("y", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLexerAtRightBracketNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("*p(GDl*7/kp0R");
Token nextToken = xPathLexer.nextToken();
assertEquals(20, nextToken.getTokenType());
assertEquals("*", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testGetNextTokenForAsterisk
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("-.dnu+?U3");
Token nextToken = xPathLexer.nextToken();
assertEquals(6, nextToken.getTokenType());
assertEquals("-", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerReturnsCorrectOperatorToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume(1234);
int currentPosition = xPathLexer.currentPosition();
assertEquals(1234, currentPosition);


** It was a parseable test case! 
refined test name is: testCurrentPositionConsumedInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("%dG!%KS1#Fw\"KmGtn");
Token nextToken = xPathLexer.nextToken();
assertEquals("%dG!%KS1#Fw\"KmGtn", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath(">'&");
Token leftParen = xPathLexer.leftParen();
assertEquals(">", leftParen.getTokenText());
assertEquals(1, leftParen.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("", nextToken.getTokenText());
assertEquals((-1), nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerLeftParenParsing
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath(")");
xPathLexer.nextToken();
Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertNull(identifierOrOperatorName);


** It was a parseable test case! 
refined test name is: testInvalidXPathSyntaxReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("-.7nu+?U3");
Token dollar = xPathLexer.dollar();
assertEquals(26, dollar.getTokenType());
assertEquals("-", dollar.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals(31, nextToken.getTokenType());
assertEquals(".7", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testDollarAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(".0_fo~0N:=IpectkY-");
Token dollar = xPathLexer.dollar();
assertEquals(26, dollar.getTokenType());
assertEquals(".", dollar.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("0", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testDollarAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("C1@mQT2");
Token not = xPathLexer.not();
assertEquals(23, not.getTokenType());
assertEquals("C", not.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("1", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNotToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("2d#<6(Rf 2");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("2", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsCorrectNumberAndText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("38RJ1$Pi");
Token nextToken = xPathLexer.nextToken();
assertEquals("38", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenValidXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.nextToken();
Token previousToken = xPathLexer.getPreviousToken();
assertEquals("4", previousToken.getTokenText());
assertEquals(30, previousToken.getTokenType());


** It was a parseable test case! 
refined test name is: testGetPreviousToken
* Compiling Tests
refined test name is: testGetPreviousToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token dots = xPathLexer.dots();
assertEquals(13, dots.getTokenType());
assertEquals("5", dots.getTokenText());

Token leftBracket = xPathLexer.leftBracket();
assertEquals(",", leftBracket.getTokenText());
assertEquals(3, leftBracket.getTokenType());

Token notEquals = xPathLexer.notEquals();
assertEquals(22, notEquals.getTokenType());
assertEquals("b", notEquals.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("6", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerdots
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("c8]?563;}w");
Token dollar = xPathLexer.dollar();
assertEquals(26, dollar.getTokenType());
assertEquals("c", dollar.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("8", nextToken.getTokenText());
assertEquals(30, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testDollarAndNextToken
* Compiling Tests
refined test name is: testDollarMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("9~i)8,f0]ARJ%h_@X");
Token nextToken = xPathLexer.nextToken();
assertEquals(30, nextToken.getTokenType());
assertEquals("9", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testValidXPathExpressionWithNumberToken
* Compiling Tests
refined test name is: testSetXPathValidExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token nextToken = xPathLexer.nextToken();
assertEquals(";qs7R/nB:DI,", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenreturnsCorrectToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
Token not = xPathLexer.not();
assertEquals("|", not.getTokenText());
assertEquals(23, not.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("@", nextToken.getTokenText());
assertEquals(16, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNotMethodReturnsCorrectToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("&AZTy!9{{P");
Token whitespace = xPathLexer.whitespace();
assertEquals("", whitespace.getTokenText());
assertEquals((-2), whitespace.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("AZTy", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerwhitespaceAndNextToken
* Compiling Tests
refined test name is: testLexerwhitespaceAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("CsQB>JPw8[JCPxsq");
Token nextToken = xPathLexer.nextToken();
assertEquals("CsQB", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerNextTokenWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
Token nextToken = xPathLexer.nextToken();
assertEquals("ENZi6", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenWithIdentifier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("F$7:}");
Token nextToken = xPathLexer.nextToken();
assertEquals("F", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidXPathReturnsFTokenType15
* Compiling Tests
refined test name is: testNextTokenReturnsCorrectToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
Token dollar = xPathLexer.dollar();
assertEquals("T", dollar.getTokenText());
assertEquals(26, dollar.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("GZ", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testDollarAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("HC");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("HC", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenOnString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("I?(*SC7lKVY)sxH");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("I", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testValidXPathExpressionLexing
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("J+D");
Token nextToken = xPathLexer.nextToken();
assertEquals("J", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testSingleCharacterToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("%dTG!%KS1#Fw\"KmCG~n");
Token literal = xPathLexer.literal();
assertEquals("dTG!", literal.getTokenText());
assertEquals(27, literal.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("KS1", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLiteralnoComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("LH>7Uw4wb1uVnR");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("LH", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testTokenizeSimplePathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("ENZi6>rrixQ");
xPathLexer.consume();
Token nextToken = xPathLexer.nextToken();
assertEquals("NZi6", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testConsumeNextTokenwithXPathLexer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("TXO]$");
Token at = xPathLexer.at();
assertEquals("T", at.getTokenText());
assertEquals(16, at.getTokenType());

Token whitespace = xPathLexer.whitespace();
assertEquals((-2), whitespace.getTokenType());
assertEquals("", whitespace.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("O", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerShouldReturnTokensForXPathQuery
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q!PMe5-:S>");
xPathLexer.setXPath("|*Uwnlda =wJhv");
Token doubleColon = xPathLexer.doubleColon();
assertEquals(19, doubleColon.getTokenType());
assertEquals("|*", doubleColon.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("Uwnlda", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testValidXPathWithDoubleColon
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("|@t+%Q5!PMe5-:Se>");
xPathLexer.setXPath("XS;hr|YS<H<+Q3rx &");
Token nextToken = xPathLexer.nextToken();
assertEquals("XS", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerSetXPath
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("TGZ$>! MaID?f2&|");
Token not = xPathLexer.not();
assertEquals(23, not.getTokenType());
assertEquals("T", not.getTokenText());

Token dollar = xPathLexer.dollar();
assertEquals("G", dollar.getTokenText());
assertEquals(26, dollar.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("Z", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathNotToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("pp^eou[iQDj,%26;%");
Token identifier = xPathLexer.identifier();
assertEquals("pp", identifier.getTokenText());
assertEquals(15, identifier.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("^eou[iQDj,%26;%", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerIdentifier
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("g`1");
Token plus = xPathLexer.plus();
assertEquals(5, plus.getTokenType());
assertEquals("g", plus.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("`1", nextToken.getTokenText());
assertEquals((-1), nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testPlusMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("4cguWW<KRd5n':;~@(1");
Token equals = xPathLexer.equals();
assertEquals("4", equals.getTokenText());
assertEquals(21, equals.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("cguWW", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerTokens
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("d");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("d", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testNextTokenWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("eN\"&W^4!^O8<tNy')0");
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("eN", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testLexerIdentifiesENTag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("g({/|'v*\"v>Os");
Token dots = xPathLexer.dots();
assertEquals("", dots.getTokenText());
assertEquals(13, dots.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("g", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testLexerWithXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("Cheky})1c4O*V>g");
Token whitespace = xPathLexer.whitespace();
assertEquals("", whitespace.getTokenText());
assertEquals((-2), whitespace.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("heky", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLexer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("j z#");
Token nextToken = xPathLexer.nextToken();
assertEquals("j", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenShouldReturnCorrectTokenTypeAndText
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
Token rightBracket = xPathLexer.rightBracket();
assertEquals("m", rightBracket.getTokenText());
assertEquals(4, rightBracket.getTokenType());

xPathLexer.consume();
Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("klL", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testRightBracketAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
Token at = xPathLexer.at();
assertEquals(16, at.getTokenType());
assertEquals("c", at.getTokenText());

Token rightBracket = xPathLexer.rightBracket();
assertEquals("o", rightBracket.getTokenText());
assertEquals(4, rightBracket.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("m.werken.saxpath.XPathLexer", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testAtRightBracketAndNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("rot|K");
Token nextToken = xPathLexer.nextToken();
assertEquals("rot", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenReturnsCorrectToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("1s_>hg");
Token rightBracket = xPathLexer.rightBracket();
assertEquals(4, rightBracket.getTokenType());
assertEquals("1", rightBracket.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("s_", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testRightBracketreturnsLeftBracketToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
xPathLexer.setXPath("u");
Token nextToken = xPathLexer.nextToken();
assertEquals("u", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testSetXPathWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.nextToken();
Token previousToken = xPathLexer.getPreviousToken();
assertEquals((-1), previousToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNextTokenMovesToNextTokenAfterFirstOne
* Compiling Tests
refined test name is: testNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.2Q{p:j vt");
Token slashes = xPathLexer.slashes();
assertEquals("?", slashes.getTokenText());
assertEquals(11, slashes.getTokenType());

Token doubleColon = xPathLexer.doubleColon();
assertEquals(".z", doubleColon.getTokenText());
assertEquals(19, doubleColon.getTokenType());

Token leftBracket = xPathLexer.leftBracket();
assertEquals("S", leftBracket.getTokenText());
assertEquals(3, leftBracket.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(31, nextToken.getTokenType());
assertEquals(".2", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testTokensAreCorrectlyTokenized
* Compiling Tests
refined test name is: testSlashesDoubleColonLeftBracketNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("4k|N.5'd>u}+28");
xPathLexer.identifier();
xPathLexer.doubleColon();
xPathLexer.nextToken();
xPathLexer.plus();
Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertNull(identifierOrOperatorName);


** It was a parseable test case! 
refined test name is: testXPathLexerTokenizesExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("[ (");
Token nextToken = xPathLexer.nextToken();
assertEquals("[", nextToken.getTokenText());
assertEquals(3, nextToken.getTokenType());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals(15, identifierOrOperatorName.getTokenType());
assertEquals("", identifierOrOperatorName.getTokenText());


** It was a parseable test case! 
refined test name is: testValidXPathExpressionWithOpeningSquareBracket
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token arg0 = xPathLexer.minus();
xPathLexer.setPreviousToken(arg0);
assertEquals(6, arg0.getTokenType());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexerMinusToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
Token equals = xPathLexer.equals();
assertEquals("?", equals.getTokenText());
assertEquals(21, equals.getTokenType());

Token arg0 = xPathLexer.at();
xPathLexer.setPreviousToken(arg0);
assertEquals(".", arg0.getTokenText());
assertEquals(16, arg0.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals(15, nextToken.getTokenType());
assertEquals("zS.", nextToken.getTokenText());


** It was a parseable test case! 
refined test name is: testTokenizer
* Compiling Tests
refined test name is: testXPathLexerNextToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
Token arg0 = xPathLexer.star();
xPathLexer.setPreviousToken(arg0);
assertEquals(20, arg0.getTokenType());
assertEquals("5", arg0.getTokenText());

Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
assertEquals("", identifierOrOperatorName.getTokenText());
assertEquals(15, identifierOrOperatorName.getTokenType());


** It was a parseable test case! 
refined test name is: testStarMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
Token arg0 = xPathLexer.notEquals();
xPathLexer.setPreviousToken(arg0);
assertEquals(22, arg0.getTokenType());
assertEquals(";q", arg0.getTokenText());

Token rightParen = xPathLexer.rightParen();
assertEquals("s", rightParen.getTokenText());
assertEquals(2, rightParen.getTokenType());

Token rightBracket = xPathLexer.rightBracket();
assertEquals(4, rightBracket.getTokenType());
assertEquals("7", rightBracket.getTokenText());

Token nextToken = xPathLexer.nextToken();
assertEquals("R", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());


** It was a parseable test case! 
refined test name is: testNotEqualsAndRightParenAndRightBracket
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
xPathLexer.setXPath("mIklL#9GY'|ICo'w");
Token operatorName = xPathLexer.operatorName();
assertNull(operatorName);


** It was a parseable test case! 
refined test name is: testOperatorNameWithMalformedExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("not|Z");
xPathLexer.dollar();
Token operatorName = xPathLexer.operatorName();
assertNull(operatorName);


** It was a parseable test case! 
refined test name is: testLexerDollarOperatorNameIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
Token mod = xPathLexer.mod();
assertNull(mod);


** It was a parseable test case! 
refined test name is: testLexerModOperator
* Compiling Tests
refined test name is: testXPathLexerModOperator
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token div = xPathLexer.div();
assertNull(div);


** It was a parseable test case! 
refined test name is: testDivisionOperatorNotFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token and = xPathLexer.and();
assertNull(and);


** It was a parseable test case! 
refined test name is: testAndOperatorRecognizedCorrectly
* Compiling Tests
refined test name is: testLexerRecognizesAndOperator
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token or = xPathLexer.or();
assertNull(or);


** It was a parseable test case! 
refined test name is: testOrReturnsNullWhenCalledWithNoArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token whitespace = xPathLexer.whitespace();
assertEquals((-2), whitespace.getTokenType());


** It was a parseable test case! 
refined test name is: testWhitespaceTokenType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
xPathLexer.setXPath("[ (20) (5)");
Token at = xPathLexer.at();
assertEquals("[", at.getTokenText());
assertEquals(16, at.getTokenType());

Token nextToken = xPathLexer.nextToken();
assertEquals("(", nextToken.getTokenText());
assertEquals(1, nextToken.getTokenType());

Token minus = xPathLexer.minus();
assertEquals(6, minus.getTokenType());
assertEquals("2", minus.getTokenText());

Token dots = xPathLexer.dots();
assertEquals(13, dots.getTokenType());
assertEquals("0", dots.getTokenText());

Token whitespace = xPathLexer.whitespace();
assertEquals("", whitespace.getTokenText());


** It was a parseable test case! 
refined test name is: testXPathLexerWithInvalidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token relationalOperator = xPathLexer.relationalOperator();
assertNull(relationalOperator);


** It was a parseable test case! 
refined test name is: testRelationalOperatorReturnsNullWhenNotMatched
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
Token equals = xPathLexer.equals();
assertEquals("?", equals.getTokenText());
assertEquals(21, equals.getTokenType());

Token leftBracket = xPathLexer.leftBracket();
assertEquals(3, leftBracket.getTokenType());
assertEquals(".", leftBracket.getTokenText());

Token rightBracket = xPathLexer.rightBracket();
assertEquals(4, rightBracket.getTokenType());
assertEquals("z", rightBracket.getTokenText());

Token dots = xPathLexer.dots();
assertEquals("S.", dots.getTokenText());
assertEquals(14, dots.getTokenType());


** It was a parseable test case! 
refined test name is: testXPathLexer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
String xPath = xPathLexer.getXPath();
assertNull(xPath);


** It was a parseable test case! 
refined test name is: testGetXPathReturnsNullWhenNotInitialized
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
Token equals = xPathLexer.equals();
assertEquals(21, equals.getTokenType());
assertEquals("?", equals.getTokenText());

Token leftBracket = xPathLexer.leftBracket();
assertEquals(3, leftBracket.getTokenType());
assertEquals(".", leftBracket.getTokenText());

Token comma = xPathLexer.comma();
assertEquals("z", comma.getTokenText());
assertEquals(32, comma.getTokenType());

char LA = xPathLexer.LA(0);
assertEquals('z', LA);


** It was a parseable test case! 
refined test name is: TestGetNextTokenAndAssertions
* Compiling Tests
refined test name is: testTokenTypesAndTexts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(" v3!t#sa=:t#");
Token nextToken = xPathLexer.nextToken();
assertEquals("v3", nextToken.getTokenText());
assertEquals(15, nextToken.getTokenType());

Token equals = xPathLexer.equals();
assertEquals("!", equals.getTokenText());
assertEquals(21, equals.getTokenType());

char LA = xPathLexer.LA((-1));
assertEquals('3', LA);


** It was a parseable test case! 
refined test name is: testLexerWithVariables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
char LA = xPathLexer.LA(384);
assertEquals('\uFFFF', LA);


** It was a parseable test case! 
refined test name is: testLAWithLargeInputReturnsMaxCharValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.consume((-3590));
int currentPosition = xPathLexer.currentPosition();
assertEquals((-3590), currentPosition);


** It was a parseable test case! 
refined test name is: testConsumeNegativeIntegerValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("");
int currentPosition = xPathLexer.currentPosition();
assertEquals(0, currentPosition);


** It was a parseable test case! 
refined test name is: testCurrentPositionAtBeginningOfEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("rsIr)UJ]+]Tw,bfI");
int endPosition = xPathLexer.endPosition();
assertEquals(16, endPosition);


** It was a parseable test case! 
refined test name is: testEndPosition
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
int endPosition = xPathLexer.endPosition();
assertEquals(0, endPosition);


** It was a parseable test case! 
refined test name is: testEndPositionOfEmptyLexershouldReturnZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
Token previousToken = xPathLexer.getPreviousToken();
assertNull(previousToken);


** It was a parseable test case! 
refined test name is: testGetPreviousTokenWhenNoTokensInLexer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
xPathLexer.setXPath("");
String xPath = xPathLexer.getXPath();
assertEquals("", xPath);


** It was a parseable test case! 
refined test name is: testValidXPathExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("-EwZO%ej9V}VE6");
String xPath = xPathLexer.getXPath();
assertEquals("-EwZO%ej9V}VE6", xPath);


** It was a parseable test case! 
refined test name is: testGetXPathReturnsOriginalString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
boolean moreChars = xPathLexer.hasMoreChars();
assertFalse(moreChars);


** It was a parseable test case! 
refined test name is: testXPathLexerHasNoMoreChars
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
boolean moreChars = xPathLexer.hasMoreChars();
assertTrue(moreChars);


** It was a parseable test case! 
refined test name is: testXPathLexerHasMoreChars
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
boolean identifierChar = xPathLexer.isIdentifierChar(' ');
assertFalse(identifierChar);


** It was a parseable test case! 
refined test name is: testIsIdentifierCharReturnsFalseForSpaceCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(";qs7R/nB:DI,");
boolean identifierChar = xPathLexer.isIdentifierChar('c');
assertTrue(identifierChar);


** It was a parseable test case! 
refined test name is: testIsIdentifierChar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer();
boolean identifierStartChar = xPathLexer.isIdentifierStartChar('\"');
assertFalse(identifierStartChar);


** It was a parseable test case! 
refined test name is: testIsIdentifierStartChardoubleQuoteReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("5,b6KRVA_#");
boolean identifierStartChar = xPathLexer.isIdentifierStartChar('_');
assertTrue(identifierStartChar);


** It was a parseable test case! 
refined test name is: testIsIdentifierStartCharForUnderscore
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("Frv");
Token literal = xPathLexer.literal();
assertNull(literal);


** It was a parseable test case! 
refined test name is: testLiteralReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer("?.zS.:2Q{p:j vt");
Token pipe = xPathLexer.pipe();
assertEquals(17, pipe.getTokenType());
assertEquals("?", pipe.getTokenText());


** It was a parseable test case! 
refined test name is: testPipeToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: XPathLexer xPathLexer = new XPathLexer(">^");
Token relationalOperator = xPathLexer.relationalOperator();
assertNotNull(relationalOperator);
assertEquals(">", relationalOperator.getTokenText());
assertEquals(9, relationalOperator.getTokenType());


** It was a parseable test case! 
refined test name is: testRelationalOperatorReturnsCorrectToken
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.293 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:26.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.436 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.439 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:26.552 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:26.658 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.662 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:26.765 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:26.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.872 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:26.981 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:26.983 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.091 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.093 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.189 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.191 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.290 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.292 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.397 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.399 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.505 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.607 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:27.609 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.712 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:27.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.827 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:27.829 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:27.950 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:27.953 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.065 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.168 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.262 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:28.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:28.357 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.363 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.454 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.456 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.559 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:28.562 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.645 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.730 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.815 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.900 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:28.985 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:28.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:29.072 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:29.074 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:29.169 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:29.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:29.296 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:29.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:29.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:29.560 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:29.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:29.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:29.974 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:29.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:30.202 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:30.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:30.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:30.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:30.634 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:30.640 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
[MASTER] 00:07:30.837 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:30.839 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.054 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.326 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.332 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.519 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.658 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.777 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.779 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:31.900 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:31.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:32.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.030 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:32.190 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.192 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:32.317 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.319 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:32.444 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.446 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:32.563 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.565 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:32.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:32.977 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:32.984 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:33.225 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:33.228 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:33.352 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:33.354 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:33.519 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:33.524 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:33.698 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:33.704 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:33.983 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:33.990 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:34.204 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:34.212 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:34.518 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:34.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:34.653 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:34.655 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:34.773 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:34.776 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:34.999 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.002 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.122 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.222 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.310 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.391 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.580 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:35.769 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.774 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 00:07:35.987 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:35.992 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:36.119 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:36.121 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:36.393 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:36.399 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:36.611 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:36.613 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:36.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:36.836 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.532 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.618 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.620 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.700 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.702 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.778 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.858 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.861 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:37.939 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:37.941 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.033 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.035 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.118 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.120 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.203 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.289 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.291 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.447 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.532 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 00:07:38.620 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:38.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 13 called: 0 to improve: false
** Write a test suite: 15 called: 1 to improve: false
** Write a test suite: 16 called: 2 to improve: false
** Write a test suite: 19 called: 3 to improve: false
** Write a test suite: 22 called: 4 to improve: false
** Write a test suite: 47 called: 5 to improve: false
** Write a test suite: 48 called: 6 to improve: false
** Write a test suite: 52 called: 7 to improve: false
** Write a test suite: 57 called: 8 to improve: false
** Write a test suite: 59 called: 9 to improve: false
** Write a test suite: 66 called: 10 to improve: false
[MASTER] 00:07:39.435 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:39.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 18 called: 0 to improve: false
** Write a test suite: 25 called: 1 to improve: false
** Write a test suite: 27 called: 2 to improve: false
** Write a test suite: 32 called: 3 to improve: false
** Write a test suite: 36 called: 4 to improve: false
** Write a test suite: 37 called: 5 to improve: false
** Write a test suite: 62 called: 6 to improve: false
** Write a test suite: 65 called: 7 to improve: false
** Write a test suite: 68 called: 8 to improve: false
** Write a test suite: 69 called: 9 to improve: false
** Write a test suite: 71 called: 10 to improve: false
[MASTER] 00:07:40.274 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6218481307306148189.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 00:07:40.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6218481307306148189.jar
* Writing tests to file
* Writing JUnit test case 'XPathLexer_ESTest' to evosuite-tests
** Write a test suite: 18 called: 0 to improve: false
** Write a test suite: 25 called: 1 to improve: false
** Write a test suite: 27 called: 2 to improve: false
** Write a test suite: 32 called: 3 to improve: false
** Write a test suite: 36 called: 4 to improve: false
** Write a test suite: 37 called: 5 to improve: false
** Write a test suite: 62 called: 6 to improve: false
** Write a test suite: 65 called: 7 to improve: false
** Write a test suite: 68 called: 8 to improve: false
** Write a test suite: 69 called: 9 to improve: false
** Write a test suite: 71 called: 10 to improve: false
* Done!

* Computation finished
