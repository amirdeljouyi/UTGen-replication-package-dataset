/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 01:28:38 GMT 2024
 */

package com.werken.saxpath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XPathLexer_Original_ESTest extends XPathLexer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetXPath() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("* }#D");
      xPathLexer.setXPath("* }#D");
      assertEquals("* }#D", xPathLexer.getXPath());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLiteralReturningTokenWhereGetTokenTypeIsPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("bbm9-Y.");
      Token literal = xPathLexer.literal();
      assertNotNull(literal);
      assertEquals(27, literal.getTokenType());
      assertEquals("", literal.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierStartCharReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("M3XD");
      boolean identifierStartChar = xPathLexer.isIdentifierStartChar('o');
      assertTrue(identifierStartChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierStartCharReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("|A?fG#TW6xV87:BB+O/");
      boolean identifierStartChar = xPathLexer.isIdentifierStartChar('!');
      assertFalse(identifierStartChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierCharReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("$dyi");
      boolean identifierChar = xPathLexer.isIdentifierChar('u');
      assertTrue(identifierChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierCharReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      boolean identifierChar = xPathLexer.isIdentifierChar('[');
      assertFalse(identifierChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasMoreCharsReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("G>oHDs");
      boolean moreChars = xPathLexer.hasMoreChars();
      assertTrue(moreChars);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      String xPath = xPathLexer.getXPath();
      assertNull(xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningNonEmptyString() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      String xPath = xPathLexer.getXPath();
      assertEquals("com.werken.saxpath.XPathLexer", xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token previousToken = xPathLexer.getPreviousToken();
      assertNull(previousToken);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningTokenWhereGetTokenTypeIsZero() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token arg0 = new Token(0, "l4;Y5:1#)", 0, 0);
      xPathLexer.setPreviousToken(arg0);
      Token previousToken = xPathLexer.getPreviousToken();
      assertEquals(0, previousToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningTokenWhereGetTokenTypeIsNegative() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNotNull(identifierOrOperatorName);
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", identifierOrOperatorName.getTokenText());
      
      xPathLexer.nextToken();
      Token previousToken = xPathLexer.getPreviousToken();
      assertEquals((-1), previousToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndPositionReturningZero() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      int endPosition = xPathLexer.endPosition();
      assertEquals(0, endPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndPositionReturningPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("\"#Z\"q}L.Mj3");
      int endPosition = xPathLexer.endPosition();
      assertEquals(11, endPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDots() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token dots = xPathLexer.dots();
      assertEquals(13, dots.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCurrentPositionReturningZero() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("&.Zw");
      int currentPosition = xPathLexer.currentPosition();
      assertEquals(0, currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCurrentPositionReturningPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("|A?fG#TW6xV87:BB+O/");
      Token slashes = xPathLexer.slashes();
      assertEquals(11, slashes.getTokenType());
      assertEquals("|", slashes.getTokenText());
      
      int currentPosition = xPathLexer.currentPosition();
      assertEquals(1, currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLAReturningOtherChar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("n$/nSW4!b\t}");
      char LA = xPathLexer.LA(12);
      assertEquals('\uFFFF', LA);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testColon() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("WF+VJ(nWq.l`F2");
      Token colon = xPathLexer.colon();
      assertEquals("W", colon.getTokenText());
      assertEquals(18, colon.getTokenType());
      
      Token plus = xPathLexer.plus();
      assertEquals(5, plus.getTokenType());
      assertEquals("F", plus.getTokenText());
      
      xPathLexer.literal();
      Token comma = xPathLexer.comma();
      assertEquals(32, comma.getTokenType());
      
      char LA = xPathLexer.LA((-1));
      assertEquals('2', LA);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLAReturningAlphabeticChar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("x[Bt:e!Pi`;CZ^");
      Token dollar = xPathLexer.dollar();
      assertEquals(26, dollar.getTokenType());
      assertEquals("x", dollar.getTokenText());
      
      xPathLexer.consume();
      Token plus = xPathLexer.plus();
      assertEquals(5, plus.getTokenType());
      assertEquals("B", plus.getTokenText());
      
      Token comma = xPathLexer.comma();
      assertEquals(32, comma.getTokenType());
      assertEquals("t", comma.getTokenText());
      
      char LA = xPathLexer.LA((-1));
      assertEquals('B', LA);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningEmptyString() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("");
      String xPath = xPathLexer.getXPath();
      assertEquals("", xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConsumeTakingNoArgumentsAndSlashes() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("n$/nSW4!b\t}");
      xPathLexer.consume();
      Token slashes = xPathLexer.slashes();
      assertEquals("$/", slashes.getTokenText());
      assertEquals(12, slashes.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRelationalOperatorReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token relationalOperator = xPathLexer.relationalOperator();
      assertNull(relationalOperator);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWhitespace() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("* }#D");
      Token whitespace = xPathLexer.whitespace();
      assertEquals("", whitespace.getTokenText());
      assertEquals((-2), whitespace.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNumber() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("..wEMr7Tm");
      Token number = xPathLexer.number();
      assertEquals(31, number.getTokenType());
      assertEquals(".", number.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRightParen() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("n$/nSW4!b\t}");
      Token rightParen = xPathLexer.rightParen();
      assertEquals(2, rightParen.getTokenType());
      assertEquals("n", rightParen.getTokenText());
      
      Token dollar = xPathLexer.dollar();
      assertEquals(26, dollar.getTokenType());
      assertEquals("$", dollar.getTokenText());
      
      Token number = xPathLexer.number();
      assertEquals("", number.getTokenText());
      assertEquals(30, number.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOr() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("<]Z(");
      Token or = xPathLexer.or();
      assertNull(or);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAnd() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("");
      Token and = xPathLexer.and();
      assertNull(and);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAtAndOperatorName() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("s$di");
      xPathLexer.identifierOrOperatorName();
      xPathLexer.at();
      Token operatorName = xPathLexer.operatorName();
      assertNull(operatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiv() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("n$/nSW4!b\t}");
      Token div = xPathLexer.div();
      assertNull(div);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMod() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("*Bx2,45m6/zCo");
      Token mod = xPathLexer.mod();
      assertNull(mod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNotEquals() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("..wEMr7m");
      Token arg0 = xPathLexer.notEquals();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(22, arg0.getTokenType());
      assertEquals("..", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("wEMr7m", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPreviousToken() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.doubleColon();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(19, arg0.getTokenType());
      assertEquals("co", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".6f&<");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".6", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("{o{9oqiM");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("{o{9oqiM", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("z?/fiP7\"&Q;1WM;");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("z", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("y8U5!(:MRpRm!,H|`y");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("y8U5", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("x[Bt:e!Pi`;CZ^");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("x", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("vOeN^\"a+=`\"H]\bmk]i");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("vOeN", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("u", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive6() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("tyCGm-mt");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("tyCGm-mt", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive7() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("s$di");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("s", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive8() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("r?>>,SV;*eeL");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("r", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive9() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("qwUM-pLHL;@a~qQF");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("qwUM-pLHL", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive10() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("jO+nt';~");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("jO", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive11() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("hU]");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("hU", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive12() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("g!<");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("g", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive13() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("f;N4W58n");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("f", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive14() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("euO9");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("euO9", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasMoreCharsReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
      
      boolean moreChars = xPathLexer.hasMoreChars();
      assertFalse(moreChars);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive15() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("aX71U$=7sT8jnF77;n0");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("aX71U", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("`Lgtjb-TCu4;MHO!d4");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("`Lgtjb-TCu4;MHO!d4", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive16() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("_8H 5(]`gFoW@");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("_8H", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("^HuQ|Poq#9);O?+M>");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("^HuQ|Poq#9);O?+M>", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("][ $BzIfqk`#Jp");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive17() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Z");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("Z", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive18() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Y:E+h$/+4+A5X b");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("Y", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive19() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("XA bx3$!:qeEAw}JZ");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("XA", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive20() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("W7:80Ct]&@L3%!jc}H");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("W7", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive21() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("V<)|QN");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("V", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive22() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("U?>>92ZV&;*eueL");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("U", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive23() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("TrW~");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("TrW", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive24() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("R9mD[");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("R9mD", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive25() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("PA@9Y6*O+,");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("PA", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive26() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("O$Zxros7{PcdY{");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("O", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive27() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("NLbz]zaX]h3V4|{*F");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("NLbz", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningTokenWhereGetTokenTypeIsPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("M3XD");
      xPathLexer.nextToken();
      Token previousToken = xPathLexer.getPreviousToken();
      assertEquals(15, previousToken.getTokenType());
      assertEquals("M3XD", previousToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive28() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("L7!<]");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("L7", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("K7:6yPJ*Xuj}");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive29() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("I;GcWG}yQ%&JaR\"y|8");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("I", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive30() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("G>");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("G", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive31() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("FaieCES06s");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("FaieCES06s", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMinus() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("..wEMr7m");
      Token notEquals = xPathLexer.notEquals();
      assertEquals(22, notEquals.getTokenType());
      assertEquals("..", notEquals.getTokenText());
      
      Token minus = xPathLexer.minus();
      assertEquals("w", minus.getTokenText());
      assertEquals(6, minus.getTokenType());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("EMr7m", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive32() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("D!<");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("D", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive33() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Caq*Vly@");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("Caq", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierAndNot() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("wW8X}?lx,oq\"");
      Token identifier = xPathLexer.identifier();
      assertEquals("wW8X", identifier.getTokenText());
      assertEquals(15, identifier.getTokenType());
      
      Token not = xPathLexer.not();
      assertEquals(23, not.getTokenType());
      assertEquals("}", not.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("?lx,oq\"", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("<>S-Q");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(7, nextToken.getTokenType());
      assertEquals("<", nextToken.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(";i5/");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(";i5/", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive34() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("8f/ZQp\u0003D)4au9ERmB");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("8", nextToken.getTokenText());
      assertEquals(30, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("5a<z7Se:YkoR5.P4");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive35() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("3?>>92ZV&;*eueL");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("3", nextToken.getTokenText());
      assertEquals(30, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive36() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("1w&_N0~d<P");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("1", nextToken.getTokenText());
      assertEquals(30, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive37() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("0.GHnLPYg!7BAoEg~");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("0.", nextToken.getTokenText());
      assertEquals(31, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive38() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".0RC`CZI+`6CHeI");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".0", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("(XbQG-HC6bJA_G(Y x5");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("(", nextToken.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("XbQG-HC6bJA_G", identifierOrOperatorName.getTokenText());
      assertNotNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("'(1;l");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("", nextToken.getTokenText());
      assertEquals((-1), nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("&Xt%L9r(%Dq");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("&Xt%L9r(%Dq", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative6() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("%J$;B,xb[)lF");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("%J$;B,xb[)lF", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("\"#Z\"q}L.Mj3");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsNegative7() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(" ");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("", nextToken.getTokenText());
      assertEquals((-1), nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConsumeTakingInt() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("n$/nSW4!b\t}");
      xPathLexer.consume((-2231));
      int currentPosition = xPathLexer.currentPosition();
      assertEquals((-2231), currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("-8");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(6, nextToken.getTokenType());
      assertEquals("-", nextToken.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("8", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("* }#D");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(20, nextToken.getTokenType());
      assertEquals("*", nextToken.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(") (");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.equals();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(21, arg0.getTokenType());
      assertEquals("c", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("om.werken.saxpath.XPathLexer", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("$VK}X(6kL&*C/");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("$", nextToken.getTokenText());
      assertEquals(26, nextToken.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals("VK", identifierOrOperatorName.getTokenText());
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenReturningTokenWhereGetTokenTypeIsPositive39() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("AX");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("AX", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningNull5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("!YBFr");
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRightBracket() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token rightBracket = xPathLexer.rightBracket();
      assertEquals(4, rightBracket.getTokenType());
      assertEquals("c", rightBracket.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDoubleColon() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".Jiz");
      Token doubleColon = xPathLexer.doubleColon();
      assertEquals(19, doubleColon.getTokenType());
      assertEquals(".J", doubleColon.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("iz", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLeftBracket() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token leftBracket = xPathLexer.leftBracket();
      assertEquals(3, leftBracket.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndIdentifierOrOperatorNameReturningTokenWhereGetTokenTypeIsPositive5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(":#[YvYY]Zyu");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(18, nextToken.getTokenType());
      assertEquals(":", nextToken.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPipe() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("G>oHDs");
      Token pipe = xPathLexer.pipe();
      assertEquals("G", pipe.getTokenText());
      assertEquals(17, pipe.getTokenType());
      
      Token relationalOperator = xPathLexer.relationalOperator();
      assertEquals(">", relationalOperator.getTokenText());
      assertEquals(9, relationalOperator.getTokenType());
      assertNotNull(relationalOperator);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLeftParen() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("\"#Z\"q}L.Mj3");
      Token leftParen = xPathLexer.leftParen();
      assertEquals(1, leftParen.getTokenType());
      assertEquals("\"", leftParen.getTokenText());
  }
}
