/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 04:51:29 GMT 2024
 */

package jipa;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import jipa.Main;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Main_Original_ESTest extends Main_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningFalse() throws Throwable  {
      boolean numeric = Main.isNumeric((String) null);
      assertFalse(numeric);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileName() throws Throwable  {
      SystemInUtil.addInputLine("cFiVhrt%");
      String fileName = Main.getFileName();
      assertEquals("cFiVhrt%", fileName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValue0() throws Throwable  {
      int jumpValue = Main.getJumpValue("v6`x{}m;.rx");
      assertEquals((-2), jumpValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningNegative() throws Throwable  {
      int value = Main.getValue("*");
      assertEquals(0, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments0() throws Throwable  {
      String[] splitArguments = Main.splitArguments("sd+;");
      assertEquals(1, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testResetInstructions() throws Throwable  {
      Main.resetInstructions();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructions() throws Throwable  {
      boolean loadInstructions = Main.loadInstructions("l_vn/ykd");
      assertFalse(loadInstructions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningTrue() throws Throwable  {
      boolean numeric = Main.isNumeric("00");
      assertTrue(numeric);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue0() throws Throwable  {
      String stringValue = Main.getStringValue("/qzcu");
      assertEquals("0", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue1() throws Throwable  {
      String stringValue = Main.getStringValue("]Y\"\"J");
      assertEquals("00", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadValue() throws Throwable  {
      SystemInUtil.addInputLine(";l~5cwmy5");
      int readValue = Main.readValue();
      assertEquals(0, readValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningZero() throws Throwable  {
      int value = Main.getValue("00");
      assertEquals(0, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments1() throws Throwable  {
      String[] splitArguments = Main.splitArguments(",=:|Npr|VB<*b");
      assertEquals(2, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveCommentReturningEmptyString() throws Throwable  {
      String removeComment = Main.removeComment("");
      assertEquals("", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveCommentReturningNonEmptyString() throws Throwable  {
      String removeComment = Main.removeComment("-+jgtu/90olw,;]4]");
      assertEquals("-+jgtu/90olw,", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsSystemExitException() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.loadInstructions("q");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("cmp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("je");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("jz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException2() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("jbe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException3() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("jb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException4() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("jae");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException5() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("ja");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException6() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("jnz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction0() throws Throwable  {
      Main.processInstruction("jmp");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException7() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("and");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException8() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("or");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException9() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("xor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException10() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("mod");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException11() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("mul");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException12() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("sub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException13() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("dec");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException14() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("inc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException15() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("var");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException16() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("del");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("set");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException2() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("cpy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException3() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("mov");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNoSuchElementException() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("in");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException17() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("out");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsSystemExitException() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("halt");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction1() throws Throwable  {
      Main.processInstruction("lbl ");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException18() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.processInstruction("add");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsTooManyResourcesException() throws Throwable  {
      String[] arg0 = Main.splitArguments("UP#]]~8pBSh>\"2,yb%");
      // Undeclared exception!
      Main.main(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNoSuchElementException() throws Throwable  {
      String[] arg0 = new String[0];
      // Undeclared exception!
      try { 
        Main.main(arg0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToOpcode() throws Throwable  {
      Main.opcodes opcode = Main.opcodes.toOpcode(")K(H[B*Ei!U");
      assertEquals(Main.opcodes.novalue, opcode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMain() throws Throwable  {
      Main main = new Main();
      assertEquals(0, Main.TOTAL_INSTRUCTIONS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsNoSuchElementException() throws Throwable  {
      // Undeclared exception!
      try { 
        Main.loadInstructions("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValue1() throws Throwable  {
      int jumpValue = Main.getJumpValue("0");
      assertEquals((-1), jumpValue);
  }
}
