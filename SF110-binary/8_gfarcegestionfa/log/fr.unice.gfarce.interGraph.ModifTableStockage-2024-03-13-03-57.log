* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: fr.unice.gfarce.interGraph.ModifTableStockage
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/8_gfarcegestionfa/evosuite-files/evosuite.properties
* Connecting to master process on port 11409
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:57:51.241 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:57:51.269 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:57:51.270 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:57:53.227 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:57:53.298 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:57:53.299 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 03:57:55.652 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 03:57:56.332 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 03:57:56.338 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 03:57:56.339 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 03:57:56.340 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 03:57:56.352 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 03:57:56.354 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 03:57:56.355 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 03:57:56.355 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 03:57:56.692 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 03:57:56.737 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class fr.unice.gfarce.interGraph.ModifTableStockage
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 495
* Using seed 1710302266594
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 115 / 495
[Progress:>                             0%] [Cov:=============>                     38%][Progress:>                             1%] [Cov:==================>                53%][Progress:>                             1%] [Cov:==================>                54%][Progress:>                             1%] [Cov:==================>                54%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             2%] [Cov:===================>               57%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            6%] [Cov:====================>              58%][Progress:=>                            6%] [Cov:====================>              58%][Progress:=>                            6%] [Cov:====================>              58%][Progress:=>                            6%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              58%][Progress:==>                           7%] [Cov:====================>              58%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           8%] [Cov:======================>            63%][Progress:==>                           9%] [Cov:======================>            63%][Progress:==>                           9%] [Cov:======================>            64%][Progress:==>                           9%] [Cov:======================>            64%][Progress:==>                           9%] [Cov:======================>            64%][Progress:==>                           9%] [Cov:======================>            64%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          11%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          12%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:===>                          13%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:===========================>       78%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        18%] [Cov:============================>      80%][Progress:=====>                        19%] [Cov:============================>      80%][Progress:=====>                        19%] [Cov:============================>      80%][Progress:=====>                        19%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       20%] [Cov:============================>      80%][Progress:======>                       21%] [Cov:============================>      80%][Progress:======>                       21%] [Cov:============================>      80%][Progress:======>                       21%] [Cov:============================>      80%][Progress:======>                       21%] [Cov:============================>      80%][Progress:======>                       22%] [Cov:============================>      80%][Progress:======>                       22%] [Cov:============================>      80%][Progress:======>                       22%] [Cov:============================>      80%][Progress:======>                       23%] [Cov:============================>      80%][Progress:======>                       23%] [Cov:============================>      80%][Progress:======>                       23%] [Cov:============================>      80%][Progress:=======>                      24%] [Cov:============================>      80%][Progress:=======>                      24%] [Cov:============================>      80%][Progress:=======>                      24%] [Cov:============================>      80%][Progress:=======>                      24%] [Cov:============================>      80%][Progress:=======>                      25%] [Cov:============================>      80%][Progress:=======>                      25%] [Cov:============================>      80%][Progress:=======>                      25%] [Cov:============================>      80%][Progress:=======>                      25%] [Cov:============================>      80%][Progress:=======>                      26%] [Cov:============================>      80%][Progress:=======>                      26%] [Cov:============================>      80%][Progress:========>                     27%] [Cov:============================>      80%][Progress:========>                     27%] [Cov:============================>      80%][Progress:========>                     27%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     28%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:========>                     29%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    32%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   34%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   35%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:==========>                   36%] [Cov:============================>      80%][Progress:===========>                  37%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  38%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:===========>                  39%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               48%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:==============>               49%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              52%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             54%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            57%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:=================>            59%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           62%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          64%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      81%][Progress:=====================>        72%] [Cov:============================>      81%][Progress:=====================>        72%] [Cov:============================>      81%][Progress:=====================>        72%] [Cov:============================>      81%][Progress:=====================>        72%] [Cov:============================>      81%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       74%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      77%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:=======================>      79%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     82%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    84%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%]
* Search finished after 201s and 517 generations, 231778 statements, best individual has fitness: 77.0
* Generated before the refinement 20 tests with total length 128
statement is: org.evosuite.testcase.statements.ArrayStatement@5633ce64 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.ArrayStatement@518b8098 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[5][4]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage colonneMail = modifTableStockage.colonneMail()
test data is: String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "john.doe@example.com";
        stringArray[1] = "jane.doe@example.com";
        Object[][] objectArray = new Object[5][4];
        objectArray[0][0] = 1;
        objectArray[0][1] = 2.3;
        objectArray[0][2] = 'a';
        objectArray[0][3] = "John Doe";
        objectArray[1][0] = 5;
        objectArray[1][1] = 7.6;
        objectArray[1][2] = 'b';
        objectArray[1][3] = "Jane Doe";
        objectArray[2][0] = 10;
        objectArray[2][1] = 12.8;
        objectArray[2][2] = 'c';
        objectArray[2][3] = "John Smith";
        objectArray[3][0] = 7;
        objectArray[3][1] = 9.2;
        objectArray[3][2] = 'd';
        objectArray[3][3] = "Jane Smith";
        objectArray[4][0] = 15;
        objectArray[4][1] = 17.6;
        objectArray[4][2] = 'e';
        objectArray[4][3] = "John Johnson";
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.colonneMail();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "john.doe@example.com", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"john.doe@example.com" Ct is: stringArray[0] = "john.doe@example.com"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "jane.doe@example.com", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"jane.doe@example.com" Ct is: stringArray[1] = "jane.doe@example.com"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[5][4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5, 4] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Object[5][4] Elements: []
lengths: [2] [5, 4]
Dimension: [5, 4] Ct is: Object[][] objectArray = new Object[5][4] isAssignment: false Array: new Object[5][4] Elements: []
lengths: [5, 4] [5, 4]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0][0] = 1, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:1 Ct is: objectArray[0][0] = 1
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][1] = 2.3, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:2.3 Ct is: objectArray[0][1] = 2.3
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][2] = 'a', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'a' Ct is: objectArray[0][2] = 'a'
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][3] = "John Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"John Doe" Ct is: objectArray[0][3] = "John Doe"
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][0] = 5, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:5 Ct is: objectArray[1][0] = 5
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][1] = 7.6, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:7.6 Ct is: objectArray[1][1] = 7.6
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][2] = 'b', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'b' Ct is: objectArray[1][2] = 'b'
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][3] = "Jane Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Jane Doe" Ct is: objectArray[1][3] = "Jane Doe"
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][0] = 10, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:10 Ct is: objectArray[2][0] = 10
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][1] = 12.8, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:12.8 Ct is: objectArray[2][1] = 12.8
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][2] = 'c', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'c' Ct is: objectArray[2][2] = 'c'
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][3] = "John Smith", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"John Smith" Ct is: objectArray[2][3] = "John Smith"
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][0] = 7, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:7 Ct is: objectArray[3][0] = 7
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][1] = 9.2, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:9.2 Ct is: objectArray[3][1] = 9.2
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][2] = 'd', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'d' Ct is: objectArray[3][2] = 'd'
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][3] = "Jane Smith", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Jane Smith" Ct is: objectArray[3][3] = "Jane Smith"
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][0] = 15, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:15 Ct is: objectArray[4][0] = 15
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][1] = 17.6, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:17.6 Ct is: objectArray[4][1] = 17.6
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][2] = 'e', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'e' Ct is: objectArray[4][2] = 'e'
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][3] = "John Johnson", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"John Johnson" Ct is: objectArray[4][3] = "John Johnson"
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.colonneMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.colonneMail() target is: modifTableStockage method is: colonneMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 3, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 3
Matched Method is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterLigne = modifTableStockage.ajouterLigne()
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.ajouterLigne("Produit1", 5, 20.0);
        modifTableStockage.ajouterLigne("Produit2", 3, 15.99);
        modifTableStockage.ajouterLigne("Produit3", 7, 24.99);
    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.ajouterLigne("Produit1", 5, 20.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne("Produit1", 5, 20.0) target is: modifTableStockage method is: ajouterLigne(java.lang.String,int,double)
statement is: modifTableStockage.ajouterLigne("Produit2", 3, 15.99), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne("Produit2", 3, 15.99) target is: modifTableStockage method is: ajouterLigne(java.lang.String,int,double)
statement is: modifTableStockage.ajouterLigne("Produit3", 7, 24.99), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne("Produit3", 7, 24.99) target is: modifTableStockage method is: ajouterLigne(java.lang.String,int,double)
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

statement is: org.evosuite.testcase.statements.ArrayStatement@cf531f05 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@462dbe30 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "l6~Z|f$#fKVKs2wY]"
statement is: org.evosuite.testcase.statements.ArrayStatement@38ac51f6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d023b505 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterLigne = modifTableStockage.ajouterLigne()
test data is: String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "l6~Z|f$#fKVKs2wY]";
        Object[][] objectArray = new Object[1][8];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.ajouterLigne();
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "l6~Z|f$#fKVKs2wY]", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"l6~Z|f$#fKVKs2wY]" Ct is: stringArray[0] = "l6~Z|f$#fKVKs2wY]"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[1][8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1, 8] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[1][8] Elements: []
lengths: [4] [1, 8]
Dimension: [1, 8] Ct is: Object[][] objectArray = new Object[1][8] isAssignment: false Array: new Object[1][8] Elements: []
lengths: [1, 8] [1, 8]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b4163a1c
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.ajouterLigne(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne() target is: modifTableStockage method is: ajouterLigne()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[4];
String string = "l6~Z|f$#fKVKs2wY]";
stringArray[0] = string;
Object[][] objectArray = new Object[1][8];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

statement is: org.evosuite.testcase.statements.ArrayStatement@6e0247c6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.ArrayStatement@bdba719d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[2][2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c62b277c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@23e63da7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: Class<Object> class = Object.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Object>
statement code is: Class<Object> class = Object.class
statement is: setColumnClass(ILjava/lang/Class;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: tableStockage.setColumnClass(1, arg1)
statement is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterLigne = modifTableStockage.ajouterLigne()
test data is: String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "lorem", "ipsum", "dolor", "sit", "amet" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "123", "456" }, new Object[]{ "789", "012" } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        Class<Object> $missing$ = Object.class;
        tableStockage.setColumnClass(1, $missing$);
        modifTableStockage.ajouterLigne();
    }
}
statement is: String[] stringArray = new String[]{ "lorem", "ipsum", "dolor", "sit", "amet" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[]{ "lorem", "ipsum", "dolor", "sit", "amet" } Elements: ["lorem", "ipsum", "dolor", "sit", "amet"]
lengths: [5] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][2] isAssignment: false Array: new String[]{ "lorem", "ipsum", "dolor", "sit", "amet" } Elements: ["lorem", "ipsum", "dolor", "sit", "amet"]
lengths: [2, 2] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "123", "456" }, new Object[]{ "789", "012" } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new Object[][]{ new Object[]{ "123", "456" }, new Object[]{ "789", "012" } } Elements: [new Object[]{ "123", "456" }, new Object[]{ "789", "012" }]
lengths: [5] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][2] isAssignment: false Array: new Object[][]{ new Object[]{ "123", "456" }, new Object[]{ "789", "012" } } Elements: [new Object[]{ "123", "456" }, new Object[]{ "789", "012" }]
lengths: [2, 2] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: Class<Object> $missing$ = Object.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Object.class is Object
statement is: tableStockage.setColumnClass(1, $missing$), class spoon.support.reflect.code.CtInvocationImpl
invocation is: tableStockage.setColumnClass(1, $missing$) target is: tableStockage method is: setColumnClass(int,java.lang.Class)
statement is: modifTableStockage.ajouterLigne(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne() target is: modifTableStockage method is: ajouterLigne()
statement is: org.evosuite.testcase.statements.ArrayStatement@f898877a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.ArrayStatement@cd6b351b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[5][5]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(1)
test data is: String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banana", "Cherry", "Date" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerColonne("Product 2");
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banana", "Cherry", "Date" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[]{ "Apple", "Banana", "Cherry", "Date" } Elements: ["Apple", "Banana", "Cherry", "Date"]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][5] isAssignment: false Array: new String[]{ "Apple", "Banana", "Cherry", "Date" } Elements: ["Apple", "Banana", "Cherry", "Date"]
lengths: [5, 5] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[][]{ new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 } } Elements: [new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 }]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][5] isAssignment: false Array: new Object[][]{ new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 } } Elements: [new Object[]{ "001", "Product 1", 10, 20.5 }, new Object[]{ "002", "Product 2", 20, 30.5 }, new Object[]{ "003", "Product 3", 30, 40.5 }, new Object[]{ "004", "Product 4", 40, 50.5 }]
lengths: [5, 5] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerColonne("Product 2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne("Product 2") target is: modifTableStockage method is: supprimerColonne(java.lang.String)
statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: Class<Object> class = Object.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Object>
statement code is: Class<Object> class = Object.class
statement is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterColonne = modifTableStockage.ajouterColonne((String) null, arg1)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0)
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        Class<Object> $missing$ = Object.class;
        modifTableStockage.ajouterColonne("Nom", $missing$);
        modifTableStockage.supprimerColonne(1);
    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Class<Object> $missing$ = Object.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Object.class is Object
statement is: modifTableStockage.ajouterColonne("Nom", $missing$), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterColonne("Nom", $missing$) target is: modifTableStockage method is: ajouterColonne(java.lang.String,java.lang.Class)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 1, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 1
Matched Method is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: modifTableStockage.supprimerColonne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne(1) target is: modifTableStockage method is: supprimerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 1, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 1
Matched Method is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "Nom";
Class<Object> class = null;
modifTableStockage.ajouterColonne(string, class);
int _int = 1;
modifTableStockage.supprimerColonne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@4250fa3a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.ArrayStatement@49629676 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[5][5]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(1)
test data is: String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banana", "Orange", "Grape" };
        Object[][] objectArray = new Object[][]{ new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true) };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(1);
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banana", "Orange", "Grape" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[]{ "Apple", "Banana", "Orange", "Grape" } Elements: ["Apple", "Banana", "Orange", "Grape"]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][5] isAssignment: false Array: new String[]{ "Apple", "Banana", "Orange", "Grape" } Elements: ["Apple", "Banana", "Orange", "Grape"]
lengths: [5, 5] []
statement is: Object[][] objectArray = new Object[][]{ new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[][]{ new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true) } Elements: [new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true)]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][5] isAssignment: false Array: new Object[][]{ new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true) } Elements: [new Integer(1), new Double(3.14), new String("Hello World!"), new Character('A'), new Boolean(true)]
lengths: [5, 5] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerLigne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(1) target is: modifTableStockage method is: supprimerLigne(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@1e63948c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.ArrayStatement@1ff3e544 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[5][4]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(1)
test data is: String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(1);
    }
}
statement is: String[] stringArray = new String[]{ "Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[]{ "Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding" } Elements: ["Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding"]
lengths: [3] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][4] isAssignment: false Array: new String[]{ "Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding" } Elements: ["Chocolate Cake", "Strawberry Ice Cream", "Vanilla Pudding"]
lengths: [5, 4] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new Object[][]{ new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true } } Elements: [new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true }]
lengths: [3] []
Dimension: [] Ct is: Object[][] objectArray = new Object[5][4] isAssignment: false Array: new Object[][]{ new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true } } Elements: [new Object[]{ "Chocolate Cake", 12.6, true }, new Object[]{ "Strawberry Ice Cream", 24.8, false }, new Object[]{ "Vanilla Pudding", 37.9, true }]
lengths: [5, 4] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.separerColonne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(1) target is: modifTableStockage method is: separerColonne(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@773a7f89 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@82bb52ad type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "pm43]<Pn;ZR"
statement is: org.evosuite.testcase.statements.ArrayStatement@56d39966 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[10][5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@39d6195f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(1)
test data is: String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "Chocolate";
        stringArray[1] = "Fruitcake";
        stringArray[2] = "Strawberry";
        stringArray[3] = "Vanilla";
        Object[][] objectArray = new Object[10][5];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(1);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Chocolate", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Chocolate" Ct is: stringArray[0] = "Chocolate"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Fruitcake", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fruitcake" Ct is: stringArray[1] = "Fruitcake"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Strawberry", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Strawberry" Ct is: stringArray[2] = "Strawberry"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Vanilla", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Vanilla" Ct is: stringArray[3] = "Vanilla"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[10][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10, 5] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[10][5] Elements: []
lengths: [4] [10, 5]
Dimension: [10, 5] Ct is: Object[][] objectArray = new Object[10][5] isAssignment: false Array: new Object[10][5] Elements: []
lengths: [10, 5] [10, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@95cd4aff
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.separerColonne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(1) target is: modifTableStockage method is: separerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 11
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[4];
String string = "Chocolate";
stringArray[1] = string;
String string = "Fruitcake";
stringArray[1] = string;
String string = "Strawberry";
stringArray[1] = string;
String string = "Vanilla";
stringArray[1] = string;
Object[][] objectArray = new Object[10][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 1;
((ModifTableStockage) string).separerColonne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@21f73c9c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a7f4b49e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "AnKpxf wMN,k@V"
statement is: org.evosuite.testcase.statements.ArrayStatement@69a614f7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[2][5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4099da59 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@a65e32b4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@a923f853 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[1] = (Object) ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@f90a0c11 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = objectArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(1)
test data is: String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Alice", "Bob", "Charlie", "David" };
        Object[][] objectArray = new Object[2][5];
        objectArray[0] = ((Object[]) (stringArray));
        Object[] objectArray = new Object[]{ "apple", "banana", "cherry", "date", "elderberry" };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(1);
    }
}
statement is: String[] stringArray = new String[]{ "Alice", "Bob", "Charlie", "David" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[]{ "Alice", "Bob", "Charlie", "David" } Elements: ["Alice", "Bob", "Charlie", "David"]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][5] isAssignment: false Array: new String[]{ "Alice", "Bob", "Charlie", "David" } Elements: ["Alice", "Bob", "Charlie", "David"]
lengths: [2, 5] []
Dimension: [] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new String[]{ "Alice", "Bob", "Charlie", "David" } Elements: ["Alice", "Bob", "Charlie", "David"]
lengths: [4] []
statement is: Object[][] objectArray = new Object[2][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2, 5] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[2][5] Elements: []
lengths: [4] [2, 5]
Dimension: [2, 5] Ct is: Object[][] objectArray = new Object[2][5] isAssignment: false Array: new Object[2][5] Elements: []
lengths: [2, 5] [2, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@63122f50
statement is: Object[] objectArray = new Object[]{ "apple", "banana", "cherry", "date", "elderberry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[]{ "apple", "banana", "cherry", "date", "elderberry" } Elements: ["apple", "banana", "cherry", "date", "elderberry"]
lengths: [4] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][5] isAssignment: false Array: new Object[]{ "apple", "banana", "cherry", "date", "elderberry" } Elements: ["apple", "banana", "cherry", "date", "elderberry"]
lengths: [2, 5] []
Dimension: [] Ct is: Object[] objectArray = new Object[4] isAssignment: false Array: new Object[]{ "apple", "banana", "cherry", "date", "elderberry" } Elements: ["apple", "banana", "cherry", "date", "elderberry"]
lengths: [4] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.separerColonne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(1) target is: modifTableStockage method is: separerColonne(int)
TestCase is: Object[][] objectArray = new Object[2][5];

statement is: org.evosuite.testcase.statements.ArrayStatement@f45770df type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ba40bd1a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "eX}2\u0004P7*cvc!!V\""
statement is: org.evosuite.testcase.statements.ArrayStatement@cf1e4a94 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[6][5]
statement is: org.evosuite.testcase.statements.ArrayStatement@e5c71c6b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3945687 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[0] = (Object) " ?g8LlgA;cs#"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c77742f4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = objectArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@58d0015 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(0)
test data is: String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
        stringArray[1] = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
        stringArray[2] = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat";
        stringArray[3] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
        stringArray[4] = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum";
        Object[][] objectArray = new Object[6][5];
        objectArray[0][0] = ((Object) ("Lorem ipsum dolor sit amet"));
        objectArray[1][0] = ((Object) ("Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"));
        objectArray[2][0] = ((Object) ("Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"));
        objectArray[3][0] = ((Object) ("Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur"));
        objectArray[4][0] = ((Object) ("Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"));
        objectArray[5][0] = objectArray;
        objectArray[6][0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(0);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Lorem ipsum dolor sit amet, consectetur adipiscing elit" Ct is: stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua" Ct is: stringArray[1] = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat" Ct is: stringArray[2] = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur" Ct is: stringArray[3] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum" Ct is: stringArray[4] = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[6][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6, 5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new Object[6][5] Elements: []
lengths: [5] [6, 5]
Dimension: [6, 5] Ct is: Object[][] objectArray = new Object[6][5] isAssignment: false Array: new Object[6][5] Elements: []
lengths: [6, 5] [6, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0][0] = ((Object) ("Lorem ipsum dolor sit amet")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("Lorem ipsum dolor sit amet")) Ct is: objectArray[0][0] = ((Object) ("Lorem ipsum dolor sit amet"))
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][0] = ((Object) ("Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua")) Ct is: objectArray[1][0] = ((Object) ("Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"))
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][0] = ((Object) ("Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat")) Ct is: objectArray[2][0] = ((Object) ("Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"))
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][0] = ((Object) ("Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur")) Ct is: objectArray[3][0] = ((Object) ("Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur"))
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][0] = ((Object) ("Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum")) Ct is: objectArray[4][0] = ((Object) ("Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"))
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[5][0] = objectArray, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[5][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:objectArray Ct is: objectArray[5][0] = objectArray
target : objectArray[5] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[6][0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[6][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object[]) (stringArray)) Ct is: objectArray[6][0] = ((Object[]) (stringArray))
target : objectArray[6] class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.separerColonne(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(0) target is: modifTableStockage method is: separerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 8, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 13
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[5];
String string = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
stringArray[0] = string;
String string = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
stringArray[0] = string;
String string = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat";
stringArray[0] = string;
String string = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
stringArray[0] = string;
String string = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum";
stringArray[0] = string;
Object[][] objectArray = new Object[6][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
((ModifTableStockage) stringArray[0]).separerColonne(_int);

statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage fusionnerColonnes = modifTableStockage.fusionnerColonnes((-800))
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes((-800));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.fusionnerColonnes(-800);// This line is testing the method "fusionnerColonnes" with a negative value of 800 as an argument }}

    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.fusionnerColonnes(-800)// This line is testing the method "fusionnerColonnes" with a negative value of 800 as an argument }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.fusionnerColonnes(-800)// This line is testing the method "fusionnerColonnes" with a negative value of 800 as an argument }}
 target is: modifTableStockage method is: fusionnerColonnes(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 1, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 1
Matched Method is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = null;
modifTableStockage.fusionnerColonnes(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@bb36f6c2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@876bfa8a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@755724f0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "0"
statement is: org.evosuite.testcase.statements.ArrayStatement@d89a9ad9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[5][5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d17de7d7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@646d26be type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@567c280b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@9e5c3138 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[3] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@c7d66582 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[4] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage fusionnerColonnes = modifTableStockage.fusionnerColonnes(1)
test data is: String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "Apple";
        stringArray[1] = "Banana";
        stringArray[2] = "Orange";
        stringArray[3] = "Grape";
        Object[][] objectArray = new Object[5][5];
        objectArray[0] = ((Object[]) (stringArray));
        objectArray[1] = ((Object[]) (stringArray));
        objectArray[2] = ((Object[]) (stringArray));
        objectArray[3] = ((Object[]) (stringArray));
        objectArray[4] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.fusionnerColonnes(1);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Apple", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Apple" Ct is: stringArray[0] = "Apple"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Banana", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Banana" Ct is: stringArray[1] = "Banana"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Orange", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Orange" Ct is: stringArray[2] = "Orange"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Grape", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Grape" Ct is: stringArray[3] = "Grape"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[5][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5, 5] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[5][5] Elements: []
lengths: [4] [5, 5]
Dimension: [5, 5] Ct is: Object[][] objectArray = new Object[5][5] isAssignment: false Array: new Object[5][5] Elements: []
lengths: [5, 5] [5, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@379180e0
statement is: objectArray[1] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[1] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ab2b5de5
statement is: objectArray[2] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[2] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d3354e6e
statement is: objectArray[3] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[3] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e9adbe20
statement is: objectArray[4] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[4] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@92744eb2
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.fusionnerColonnes(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.fusionnerColonnes(1) target is: modifTableStockage method is: fusionnerColonnes(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 10, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 9
Matched Method is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[4];
stringArray[1] = "";
String string = "Banana";
stringArray[1] = string;
String string = "Orange";
stringArray[2] = string;
stringArray[1] = string;
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 1;
((ModifTableStockage) _int).fusionnerColonnes(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@562e5a1c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@639aad94 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Envoyer E-Mail a:"
statement is: org.evosuite.testcase.statements.ArrayStatement@4df67d50 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][7]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        stringArray[0] = "Send Email To:";
        stringArray[1] = "Email Subject:";
        stringArray[2] = "Email Body:";
        stringArray[3] = "Sender Name:";
        stringArray[4] = "Receiver Name:";
        Object[][] objectArray = new Object[5][7];
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[5] Elements: []
lengths: [1] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Send Email To:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Send Email To:" Ct is: stringArray[0] = "Send Email To:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Email Subject:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Email Subject:" Ct is: stringArray[1] = "Email Subject:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Email Body:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Email Body:" Ct is: stringArray[2] = "Email Body:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Sender Name:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Sender Name:" Ct is: stringArray[3] = "Sender Name:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Receiver Name:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Receiver Name:" Ct is: stringArray[4] = "Receiver Name:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[5][7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5, 7] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[5][7] Elements: []
lengths: [1] [5, 7]
Dimension: [5, 7] Ct is: Object[][] objectArray = new Object[1][7] isAssignment: false Array: new Object[5][7] Elements: []
lengths: [1, 7] [5, 7]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 4, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 13
Matched Method is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[1];
String string = "Send Email To:";
stringArray[0] = string;
String string = "Email Subject:";
stringArray[0] = string;
String string = "Email Body:";
stringArray[0] = string;
String string = "Sender Name:";
stringArray[0] = string;
String string = "Receiver Name:";
stringArray[0] = string;
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) stringArray[0]).selectMail();

statement is: org.evosuite.testcase.statements.ArrayStatement@d3397934 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ede3f7ed type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "kv>*kMJisN5*ycE"
statement is: org.evosuite.testcase.statements.ArrayStatement@2085ca12 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[0][7]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "johndoe@example.com";
        Object[][] objectArray = new Object[0][7];
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "johndoe@example.com", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"johndoe@example.com" Ct is: stringArray[0] = "johndoe@example.com"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[0][7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0, 7] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[0][7] Elements: []
lengths: [1] [0, 7]
Dimension: [0, 7] Ct is: Object[][] objectArray = new Object[0][7] isAssignment: false Array: new Object[0][7] Elements: []
lengths: [0, 7] [0, 7]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 4, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[1];
String string = "johndoe@example.com";
stringArray[0] = string;
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

statement is: org.evosuite.testcase.statements.ArrayStatement@a4bc7a3a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@da391317 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Envoyer E-Mail a:"
statement is: org.evosuite.testcase.statements.ArrayStatement@45eae2de type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[0][0]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] toAddresses = new String[1];
        toAddresses[0] = "john.doe@example.com";
        Object[][] orderDetails = new Object[2][3];
        orderDetails[0][0] = "Order ID: 123456789";
        orderDetails[0][1] = "Product: Widget XYZ";
        orderDetails[0][2] = "Quantity: 2";
        orderDetails[1][0] = "Order ID: 987654321";
        orderDetails[1][1] = "Product: Gadget ABC";
        orderDetails[1][2] = "Quantity: 1";
        TableStockage tableStockage = new TableStockage(toAddresses, orderDetails);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] toAddresses = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: toAddresses[0] = "john.doe@example.com", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : toAddresses[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"john.doe@example.com" Ct is: toAddresses[0] = "john.doe@example.com"
target : toAddresses class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] orderDetails = new Object[2][3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2, 3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[2][3] Elements: []
lengths: [1] [2, 3]
Dimension: [2, 3] Ct is: Object[][] objectArray = new Object[0][0] isAssignment: false Array: new Object[2][3] Elements: []
lengths: [0, 0] [2, 3]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: orderDetails[0][0] = "Order ID: 123456789", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Order ID: 123456789" Ct is: orderDetails[0][0] = "Order ID: 123456789"
target : orderDetails[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: orderDetails[0][1] = "Product: Widget XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[0][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Product: Widget XYZ" Ct is: orderDetails[0][1] = "Product: Widget XYZ"
target : orderDetails[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: orderDetails[0][2] = "Quantity: 2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[0][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Quantity: 2" Ct is: orderDetails[0][2] = "Quantity: 2"
target : orderDetails[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: orderDetails[1][0] = "Order ID: 987654321", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Order ID: 987654321" Ct is: orderDetails[1][0] = "Order ID: 987654321"
target : orderDetails[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: orderDetails[1][1] = "Product: Gadget ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[1][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Product: Gadget ABC" Ct is: orderDetails[1][1] = "Product: Gadget ABC"
target : orderDetails[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: orderDetails[1][2] = "Quantity: 1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : orderDetails[1][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"Quantity: 1" Ct is: orderDetails[1][2] = "Quantity: 1"
target : orderDetails[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(toAddresses, orderDetails), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 4, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[1];
String string = "john.doe@example.com";
stringArray[0] = string;
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

statement is: org.evosuite.testcase.statements.ArrayStatement@3184b764 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@ead9fd46 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[2][3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2109193a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@3119bbe8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<javax.swing.text.DefaultEditorKit$PasteAction>
statement code is: Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class
statement is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterColonne = modifTableStockage.ajouterColonne("H:", arg1)
test data is: String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "1", "2", "3", "4", "5", "6" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        Class<DefaultEditorKit.PasteAction> $missing$ = PasteAction.class;
        modifTableStockage.ajouterColonne("H:", $missing$);
    }
}
statement is: String[] stringArray = new String[]{ "1", "2", "3", "4", "5", "6" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[]{ "1", "2", "3", "4", "5", "6" } Elements: ["1", "2", "3", "4", "5", "6"]
lengths: [8] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][3] isAssignment: false Array: new String[]{ "1", "2", "3", "4", "5", "6" } Elements: ["1", "2", "3", "4", "5", "6"]
lengths: [2, 3] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new Object[][]{ new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" } } Elements: [new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" }]
lengths: [8] []
Dimension: [] Ct is: Object[][] objectArray = new Object[2][3] isAssignment: false Array: new Object[][]{ new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" } } Elements: [new Object[]{ "1", 2, "3" }, new Object[]{ "4", 5, "6" }]
lengths: [2, 3] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: Class<DefaultEditorKit.PasteAction> $missing$ = PasteAction.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: PasteAction.class is PasteAction
statement is: modifTableStockage.ajouterColonne("H:", $missing$), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterColonne("H:", $missing$) target is: modifTableStockage method is: ajouterColonne(java.lang.String,java.lang.Class)
statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage colonneMail = modifTableStockage.colonneMail()
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.colonneMail("bob@gmail.com");
    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.colonneMail("bob@gmail.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.colonneMail("bob@gmail.com") target is: modifTableStockage method is: colonneMail(java.lang.String)
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

statement is: org.evosuite.testcase.statements.ArrayStatement@891aadd8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@93008989 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "%;%l}uS [AW(=x_t"
statement is: org.evosuite.testcase.statements.ArrayStatement@c7cf4d9f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b94a2870 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(2)
test data is: String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[9];
        stringArray[2] = "Hello World";// Improved test data: more descriptive and representative of the situation being tested

        Object[][] objectArray = new Object[1][6];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(0);// Improved test data: more descriptive and representative of the situation being tested

        modifTableStockage.separerColonne(2);// Improved test data: more descriptive and representative of the situation being tested }}

    }
}
statement is: String[] stringArray = new String[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[9] Elements: []
lengths: [9] [9]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[2] = "Hello World"// Improved test data: more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World" Ct is: stringArray[2] = "Hello World"// Improved test data: more descriptive and representative of the situation being tested

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[1][6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1, 6] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new Object[1][6] Elements: []
lengths: [9] [1, 6]
Dimension: [1, 6] Ct is: Object[][] objectArray = new Object[1][6] isAssignment: false Array: new Object[1][6] Elements: []
lengths: [1, 6] [1, 6]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cf9c701f
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.supprimerLigne(0)// Improved test data: more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(0)// Improved test data: more descriptive and representative of the situation being tested
 target is: modifTableStockage method is: supprimerLigne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage;
statement is: modifTableStockage.separerColonne(2)// Improved test data: more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(2)// Improved test data: more descriptive and representative of the situation being tested }}
 target is: modifTableStockage method is: separerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[9];
String string = "Hello World";
stringArray[2] = string;
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
modifTableStockage.supprimerLigne(_int);
int _int = 2;
modifTableStockage.separerColonne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@6c4ea9df type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.evosuite.testcase.statements.ArrayStatement@a6469df type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][6]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(1433)
test data is: String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "test1", "test2", "test3" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(1433);
    }
}
statement is: String[] stringArray = new String[]{ "test1", "test2", "test3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test1", "test2", "test3" } Elements: ["test1", "test2", "test3"]
lengths: [0] []
Dimension: [] Ct is: Object[][] objectArray = new Object[1][6] isAssignment: false Array: new String[]{ "test1", "test2", "test3" } Elements: ["test1", "test2", "test3"]
lengths: [1, 6] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Object[][]{ new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true } } Elements: [new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true }]
lengths: [0] []
Dimension: [] Ct is: Object[][] objectArray = new Object[1][6] isAssignment: false Array: new Object[][]{ new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true } } Elements: [new Object[]{ "test1", 1, true }, new Object[]{ "test2", 2, false }, new Object[]{ "test3", 3, true }]
lengths: [1, 6] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerLigne(1433), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(1433) target is: modifTableStockage method is: supprimerLigne(int)
* test suite isTestSuite: 34
Test 0: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);
Test 5: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);
Test 6: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);
Test 7: 
String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);
Test 10: 
String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 11: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 12: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 16: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);
Test 17: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 18: 
String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);
Test 19: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);
Test 20: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

Test 21: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 22: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

Test 23: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterColonne("Nom", (Class<?>) null);
modifTableStockage.supprimerColonne(1);

Test 24: 
String[] stringArray = new String[4];
stringArray[1] = "Chocolate";
stringArray[1] = "Fruitcake";
stringArray[1] = "Strawberry";
stringArray[1] = "Vanilla";
Object[][] objectArray = new Object[10][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Strawberry").separerColonne(1);

Test 25: 
Object[][] objectArray = new Object[2][5];

Test 26: 
String[] stringArray = new String[5];
stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
stringArray[0] = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
stringArray[0] = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat";
stringArray[0] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
stringArray[0] = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum";
Object[][] objectArray = new Object[6][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum").separerColonne(0);

Test 27: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes((int) (Integer) null);

Test 28: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[1] = "Banana";
stringArray[2] = "Orange";
stringArray[1] = "Banana";
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)1).fusionnerColonnes(1);

Test 29: 
String[] stringArray = new String[1];
stringArray[0] = "Send Email To:";
stringArray[0] = "Email Subject:";
stringArray[0] = "Email Body:";
stringArray[0] = "Sender Name:";
stringArray[0] = "Receiver Name:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Receiver Name:").selectMail();

Test 30: 
String[] stringArray = new String[1];
stringArray[0] = "johndoe@example.com";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 31: 
String[] stringArray = new String[1];
stringArray[0] = "john.doe@example.com";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 32: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 33: 
String[] stringArray = new String[9];
stringArray[2] = "Hello World";
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
modifTableStockage.supprimerLigne(_int);
int _int = 2;
modifTableStockage.separerColonne(_int);


* Generated after the refinement and before minimization 34 tests with total length 210
* test suite isTestSuite: 34
Test 0: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);
Test 5: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);
Test 6: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);
Test 7: 
String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);
Test 10: 
String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 11: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 12: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 16: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);
Test 17: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 18: 
String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);
Test 19: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);
Test 20: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

Test 21: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 22: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

Test 23: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterColonne("Nom", (Class<?>) null);
modifTableStockage.supprimerColonne(1);

Test 24: 
String[] stringArray = new String[4];
stringArray[1] = "Chocolate";
stringArray[1] = "Fruitcake";
stringArray[1] = "Strawberry";
stringArray[1] = "Vanilla";
Object[][] objectArray = new Object[10][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Strawberry").separerColonne(1);

Test 25: 
Object[][] objectArray = new Object[2][5];

Test 26: 
String[] stringArray = new String[5];
stringArray[0] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit";
stringArray[0] = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
stringArray[0] = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat";
stringArray[0] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
stringArray[0] = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum";
Object[][] objectArray = new Object[6][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum").separerColonne(0);

Test 27: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes((int) (Integer) null);

Test 28: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[1] = "Banana";
stringArray[2] = "Orange";
stringArray[1] = "Banana";
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)1).fusionnerColonnes(1);

Test 29: 
String[] stringArray = new String[1];
stringArray[0] = "Send Email To:";
stringArray[0] = "Email Subject:";
stringArray[0] = "Email Body:";
stringArray[0] = "Sender Name:";
stringArray[0] = "Receiver Name:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"Receiver Name:").selectMail();

Test 30: 
String[] stringArray = new String[1];
stringArray[0] = "johndoe@example.com";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 31: 
String[] stringArray = new String[1];
stringArray[0] = "john.doe@example.com";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 32: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 33: 
String[] stringArray = new String[9];
stringArray[2] = "Hello World";
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
modifTableStockage.supprimerLigne(_int);
int _int = 2;
modifTableStockage.separerColonne(_int);


* Minimizing test suite
* test suite isTestSuite: 20
Test 0: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);
Test 5: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);
Test 6: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);
Test 7: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);
Test 8: 
String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 10: 
String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);
Test 11: 
String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 12: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 13: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 17: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);
Test 18: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 19: 
String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 123
* Number of covered goals: 110
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 184
* Number of covered goals: 166
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 56
* Number of covered goals: 23
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 123
* Number of covered goals: 110
* Generated 20 tests with total length 128
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testAjouterLigneTableVide
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
Class<Object> arg1 = Object.class;
TableStockage ajouterColonne = modifTableStockage.ajouterColonne((String) null, arg1);
assertEquals(0, ajouterColonne.getRowCount());
assertEquals(1, ajouterColonne.getColumnCount());

TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0);
assertEquals(0, supprimerColonne.getColumnCount());
assertEquals(0, supprimerColonne.getRowCount());


** It was a parseable test case! 
refined test name is: testAddDeleteColumn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testFusionnerColonnesNegatif
* Compiling Tests
refined test name is: testFusionnerColonnesNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
TableStockage colonneMail = modifTableStockage.colonneMail();
assertEquals(0, colonneMail.getRowCount());
assertEquals(1, colonneMail.getColumnCount());


** It was a parseable test case! 
refined test name is: testShouldNotModifyTableWhenEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 04:08:13.703 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:13.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 04:08:13.884 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:13.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 04:08:14.046 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:14.048 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 04:08:14.178 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:14.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
[MASTER] 04:08:14.531 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:14.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 04:08:14.823 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:14.825 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
[MASTER] 04:08:15.695 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 20
Test 0: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);
Test 5: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);
Test 6: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);
Test 7: 
String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);
Test 10: 
String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 11: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 12: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 16: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);
Test 17: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 18: 
String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);
Test 19: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);

* Minimizing test suite
* test suite isTestSuite: 20
Test 0: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 1: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 2: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 3: 
String[] stringArray = new String[4];
stringArray[0] = "l6~Z|f$#fKVKs2wY]";
Object[][] objectArray = new Object[1][8];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[5];
Object[][] objectArray = new Object[2][2];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
tableStockage.setColumnClass(1, class);
modifTableStockage.ajouterLigne();
Test 5: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(1);
Test 6: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Object> class = Object.class;
modifTableStockage.ajouterColonne((String) null, class);
modifTableStockage.supprimerColonne(0);
Test 7: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][6];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1433);
Test 8: 
String[] stringArray = new String[4];
Object[][] objectArray = new Object[5][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(1);
Test 9: 
String[] stringArray = new String[3];
Object[][] objectArray = new Object[5][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 10: 
String[] stringArray = new String[4];
stringArray[1] = "pm43]<Pn;ZR";
Object[][] objectArray = new Object[10][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 11: 
String[] stringArray = new String[4];
stringArray[1] = "AnKpxf wMN,k@V";
Object[][] objectArray = new Object[2][5];
objectArray[0] = (Object[]) stringArray;
Object[] objectArray = new Object[4];
objectArray[1] = (Object) "";
objectArray[1] = objectArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);
Test 12: 
String[] stringArray = new String[5];
stringArray[0] = "eX}2\u0004P7*cvc!!V\"";
Object[][] objectArray = new Object[6][5];
Object[] objectArray = new Object[7];
objectArray[0] = (Object) " ?g8LlgA;cs#";
objectArray[0] = objectArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(0);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 13: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-800));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 14: 
String[] stringArray = new String[4];
stringArray[1] = "";
stringArray[2] = "0";
Object[][] objectArray = new Object[5][5];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(1);
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "kv>*kMJisN5*ycE";
Object[][] objectArray = new Object[0][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][0];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 17: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[1][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 18: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[2][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<DefaultEditorKit.PasteAction> class = DefaultEditorKit.PasteAction.class;
modifTableStockage.ajouterColonne("H:", class);
Test 19: 
String[] stringArray = new String[9];
stringArray[2] = "%;%l}uS [AW(=x_t";
Object[][] objectArray = new Object[1][6];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
modifTableStockage.separerColonne(2);

[MASTER] 04:08:20.393 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 123
* Number of covered goals: 110
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 184
* Number of covered goals: 166
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 56
* Number of covered goals: 23
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 123
* Number of covered goals: 110
* Generated 20 tests with total length 128
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 04:08:20.584 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 48%
* Compiling and checking tests
[MASTER] 04:08:34.326 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 04:08:37.476 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:37.479 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 04:08:37.633 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:37.634 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 04:08:37.794 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:37.800 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 04:08:38.004 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:38.005 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 04:08:38.263 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:38.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 04:08:38.472 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar7230299605786309762.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 04:08:38.473 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7230299605786309762.jar
* Writing tests to file
[MASTER] 04:08:38.476 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'ModifTableStockage_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
* Writing JUnit test case 'ModifTableStockage_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
* Done!

* Computation finished
