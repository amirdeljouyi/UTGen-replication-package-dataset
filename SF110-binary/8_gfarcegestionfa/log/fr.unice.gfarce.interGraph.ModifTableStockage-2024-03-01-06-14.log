* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: fr.unice.gfarce.interGraph.ModifTableStockage
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/8_gfarcegestionfa/evosuite-files/evosuite.properties
* Connecting to master process on port 14602
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:14:25.612 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:14:25.614 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:14:25.615 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:14:26.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:14:26.033 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:14:26.034 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 06:14:26.745 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:14:26.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:14:26.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:14:26.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:14:26.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:14:26.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:14:26.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:14:26.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:14:26.954 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:14:27.035 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 06:14:27.042 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class fr.unice.gfarce.interGraph.ModifTableStockage
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 495
* Using seed 1709273663234
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 115 / 495
[Progress:>                             0%] [Cov:===========>                       34%][Progress:>                             1%] [Cov:==============>                    42%][Progress:>                             2%] [Cov:===============>                   44%][Progress:>                             3%] [Cov:===============>                   45%][Progress:>                             3%] [Cov:=================>                 49%][Progress:=>                            4%] [Cov:=================>                 50%][Progress:=>                            4%] [Cov:=================>                 50%][Progress:=>                            5%] [Cov:===================>               57%][Progress:========>                     29%] [Cov:===================>               57%][Progress:========>                     29%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:=====================>             61%][Progress:=========>                    30%] [Cov:=====================>             61%][Progress:=========>                    30%] [Cov:======================>            63%][Progress:=========>                    31%] [Cov:======================>            63%][Progress:=========>                    31%] [Cov:======================>            63%][Progress:=========>                    31%] [Cov:======================>            63%][Progress:=========>                    31%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            63%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:==========================>        76%][Progress:==========>                   34%] [Cov:==========================>        76%][Progress:==========>                   34%] [Cov:==========================>        76%][Progress:==========>                   34%] [Cov:==========================>        76%][Progress:==========>                   34%] [Cov:==========================>        76%][Progress:==========>                   34%] [Cov:==========================>        76%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 42%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:============>                 43%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                44%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                45%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:=============>                46%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:==============>               47%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         67%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         68%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      77%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    84%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 103s and 210 generations, 105812 statements, best individual has fitness: 87.0
* Generated before the refinement 22 tests with total length 153
statement is: org.evosuite.testcase.statements.ArrayStatement@74d2db37 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.ArrayStatement@1a63f5e8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[9][9]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: Class<Boolean> class = Boolean.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Boolean>
statement code is: Class<Boolean> class = Boolean.class
statement is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterColonne = modifTableStockage.ajouterColonne("2v4Tz", arg1)
test data is: String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("2v4Tz", class);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };
        Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        Class<Boolean> $missing$ = Boolean.class;
        modifTableStockage.ajouterColonne("2v4Tz", $missing$);
    }
}
statement is: String[] stringArray = new String[]{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[]{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" } Elements: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
lengths: [7] []
Dimension: [] Ct is: Object[][] objectArray = new Object[9][9] isAssignment: false Array: new String[]{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" } Elements: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
lengths: [9, 9] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 } } Elements: [new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 }]
lengths: [7] []
Dimension: [] Ct is: Object[][] objectArray = new Object[9][9] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 } } Elements: [new Object[]{ 1, 2, 3, 4, 5 }, new Object[]{ 6, 7, 8, 9, 10 }, new Object[]{ 11, 12, 13, 14, 15 }, new Object[]{ 16, 17, 18, 19, 20 }]
lengths: [9, 9] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: Class<Boolean> $missing$ = Boolean.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Boolean.class is Boolean
statement is: modifTableStockage.ajouterColonne("2v4Tz", $missing$), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterColonne("2v4Tz", $missing$) target is: modifTableStockage method is: ajouterColonne(java.lang.String,java.lang.Class)
statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterLigne = modifTableStockage.ajouterLigne()
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.ajouterLigne(1, 2022, "09-04-2022");
    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.ajouterLigne(1, 2022, "09-04-2022"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne(1, 2022, "09-04-2022") target is: modifTableStockage method is: ajouterLigne(int,int,java.lang.String)
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

statement is: org.evosuite.testcase.statements.ArrayStatement@b5813b78 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5735eb3d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Q<9S "
statement is: org.evosuite.testcase.statements.ArrayStatement@9cee9f95 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[2][7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@902c2da type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: ajouterLigne()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterLigne = modifTableStockage.ajouterLigne()
test data is: String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Q<9S ";
        Object[][] objectArray = new Object[2][7];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.ajouterLigne("Lettre", 123456789, "Bonjour", 'A', true);
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Q<9S ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Q<9S " Ct is: stringArray[0] = "Q<9S "
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[2][7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2, 7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[2][7] Elements: []
lengths: [7] [2, 7]
Dimension: [2, 7] Ct is: Object[][] objectArray = new Object[2][7] isAssignment: false Array: new Object[2][7] Elements: []
lengths: [2, 7] [2, 7]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@465c0b46
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.ajouterLigne("Lettre", 123456789, "Bonjour", 'A', true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterLigne("Lettre", 123456789, "Bonjour", 'A', true) target is: modifTableStockage method is: ajouterLigne(java.lang.String,int,java.lang.String,char,boolean)
TestCase is: String[] stringArray = new String[7];
String string = "Q<9S ";
stringArray[0] = string;
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

statement is: org.evosuite.testcase.statements.ArrayStatement@c266c443 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.ArrayStatement@5eba24e4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[9][9]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(2)
test data is: String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "1", "2", "3", "4", "5", "6" };
        Object[][] objectArray = new Object[][]{ new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerColonne(2);
    }
}
statement is: String[] stringArray = new String[]{ "1", "2", "3", "4", "5", "6" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[]{ "1", "2", "3", "4", "5", "6" } Elements: ["1", "2", "3", "4", "5", "6"]
lengths: [7] []
Dimension: [] Ct is: Object[][] objectArray = new Object[9][9] isAssignment: false Array: new String[]{ "1", "2", "3", "4", "5", "6" } Elements: ["1", "2", "3", "4", "5", "6"]
lengths: [9, 9] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[][]{ new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 } } Elements: [new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 }]
lengths: [7] []
Dimension: [] Ct is: Object[][] objectArray = new Object[9][9] isAssignment: false Array: new Object[][]{ new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 } } Elements: [new Object[]{ 1, "a", 1 }, new Object[]{ 2, "b", 2 }, new Object[]{ 3, "c", 3 }, new Object[]{ 4, "d", 4 }, new Object[]{ 5, "e", 5 }, new Object[]{ 6, "f", 6 }]
lengths: [9, 9] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerColonne(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne(2) target is: modifTableStockage method is: supprimerColonne(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@1f48a93e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.ArrayStatement@df9a8c99 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[14][7]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0)
test data is: String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
modifTableStockage.supprimerColonne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        Map<String, Object> objectMap = new HashMap<>();
        objectMap.put("ROW_A", new Object[]{ "1", "2", "3" });
        objectMap.put("ROW_B", new Object[]{ "4", "5", "6" });
        objectMap.put("ROW_C", new Object[]{ "7", "8", "9" });
        TableStockage tableStockage = new TableStockage(stringArray, objectMap);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerColonne("ROW_A");
        modifTableStockage.supprimerColonne("ROW_B");
    }
}
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [2] []
Dimension: [] Ct is: Object[][] objectArray = new Object[14][7] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [14, 7] []
statement is: Map<String, Object> objectMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: objectMap.put("ROW_A", new Object[]{ "1", "2", "3" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: objectMap.put("ROW_A", new Object[]{ "1", "2", "3" }) target is: objectMap method is: put(java.lang.String,java.lang.Object[])
statement is: objectMap.put("ROW_B", new Object[]{ "4", "5", "6" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: objectMap.put("ROW_B", new Object[]{ "4", "5", "6" }) target is: objectMap method is: put(java.lang.String,java.lang.Object[])
statement is: objectMap.put("ROW_C", new Object[]{ "7", "8", "9" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: objectMap.put("ROW_C", new Object[]{ "7", "8", "9" }) target is: objectMap method is: put(java.lang.String,java.lang.Object[])
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerColonne("ROW_A"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne("ROW_A") target is: modifTableStockage method is: supprimerColonne(java.lang.String)
statement is: modifTableStockage.supprimerColonne("ROW_B"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne("ROW_B") target is: modifTableStockage method is: supprimerColonne(java.lang.String)
statement is: org.evosuite.testcase.statements.ArrayStatement@585c9338 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@e7bf3a38 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[3][3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8556947 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@c2bab8d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@64406411 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(2)
test data is: String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "Fruit1";
        stringArray[1] = "Fruit2";
        stringArray[2] = "Fruit3";
        stringArray[3] = "Vegetable1";
        stringArray[4] = "Vegetable2";
        stringArray[5] = "Vegetable3";
        stringArray[6] = "Food1";
        stringArray[7] = "Food2";
        Object[][] objectArray = new Object[3][3];
        objectArray[0] = ((Object[]) (stringArray));
        objectArray[1] = ((Object[]) (stringArray));
        objectArray[2] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(2);
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Fruit1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fruit1" Ct is: stringArray[0] = "Fruit1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Fruit2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fruit2" Ct is: stringArray[1] = "Fruit2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Fruit3", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Fruit3" Ct is: stringArray[2] = "Fruit3"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Vegetable1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Vegetable1" Ct is: stringArray[3] = "Vegetable1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Vegetable2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Vegetable2" Ct is: stringArray[4] = "Vegetable2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "Vegetable3", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Vegetable3" Ct is: stringArray[5] = "Vegetable3"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[6] = "Food1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Food1" Ct is: stringArray[6] = "Food1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[7] = "Food2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Food2" Ct is: stringArray[7] = "Food2"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[3][3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3, 3] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new Object[3][3] Elements: []
lengths: [8] [3, 3]
Dimension: [3, 3] Ct is: Object[][] objectArray = new Object[3][3] isAssignment: false Array: new Object[3][3] Elements: []
lengths: [3, 3] [3, 3]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[1] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[2] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.supprimerLigne(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(2) target is: modifTableStockage method is: supprimerLigne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 6, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 6
Matched Method is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.supprimerLigne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@3d52ab73 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.ArrayStatement@f1366dd1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[6][8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e3df990b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@a8de0373 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@ca2e9a46 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@7bfde2c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[3] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@b85553ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[4] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@ad06ba6a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[5] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(0)
test data is: String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
objectArray[5] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[9];
        Object[][] objectArray = new Object[6][8];
        objectArray[0] = ((Object[]) ("JAVA"));
        objectArray[1] = ((Object[]) ("PYTHON"));
        objectArray[2] = ((Object[]) ("C++"));
        objectArray[3] = ((Object[]) ("JAVASCRIPT"));
        objectArray[4] = ((Object[]) ("GO"));
        objectArray[5] = ((Object[]) ("RUBY"));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(0);
    }
}
statement is: String[] stringArray = new String[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[9] Elements: []
lengths: [9] [9]
Their type are: class [Ljava.lang.String; String[]
statement is: Object[][] objectArray = new Object[6][8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6, 8] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new Object[6][8] Elements: []
lengths: [9] [6, 8]
Dimension: [6, 8] Ct is: Object[][] objectArray = new Object[6][8] isAssignment: false Array: new Object[6][8] Elements: []
lengths: [6, 8] [6, 8]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) ("JAVA")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("JAVA")) Ct is: objectArray[0] = ((Object[]) ("JAVA"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = ((Object[]) ("PYTHON")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("PYTHON")) Ct is: objectArray[1] = ((Object[]) ("PYTHON"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2] = ((Object[]) ("C++")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("C++")) Ct is: objectArray[2] = ((Object[]) ("C++"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3] = ((Object[]) ("JAVASCRIPT")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("JAVASCRIPT")) Ct is: objectArray[3] = ((Object[]) ("JAVASCRIPT"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4] = ((Object[]) ("GO")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("GO")) Ct is: objectArray[4] = ((Object[]) ("GO"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[5] = ((Object[]) ("RUBY")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) ("RUBY")) Ct is: objectArray[5] = ((Object[]) ("RUBY"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.supprimerLigne(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(0) target is: modifTableStockage method is: supprimerLigne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 9, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 15
Matched Method is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
String string = "JAVA";
objectArray[0] = (Object[]) string;
String string = "PYTHON";
objectArray[1] = (Object[]) string;
String string = "C++";
objectArray[2] = (Object[]) string;
String string = "JAVASCRIPT";
objectArray[3] = (Object[]) string;
String string = "GO";
objectArray[4] = (Object[]) string;
String string = "RUBY";
objectArray[5] = (Object[]) string;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
((ModifTableStockage) objectArray[3]).supprimerLigne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@767fc331 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.ArrayStatement@ac34770 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[3][3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@197d2917 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@f49c57f6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@fc5803a2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(2)
test data is: String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "A", "B", "C", "D", "E" };
        Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(2);
    }
}
statement is: String[] stringArray = new String[]{ "A", "B", "C", "D", "E" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[]{ "A", "B", "C", "D", "E" } Elements: ["A", "B", "C", "D", "E"]
lengths: [8] []
Dimension: [] Ct is: Object[][] objectArray = new Object[3][3] isAssignment: false Array: new String[]{ "A", "B", "C", "D", "E" } Elements: ["A", "B", "C", "D", "E"]
lengths: [3, 3] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 } } Elements: [new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 }]
lengths: [8] []
Dimension: [] Ct is: Object[][] objectArray = new Object[3][3] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 } } Elements: [new Object[]{ 1, 2, 3 }, new Object[]{ 4, 5, 6 }, new Object[]{ 7, 8, 9 }]
lengths: [3, 3] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.separerColonne(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(2) target is: modifTableStockage method is: separerColonne(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@60f2191f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@363adcd3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "'),|mDPOmW1p?"
statement is: org.evosuite.testcase.statements.ArrayStatement@cf0f3319 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ac9eeb1d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(2)
test data is: String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[2] = "ABCDEFGHIJ";
        Object[][] objectArray = new Object[1][5];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne("columnIndex");
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[2] = "ABCDEFGHIJ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABCDEFGHIJ" Ct is: stringArray[2] = "ABCDEFGHIJ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[1][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1, 5] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new Object[1][5] Elements: []
lengths: [8] [1, 5]
Dimension: [1, 5] Ct is: Object[][] objectArray = new Object[1][5] isAssignment: false Array: new Object[1][5] Elements: []
lengths: [1, 5] [1, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@feae2e51
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.separerColonne("columnIndex"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne("columnIndex") target is: modifTableStockage method is: separerColonne(java.lang.String)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[8];
String string = "ABCDEFGHIJ";
stringArray[2] = string;
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "columnIndex";
modifTableStockage.separerColonne((int) string);

statement is: org.evosuite.testcase.statements.ArrayStatement@2b04f851 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@92d8c38b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "p!3Fg+y;||$ ;e9"
statement is: org.evosuite.testcase.statements.ArrayStatement@7711eae4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[3][6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c7521a6b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@961ba04b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@584cc3d2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage"
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(1)
test data is: String[] stringArray = new String[6];
stringArray[1] = "p!3Fg+y;||$ ;e9";
Object[][] objectArray = new Object[3][6];
objectArray[0] = (Object[]) stringArray;
String[] stringArray = new String[4];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[6];
        stringArray[1] = "p!3Fg+y;||$ ;e9";// This value is not very descriptive, let's change it to something more representative of the data being tested.

        objectArray[0] = ((Object[]) (stringArray));
        String[] stringArray = new String[4];
        stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";// This value is not very descriptive, let's change it to something more representative of the data being tested.

        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(2);// Changed the call to the method to a more representative value, such as 2. }}

    }
}
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[1] = "p!3Fg+y;||$ ;e9"// This value is not very descriptive, let's change it to something more representative of the data being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"p!3Fg+y;||$ ;e9" Ct is: stringArray[1] = "p!3Fg+y;||$ ;e9"// This value is not very descriptive, let's change it to something more representative of the data being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[4] Elements: []
lengths: [6] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage"// This value is not very descriptive, let's change it to something more representative of the data being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"fr.unice.gfarce.interGraph.ModifTableStockage" Ct is: stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage"// This value is not very descriptive, let's change it to something more representative of the data being tested.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.separerColonne(2)// Changed the call to the method to a more representative value, such as 2. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(2)// Changed the call to the method to a more representative value, such as 2. }}
 target is: modifTableStockage method is: separerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 7, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 7
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[6];
String string = "p!3Fg+y;||$ ;e9";
objectArray = (Object[][]) string;
String[] stringArray = new String[6];
String string = "fr.unice.gfarce.interGraph.ModifTableStockage";
stringArray[1] = string;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.separerColonne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@63b1a3a4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d3329512 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "WadV*] @LCXu"
statement is: org.evosuite.testcase.statements.ArrayStatement@7f9127b3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[7][1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3c4b850f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@d6b5e0d0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@c77a047c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@b94efb4d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[3] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@7ec3a923 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[4] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@72a59a7b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.Object;
statement code is: Object[] objectArray = new Object[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@94f28eeb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.Object
statement code is: objectArray[2] = (Object) "&zU%Jv&c@Tk<2-D"
statement is: org.evosuite.testcase.statements.AssignmentStatement@e1b2fa3c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[5] = objectArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@19d3c4a5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[6] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage separerColonne = modifTableStockage.separerColonne(2)
test data is: String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
Object[] objectArray = new Object[6];
objectArray[2] = (Object) "&zU%Jv&c@Tk<2-D";
objectArray[5] = objectArray;
objectArray[6] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[2] = "WadV*] @LCXu";
        Object[][] objectArray = new Object[7][1];
        objectArray[0] = ((Object[]) (stringArray));
        objectArray[1] = ((Object[]) (stringArray));
        objectArray[2] = ((Object[]) (stringArray));
        objectArray[3] = ((Object[]) (stringArray));
        objectArray[4] = ((Object[]) (stringArray));
        Object[] objectArray = new Object[6];
        objectArray[2] = ((Object) ("&zU%Jv&c@Tk<2-D"));
        objectArray[5] = objectArray;
        objectArray[6] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.separerColonne(2);
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[2] = "WadV*] @LCXu", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WadV*] @LCXu" Ct is: stringArray[2] = "WadV*] @LCXu"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[7][1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7, 1] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[7][1] Elements: []
lengths: [4] [7, 1]
Dimension: [7, 1] Ct is: Object[][] objectArray = new Object[7][1] isAssignment: false Array: new Object[7][1] Elements: []
lengths: [7, 1] [7, 1]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f3894c0e
statement is: objectArray[1] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[1] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@50f88753
statement is: objectArray[2] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[2] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d4877b20
statement is: objectArray[3] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[3] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@22f8932e
statement is: objectArray[4] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[4] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f63bf906
statement is: Object[] objectArray = new Object[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new Object[6] Elements: []
lengths: [4] [6]
Their type are: class [Ljava.lang.String; Object[]
Dimension: [6] Ct is: Object[][] objectArray = new Object[7][1] isAssignment: false Array: new Object[6] Elements: []
lengths: [7, 1] [6]
Dimension: [6] Ct is: Object[] objectArray = new Object[6] isAssignment: false Array: new Object[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.Object; Object[]
statement is: objectArray[2] = ((Object) ("&zU%Jv&c@Tk<2-D")), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object) ("&zU%Jv&c@Tk<2-D")) Ct is: objectArray[2] = ((Object) ("&zU%Jv&c@Tk<2-D"))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@40c3ce4a
statement is: objectArray[5] = objectArray, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:objectArray Ct is: objectArray[5] = objectArray
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@45c028b8
statement is: objectArray[6] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:((Object[]) (stringArray)) Ct is: objectArray[6] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e762ed00
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.separerColonne(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.separerColonne(2) target is: modifTableStockage method is: separerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 13, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 7
Matched Method is: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase Could not be added: separerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
* this is vulnerable: String string = "&zU%Jv&c@Tk<2-D"
* this is vulnerable: int _int = 2
TestCase is: String[] stringArray = new String[4];
String string = "WadV*] @LCXu";
stringArray[2] = string;
Object[][] objectArray = new Object[7][1];
Object[] objectArray = new Object[6];
String string = "&zU%Jv&c@Tk<2-D";
TableStockage tableStockage = new TableStockage(stringArray, (Object[][]) objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;

statement is: org.evosuite.testcase.statements.ArrayStatement@468e5a47 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.ArrayStatement@75159c82 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[14][7]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0)
statement is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage fusionnerColonnes = modifTableStockage.fusionnerColonnes((-1))
test data is: String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
modifTableStockage.fusionnerColonnes((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Orange" };
        Object[][] objectArray = new Object[][]{ new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerColonne(0);
        modifTableStockage.fusionnerColonnes(-1);
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[]{ "Apple", "Orange" } Elements: ["Apple", "Orange"]
lengths: [2] []
Dimension: [] Ct is: Object[][] objectArray = new Object[14][7] isAssignment: false Array: new String[]{ "Apple", "Orange" } Elements: ["Apple", "Orange"]
lengths: [14, 7] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new Object[][]{ new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) } } Elements: [new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) }]
lengths: [2] []
Dimension: [] Ct is: Object[][] objectArray = new Object[14][7] isAssignment: false Array: new Object[][]{ new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) } } Elements: [new Object[]{ new Integer(20), new Double(3.5) }, new Object[]{ new Integer(10), new Double(4.7) }, new Object[]{ new Integer(15), new Double(6.8) }, new Object[]{ new Integer(8), new Double(5.9) }]
lengths: [14, 7] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerColonne(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne(0) target is: modifTableStockage method is: supprimerColonne(int)
statement is: modifTableStockage.fusionnerColonnes(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.fusionnerColonnes(-1) target is: modifTableStockage method is: fusionnerColonnes(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@66f11e2e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@23e519e1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Q<9S "
statement is: org.evosuite.testcase.statements.AssignmentStatement@cdec61b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Q<9S "
statement is: org.evosuite.testcase.statements.ArrayStatement@579c66ea type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[4][3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4ccf574d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@abb9f8db type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[1] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@91ee8288 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[2] = (Object[]) stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@79f32809 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[3] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage fusionnerColonnes = modifTableStockage.fusionnerColonnes(0)
test data is: String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "Q<9S ";
        stringArray[1] = "Q<9S ";
        Object[][] objectArray = new Object[4][3];
        objectArray[0] = ((Object[]) (stringArray));
        objectArray[1] = ((Object[]) (stringArray));
        objectArray[2] = ((Object[]) (stringArray));
        objectArray[3] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.fusionnerColonnes("Name");
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Q<9S ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Q<9S " Ct is: stringArray[0] = "Q<9S "
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Q<9S ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Q<9S " Ct is: stringArray[1] = "Q<9S "
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[4][3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4, 3] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[4][3] Elements: []
lengths: [7] [4, 3]
Dimension: [4, 3] Ct is: Object[][] objectArray = new Object[4][3] isAssignment: false Array: new Object[4][3] Elements: []
lengths: [4, 3] [4, 3]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@bbf5cec7
statement is: objectArray[1] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[1] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@77c161c5
statement is: objectArray[2] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[2] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1a7db513
statement is: objectArray[3] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[3] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2bc6570e
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.fusionnerColonnes("Name"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.fusionnerColonnes("Name") target is: modifTableStockage method is: fusionnerColonnes(java.lang.String)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 9, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 7
Matched Method is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase Could not be added: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage;
* this is vulnerable: String string = "Name"
TestCase is: String[] stringArray = new String[7];
String string = "Q<9S ";
stringArray[0] = string;
String string = "Q<9S ";
stringArray[1] = string;
Object[][] objectArray = new Object[4][3];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "Name";

statement is: org.evosuite.testcase.statements.ArrayStatement@2b27856 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bb8d3687 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "'),|mDPOmW1p?"
statement is: org.evosuite.testcase.statements.ArrayStatement@55dd373f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7f569ad5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.Object;
statement code is: objectArray[0] = (Object[]) stringArray
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage fusionnerColonnes = modifTableStockage.fusionnerColonnes(2)
test data is: String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[2] = "12345678";// Change this to a more descriptive value, such as "ABCDEFGH"

        Object[][] objectArray = new Object[1][5];
        objectArray[0] = ((Object[]) (stringArray));
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.fusionnerColonnes(2);
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[2] = "12345678"// Change this to a more descriptive value, such as "ABCDEFGH"
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"12345678" Ct is: stringArray[2] = "12345678"// Change this to a more descriptive value, such as "ABCDEFGH"

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[1][5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1, 5] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new Object[1][5] Elements: []
lengths: [8] [1, 5]
Dimension: [1, 5] Ct is: Object[][] objectArray = new Object[1][5] isAssignment: false Array: new Object[1][5] Elements: []
lengths: [1, 5] [1, 5]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0] = ((Object[]) (stringArray)), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:((Object[]) (stringArray)) Ct is: objectArray[0] = ((Object[]) (stringArray))
target : objectArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e72929b9
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.fusionnerColonnes(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.fusionnerColonnes(2) target is: modifTableStockage method is: fusionnerColonnes(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 5, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: fusionnerColonnes(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[8];
String string = "12345678";
stringArray[2] = string;
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.fusionnerColonnes(_int);

statement is: fr.unice.gfarce.interGraph.TableStockage(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(5, 1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage colonneMail = modifTableStockage.colonneMail()
test data is: TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage(5, 1);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.colonneMail();
    }
}
statement is: TableStockage tableStockage = new TableStockage(5, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.colonneMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.colonneMail() target is: modifTableStockage method is: colonneMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 1, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 3
Matched Method is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: int _int = 5;
int _int = 1;
TableStockage tableStockage = new TableStockage(_int, _int);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) _int).colonneMail();

statement is: org.evosuite.testcase.statements.ArrayStatement@4e6b6890 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@20bfbcc8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Envo.yer E-Mail a"
statement is: org.evosuite.testcase.statements.ArrayStatement@ee2711ec type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[15][4]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[1];
stringArray[0] = "Envo.yer E-Mail a";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Envoyer E-Mail à";// Improved: Added a descriptive value for the test data.

        Object[][] objectArray = new Object[15][4];
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Envoyer E-Mail à"// Improved: Added a descriptive value for the test data.
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Envoyer E-Mail à" Ct is: stringArray[0] = "Envoyer E-Mail à"// Improved: Added a descriptive value for the test data.

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[15][4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [15, 4] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new Object[15][4] Elements: []
lengths: [1] [15, 4]
Dimension: [15, 4] Ct is: Object[][] objectArray = new Object[15][4] isAssignment: false Array: new Object[15][4] Elements: []
lengths: [15, 4] [15, 4]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 4, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 5
Matched Method is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[1];
String string = "Envoyer E-Mail \u00E0";
stringArray[0] = string;
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

statement is: org.evosuite.testcase.statements.ArrayStatement@8689484c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[9]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7d07c0c8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Envoyer E-Mail a:"
statement is: org.evosuite.testcase.statements.ArrayStatement@c0255815 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[0][1]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[9];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "john.doe@example.com", "jane.smith@example.com" };
        Object[][] objectArray = new Object[][]{ new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] stringArray = new String[]{ "john.doe@example.com", "jane.smith@example.com" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new String[]{ "john.doe@example.com", "jane.smith@example.com" } Elements: ["john.doe@example.com", "jane.smith@example.com"]
lengths: [9] []
Dimension: [] Ct is: Object[][] objectArray = new Object[0][1] isAssignment: false Array: new String[]{ "john.doe@example.com", "jane.smith@example.com" } Elements: ["john.doe@example.com", "jane.smith@example.com"]
lengths: [0, 1] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[9] isAssignment: false Array: new Object[][]{ new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" } } Elements: [new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" }]
lengths: [9] []
Dimension: [] Ct is: Object[][] objectArray = new Object[0][1] isAssignment: false Array: new Object[][]{ new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" } } Elements: [new Object[]{ "mail1" }, new Object[]{ "mail2" }, new Object[]{ "mail3" }]
lengths: [0, 1] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
statement is: org.evosuite.testcase.statements.ArrayStatement@4655fc2d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@320fb4e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "Q<9S "
statement is: org.evosuite.testcase.statements.AssignmentStatement@af6aea65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "Q<9S "
statement is: org.evosuite.testcase.statements.AssignmentStatement@292b3f12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "So$%nj K {n"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3430b8c8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "#8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d99b0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@1e2dba2e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "#8"
statement is: org.evosuite.testcase.statements.AssignmentStatement@59172962 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "Envoyer E-Mail a:"
statement is: org.evosuite.testcase.statements.ArrayStatement@51143e86 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[2][7]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage selectMail = modifTableStockage.selectMail()
test data is: String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "userEmail";
        stringArray[1] = "userPassword";
        stringArray[2] = "So$%nj K {n";
        stringArray[3] = "#8";
        stringArray[4] = "";
        stringArray[5] = "#8";
        stringArray[6] = "Envoyer E-Mail a:";
        Object[][] objectArray = new Object[2][7];
        objectArray[0][0] = 7;// number of rows in the table

        objectArray[0][1] = "userName";
        objectArray[0][2] = "userSurname";
        objectArray[0][3] = "userEmail";
        objectArray[0][4] = "userPassword";
        objectArray[0][5] = "";// empty string for the last column

        objectArray[1] = new String[]{ "email1@example.com", "email2@example.com" };// list of email addresses associated with the user

        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.selectMail();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "userEmail", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"userEmail" Ct is: stringArray[0] = "userEmail"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "userPassword", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"userPassword" Ct is: stringArray[1] = "userPassword"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "So$%nj K {n", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"So$%nj K {n" Ct is: stringArray[2] = "So$%nj K {n"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "#8", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"#8" Ct is: stringArray[3] = "#8"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[4] = ""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "#8", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"#8" Ct is: stringArray[5] = "#8"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[6] = "Envoyer E-Mail a:", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Envoyer E-Mail a:" Ct is: stringArray[6] = "Envoyer E-Mail a:"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[2][7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2, 7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[2][7] Elements: []
lengths: [7] [2, 7]
Dimension: [2, 7] Ct is: Object[][] objectArray = new Object[2][7] isAssignment: false Array: new Object[2][7] Elements: []
lengths: [2, 7] [2, 7]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0][0] = 7// number of rows in the table
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:7 Ct is: objectArray[0][0] = 7// number of rows in the table

target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][1] = "userName", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"userName" Ct is: objectArray[0][1] = "userName"
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][2] = "userSurname", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"userSurname" Ct is: objectArray[0][2] = "userSurname"
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][3] = "userEmail", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"userEmail" Ct is: objectArray[0][3] = "userEmail"
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][4] = "userPassword", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"userPassword" Ct is: objectArray[0][4] = "userPassword"
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[0][5] = ""// empty string for the last column
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"" Ct is: objectArray[0][5] = ""// empty string for the last column

target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1] = new String[]{ "email1@example.com", "email2@example.com" }// list of email addresses associated with the user
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object[] Assignment:new String[]{ "email1@example.com", "email2@example.com" } Ct is: objectArray[1] = new String[]{ "email1@example.com", "email2@example.com" }// list of email addresses associated with the user

target : objectArray class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.selectMail(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.selectMail() target is: modifTableStockage method is: selectMail()
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 10, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 17
Matched Method is: selectMail()Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[7];
String string = "userEmail";
stringArray[0] = string;
String string = "userPassword";
stringArray[1] = string;
String string = "So$%nj K {n";
stringArray[2] = string;
String string = "#8";
stringArray[3] = string;
String string = "";
stringArray[4] = string;
String string = "#8";
stringArray[5] = string;
String string = "Envoyer E-Mail a:";
stringArray[6] = string;
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) stringArray[4]).selectMail();

statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: Class<Boolean> class = Boolean.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Boolean>
statement code is: Class<Boolean> class = Boolean.class
statement is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage ajouterColonne = modifTableStockage.ajouterColonne("/(|=<#HJ)&vd-Fx9v6", arg1)
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("/(|=<#HJ)&vd-Fx9v6", class);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        Class<Boolean> $missing$ = Boolean.class;
        modifTableStockage.ajouterColonne("is_available", $missing$);
    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Class<Boolean> $missing$ = Boolean.class, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Boolean.class is Boolean
statement is: modifTableStockage.ajouterColonne("is_available", $missing$), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.ajouterColonne("is_available", $missing$) target is: modifTableStockage method is: ajouterColonne(java.lang.String,java.lang.Class)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 1, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 1
Matched Method is: ajouterColonne(Ljava/lang/String;Ljava/lang/Class;)Lfr/unice/gfarce/interGraph/TableStockage;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "is_available";
Class<Boolean> class = null;
modifTableStockage.ajouterColonne(string, class);

statement is: fr.unice.gfarce.interGraph.TableStockage()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage()
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: colonneMail()Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage colonneMail = modifTableStockage.colonneMail()
test data is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TableStockage tableStockage = new TableStockage();
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.colonneMail("john.doe@example.com");// Improved test data: Using a more descriptive and representative email address }}

    }
}
statement is: TableStockage tableStockage = new TableStockage(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.colonneMail("john.doe@example.com")// Improved test data: Using a more descriptive and representative email address }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.colonneMail("john.doe@example.com")// Improved test data: Using a more descriptive and representative email address }}
 target is: modifTableStockage method is: colonneMail(java.lang.String)
TestCase is: TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

statement is: org.evosuite.testcase.statements.ArrayStatement@38b74025 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.ArrayStatement@552b5675 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[0][1]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerColonne = modifTableStockage.supprimerColonne(0)
test data is: String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "John";
        stringArray[1] = "Doe";
        stringArray[2] = "Jane";
        stringArray[3] = "Smith";
        stringArray[4] = "Brown";
        stringArray[5] = "Miller";
        stringArray[6] = "King";
        Object[][] objectArray = new Object[0][1];
        objectArray[0][0] = 23;
        objectArray[1][0] = 45.67;
        objectArray[2][0] = 'A';
        objectArray[3][0] = "January";
        objectArray[4][0] = true;
        objectArray[5][0] = null;
        objectArray[6][0] = new Object();
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerColonne(0);
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "John", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"John" Ct is: stringArray[0] = "John"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Doe" Ct is: stringArray[1] = "Doe"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Jane", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Jane" Ct is: stringArray[2] = "Jane"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "Smith", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Smith" Ct is: stringArray[3] = "Smith"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "Brown", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Brown" Ct is: stringArray[4] = "Brown"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "Miller", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Miller" Ct is: stringArray[5] = "Miller"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[6] = "King", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"King" Ct is: stringArray[6] = "King"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Object[][] objectArray = new Object[0][1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0, 1] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new Object[0][1] Elements: []
lengths: [7] [0, 1]
Dimension: [0, 1] Ct is: Object[][] objectArray = new Object[0][1] isAssignment: false Array: new Object[0][1] Elements: []
lengths: [0, 1] [0, 1]
Their type are: class [[Ljava.lang.Object; Object[][]
statement is: objectArray[0][0] = 23, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:23 Ct is: objectArray[0][0] = 23
target : objectArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[1][0] = 45.67, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:45.67 Ct is: objectArray[1][0] = 45.67
target : objectArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[2][0] = 'A', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[2][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:'A' Ct is: objectArray[2][0] = 'A'
target : objectArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[3][0] = "January", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[3][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:"January" Ct is: objectArray[3][0] = "January"
target : objectArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[4][0] = true, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[4][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:true Ct is: objectArray[4][0] = true
target : objectArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[5][0] = null, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[5][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:null Ct is: objectArray[5][0] = null
target : objectArray[5] class spoon.support.reflect.code.CtLiteralImpl
statement is: objectArray[6][0] = new Object(), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : objectArray[6][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Object Assignment:new Object() Ct is: objectArray[6][0] = new Object()
target : objectArray[6] class spoon.support.reflect.code.CtLiteralImpl
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: modifTableStockage.supprimerColonne(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerColonne(0) target is: modifTableStockage method is: supprimerColonne(int)
source statement: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V callee: VariableReference: Statement 3, type fr.unice.gfarce.interGraph.ModifTableStockageindex is: 3
Matched Method is: supprimerColonne(I)Lfr/unice/gfarce/interGraph/TableStockage;
TestCase is: String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
modifTableStockage.supprimerColonne(_int);

statement is: org.evosuite.testcase.statements.ArrayStatement@72c1abde type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: org.evosuite.testcase.statements.ArrayStatement@7dee2932 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.Object;
statement code is: Object[][] objectArray = new Object[1][2]
statement is: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage tableStockage = new TableStockage(arg0, arg1)
statement is: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class fr.unice.gfarce.interGraph.ModifTableStockage
statement code is: ModifTableStockage modifTableStockage = new ModifTableStockage(arg0)
statement is: supprimerLigne(I)Lfr/unice/gfarce/interGraph/TableStockage; type is: class org.evosuite.testcase.statements.MethodStatement return type class fr.unice.gfarce.interGraph.TableStockage
statement code is: TableStockage supprimerLigne = modifTableStockage.supprimerLigne(0)
test data is: String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][2];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "value1", "value2", "value3" };
        Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 } };
        TableStockage tableStockage = new TableStockage(stringArray, objectArray);
        ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
        modifTableStockage.supprimerLigne(1);
    }
}
statement is: String[] stringArray = new String[]{ "value1", "value2", "value3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "value1", "value2", "value3" } Elements: ["value1", "value2", "value3"]
lengths: [0] []
Dimension: [] Ct is: Object[][] objectArray = new Object[1][2] isAssignment: false Array: new String[]{ "value1", "value2", "value3" } Elements: ["value1", "value2", "value3"]
lengths: [1, 2] []
statement is: Object[][] objectArray = new Object[][]{ new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 } }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 } } Elements: [new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 }]
lengths: [0] []
Dimension: [] Ct is: Object[][] objectArray = new Object[1][2] isAssignment: false Array: new Object[][]{ new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 } } Elements: [new Object[]{ 1, 2 }, new Object[]{ 4, 5 }, new Object[]{ 7, 8 }]
lengths: [1, 2] []
statement is: TableStockage tableStockage = new TableStockage(stringArray, objectArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.TableStockage([Ljava/lang/String;[[Ljava/lang/Object;)V
statement is: ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: fr.unice.gfarce.interGraph.ModifTableStockage(Lfr/unice/gfarce/interGraph/TableStockage;)V
statement is: modifTableStockage.supprimerLigne(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: modifTableStockage.supprimerLigne(1) target is: modifTableStockage method is: supprimerLigne(int)
* test suite isTestSuite: 37
Test 0: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("2v4Tz", class);
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(2);
Test 4: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
modifTableStockage.supprimerColonne(0);
Test 5: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);
Test 6: 
String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
objectArray[5] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
Test 7: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[6];
stringArray[1] = "p!3Fg+y;||$ ;e9";
Object[][] objectArray = new Object[3][6];
objectArray[0] = (Object[]) stringArray;
String[] stringArray = new String[4];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 10: 
String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
Object[] objectArray = new Object[6];
objectArray[2] = (Object) "&zU%Jv&c@Tk<2-D";
objectArray[5] = objectArray;
objectArray[6] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);
Test 11: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-1));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 12: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(0);
Test 13: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes(2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 14: 
TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envo.yer E-Mail a";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 16: 
String[] stringArray = new String[9];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 17: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 18: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("/(|=<#HJ)&vd-Fx9v6", class);
Test 19: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 20: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
Test 21: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][2];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
Test 22: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 23: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 24: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);

Test 25: 
String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) "JAVA";
String string = "PYTHON";
objectArray[1] = (Object[]) string;
String string = "C++";
objectArray[2] = (Object[]) string;
String string = "JAVASCRIPT";
objectArray[3] = (Object[]) string;
String string = "GO";
objectArray[4] = (Object[]) string;
String string = "RUBY";
objectArray[5] = (Object[]) string;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
((ModifTableStockage) objectArray[3]).supprimerLigne(_int);

Test 26: 
String[] stringArray = new String[8];
stringArray[2] = "ABCDEFGHIJ";
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "columnIndex";
modifTableStockage.separerColonne((int) string);

Test 27: 
String[] stringArray = new String[6];
stringArray = "p!3Fg+y;||$ ;e9";
String[] stringArray = new String[6];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, (Object[][]) "p!3Fg+y;||$ ;e9");
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.separerColonne(_int);

Test 28: 
String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
Object[] objectArray = new Object[6];
TableStockage tableStockage = new TableStockage(stringArray, (Object[][]) objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 29: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 30: 
String[] stringArray = new String[8];
stringArray[2] = "12345678";
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.fusionnerColonnes(_int);

Test 31: 
TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)1).colonneMail();

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail \u00E0";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 33: 
String[] stringArray = new String[7];
stringArray[0] = "userEmail";
stringArray[1] = "userPassword";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"").selectMail();

Test 34: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterColonne("is_available", (Class<?>) null);

Test 35: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 36: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);


* Generated after the refinement and before minimization 37 tests with total length 250
* test suite isTestSuite: 37
Test 0: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("2v4Tz", class);
Test 1: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 2: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 3: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(2);
Test 4: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
modifTableStockage.supprimerColonne(0);
Test 5: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);
Test 6: 
String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
objectArray[5] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
Test 7: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 9: 
String[] stringArray = new String[6];
stringArray[1] = "p!3Fg+y;||$ ;e9";
Object[][] objectArray = new Object[3][6];
objectArray[0] = (Object[]) stringArray;
String[] stringArray = new String[4];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 10: 
String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
Object[] objectArray = new Object[6];
objectArray[2] = (Object) "&zU%Jv&c@Tk<2-D";
objectArray[5] = objectArray;
objectArray[6] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);
Test 11: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-1));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 12: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(0);
Test 13: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes(2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 14: 
TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "Envo.yer E-Mail a";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 16: 
String[] stringArray = new String[9];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 17: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 18: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("/(|=<#HJ)&vd-Fx9v6", class);
Test 19: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 20: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
Test 21: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][2];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
Test 22: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 23: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 24: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);

Test 25: 
String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) "JAVA";
String string = "PYTHON";
objectArray[1] = (Object[]) string;
String string = "C++";
objectArray[2] = (Object[]) string;
String string = "JAVASCRIPT";
objectArray[3] = (Object[]) string;
String string = "GO";
objectArray[4] = (Object[]) string;
String string = "RUBY";
objectArray[5] = (Object[]) string;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 0;
((ModifTableStockage) objectArray[3]).supprimerLigne(_int);

Test 26: 
String[] stringArray = new String[8];
stringArray[2] = "ABCDEFGHIJ";
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
String string = "columnIndex";
modifTableStockage.separerColonne((int) string);

Test 27: 
String[] stringArray = new String[6];
stringArray = "p!3Fg+y;||$ ;e9";
String[] stringArray = new String[6];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, (Object[][]) "p!3Fg+y;||$ ;e9");
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.separerColonne(_int);

Test 28: 
String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
Object[] objectArray = new Object[6];
TableStockage tableStockage = new TableStockage(stringArray, (Object[][]) objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 29: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 30: 
String[] stringArray = new String[8];
stringArray[2] = "12345678";
Object[][] objectArray = new Object[1][5];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
int _int = 2;
modifTableStockage.fusionnerColonnes(_int);

Test 31: 
TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)1).colonneMail();

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "Envoyer E-Mail \u00E0";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage) tableStockage).selectMail();

Test 33: 
String[] stringArray = new String[7];
stringArray[0] = "userEmail";
stringArray[1] = "userPassword";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
((ModifTableStockage)"").selectMail();

Test 34: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterColonne("is_available", (Class<?>) null);

Test 35: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);

Test 36: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);


* Minimizing test suite
* test suite isTestSuite: 22
Test 0: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterColonne("is_available", (Class<?>) null);
Test 1: 
TableStockage tableStockage = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 2: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 3: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
Object[][] objectArray = new Object[2][7];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.ajouterLigne();
Test 4: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
Test 5: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(2);
Test 6: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
modifTableStockage.supprimerColonne(0);
Test 7: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(2);
Test 8: 
String[] stringArray = new String[9];
Object[][] objectArray = new Object[6][8];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
objectArray[5] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);
Test 9: 
String[] stringArray = new String[8];
Object[][] objectArray = new Object[3][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 10: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(2);
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 11: 
String[] stringArray = new String[6];
stringArray[1] = "p!3Fg+y;||$ ;e9";
Object[][] objectArray = new Object[3][6];
objectArray[0] = (Object[]) stringArray;
String[] stringArray = new String[4];
stringArray[1] = "fr.unice.gfarce.interGraph.ModifTableStockage";
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.separerColonne(1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 12: 
String[] stringArray = new String[4];
stringArray[2] = "WadV*] @LCXu";
Object[][] objectArray = new Object[7][1];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
objectArray[4] = (Object[]) stringArray;
Object[] objectArray = new Object[6];
objectArray[2] = (Object) "&zU%Jv&c@Tk<2-D";
objectArray[5] = objectArray;
objectArray[6] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.separerColonne(2);
Test 13: 
String[] stringArray = new String[2];
Object[][] objectArray = new Object[14][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerColonne(0);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes((-1));
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 14: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
Object[][] objectArray = new Object[4][3];
objectArray[0] = (Object[]) stringArray;
objectArray[1] = (Object[]) stringArray;
objectArray[2] = (Object[]) stringArray;
objectArray[3] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.fusionnerColonnes(0);
Test 15: 
String[] stringArray = new String[8];
stringArray[2] = "'),|mDPOmW1p?";
Object[][] objectArray = new Object[1][5];
objectArray[0] = (Object[]) stringArray;
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.fusionnerColonnes(2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.evosuite.runtime.System", e);
}

Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "Envo.yer E-Mail a";
Object[][] objectArray = new Object[15][4];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 17: 
String[] stringArray = new String[9];
stringArray[0] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[0][1];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.selectMail();
Test 18: 
String[] stringArray = new String[7];
stringArray[0] = "Q<9S ";
stringArray[1] = "Q<9S ";
stringArray[2] = "So$%nj K {n";
stringArray[3] = "#8";
stringArray[4] = "";
stringArray[5] = "#8";
stringArray[6] = "Envoyer E-Mail a:";
Object[][] objectArray = new Object[2][7];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
// Undeclared exception!
try { 
  modifTableStockage.selectMail();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
}

Test 19: 
String[] stringArray = new String[7];
Object[][] objectArray = new Object[9][9];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
Class<Boolean> class = Boolean.class;
modifTableStockage.ajouterColonne("2v4Tz", class);
Test 20: 
TableStockage tableStockage = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.colonneMail();
Test 21: 
String[] stringArray = new String[0];
Object[][] objectArray = new Object[1][2];
TableStockage tableStockage = new TableStockage(stringArray, objectArray);
ModifTableStockage modifTableStockage = new ModifTableStockage(tableStockage);
modifTableStockage.supprimerLigne(0);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 123
* Number of covered goals: 108
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 89%
* Total number of goals: 184
* Number of covered goals: 163
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 56
* Number of covered goals: 22
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 123
* Number of covered goals: 108
* Generated 22 tests with total length 152
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 51%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
TableStockage ajouterColonne = modifTableStockage.ajouterColonne("is_available", (Class<?>) null);
assertEquals(0, ajouterColonne.getRowCount());
assertEquals(1, ajouterColonne.getColumnCount());


** It was a parseable test case! 
refined test name is: testAddColumnWithNoRows
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage(5, 1);
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
TableStockage colonneMail = modifTableStockage.colonneMail();
assertEquals(2, colonneMail.getColumnCount());


** It was a parseable test case! 
refined test name is: testCreateColumnWithTwoColumnsGivenTableStockage
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
// Undeclared exception!
try { 
  modifTableStockage.ajouterLigne();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testAjouterLigneWithHeadlessException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TableStockage arg0 = new TableStockage();
ModifTableStockage modifTableStockage = new ModifTableStockage(arg0);
TableStockage colonneMail = modifTableStockage.colonneMail();
assertEquals(0, colonneMail.getRowCount());
assertEquals(1, colonneMail.getColumnCount());


** It was a parseable test case! 
refined test name is: testCreateModifTableStockageWithCorrectColumnCount
* Compiling Tests
refined test name is: testCreateModifTableStockageWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:18:28.797 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:28.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:18:28.975 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:28.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:18:29.247 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:29.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:18:29.362 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:29.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
[MASTER] 06:18:29.636 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:29.642 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:18:29.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar283175451176200179.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:18:29.933 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar283175451176200179.jar
* Writing tests to file
* Writing JUnit test case 'ModifTableStockage_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
* Done!

* Computation finished
