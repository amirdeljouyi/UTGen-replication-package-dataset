/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 14:33:08 GMT 2024
 */

package fr.unice.gfarce.dao;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import fr.unice.gfarce.dao.OracleIdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OracleIdentiteDao_Original_ESTest extends OracleIdentiteDao_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithEmptyString() throws Throwable  {
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.CANDIDAT;
      List<Identite> find = dAO.find("CANDIDAT", "", "", "", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindRespForm() throws Throwable  {
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      RespFormation[] findRespForm = oracleIdentiteDao.findRespForm("S:0A(T/6/42a_,", "", "]a,w^tBP", "");
      assertNull(findRespForm);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNull() throws Throwable  {
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.FORMATEUR;
      List<Identite> find = dAO.find("fr.unice.gfarce.identity.Candidat", (String) null, (String) null, "fr.unice.gfarce.identity.Candidat", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNullAndNonEmptyString() throws Throwable  {
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.FORMATEUR;
      List<Identite> find = dAO.find((String) null, "qA08.=\"O#Fr[G-3~.>3", (String) null, "qA08.=\"O#Fr[G-3~.>3", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindCandidat() throws Throwable  {
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat[] findCandidat = oracleIdentiteDao.findCandidat("", "", "fr.unice.gfarce.identity.Identite", "~uCxi\fk");
      assertNull(findCandidat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDelete() throws Throwable  {
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat arg0 = new Candidat();
      oracleIdentiteDao.delete(arg0);
      assertNull(arg0.getNationalite());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat arg0 = new Candidat();
      oracleIdentiteDao.update(arg0);
      assertNull(arg0.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsert() throws Throwable  {
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      RespFormation arg0 = new RespFormation();
      MockGregorianCalendar arg2 = new MockGregorianCalendar();
      dAO.insert(arg0, "", arg2);
      assertNull(arg0.getTelephone());
  }
}
