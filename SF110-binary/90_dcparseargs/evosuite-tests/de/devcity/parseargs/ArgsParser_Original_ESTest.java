/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 03:47:46 GMT 2024
 */

package de.devcity.parseargs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import de.devcity.parseargs.ArgsParser;
import de.devcity.parseargs.arguments.ParameterArgument;
import de.devcity.parseargs.arguments.StringArgument;
import de.devcity.parseargs.arguments.SwitchArgument;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgsParser_Original_ESTest extends ArgsParser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsCountReturningZero() throws Throwable  {
      ArgsParser argsParser = new ArgsParser();
      String[] arg0 = new String[0];
      argsParser.setArgs(arg0);
      int argsCount = argsParser.getArgsCount();
      assertEquals(0, argsCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsReturningNonEmptyArray() throws Throwable  {
      ArgsParser argsParser = new ArgsParser();
      String[] arg0 = new String[3];
      argsParser.setArgs(arg0);
      String[] args = argsParser.getArgs();
      assertEquals(3, args.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsReturningEmptyArray() throws Throwable  {
      ArgsParser argsParser = new ArgsParser();
      String[] arg0 = new String[0];
      argsParser.setArgs(arg0);
      String[] args = argsParser.getArgs();
      assertFalse(args.equals((Object)arg0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseStringArgumentReturningListWhereIsEmptyIsFalse() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[0] = "<";
      ArgsParser argsParser = new ArgsParser(arg0);
      List<StringArgument> parseStringArgument = argsParser.parseStringArgument();
      assertFalse(parseStringArgument.isEmpty());
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseStringArgumentReturningListWhereIsEmptyIsTrue() throws Throwable  {
      String[] arg0 = new String[9];
      ArgsParser argsParser = new ArgsParser(arg0);
      List<StringArgument> parseStringArgument = argsParser.parseStringArgument();
      assertTrue(parseStringArgument.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningParameterArgumentWhereGetPositionIsZero0() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[0] = "-[U}F+<~_";
      ArgsParser argsParser = new ArgsParser(arg0);
      ParameterArgument parseParameterArgument = argsParser.parseParameterArgument("[");
      assertNotNull(parseParameterArgument);
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentReturningParameterArgumentWhereGetPositionIsPositive() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[3] = "-<";
      arg0[4] = "<";
      ArgsParser argsParser = new ArgsParser(arg0);
      ParameterArgument parseParameterArgument = argsParser.parseParameterArgument("<");
      assertNotNull(parseParameterArgument);
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull0() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[3] = "-<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningParameterArgumentWhereGetPositionIsZero1() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[0] = "-[U}F+<~_";
      ArgsParser argsParser = new ArgsParser(arg0);
      ParameterArgument parseParameterArgument = argsParser.parseParameterArgument("<");
      assertNotNull(parseParameterArgument);
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull1() throws Throwable  {
      String[] arg0 = new String[1];
      arg0[0] = "-[UF+<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull2() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[2] = "---U<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull3() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[0] = "<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentWithEmptyString() throws Throwable  {
      String[] arg0 = new String[1];
      arg0[0] = "-[UF+<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentReturningParameterArgumentWhereIsLongKeyIsTrue() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[1] = "---TU}F|+<;Y~-_^";
      arg0[2] = "-[U}F+<~_";
      ArgsParser argsParser = new ArgsParser(arg0);
      ParameterArgument parseParameterArgument = argsParser.parseParameterArgument("-TU}F|+<;Y~-_^");
      assertNotNull(parseParameterArgument);
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull4() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[1] = "---TU}F|+<;Y~-_^";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("-TU}F|+<;Y~-_^");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull5() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[0] = "<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("--");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseParameterArgumentAndParseParameterArgumentReturningNull6() throws Throwable  {
      String[] arg0 = new String[4];
      arg0[3] = "---TU}F|+<;Y~-_^";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseParameterArgument("-TU}F|+<;Y~-_^");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument0() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[3] = "-<";
      ArgsParser argsParser = new ArgsParser(arg0);
      SwitchArgument parseSwitchArgument = argsParser.parseSwitchArgument("<");
      assertEquals(3, parseSwitchArgument.getPosition());
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument1() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[3] = "-<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseSwitchArgument("-");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument2() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[2] = "---U<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseSwitchArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument3() throws Throwable  {
      String[] arg0 = new String[4];
      arg0[1] = "eN!{Tn`d<!";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseSwitchArgument(" ");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument4() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[0] = "<";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseSwitchArgument("<");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgumentReturningSwitchArgumentWhereGetPositionIsZero() throws Throwable  {
      String[] arg0 = new String[4];
      arg0[0] = "-[U}F|+<;YB~-_^";
      ArgsParser argsParser = new ArgsParser(arg0);
      SwitchArgument parseSwitchArgument = argsParser.parseSwitchArgument("-");
      assertTrue(parseSwitchArgument.isSet());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument5() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[1] = "---TU}F|+<;Y~-_^";
      ArgsParser argsParser = new ArgsParser(arg0);
      SwitchArgument parseSwitchArgument = argsParser.parseSwitchArgument("-TU}F|+<;Y~-_^");
      assertTrue(parseSwitchArgument.isSet());
      assertEquals(0, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSwitchArgument6() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[0] = "-[U}F+<~_";
      ArgsParser argsParser = new ArgsParser(arg0);
      argsParser.parseSwitchArgument("ygh.vr");
      assertEquals(1, argsParser.getArgsLeftCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsLeftCountReturningPositive() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[0] = "-[U}F+<~_";
      ArgsParser argsParser = new ArgsParser(arg0);
      int argsLeftCount = argsParser.getArgsLeftCount();
      assertEquals(1, argsLeftCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsLeftCountReturningZero() throws Throwable  {
      String[] arg0 = new String[5];
      ArgsParser argsParser = new ArgsParser(arg0);
      int argsLeftCount = argsParser.getArgsLeftCount();
      assertEquals(0, argsLeftCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsCountReturningPositive() throws Throwable  {
      String[] arg0 = new String[5];
      ArgsParser argsParser = new ArgsParser(arg0);
      int argsCount = argsParser.getArgsCount();
      assertEquals(5, argsCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArgsReturningNull() throws Throwable  {
      ArgsParser argsParser = new ArgsParser();
      String[] args = argsParser.getArgs();
      assertNull(args);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetArgsThrowsNullPointerException() throws Throwable  {
      String[] arg0 = new String[3];
      ArgsParser argsParser = new ArgsParser(arg0);
      // Undeclared exception!
      try { 
        argsParser.setArgs((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // args[] cannot be null.
         //
         verifyException("de.devcity.parseargs.ArgsParser", e);
      }
  }
}
