/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 12:59:37 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_Original_ESTest extends MethodWriter_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[1] = (byte)75;
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
      assertEquals(19200, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[9];
      arg0[0] = (byte)68;
      short readShort = MethodWriter.readShort(arg0, (byte)0);
      assertEquals((short)17408, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[2] = (byte) (-114);
      short readShort = MethodWriter.readShort(arg0, 2);
      assertEquals((short) (-29184), readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[5];
      arg0[0] = (byte)56;
      int readInt = MethodWriter.readInt(arg0, (byte)0);
      assertEquals(939524096, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[1] = (byte) (-10);
      int readInt = MethodWriter.readInt(arg0, 1);
      assertEquals((-167772160), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments0() throws Throwable  {
      int[] arg1 = new int[6];
      Label arg2 = new Label();
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      assertEquals(6, arg1.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      int[] arg1 = new int[5];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 0, (-1726));
      assertEquals((-1726), newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments1() throws Throwable  {
      Label arg2 = new Label();
      int[] arg1 = new int[4];
      arg1[0] = 16777216;
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      assertEquals(4, arg1.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      int[] arg1 = new int[2];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 4388, 4388);
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningPositive() throws Throwable  {
      int[] arg1 = new int[2];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-2354), 605);
      assertEquals(2959, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlock() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "g!V~yHe\"";
      arg5[1] = "g!V~yHe\"";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
      Label arg2 = new Label();
      methodWriter.visitInsn(2);
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "[]");
      byte[] byteArray = arg0.toByteArray();
      assertEquals(133, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777239);
      String[] arg5 = new String[7];
      arg5[0] = "Deprecated";
      arg5[1] = "Deprecated";
      arg5[2] = "Deprecated";
      arg5[3] = "Deprecated";
      arg5[4] = "Signature";
      arg5[5] = "Signature";
      arg5[6] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false);
      methodWriter.visitAnnotationDefault();
      int size = methodWriter.getSize();
      assertEquals(56, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(2002);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "!2:W uG.AP.nP9Fsrdv", "-.TI|t", (String) null, arg5, false, false);
      int size = methodWriter.getSize();
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg4 = new String[1];
      arg4[0] = "init>";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1146), "org.objectweb.asm.jip.AnnotationWriter", "org.objectweb.asm.jip.AnnotationWriter", "Deprecated", arg4, false, false);
      methodWriter.visitIincInsn((-823), (-827));
      methodWriter.visitFrame(2, 1024, arg4, 713, arg4);
      int size = methodWriter.getSize();
      assertEquals(73, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[7];
      arg5[0] = "g!V~yHe\"";
      arg5[1] = "g!V~yHe\"";
      arg5[2] = "g!V~yHe\"";
      arg5[3] = "g!V~yHe\"";
      arg5[4] = "g!V~yHe\"";
      arg5[5] = "g!V~yHe\"";
      arg5[6] = "g!V~yHe\"";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitInsn(190);
      methodWriter.visitLineNumber(1103, arg1);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(157, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithEmptyString() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195);
      methodWriter.visitFieldInsn(1, "=8", "Htz", "");
      int size = methodWriter.getSize();
      assertEquals(85, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777245);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
      methodWriter.classReaderOffset = 11;
      int size = methodWriter.getSize();
      assertEquals(6, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(2002);
      MethodWriter methodWriter = new MethodWriter(arg0, 2002, "1`wM~{wz6nHU9q/J-nj", "93T", "93T", (String[]) null, false, false);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(80, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithPositive() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = "org.objectweb.asm.jip.Attribute";
      arg5[1] = "org.objectweb.asm.jip.Attribute";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", "org.objectweb.asm.jip.Attribute", arg5, false, false);
      Object[] arg4 = new Object[8];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(1, 1, arg4, 2, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777226);
      String[] arg5 = new String[2];
      arg5[0] = "r";
      arg5[1] = "r";
      Label arg1 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "r", "-&s6hYw):", "r", arg5, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "r");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitTryCatchBlock() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777226);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      Label arg2 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777226, "", "-&s6hYw):", "", arg5, true, false);
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "");
      methodWriter.visitMaxs(16777226, 16777226);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMaxs() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777239);
      String[] arg5 = new String[7];
      arg5[0] = "Deprecated";
      arg5[1] = "Deprecated";
      arg5[2] = "Deprecated";
      arg5[3] = "Deprecated";
      arg5[4] = "Signature";
      arg5[5] = "Signature";
      arg5[6] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "", "Signature", "", arg5, false, false);
      methodWriter.visitMaxs(2, 1024);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitVarInsn() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-779));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true);
      methodWriter.visitVarInsn(1, 2);
      methodWriter.visitMaxs(252, 50);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777223);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
      Label arg1 = new Label();
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "')~o}k +1Rl");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(16777223, 16777223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberWithNegative() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "Deprecated";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, (-7), "L", "<init>", "<init>", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(22, arg1);
      methodWriter.visitLineNumber((-654), arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777229);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "Deprecated";
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "<init>", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitLocalVariable(";P7$", "Deprecated", "L", arg4, arg4, 16777229);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "Deprecated";
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitLocalVariable("')'o}k +1R-", "JyU.B", "qLOcZudIg?V(", arg4, arg4, 28);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNegative() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("", "", "", arg4, arg4, 195);
      methodWriter.visitLocalVariable("", "N@1q]l>T((IY1!OGJ", "", arg4, arg4, (-1899));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = "W";
      arg5[1] = ";P7$";
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false);
      methodWriter.visitLocalVariable("\"", "RuntimeVisibleParameterAnnotations", ";P7$", arg4, arg4, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNull() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("", "Signature", (String) null, arg4, arg4, 252);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTryCatchBlock() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777223);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "");
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "')~o}k +1Rl");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegativeAndVisitTryCatchBlockWithNull() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777223);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-856), "", "')~o}k +1Rl", "", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
      methodWriter.visitMaxs(5, (-2505));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMultiANewArrayInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-910), "+1ER>2", "')$'o}k +1R(-", "+1ER>2", arg5, true, true);
      methodWriter.visitMultiANewArrayInsn("')$'o}k +1R(-", 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMultiANewArrayInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(2002);
      String[] arg5 = new String[5];
      arg5[0] = "StackMap";
      arg5[1] = "Code";
      arg5[2] = "!2:W uG.AP.nP9Fsrdv";
      arg5[3] = "StackMap";
      arg5[4] = "Code";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "Code", "Code", "StackMap", arg5, false, false);
      methodWriter.visitMultiANewArrayInsn("StackMap", 2002);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIincInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-975), "2tB)7S", "-&s6hYw):K", "Reprecated", arg5, true, true);
      methodWriter.visitIincInsn(202, 1493);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitIincInsnAndVisitIincInsnWithNegativeAndVisitIincInsnWithNegative() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = ";P;$";
      arg5[1] = ";P;$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P;$", "-&s6hYw):", ";P;$", arg5, true, false);
      methodWriter.visitIincInsn((-5549), (-1652));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIincInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false);
      methodWriter.visitIincInsn(28, 28);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "Deprecated";
      arg0.index = 647;
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "", "", arg5, false, false);
      methodWriter.visitLdcInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "L";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("L", 16777186);
      methodWriter.visitLdcInsn(arg0.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg5, true, true);
      methodWriter.visitLdcInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = ";CP;$";
      arg5[1] = ";CP;$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false);
      methodWriter.visitLdcInsn(";CP;$");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLabel() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777224);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitLabel(arg1);
      methodWriter.visitJumpInsn(2, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = ";CP;$";
      arg5[1] = ";CP;$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";CP;$", "-&s6hYw):", ";CP;$", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(178, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      Label arg1 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XXH+l", "Xg)AS", "Xg)AS", arg5, true, false);
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitJumpInsn(168, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithEmptyStringAndNegative() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777229);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("", (-501));
      methodWriter.visitMethodInsn(1882, "')$'o}k +1R(-", " Gl%m|UV!q", "')$'o}k +1R(-");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false);
      methodWriter.visitMethodInsn(168, "A?L", "Xg)AS", "Xg)AS");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnThrowsStringIndexOutOfBoundsException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(553);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1639, "Hm/tz", "Hm/tz", "Hm/tz", arg5, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitMethodInsn(185, "Hm/tz", "Hm/tz", "Hm/tz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnWithEmptyString() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777212);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", "F6}A}w:N~hq(g)Z", "", arg5, false, false);
      methodWriter.visitMethodInsn(186, "HcL~H5}FkI3Blf)81Q", "", "short");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "L";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitFieldInsn(28, "<init>", "JZ6Y3ch7}:PAZ)@", "JZ6Y3ch7}:PAZ)@");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777216, "<init>", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitFieldInsn(2, "Deprecated", "org.objectweb.asm.jip.ByteVector", "Deprecated");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(251);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "L";
      MethodWriter methodWriter = new MethodWriter(arg0, 251, "L", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitFieldInsn(178, "L", "8V<8[F/pk5s].4{5o!", "I$3!^");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn3() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true);
      methodWriter.visitFieldInsn(218, "Htz", "Exceptions", "RZSW\"0~(==\"aBysT");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[8];
      arg5[0] = "";
      arg5[1] = "')'o.]}k +1R-";
      arg5[2] = "')'o.]}k +1R-";
      arg5[3] = "')'o.]}k +1R-";
      arg5[4] = "')'o.]}k +1R-";
      arg5[5] = "')'o.]}k +1R-";
      arg5[6] = "')'o.]}k +1R-";
      arg5[7] = "')'o.]}k +1R-";
      MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false);
      methodWriter.visitTypeInsn(187, "Signam3re");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-883), "8", "')$'o}k +1R-", "8", arg5, false, true);
      methodWriter.visitTypeInsn(2, "d>@v[F");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(2002);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2002, "z", "StackMapTable", "", arg5, false, false);
      methodWriter.visitTypeInsn(2002, "z");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-779));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-779), "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", "vX6B_-)w^]ZjDHjb", arg5, false, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "vX6B_-)w^]ZjDHjb");
      methodWriter.visitVarInsn(132, 1172);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = "W";
      arg5[1] = ";P;$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "W", "-&s6hYw):", "W", arg5, true, false);
      methodWriter.visitVarInsn(1, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777249);
      String[] arg5 = new String[9];
      arg5[0] = "Htz";
      arg5[1] = "AnnotationDefault";
      arg5[2] = "\"";
      arg5[3] = "Htz";
      arg5[4] = "\"";
      arg5[5] = "Htz";
      arg5[6] = "')'o}k +1R-";
      arg5[7] = "Htz";
      arg5[8] = "Htz";
      MethodWriter methodWriter = new MethodWriter(arg0, 55, "')'o}k +1R-", "')'o}k +1R-", "\"", arg5, true, false);
      methodWriter.visitVarInsn(55, 16777249);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-883), "", "')$'o}k +1R-", "", arg5, false, true);
      methodWriter.visitVarInsn(24, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn3() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[8];
      arg5[0] = "";
      arg5[1] = "')'o.]}k +1R-";
      arg5[2] = "')'o.]}k +1R-";
      arg5[3] = "')'o.]}k +1R-";
      arg5[4] = "')'o.]}k +1R-";
      arg5[5] = "')'o.]}k +1R-";
      arg5[6] = "')'o.]}k +1R-";
      arg5[7] = "')'o.]}k +1R-";
      MethodWriter methodWriter = new MethodWriter(arg0, 70, "')'o.]}k +1R-", "')'o.]}k +1R-", "')'o.]}k +1R-", arg5, true, false);
      methodWriter.visitVarInsn(57, 187);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn4() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "L";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "L", "-&s6hYw):K", "L", arg5, true, false);
      methodWriter.visitVarInsn(169, 41);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn5() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "XH+l", "Xg)AS", "Xg)AS", arg5, true, false);
      methodWriter.visitVarInsn(22, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn6() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777224);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 16777224, "", "')'o}k +1R-", "", arg5, false, true);
      methodWriter.visitVarInsn(54, 256);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn7() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777245);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Htz", "", "", arg5, false, false);
      methodWriter.visitVarInsn(170, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 276, "H", "Xg)AS", "Code", arg5, true, false);
      methodWriter.visitFieldInsn(1, "Xg)AS", "Htz", "y+N3b1iX");
      methodWriter.visitIntInsn(1, 276);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 276, "H", "Xg)AS", "Code", arg5, true, false);
      methodWriter.visitIntInsn(1, 276);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(8);
      String[] arg5 = new String[2];
      arg5[0] = ";";
      arg5[1] = "boolean";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ";", "", ";", arg5, false, false);
      methodWriter.visitIntInsn(17, 17);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777229);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777229, "", "-&s6hYw):K", "", arg5, true, false);
      methodWriter.visitInsn(191);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = "'P;$";
      arg5[1] = "'P;$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), "'P;$", "-&s6hYw):", "'P;$", arg5, true, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithPositive0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2168));
      String[] arg4 = new String[5];
      arg4[0] = "";
      arg4[1] = "";
      arg4[2] = "";
      arg4[3] = "";
      arg4[4] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2168), "", "", "", arg4, false, false);
      methodWriter.visitFrame(4, (-2168), arg4, 1, arg4);
      assertEquals(5, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZero() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777229);
      String[] arg4 = new String[2];
      arg4[0] = "L";
      arg4[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "L", "L", "L", arg4, false, false);
      methodWriter.visitFrame(0, 1, arg4, 1, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFrame0() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(4096);
      String[] arg4 = new String[2];
      arg4[0] = "Stac\"k;ap";
      arg4[1] = "Stac\"k;ap";
      MethodWriter methodWriter = new MethodWriter(arg0, 3, "Stac\"k;ap", "Stac\"k;ap", "Stac\"k;ap", arg4, false, false);
      methodWriter.visitFrame(3, 1, arg4, 4096, arg4);
      methodWriter.visitFrame(3, 891, arg4, 1, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsnWithEmptyString() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg4 = new String[2];
      arg4[0] = "";
      arg4[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg4, true, false);
      methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4);
      methodWriter.visitTypeInsn(76, "");
      methodWriter.visitFrame(267, (-1105), arg4, 1, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777186);
      String[] arg4 = new String[2];
      arg4[0] = "";
      arg4[1] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 16777186, "", "-&s6hYw):K", "", arg4, true, false);
      methodWriter.visitFrame(16777186, (-1105), arg4, 2, arg4);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(267, (-1105), arg4, 1, arg4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNegative() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg5 = new String[2];
      arg5[0] = ";P7$";
      arg5[1] = ";P7$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg5, false, false);
      Object[] arg4 = new Object[4];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((-1), (-1), arg4, 2, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2253));
      String[] arg5 = new String[2];
      arg5[0] = ";P3$";
      arg5[1] = ";P3$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg5, false, false);
      Object[] arg4 = new Object[4];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((-1), 1, arg4, 2, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithPositive1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2268));
      String[] arg4 = new String[2];
      arg4[0] = ";P7$";
      arg4[1] = ";P7$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2268), ";P7$", ";P7$", ";P7$", arg4, false, false);
      methodWriter.visitFrame((-1), 1, arg4, 2, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithEmptyArray() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-3));
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 171, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg4, true, true);
      methodWriter.visitFrame(2, (-3), arg4, (-2), arg4);
      assertEquals(0, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFrame1() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-2253));
      String[] arg4 = new String[2];
      arg4[0] = ";P3$";
      arg4[1] = ";P3$";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2253), ";P3$", ";P3$", ";P3$", arg4, false, false);
      methodWriter.visitFrame(1, 1, arg4, 2, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777224);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-853), "", "')'o}k  \"+1R-", "", arg5, false, true);
      // Undeclared exception!
      try { 
        methodWriter.visitParameterAnnotation(1, "')'o}k  \"+1R-", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, 12, "", "Signature", "Deprecated", arg5, false, false);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation((-1863), "Ljava/lang/Synthetic;", false);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777224);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "", arg5, false, true);
      methodWriter.visitAnnotation("n:EU3D<so40Q&T*", true);
      int size = methodWriter.getSize();
      assertEquals(40, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "g!V~yHe\"";
      arg5[1] = "g!V~yHe\"";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "g!V~yHe\"", "g!V~yHe\"", "g!V~yHe\"", arg5, false, false);
      methodWriter.visitAnnotation("g!V~yHe\"", false);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(133, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsnThrowsNullPointerException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter((-3));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "vX6B_-)w^]ZjDHjb", "vX6B_-)w^]ZjDHjb", "')'o.]}k 1R-", arg5, true, true);
      // Undeclared exception!
      try { 
        methodWriter.visitInsn((-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "L";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = null;
      try {
        methodWriter = new MethodWriter(arg0, 1, "<init>", "<init>", (String) null, arg5, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithTrue() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-865), "", "')'o}k +1R-", "RZSW\"0~(==\"aBysT", arg5, false, true);
      // Undeclared exception!
      try { 
        methodWriter.visitParameterAnnotation(16777216, "')'o}k +1R-", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16777216
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "Htz", "Xg)AS", "Xg)AS", arg5, true, false);
      methodWriter.visitIntInsn(188, 74);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "~33'$~gY+";
      arg5[1] = "Htz";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "kxoM,hErWC{y", "kxoM,hErWC{y", "iSm", arg5, false, false);
      methodWriter.visitEnd();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      byte[] arg0 = new byte[20];
      int readInt = MethodWriter.readInt(arg0, 16);
      assertEquals(0, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      byte[] arg0 = new byte[4];
      short readShort = MethodWriter.readShort(arg0, 2);
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      byte[] arg0 = new byte[8];
      MethodWriter.writeShort(arg0, 2, (-1803));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-8), (byte) (-11), (byte)0, (byte)0, (byte)0, (byte)0}, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777216);
      String[] arg5 = new String[2];
      arg5[0] = "";
      arg5[1] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, (-8), "", "<init>", "<init>", arg5, false, false);
      methodWriter.visitCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      byte[] arg0 = new byte[4];
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 1);
      assertEquals(0, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn2() throws Throwable  {
      ClassWriter arg0 = new ClassWriter(16777241);
      String[] arg5 = new String[0];
      Label arg1 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 16777241, "TExpn):P`0HL", "Xg)AS", "Xg)AS", arg5, true, true);
      methodWriter.visitJumpInsn(167, arg1);
  }
}
