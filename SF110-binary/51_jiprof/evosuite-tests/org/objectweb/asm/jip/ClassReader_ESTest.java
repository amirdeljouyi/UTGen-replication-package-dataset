/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 13:42:07 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingByteArray() throws Throwable  {
      // Given a byte array containing a valid Java class file
      byte[] classData = new byte[10];
      
      // When the ClassReader is created with this byte array
      ClassReader classReader = new ClassReader(classData);
      
      // Then the header length of the class should be 10
      assertEquals(10, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      classReader.readUnsignedShort(4);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      classReader.readShort(4);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      
      // When
      short readShort = classReader.readShort(46);
      
      // Then
      assertEquals((short)808, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      long readLong = classReader.readLong(29);
      assertEquals(504424079052505344L, readLong);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      Label[] arg1 = new Label[7];
      Label readLabel = classReader.readLabel(4, arg1);
      assertEquals(259, classReader.header);
      assertNotNull(readLabel);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readInt = classReader.readInt(2);
      assertEquals(259, classReader.header);
      assertEquals((-1161953280), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstReturningNonNull() throws Throwable  {
      // Given: The "org.yasl.jars.JarFileFilter" class is loaded into memory
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      
      // When: We read the constant value from the header of the class file
      char[] arg1 = new char[8];
      Object readConst = classReader.readConst(4, arg1);
      
      // Then: The constant value should be equal to ".JAR"
      assertEquals(".JAR", readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClass() throws Throwable  {
      // rollbacked to evosuite
      ClassReader arg0 = new ClassReader("org.yasl.jars.JarFileFilter");
      assertEquals(259, arg0.header);
      
      ClassWriter classWriter = new ClassWriter(arg0, 1);
      char[] arg1 = new char[4];
      String readClass = arg0.readClass(19, arg1);
      assertEquals("java/lang/String", readClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readByte = classReader.readByte(21);
      assertEquals(0, readByte);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      // Undeclared exception!
      try { 
        classReader.readConst(15, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readInt = classReader.readInt(18);
      assertEquals(167776000, readInt);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readUnsignedShort = classReader.readUnsignedShort(166);
      assertEquals(259, classReader.header);
      assertEquals(30305, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[1];
      // Undeclared exception!
      try { 
        classReader.readConst(288, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[13];
      // Undeclared exception!
      try { 
        classReader.readUTF8(4, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Class");
      ClassWriter arg0 = new ClassWriter(19569);
      Attribute[] arg1 = new Attribute[3];
      
      // When
      try {
      classReader.accept((ClassVisitor) arg0, arg1, 2);
      fail("Expected exception not thrown");
      } catch (IllegalArgumentException e) {
      // Then
      assertEquals("Invalid argument", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments0() throws Throwable  {
      // Given a class reader for the Frame class
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      
      // When the class is read with the ClassWriter argument set to -3666
      ClassWriter arg0 = new ClassWriter((-3666));
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2570);
      
      // Then the EXPAND_FRAMES flag should be set to 8
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments1() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      ClassWriter arg0 = new ClassWriter(4);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 4);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      ClassReader arg0 = new ClassReader(classReader.b, 8, 9);
      ClassWriter classWriter = null;
      try {
        classWriter = new ClassWriter(arg0, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningNonEmptyArray() throws Throwable  {
      // Given a JarFileFilter class reader
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      
      // When the header is read from the class file
      assertEquals(259, classReader.header);
      
      // Then the length of the interfaces array should be 1
      String[] interfaces = classReader.getInterfaces();
      assertEquals(1, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      String[] interfaces = classReader.getInterfaces();
      assertEquals(0, interfaces.length);
      assertEquals(3278, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperName() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Class");
      assertEquals(19569, classReader.header);
      
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      assertNotNull(superName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      assertEquals(259, classReader.header);
      
      String className = classReader.getClassName();
      assertEquals("org/yasl/jars/JarFileFilter", className);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Class");
      ClassWriter arg0 = new ClassWriter(2);
      
      // When
      classReader.accept((ClassVisitor) arg0, 8);
      
      // Then
      // Assert that the returned result is as expected
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readByte = classReader.readByte(2);
      assertEquals(186, readByte);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int item = classReader.getItem(13);
      assertEquals(105, item);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      long readLong = classReader.readLong(1);
      assertEquals((-91551935198384128L), readLong);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int access = classReader.getAccess();
      assertEquals(32, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingString() throws Throwable  {
      // No Comments were added
      ClassReader arg0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter = new ClassWriter(arg0, 19569);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      short readShort = classReader.readShort(2);
      assertEquals(259, classReader.header);
      assertEquals((short) (-17730), readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      Object readConst = classReader.readConst(15, (char[]) null);
      assertEquals(3278, classReader.header);
      assertEquals(16777216, readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = null;
      try {
        classReader = new ClassReader("com.example.MyClass");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }
}
