* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.objectweb.asm.jip.ClassReader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/51_jiprof/evosuite-files/evosuite.properties
* Connecting to master process on port 7413
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.objectweb.asm.jip.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2586
* Using seed 1710238495270
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 242 / 2586
[Progress:>                             0%] [Cov:=>                                 3%][Progress:>                             0%] [Cov:=>                                 3%][Progress:>                             1%] [Cov:=>                                 3%][Progress:>                             1%] [Cov:=>                                 3%][Progress:>                             1%] [Cov:=>                                 3%][Progress:=>                            4%] [Cov:=>                                 3%][Progress:=>                            4%] [Cov:==>                                8%][Progress:=>                            4%] [Cov:=====>                             15%][Progress:==>                           7%] [Cov:========>                          23%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:=====>                        19%] [Cov:=================>                 51%][Progress:========>                     29%] [Cov:===================>               55%][Progress:=========>                    32%] [Cov:===================>               55%][Progress:==============>               47%] [Cov:===================>               56%][Progress:===================>          64%] [Cov:===================>               56%][Progress:====================>         67%] [Cov:===================>               56%][Progress:========================>     82%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:====================>              58%][Progress:==============================100%] [Cov:====================>              58%]
* Search finished after 202s and 18 generations, 6508 statements, best individual has fitness: 1239.0
* Generated before the refinement 33 tests with total length 86
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("")
test data is: ClassReader classReader = new ClassReader("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.addField(new FieldNode());
        classReader.addMethod(new MethodNode());
    }
}
statement is: classReader.addField(new FieldNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.addField(new FieldNode()) target is: classReader method is: addField(FieldNode)
statement is: classReader.addMethod(new MethodNode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.addMethod(new MethodNode()) target is: classReader method is: addMethod(MethodNode)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(128)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
        classReader.readLong(1000);
    }
}
statement is: // Improved test data
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readLong(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(1000) target is: classReader method is: readLong(int)
source statement: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.objectweb.asm.jip.ClassReaderindex is: 1
Matched Method is: readLong(I)J
TestCase is: String string = "org.objectweb.asm.jip.Item";
ClassReader classReader = new ClassReader(string);
int _int = 1000;
((ClassReader) string).readLong(_int);

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        classReader.getAccess();
    }
}
statement is: // Improved test data
classReader.getAccess(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classReader.getAccess() target is: classReader method is: getAccess()
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(2)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem("method_writer_class");
    }
}
statement is: classReader.getItem("method_writer_class"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem("method_writer_class") target is: classReader method is: getItem(java.lang.String)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classReader.getClassName()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String className = "com.example.mypackage.MyClass";
        int accessFlags = ACC_PUBLIC;
        Type returnType = Type.INT_TYPE;
        List<Type> argumentTypes = Arrays.asList(INT_TYPE, DOUBLE_TYPE);
        String[] exceptionNames = new String[]{ "java/lang/Exception" };
    }
}
statement is: // Improved test data
String className = "com.example.mypackage.MyClass", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accessFlags = ACC_PUBLIC, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
statement is: Type returnType = Type.INT_TYPE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Type.INT_TYPE is Type
statement is: List<Type> argumentTypes = Arrays.asList(INT_TYPE, DOUBLE_TYPE), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList(INT_TYPE, DOUBLE_TYPE) target is: Arrays method is: asList()
statement is: String[] exceptionNames = new String[]{ "java/lang/Exception" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: String string = "com.example.mypackage.MyClass"
TestCase is: String string = "com.example.mypackage.MyClass";

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 949, 949)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = new ClassReader(classReader.b, 949, 949);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        System.out.println(method.getName());
    }

    // Read the methods of the second ClassReader object and print their names
    Method method;

    {
        System.out.println(method.getName());
    }
}
statement is: System.out.println(method.getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(method.getName()) target is: System.out method is: println(char[])
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader")
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.setSuperclassName("java.lang.Object");
        classReader.addInterfaceName("java.io.Serializable");
    }
}
statement is: classReader.setSuperclassName("java.lang.Object"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.setSuperclassName("java.lang.Object") target is: classReader method is: setSuperclassName(java.lang.String)
statement is: classReader.addInterfaceName("java.io.Serializable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.addInterfaceName("java.io.Serializable") target is: classReader method is: addInterfaceName(java.lang.String)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] interfaces = classReader.getInterfaces();
        assertEquals(1, interfaces.length);
        assertEquals("org.objectweb.asm.jip.JipInterface", interfaces[0]);
    }
}
statement is: String[] interfaces = classReader.getInterfaces(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: assertEquals(1, interfaces.length), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(1, interfaces.length) target is:  method is: assertEquals(int,int)
statement is: assertEquals("org.objectweb.asm.jip.JipInterface", interfaces[0]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("org.objectweb.asm.jip.JipInterface", interfaces[0]) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(Lorg/objectweb/asm/jip/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 8859)
statement is: copyPool(Lorg/objectweb/asm/jip/ClassWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.copyPool(arg0)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.copyPool(classWriter);
    }
}
statement is: classReader.copyPool(classWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter) target is: classReader method is: copyPool()
statement is: org.evosuite.testcase.statements.ArrayStatement@fc5636cf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe))]
lengths: [0] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8859)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 714)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
classReader.accept((ClassVisitor) classWriter, 714);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String actualOutput = classWriter.toString();
        assertEquals(expectedOutput, actualOutput);
    }
}
statement is: String actualOutput = classWriter.toString(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toString() target is: classWriter method is: toString()
statement is: assertEquals(expectedOutput, actualOutput), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, actualOutput) target is:  method is: assertEquals(<unknown>,java.lang.String)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: org.objectweb.asm.jip.ClassAdapter(Lorg/objectweb/asm/jip/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 4)
test data is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String jarFileName = "example.jar";
        File jarFile = new File(jarFileName);
    }
}
statement is: // Improved test data
String jarFileName = "example.jar", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: File jarFile = new File(jarFileName), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
* this is vulnerable: String string = "example.jar"
TestCase is: String string = "example.jar";

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@ecfea2be type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(1, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
classReader.readConst(1, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(1, charArray);
        // Improved test data:
        int numberOfMethods = 5;
        String className = "com.example.MyClass";
        char[] methodName = new char[3];
        methodName[0] = 'm';
        methodName[1] = 'y';
        methodName[2] = 'M';
        classReader.readConst(numberOfMethods, className);
        // Improved test data:
        int numberOfParameters = 4;
        String parameterName = "param1";
        char[] parameterType = new char[4];
        parameterType[0] = 'i';
        parameterType[1] = 'n';
        parameterType[2] = 't';
        parameterType[3] = 'e';
        classReader.readConst(numberOfParameters, parameterName);
        // Improved test data:
        int numberOfExceptions = 2;
        String exceptionClassName = "java.lang.Exception";
        char[] exceptionMethodName = new char[3];
        exceptionMethodName[0] = 'e';
        exceptionMethodName[1] = 'x';
        exceptionMethodName[2] = 'c';
        classReader.readConst(numberOfExceptions, exceptionClassName);
        // Improved test data:
        int numberOfAttributes = 3;
        String attributeName = "attr1";
        char[] attributeType = new char[4];
        attributeType[0] = 'a';
        attributeType[1] = 't';
        attributeType[2] = 'r';
        attributeType[3] = 'i';
        classReader.readConst(numberOfAttributes, attributeName);
        // Improved test data:
        int numberOfInstructions = 4;
        String instructionName = "ldc";
        char[] instructionOpcode = new char[2];
        instructionOpcode[0] = 'l';
        instructionOpcode[1] = 'd';
        classReader.readConst(numberOfInstructions, instructionName);
        // Improved test data:
        int numberOfTryCatchBlocks = 3;
        String tryCatchBlockType = "java.lang.Exception";
        char[] tryCatchBlockStart = new char[2];
        tryCatchBlockStart[0] = 't';
        tryCatchBlockStart[1] = 'y';
        classReader.readConst(numberOfTryCatchBlocks, tryCatchBlockType);
        // Improved test data:
        int numberOfLocalVariables = 2;
        String localVariableName = "var1";
        char[] localVariableType = new char[4];
        localVariableType[0] = 'i';
        localVariableType[1] = 'n';
        localVariableType[2] = 't';
        localVariableType[3] = 'e';
        classReader.readConst(numberOfLocalVariables, localVariableName);
        // Improved test data:
        int numberOfLineNumbers = 4;
        String lineNumberTable = "java.lang.Exception";
        char[] lineNumberStart = new char[2];
        lineNumberStart[0] = 'l';
        lineNumberStart[1] = 'n';
        classReader.readConst(numberOfLineNumbers, lineNumberTable);
        // Improved test data:
        int numberOfLocalVariableAnnotations = 3;
        String localVariableAnnotationType = "java.lang.Exception";
        char[] localVariableAnnotationStart = new char[2];
        localVariableAnnotationStart[0] = 'l';
        localVariableAnnotationStart[1] = 'a';
        classReader.readConst(numberOfLocalVariableAnnotations, localVariableAnnotationType);
        // Improved test data:
        int numberOfParameterAnnotations = 4;
        String parameterAnnotationName = "param1";
        char[] parameterAnnotationType = new char[3];
        parameterAnnotationType[0] = 'p';
        parameterAnnotationType[1] = 'a';
        parameterAnnotationType[2] = 'r';
        classReader.readConst(numberOfParameterAnnotations, parameterAnnotationName);
        // Improved test data:
        int numberOfMethodParameters = 4;
        String methodParameterName = "param1";
        char[] methodParameterType = new char[3];
        methodParameterType[0] = 'i';
        methodParameterType[1] = 'n';
        methodParameterType[2] = 't';
        classReader.readConst(numberOfMethodParameters, methodParameterName);
        // Improved test data:
        int numberOfMethodAnnotations = 3;
        String methodAnnotationName = "myMethod";
        char[] methodAnnotationType = new char[4];
        methodAnnotationType[0] = 'm';
        methodAnnotationType[1] = 'y';
        methodAnnotationType[2] = 'M';
        methodAnnotationType[3] = 'e';
        classReader.readConst(numberOfMethodAnnotations, methodAnnotationName);
        // Improved test data:
        int numberOfBootstrapMethods = 3;
        String bootstrapMethodName = "bootstrap";
        char[] bootstrapMethodType = new char[4];
        bootstrapMethodType[0] = 'b';
        bootstrapMethodType[1] = 'o';
        bootstrapMethodType[2] = 'o';
        bootstrapMethodType[3] = 't';
        classReader.readConst(numberOfBootstrapMethods, bootstrapMethodName);
        // Improved test data:
        int numberOfModulePackages = 4;
        String modulePackageName = "com.example.mypackage";
        char[] modulePackageVersion = new char[2];
        modulePackageVersion[0] = 'v';
        modulePackageVersion[1] = '1';
        classReader.readConst(numberOfModulePackages, modulePackageName);
        // Improved test data:
        int numberOfModuleMainClasses = 3;
        String moduleMainClassName = "com.example.mypackage";
        char[] moduleMainClassVersion = new char[2];
        moduleMainClassVersion[0] = 'v';
        moduleMainClassVersion[1] = '1';
        classReader.readConst(numberOfModuleMainClasses, moduleMainClassName);
        // Improved test data:
        int numberOfRecordComponents = 4;
        String recordComponentName = "component1";
        char[] recordComponentType = new char[3];
        recordComponentType[0] = 'i';
        recordComponentType[1] = 'n';
        recordComponentType[2] = 't';
        classReader.readConst(numberOfRecordComponents, recordComponentName);
        // Improved test data:
        int numberOfPermissions = 3;
        String permissionName = "permission1";
        char[] permissionActions = new char[4];
        permissionActions[0] = 'a';
        permissionActions[1] = 'c';
        permissionActions[2] = 't';
        permissionActions[3] = 'i';
        classReader.readConst(numberOfPermissions, permissionName);
    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(1, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(1, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data:
int numberOfMethods = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String className = "com.example.MyClass", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] methodName = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[3] Elements: []
lengths: [4] [3]
Their type are: class [C char[]
statement is: methodName[0] = 'm', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodName[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'m' Ct is: methodName[0] = 'm'
target : methodName class spoon.support.reflect.code.CtLiteralImpl
statement is: methodName[1] = 'y', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodName[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'y' Ct is: methodName[1] = 'y'
target : methodName class spoon.support.reflect.code.CtLiteralImpl
statement is: methodName[2] = 'M', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodName[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'M' Ct is: methodName[2] = 'M'
target : methodName class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfMethods, className), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfMethods, className) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfParameters = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String parameterName = "param1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] parameterType = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: parameterType[0] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: parameterType[0] = 'i'
target : parameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterType[1] = 'n', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'n' Ct is: parameterType[1] = 'n'
target : parameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterType[2] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: parameterType[2] = 't'
target : parameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterType[3] = 'e', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterType[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'e' Ct is: parameterType[3] = 'e'
target : parameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfParameters, parameterName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfParameters, parameterName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfExceptions = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String exceptionClassName = "java.lang.Exception", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] exceptionMethodName = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[3] Elements: []
lengths: [4] [3]
Their type are: class [C char[]
statement is: exceptionMethodName[0] = 'e', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : exceptionMethodName[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'e' Ct is: exceptionMethodName[0] = 'e'
target : exceptionMethodName class spoon.support.reflect.code.CtLiteralImpl
statement is: exceptionMethodName[1] = 'x', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : exceptionMethodName[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'x' Ct is: exceptionMethodName[1] = 'x'
target : exceptionMethodName class spoon.support.reflect.code.CtLiteralImpl
statement is: exceptionMethodName[2] = 'c', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : exceptionMethodName[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'c' Ct is: exceptionMethodName[2] = 'c'
target : exceptionMethodName class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfExceptions, exceptionClassName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfExceptions, exceptionClassName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfAttributes = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String attributeName = "attr1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] attributeType = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: attributeType[0] = 'a', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'a' Ct is: attributeType[0] = 'a'
target : attributeType class spoon.support.reflect.code.CtLiteralImpl
statement is: attributeType[1] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: attributeType[1] = 't'
target : attributeType class spoon.support.reflect.code.CtLiteralImpl
statement is: attributeType[2] = 'r', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'r' Ct is: attributeType[2] = 'r'
target : attributeType class spoon.support.reflect.code.CtLiteralImpl
statement is: attributeType[3] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeType[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: attributeType[3] = 'i'
target : attributeType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfAttributes, attributeName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfAttributes, attributeName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfInstructions = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String instructionName = "ldc", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] instructionOpcode = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: instructionOpcode[0] = 'l', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : instructionOpcode[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'l' Ct is: instructionOpcode[0] = 'l'
target : instructionOpcode class spoon.support.reflect.code.CtLiteralImpl
statement is: instructionOpcode[1] = 'd', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : instructionOpcode[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'d' Ct is: instructionOpcode[1] = 'd'
target : instructionOpcode class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfInstructions, instructionName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfInstructions, instructionName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfTryCatchBlocks = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String tryCatchBlockType = "java.lang.Exception", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] tryCatchBlockStart = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: tryCatchBlockStart[0] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : tryCatchBlockStart[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: tryCatchBlockStart[0] = 't'
target : tryCatchBlockStart class spoon.support.reflect.code.CtLiteralImpl
statement is: tryCatchBlockStart[1] = 'y', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : tryCatchBlockStart[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'y' Ct is: tryCatchBlockStart[1] = 'y'
target : tryCatchBlockStart class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfTryCatchBlocks, tryCatchBlockType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfTryCatchBlocks, tryCatchBlockType) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfLocalVariables = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String localVariableName = "var1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] localVariableType = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: localVariableType[0] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: localVariableType[0] = 'i'
target : localVariableType class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariableType[1] = 'n', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'n' Ct is: localVariableType[1] = 'n'
target : localVariableType class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariableType[2] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: localVariableType[2] = 't'
target : localVariableType class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariableType[3] = 'e', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableType[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'e' Ct is: localVariableType[3] = 'e'
target : localVariableType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfLocalVariables, localVariableName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfLocalVariables, localVariableName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfLineNumbers = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String lineNumberTable = "java.lang.Exception", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] lineNumberStart = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: lineNumberStart[0] = 'l', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : lineNumberStart[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'l' Ct is: lineNumberStart[0] = 'l'
target : lineNumberStart class spoon.support.reflect.code.CtLiteralImpl
statement is: lineNumberStart[1] = 'n', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : lineNumberStart[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'n' Ct is: lineNumberStart[1] = 'n'
target : lineNumberStart class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfLineNumbers, lineNumberTable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfLineNumbers, lineNumberTable) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfLocalVariableAnnotations = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String localVariableAnnotationType = "java.lang.Exception", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] localVariableAnnotationStart = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: localVariableAnnotationStart[0] = 'l', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableAnnotationStart[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'l' Ct is: localVariableAnnotationStart[0] = 'l'
target : localVariableAnnotationStart class spoon.support.reflect.code.CtLiteralImpl
statement is: localVariableAnnotationStart[1] = 'a', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : localVariableAnnotationStart[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'a' Ct is: localVariableAnnotationStart[1] = 'a'
target : localVariableAnnotationStart class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfLocalVariableAnnotations, localVariableAnnotationType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfLocalVariableAnnotations, localVariableAnnotationType) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfParameterAnnotations = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String parameterAnnotationName = "param1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] parameterAnnotationType = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[3] Elements: []
lengths: [4] [3]
Their type are: class [C char[]
statement is: parameterAnnotationType[0] = 'p', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterAnnotationType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'p' Ct is: parameterAnnotationType[0] = 'p'
target : parameterAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterAnnotationType[1] = 'a', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterAnnotationType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'a' Ct is: parameterAnnotationType[1] = 'a'
target : parameterAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: parameterAnnotationType[2] = 'r', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : parameterAnnotationType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'r' Ct is: parameterAnnotationType[2] = 'r'
target : parameterAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfParameterAnnotations, parameterAnnotationName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfParameterAnnotations, parameterAnnotationName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfMethodParameters = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String methodParameterName = "param1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] methodParameterType = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[3] Elements: []
lengths: [4] [3]
Their type are: class [C char[]
statement is: methodParameterType[0] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodParameterType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: methodParameterType[0] = 'i'
target : methodParameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: methodParameterType[1] = 'n', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodParameterType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'n' Ct is: methodParameterType[1] = 'n'
target : methodParameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: methodParameterType[2] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodParameterType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: methodParameterType[2] = 't'
target : methodParameterType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfMethodParameters, methodParameterName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfMethodParameters, methodParameterName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfMethodAnnotations = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String methodAnnotationName = "myMethod", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] methodAnnotationType = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: methodAnnotationType[0] = 'm', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodAnnotationType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'m' Ct is: methodAnnotationType[0] = 'm'
target : methodAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: methodAnnotationType[1] = 'y', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodAnnotationType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'y' Ct is: methodAnnotationType[1] = 'y'
target : methodAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: methodAnnotationType[2] = 'M', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodAnnotationType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'M' Ct is: methodAnnotationType[2] = 'M'
target : methodAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: methodAnnotationType[3] = 'e', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : methodAnnotationType[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'e' Ct is: methodAnnotationType[3] = 'e'
target : methodAnnotationType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfMethodAnnotations, methodAnnotationName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfMethodAnnotations, methodAnnotationName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfBootstrapMethods = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String bootstrapMethodName = "bootstrap", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] bootstrapMethodType = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: bootstrapMethodType[0] = 'b', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : bootstrapMethodType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'b' Ct is: bootstrapMethodType[0] = 'b'
target : bootstrapMethodType class spoon.support.reflect.code.CtLiteralImpl
statement is: bootstrapMethodType[1] = 'o', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : bootstrapMethodType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'o' Ct is: bootstrapMethodType[1] = 'o'
target : bootstrapMethodType class spoon.support.reflect.code.CtLiteralImpl
statement is: bootstrapMethodType[2] = 'o', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : bootstrapMethodType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'o' Ct is: bootstrapMethodType[2] = 'o'
target : bootstrapMethodType class spoon.support.reflect.code.CtLiteralImpl
statement is: bootstrapMethodType[3] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : bootstrapMethodType[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: bootstrapMethodType[3] = 't'
target : bootstrapMethodType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfBootstrapMethods, bootstrapMethodName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfBootstrapMethods, bootstrapMethodName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfModulePackages = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String modulePackageName = "com.example.mypackage", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] modulePackageVersion = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: modulePackageVersion[0] = 'v', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : modulePackageVersion[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'v' Ct is: modulePackageVersion[0] = 'v'
target : modulePackageVersion class spoon.support.reflect.code.CtLiteralImpl
statement is: modulePackageVersion[1] = '1', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : modulePackageVersion[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'1' Ct is: modulePackageVersion[1] = '1'
target : modulePackageVersion class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfModulePackages, modulePackageName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfModulePackages, modulePackageName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfModuleMainClasses = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String moduleMainClassName = "com.example.mypackage", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] moduleMainClassVersion = new char[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[2] Elements: []
lengths: [4] [2]
Their type are: class [C char[]
statement is: moduleMainClassVersion[0] = 'v', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : moduleMainClassVersion[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'v' Ct is: moduleMainClassVersion[0] = 'v'
target : moduleMainClassVersion class spoon.support.reflect.code.CtLiteralImpl
statement is: moduleMainClassVersion[1] = '1', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : moduleMainClassVersion[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'1' Ct is: moduleMainClassVersion[1] = '1'
target : moduleMainClassVersion class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfModuleMainClasses, moduleMainClassName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfModuleMainClasses, moduleMainClassName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfRecordComponents = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String recordComponentName = "component1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] recordComponentType = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[3] Elements: []
lengths: [4] [3]
Their type are: class [C char[]
statement is: recordComponentType[0] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : recordComponentType[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: recordComponentType[0] = 'i'
target : recordComponentType class spoon.support.reflect.code.CtLiteralImpl
statement is: recordComponentType[1] = 'n', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : recordComponentType[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'n' Ct is: recordComponentType[1] = 'n'
target : recordComponentType class spoon.support.reflect.code.CtLiteralImpl
statement is: recordComponentType[2] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : recordComponentType[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: recordComponentType[2] = 't'
target : recordComponentType class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfRecordComponents, recordComponentName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfRecordComponents, recordComponentName) target is: classReader method is: readConst(int,java.lang.String)
statement is: // Improved test data:
int numberOfPermissions = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String permissionName = "permission1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] permissionActions = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: permissionActions[0] = 'a', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : permissionActions[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'a' Ct is: permissionActions[0] = 'a'
target : permissionActions class spoon.support.reflect.code.CtLiteralImpl
statement is: permissionActions[1] = 'c', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : permissionActions[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'c' Ct is: permissionActions[1] = 'c'
target : permissionActions class spoon.support.reflect.code.CtLiteralImpl
statement is: permissionActions[2] = 't', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : permissionActions[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'t' Ct is: permissionActions[2] = 't'
target : permissionActions class spoon.support.reflect.code.CtLiteralImpl
statement is: permissionActions[3] = 'i', class spoon.support.reflect.code.CtAssignmentImpl
Assigned : permissionActions[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl char Assignment:'i' Ct is: permissionActions[3] = 'i'
target : permissionActions class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readConst(numberOfPermissions, permissionName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(numberOfPermissions, permissionName) target is: classReader method is: readConst(int,java.lang.String)
* this is vulnerable: int _int = 5
* this is vulnerable: String string = "com.example.MyClass"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "param1"
* this is vulnerable: int _int = 2
* this is vulnerable: String string = "java.lang.Exception"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "attr1"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "ldc"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "java.lang.Exception"
* this is vulnerable: int _int = 2
* this is vulnerable: String string = "var1"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "java.lang.Exception"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "java.lang.Exception"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "param1"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "param1"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "myMethod"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "bootstrap"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "com.example.mypackage"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "com.example.mypackage"
* this is vulnerable: int _int = 4
* this is vulnerable: String string = "component1"
* this is vulnerable: int _int = 3
* this is vulnerable: String string = "permission1"
TestCase is: char[] charArray = new char[4];
int _int = 5;
String string = "com.example.MyClass";
char[] charArray = new char[4];
int _int = 4;
String string = "param1";
char[] charArray = new char[4];
int _int = 2;
String string = "java.lang.Exception";
char[] charArray = new char[4];
int _int = 3;
String string = "attr1";
char[] charArray = new char[4];
int _int = 4;
String string = "ldc";
char[] charArray = new char[4];
int _int = 3;
String string = "java.lang.Exception";
char[] charArray = new char[4];
int _int = 2;
String string = "var1";
char[] charArray = new char[4];
int _int = 4;
String string = "java.lang.Exception";
char[] charArray = new char[4];
int _int = 3;
String string = "java.lang.Exception";
char[] charArray = new char[4];
int _int = 4;
String string = "param1";
char[] charArray = new char[4];
int _int = 4;
String string = "param1";
char[] charArray = new char[4];
int _int = 3;
String string = "myMethod";
char[] charArray = new char[4];
int _int = 3;
String string = "bootstrap";
char[] charArray = new char[4];
int _int = 4;
String string = "com.example.mypackage";
char[] charArray = new char[4];
int _int = 3;
String string = "com.example.mypackage";
char[] charArray = new char[4];
int _int = 4;
String string = "component1";
char[] charArray = new char[4];
int _int = 3;
String string = "permission1";
char[] charArray = new char[4];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@f529f01e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(721, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
classReader.readConst(721, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(721, charArray);
        // Improved test data:
        // - Changed the constant value from 721 to a more descriptive example like "org.objectweb.asm.jip.MethodWriter"
        char[] charArray = new char[4];
        classReader.readConst("org.objectweb.asm.jip.MethodWriter", charArray);
        // Improved test data:
        // - Changed the variable name from "charArray" to a more descriptive example like "methodNameChars"
        char[] methodNameChars = new char[4];
        classReader.readConst("org.objectweb.asm.jip.MethodWriter", methodNameChars);
        // Improved test data:
        // - Changed the variable type from "int" to a more descriptive example like "String"
        String methodName = classReader.readConst("org.objectweb.asm.jip.MethodWriter", new char[4]);
    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(721, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(721, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data:
// - Changed the constant value from 721 to a more descriptive example like "org.objectweb.asm.jip.MethodWriter"
char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst("org.objectweb.asm.jip.MethodWriter", charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst("org.objectweb.asm.jip.MethodWriter", charArray) target is: classReader method is: readConst(java.lang.String,char[])
statement is: // Improved test data:
// - Changed the variable name from "charArray" to a more descriptive example like "methodNameChars"
char[] methodNameChars = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst("org.objectweb.asm.jip.MethodWriter", methodNameChars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst("org.objectweb.asm.jip.MethodWriter", methodNameChars) target is: classReader method is: readConst(java.lang.String,char[])
statement is: // Improved test data:
// - Changed the variable type from "int" to a more descriptive example like "String"
String methodName = classReader.readConst("org.objectweb.asm.jip.MethodWriter", new char[4]), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst("org.objectweb.asm.jip.MethodWriter", new char[4]) target is: classReader method is: readConst(java.lang.String,char[])
TestCase is: char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@244cd4c7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(726, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
classReader.readConst(726, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(123, charArray);// changed to a more descriptive value }}

    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(123, charArray)// changed to a more descriptive value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(123, charArray)// changed to a more descriptive value }}
 target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[4];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@2436e404 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[6]
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(16, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[6];
        classReader.readClass(16, charArray);
        // Improved test data:
        ClassReader classReader = new ClassReader("com.example.MyClass");
        char[] charArray = new char[]{ 'c', 'o', 'm', '.', 'e', 'x', 'a', 'm', 'p', 'l', 'e' };
    }
}
statement is: char[] charArray = new char[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: char[] charArray = new char[6] isAssignment: false Array: new char[6] Elements: []
lengths: [6] [6]
Their type are: class [C char[]
statement is: classReader.readClass(16, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readClass(16, charArray) target is: classReader method is: readClass(int,char[])
statement is: // Improved test data:
ClassReader classReader = new ClassReader("com.example.MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[]{ 'c', 'o', 'm', '.', 'e', 'x', 'a', 'm', 'p', 'l', 'e' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[6] isAssignment: false Array: new char[]{ 'c', 'o', 'm', '.', 'e', 'x', 'a', 'm', 'p', 'l', 'e' } Elements: ['c', 'o', 'm', '.', 'e', 'x', 'a', 'm', 'p', 'l', 'e']
lengths: [6] []
TestCase is: char[] charArray = new char[6];
String string = "com.example.MyClass";
ClassReader classReader = new ClassReader(string);

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readUnsignedShort(0xcafe);
    }
}
statement is: classReader.readUnsignedShort(0xcafe), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(0xcafe) target is: classReader method is: readUnsignedShort(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(1)
test data is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(5);
    }
}
statement is: classReader.readShort(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(5) target is: classReader method is: readShort(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(32)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(32);
        // Improved test data:
        int integerValue = 456;// This value is more descriptive and representative of the situation being tested.

        classReader.readInt(integerValue);
    }
}
statement is: classReader.readInt(32), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(32) target is: classReader method is: readInt(int)
statement is: // Improved test data:
int integerValue = 456// This value is more descriptive and representative of the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readInt(integerValue), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(integerValue) target is: classReader method is: readInt(int)
* this is vulnerable: int _int = 456
TestCase is: int _int = 456;

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(Lorg/objectweb/asm/jip/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 735)
statement is: org.evosuite.testcase.statements.ArrayStatement@5c0f2c20 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[0]
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 735)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[2];
        attributeArray[0] = new CodeAttribute(new byte[]{ 0x1, 0x2, 0x3, 0x4 }, 735);
        attributeArray[1] = new ExceptionTableAttribute(new ExceptionTableEntry[]{ new ExceptionTableEntry(new Label("start"), new Label("end"), new Label("handler"), "java/lang/Exception") });
    }
}
statement is: Attribute[] attributeArray = new Attribute[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Attribute[] attributeArray = new Attribute[0] isAssignment: false Array: new Attribute[2] Elements: []
lengths: [0] [2]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Attribute[]
statement is: attributeArray[0] = new CodeAttribute(new byte[]{ 0x1, 0x2, 0x3, 0x4 }, 735), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new CodeAttribute(new byte[]{ 0x1, 0x2, 0x3, 0x4 }, 735) Ct is: attributeArray[0] = new CodeAttribute(new byte[]{ 0x1, 0x2, 0x3, 0x4 }, 735)
target : attributeArray class spoon.support.reflect.code.CtLiteralImpl
statement is: attributeArray[1] = new ExceptionTableAttribute(new ExceptionTableEntry[]{ new ExceptionTableEntry(new Label("start"), new Label("end"), new Label("handler"), "java/lang/Exception") }), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributeArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new ExceptionTableAttribute(new ExceptionTableEntry[]{ new ExceptionTableEntry(new Label("start"), new Label("end"), new Label("handler"), "java/lang/Exception") }) Ct is: attributeArray[1] = new ExceptionTableAttribute(new ExceptionTableEntry[]{ new ExceptionTableEntry(new Label("start"), new Label("end"), new Label("handler"), "java/lang/Exception") })
target : attributeArray class spoon.support.reflect.code.CtLiteralImpl
TestCase is: Attribute[] attributeArray = new Attribute[0];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(54)
statement is: org.objectweb.asm.jip.ClassAdapter(Lorg/objectweb/asm/jip/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@aba1863e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[7]
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 4)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[7];
    }
}
statement is: Attribute[] attributeArray = new Attribute[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: Attribute[] attributeArray = new Attribute[7] isAssignment: false Array: new Attribute[7] Elements: []
lengths: [7] [7]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Attribute[]
TestCase is: Attribute[] attributeArray = new Attribute[7];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16)
statement is: org.evosuite.testcase.statements.ArrayStatement@43b1689d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[2]
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        attributeArray = new Attribute[2];
    }
}
statement is: attributeArray = new Attribute[2], class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.objectweb.asm.jip.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8859)
statement is: org.objectweb.asm.jip.ClassAdapter(Lorg/objectweb/asm/jip/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@fb33fb37 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lorg.objectweb.asm.jip.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[6]
statement is: accept(Lorg/objectweb/asm/jip/ClassVisitor;[Lorg/objectweb/asm/jip/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 2)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[6];
        classReader.accept(((ClassVisitor) (classAdapter)), attributeArray, 2);
        // Improved test data
        Integer maxStack = 10;// instead of using a random value like "8859"

        String className = "org.objectweb.asm.jip.MethodWriter";
        Boolean isInterface = true;
        Class<?> classType = String.class;// instead of using the class name directly, use the Class object

        Class[] interfaceTypes = new Class[2];
        interfaceTypes[0] = Number.class;
        interfaceTypes[1] = Comparable.class;
        Attribute[] attributes = new Attribute[3];
        attributes[0] = new Attribute("TestAttribute", "testValue");
        attributes[1] = new Attribute("AnotherAttribute", 42);
        attributes[2] = new Attribute("ThirdAttribute", false);
    }
}
statement is: Attribute[] attributeArray = new Attribute[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: Attribute[] attributeArray = new Attribute[6] isAssignment: false Array: new Attribute[6] Elements: []
lengths: [6] [6]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Attribute[]
statement is: classReader.accept(((ClassVisitor) (classAdapter)), attributeArray, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classAdapter)), attributeArray, 2) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: // Improved test data
Integer maxStack = 10// instead of using a random value like "8859"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String className = "org.objectweb.asm.jip.MethodWriter", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Boolean isInterface = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Class<?> classType = String.class// instead of using the class name directly, use the Class object
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: String.class is String
statement is: Class[] interfaceTypes = new Class[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Attribute[] attributeArray = new Attribute[6] isAssignment: false Array: new Class[2] Elements: []
lengths: [6] [2]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Class[]
statement is: interfaceTypes[0] = Number.class, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : interfaceTypes[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Class Assignment:Number.class Ct is: interfaceTypes[0] = Number.class
target : interfaceTypes class spoon.support.reflect.code.CtLiteralImpl
statement is: interfaceTypes[1] = Comparable.class, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : interfaceTypes[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl Class Assignment:Comparable.class Ct is: interfaceTypes[1] = Comparable.class
target : interfaceTypes class spoon.support.reflect.code.CtLiteralImpl
statement is: Attribute[] attributes = new Attribute[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: Attribute[] attributeArray = new Attribute[6] isAssignment: false Array: new Attribute[3] Elements: []
lengths: [6] [3]
Their type are: class [Lorg.objectweb.asm.jip.Attribute; Attribute[]
statement is: attributes[0] = new Attribute("TestAttribute", "testValue"), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributes[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new Attribute("TestAttribute", "testValue") Ct is: attributes[0] = new Attribute("TestAttribute", "testValue")
target : attributes class spoon.support.reflect.code.CtLiteralImpl
statement is: attributes[1] = new Attribute("AnotherAttribute", 42), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributes[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new Attribute("AnotherAttribute", 42) Ct is: attributes[1] = new Attribute("AnotherAttribute", 42)
target : attributes class spoon.support.reflect.code.CtLiteralImpl
statement is: attributes[2] = new Attribute("ThirdAttribute", false), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : attributes[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new Attribute("ThirdAttribute", false) Ct is: attributes[2] = new Attribute("ThirdAttribute", false)
target : attributes class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "org.objectweb.asm.jip.MethodWriter"
* this is vulnerable: boolean _boolean = true
TestCase is: Attribute[] attributeArray = new Attribute[6];
int _int = 10;
String string = "org.objectweb.asm.jip.MethodWriter";
boolean _boolean = true;
Attribute[] attributeArray = new Attribute[6];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@e06a7fd3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[6]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(16, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readUTF8(16, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[6];
        classReader.readUTF8(16, "MethodWriter".toCharArray());
    }
}
statement is: char[] charArray = new char[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: char[] charArray = new char[6] isAssignment: false Array: new char[6] Elements: []
lengths: [6] [6]
Their type are: class [C char[]
statement is: classReader.readUTF8(16, "MethodWriter".toCharArray()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(16, "MethodWriter".toCharArray()) target is: classReader method is: readUTF8(int,char[])
TestCase is: char[] charArray = new char[6];

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(1957)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        classReader.readByte(1234567890);// Improved value to make the test more descriptive and representative of the situation being tested }}

    }
}
statement is: // Improved test data for the above code snippet
classReader.readByte(1234567890)// Improved value to make the test more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for the above code snippet
classReader.readByte(1234567890)// Improved value to make the test more descriptive and representative of the situation being tested }}
 target is: classReader method is: readByte(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@556ea2f1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[3]
statement is: org.objectweb.asm.jip.ClassWriter(Lorg/objectweb/asm/jip/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 1)
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Type
statement code is: Type readConst = (Type)classReader.readConst(2, arg1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[]{ 'a', 'b', 'c' };// Improved test data: using a more descriptive and representative character array

        ClassWriter classWriter = new ClassWriter(classReader, 1);
        classReader.readConst(2, charArray);
    }
}
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }// Improved test data: using a more descriptive and representative character array
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[3] isAssignment: false Array: new char[]{ 'a', 'b', 'c' } Elements: ['a', 'b', 'c']
lengths: [3] []
statement is: ClassWriter classWriter = new ClassWriter(classReader, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readConst(2, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(2, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: int _int = 1;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 1);

statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(33)
test data is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(1234567890);
    }
}
statement is: classReader.readInt(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(1234567890) target is: classReader method is: readInt(int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(1)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(1602735894000L);// 1 January 2020, 12:34:54 PM }}

    }
}
statement is: classReader.readLong(1602735894000L)// 1 January 2020, 12:34:54 PM }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(1602735894000L)// 1 January 2020, 12:34:54 PM }}
 target is: classReader method is: readLong(long)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(8859)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(8859);
        // Improved test data
        classReader.readShort(8859, 1024);// Reads a short value with a size of 1024 bits }}

    }
}
statement is: classReader.readShort(8859), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(8859) target is: classReader method is: readShort(int)
statement is: // Improved test data
classReader.readShort(8859, 1024)// Reads a short value with a size of 1024 bits }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classReader.readShort(8859, 1024)// Reads a short value with a size of 1024 bits }}
 target is: classReader method is: readShort(int,int)
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(4)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(500);
    }
}
statement is: classReader.readShort(500), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(500) target is: classReader method is: readShort(int)
statement is: org.evosuite.testcase.statements.ArrayStatement@91eab6ad type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: org.objectweb.asm.jip.ClassReader([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: byte[] byteArray = new byte[0];
ClassReader classReader = new ClassReader(byteArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) };
    }
}
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[0] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe)) } Elements: [((byte) (0xca)), ((byte) (0xfe)), ((byte) (0xba)), ((byte) (0xbe))]
lengths: [0] []
statement is: org.objectweb.asm.jip.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.objectweb.asm.jip.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter")
statement is: readLabel(I[Lorg/objectweb/asm/jip/Label;)Lorg/objectweb/asm/jip/Label; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.objectweb.asm.jip.Label
statement code is: Label readLabel = classReader.readLabel((-636943911), (Label[]) null)
test data is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLabel((-636943911), (Label[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLabel(-532867029, ((Label[]) (null)));
    }
}
statement is: classReader.readLabel(-532867029, ((Label[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLabel(-532867029, ((Label[]) (null))) target is: classReader method is: readLabel(int,Label[])
* test suite isTestSuite: 46
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 949, 949);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
Test 7: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();
Test 9: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);
Test 10: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 714);
Test 12: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);
Test 13: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);
Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);
Test 18: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);
Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);
Test 29: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);
Test 31: 
byte[] byteArray = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
((ClassReader)"org.objectweb.asm.jip.Item").readLong(1000);

Test 34: 

Test 35: 

Test 36: 
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];

Test 37: 
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];

Test 38: 
char[] charArray = new char[4];

Test 39: 
char[] charArray = new char[6];
ClassReader classReader = new ClassReader("com.example.MyClass");

Test 40: 

Test 41: 
Attribute[] attributeArray = new Attribute[0];

Test 42: 
Attribute[] attributeArray = new Attribute[7];

Test 43: 
Attribute[] attributeArray = new Attribute[6];
Attribute[] attributeArray = new Attribute[6];

Test 44: 
char[] charArray = new char[6];

Test 45: 
ClassWriter classWriter = new ClassWriter((ClassReader) 1, 1);


* Generated after the refinement and before minimization 46 tests with total length 118
* test suite isTestSuite: 46
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 949, 949);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
Test 7: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();
Test 9: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);
Test 10: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 714);
Test 12: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);
Test 13: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);
Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);
Test 18: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);
Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);
Test 29: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);
Test 31: 
byte[] byteArray = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
((ClassReader)"org.objectweb.asm.jip.Item").readLong(1000);

Test 34: 

Test 35: 

Test 36: 
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];

Test 37: 
char[] charArray = new char[4];
char[] charArray = new char[4];
char[] charArray = new char[4];

Test 38: 
char[] charArray = new char[4];

Test 39: 
char[] charArray = new char[6];
ClassReader classReader = new ClassReader("com.example.MyClass");

Test 40: 

Test 41: 
Attribute[] attributeArray = new Attribute[0];

Test 42: 
Attribute[] attributeArray = new Attribute[7];

Test 43: 
Attribute[] attributeArray = new Attribute[6];
Attribute[] attributeArray = new Attribute[6];

Test 44: 
char[] charArray = new char[6];

Test 45: 
ClassWriter classWriter = new ClassWriter((ClassReader) 1, 1);


* Minimizing test suite
* test suite isTestSuite: 33
Test 0: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);
Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);
Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 714);
Test 7: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 949, 949);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
Test 9: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();
Test 10: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();
Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);
Test 12: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("com.example.MyClass");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 13: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);
Test 15: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);
Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);
Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);
Test 18: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);
Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);
Test 29: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);
Test 31: 
byte[] byteArray = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 817
* Number of covered goals: 407
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 63%
* Total number of goals: 891
* Number of covered goals: 557
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 40
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 817
* Number of covered goals: 356
* Generated 33 tests with total length 86
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
long readLong = classReader.readLong(128);
assertEquals(72065786494211681L, readLong);
assertEquals(821, classReader.header);


** It was a parseable test case! 
refined test name is: testReadLong
* Compiling Tests
refined test name is: testReadLongAtSpecifiedIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
short readShort = classReader.readShort(4);
assertEquals(8859, classReader.header);
assertEquals((short)0, readShort);


** It was a parseable test case! 
refined test name is: testReadShortMethodOffset4Expects8859
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
assertEquals(8859, classReader.header);

String className = classReader.getClassName();
assertNotNull(className);
assertEquals("org/objectweb/asm/jip/MethodWriter", className);


** It was a parseable test case! 
refined test name is: testHeader
* Compiling Tests
refined test name is: testClassHeaderAndClassName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
int access = classReader.getAccess();
assertEquals(32, access);


** It was a parseable test case! 
refined test name is: testGetPublicClassAccess
* Compiling Tests
refined test name is: testGetAccessPublicClassReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
int item = classReader.getItem(2);
assertEquals(16, item);
assertEquals(8859, classReader.header);


** It was a parseable test case! 
refined test name is: testGetItemAndHeaderField
* Compiling Tests
refined test name is: testGetItemWithIndexTwo
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
int readByte = classReader.readByte(1957);
assertEquals(8859, classReader.header);
assertEquals(11, readByte);


** It was a parseable test case! 
refined test name is: testMethodHeaderReading
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter arg0 = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) arg0, 714);

** It was a parseable test case! 
refined test name is: testMethodReaderAcceptWithInvalidClassVisitor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
assertEquals(8915, classReader.header);


** It was a parseable test case! 
refined test name is: testReadHeader
* Compiling Tests
refined test name is: testReadClassHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
String superName = classReader.getSuperName();
assertEquals(259, classReader.header);
assertNotNull(superName);
assertEquals("java/lang/Object", superName);


** It was a parseable test case! 
refined test name is: testGetSuperName
* Compiling Tests
refined test name is: testGetSuperNameReturnsJavaLangObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
String[] interfaces = classReader.getInterfaces();
assertEquals(1, interfaces.length);


** It was a parseable test case! 
refined test name is: testGetInterfacesReturnsCorrectArrayLength
* Compiling Tests
refined test name is: testGetInterfacesReturnsCorrectLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = null;
try {
  classReader = new ClassReader("com.example.MyClass");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testNoCommentsAreAddedToClassReader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter arg0 = new ClassWriter(16);
Attribute[] arg1 = new Attribute[2];
classReader.accept((ClassVisitor) arg0, arg1, 1);
assertEquals(32, classReader.getAccess());


** It was a parseable test case! 
refined test name is: testMethodWithCorrectAccessFlags
* Compiling Tests
refined test name is: testAcceptMethodWithCorrectFlagsAndAttributes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] arg1 = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 4
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] arg1 = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 4
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
refined test name is: testReadConstthrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] arg1 = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 4
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
assertEquals(8859, classReader.header);

char[] arg1 = new char[6];
String readClass = classReader.readClass(16, arg1);
assertEquals("\u0001", readClass);


** It was a parseable test case! 
refined test name is: testReadClass
* Compiling Tests
refined test name is: testReadClassWithValidInputReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
int readUnsignedShort = classReader.readUnsignedShort(1);
assertEquals(8859, classReader.header);
assertEquals(65210, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortAtOffsetOne
* Compiling Tests
refined test name is: testReadUnsignedShortWithOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
int readInt = classReader.readInt(32);
assertEquals(8859, classReader.header);
assertEquals((-636943911), readInt);


** It was a parseable test case! 
refined test name is: testReadIntshouldReturnExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] arg1 = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 6
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadUTF8ThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] arg1 = new char[3];
ClassWriter classWriter = new ClassWriter(arg0, 1);
Type readConst = (Type)arg0.readConst(2, arg1);
assertEquals(5, Type.INT);


** It was a parseable test case! 
refined test name is: testReadConstantType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
int readInt = classReader.readInt(33);
assertEquals(1310976, readInt);
assertEquals(259, classReader.header);


** It was a parseable test case! 
refined test name is: testReadIntWithCorrectInputReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
long readLong = classReader.readLong(1);
assertEquals(8859, classReader.header);
assertEquals((-91551935198383614L), readLong);


** It was a parseable test case! 
refined test name is: testReadLongshouldReturnCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
short readShort = classReader.readShort(1);
assertEquals(259, classReader.header);
assertEquals((short) (-326), readShort);


** It was a parseable test case! 
refined test name is: testReadShortShouldReturnCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
short readShort = classReader.readShort(8859);
assertEquals((short)32, readShort);
assertEquals(8859, classReader.header);


** It was a parseable test case! 
refined test name is: testReadShortValueAtPosition8859
* Compiling Tests
refined test name is: testReadShortAtPosition8859
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: byte[] arg0 = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(arg0);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testArrayEmptyAsInputThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testReadLabelThrowsNPEForNegativeIndexAndNullLabel
* Compiling Tests
refined test name is: testReadLabelNullPointerException
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:42.951 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:42.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:43.212 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:43.213 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:43.382 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:43.383 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:43.568 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:43.569 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:43.774 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:43.776 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:58:43.945 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:43.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:46.844 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:46.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:47.035 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:47.036 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:47.103 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:47.104 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:47.513 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:47.514 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:47.598 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:47.600 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:48.322 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:48.323 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:48.576 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:48.579 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:48.837 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:48.838 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:49.058 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:49.062 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:49.206 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:49.207 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:49.400 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:49.401 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:58:49.610 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:49.610 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:58:49.754 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:49.755 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:58:50.806 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:50.808 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:50.845 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:50.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:51.005 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:51.006 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:58:51.048 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:51.048 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:51.205 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:51.205 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:58:51.249 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:51.250 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:58:51.432 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:51.433 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 4 called: 3 to improve: false
** Write a test suite: 7 called: 4 to improve: false
** Write a test suite: 8 called: 5 to improve: false
** Write a test suite: 9 called: 6 to improve: false
** Write a test suite: 11 called: 7 to improve: false
** Write a test suite: 13 called: 8 to improve: false
** Write a test suite: 15 called: 9 to improve: false
** Write a test suite: 16 called: 10 to improve: false
** Write a test suite: 23 called: 11 to improve: false
** Write a test suite: 25 called: 12 to improve: false
[MASTER] 10:58:57.718 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:58:57.719 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
** Write a test suite: 12 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 16 called: 6 to improve: false
** Write a test suite: 17 called: 7 to improve: false
** Write a test suite: 18 called: 8 to improve: false
** Write a test suite: 21 called: 9 to improve: false
** Write a test suite: 22 called: 10 to improve: false
** Write a test suite: 23 called: 11 to improve: false
** Write a test suite: 25 called: 12 to improve: false
[MASTER] 10:59:04.303 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:59:04.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
[MASTER] 10:59:12.461 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 33
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 949, 949);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
Test 7: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();
Test 9: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);
Test 10: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 714);
Test 12: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);
Test 13: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);
Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);
Test 18: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);
Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);
Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);
Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);
Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);
Test 29: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);
Test 31: 
byte[] byteArray = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Minimizing test suite
* test suite isTestSuite: 33
Test 0: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("org.objectweb.asm.jip.ClassReader", e);
}

Test 1: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
classReader.readLong(128);
Test 2: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(4);
Test 3: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getClassName();
Test 4: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getAccess();
Test 5: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getItem(2);
Test 6: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readByte(1957);
Test 7: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, 714);
Test 8: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 949, 949);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
Test 10: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.getSuperName();
Test 11: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.getInterfaces();
Test 12: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8859);
classReader.copyPool(classWriter);
Test 13: 
byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArrayInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(16);
Attribute[] attributeArray = new Attribute[2];
classReader.accept((ClassVisitor) classWriter, attributeArray, 1);
Test 15: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
ClassWriter classWriter = new ClassWriter(4);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 4);
Test 16: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(classReader, 735);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 735);
Test 17: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(54);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[7];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 4);
Test 18: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
ClassWriter classWriter = new ClassWriter(8859);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
Attribute[] attributeArray = new Attribute[6];
// Undeclared exception!
classReader.accept((ClassVisitor) classAdapter, attributeArray, 2);
Test 19: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(1, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(721, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(726, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
classReader.readClass(16, charArray);
Test 23: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readUnsignedShort(1);
Test 24: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readInt(32);
Test 25: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[6];
// Undeclared exception!
try { 
  classReader.readUTF8(16, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
char[] charArray = new char[3];
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.readConst(2, charArray);
Test 27: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readInt(33);
Test 28: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readLong(1);
Test 29: 
ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
classReader.readShort(1);
Test 30: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
classReader.readShort(8859);
Test 31: 
byte[] byteArray = new byte[0];
ClassReader classReader = null;
try {
  classReader = new ClassReader(byteArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
ClassReader classReader = new ClassReader("org.objectweb.asm.jip.MethodWriter");
// Undeclared exception!
try { 
  classReader.readLabel((-636943911), (Label[]) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


[MASTER] 11:04:56.159 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 817
* Number of covered goals: 407
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 63%
* Total number of goals: 891
* Number of covered goals: 557
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 40
* Number of covered goals: 16
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 817
* Number of covered goals: 356
* Generated 33 tests with total length 86
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:05:21.850 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 11:08:44.886 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.144 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.145 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.193 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.339 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.339 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.497 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.498 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.684 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.685 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:57.866 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:57.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:08:58.060 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:08:58.071 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:00.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:00.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:00.755 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:00.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:00.798 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:00.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:01.031 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:01.031 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:01.684 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:01.685 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:01.871 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:01.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:09:02.056 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:02.057 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:02.238 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:02.239 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:02.446 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:09:02.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:02.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:02.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:02.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:02.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:03.051 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:03.052 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.074 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.076 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.109 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.110 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.232 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.233 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.292 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.505 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.549 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:09:04.719 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:04.720 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
[MASTER] 11:09:10.178 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:10.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
[MASTER] 11:09:16.378 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar4161216999563601691.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:09:16.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4161216999563601691.jar
* Writing tests to file
[MASTER] 11:09:16.381 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'ClassReader_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
** Write a test suite: 12 called: 4 to improve: false
** Write a test suite: 14 called: 5 to improve: false
** Write a test suite: 16 called: 6 to improve: false
** Write a test suite: 17 called: 7 to improve: false
** Write a test suite: 18 called: 8 to improve: false
** Write a test suite: 21 called: 9 to improve: false
** Write a test suite: 22 called: 10 to improve: false
** Write a test suite: 23 called: 11 to improve: false
** Write a test suite: 25 called: 12 to improve: false
* Writing JUnit test case 'ClassReader_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
* Done!

* Computation finished
